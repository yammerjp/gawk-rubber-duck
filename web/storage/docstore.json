{"docstore/metadata": {"b44f345e-021e-452d-8444-5c02929d5ee2": {"doc_hash": "a95ca13a2aa7c2d7d137b876e8fb8e2c77bb1fb9847b886a03424314732f2e10"}, "b1de3bc9-eeb0-44b8-9c16-b001f4eb71e1": {"doc_hash": "b9f2becff448c7782b0a85c09a5e2a62f204f44000e0ecd130c87d2f6d014eea"}, "d634c371-9de9-41ed-a611-2caa4dc0fbf0": {"doc_hash": "d56aecbc9fd03e656abb699872cd1c4463235e7e7705bbdf016e4d3d8a434505"}, "b9da05a9-ce03-4b35-b03f-7091be90a627": {"doc_hash": "df8ef2accef38c4cf1238acce047e7bf4e7a9be6a8c5468b53352df561169742"}, "ba9116ca-8808-4a88-89dd-76c797b5dae4": {"doc_hash": "cbb2f5a59635a10431845271d2d40613659406fcd8775a3bf8f6f9f74fd12b06"}, "3efefea7-6951-4863-9485-08186ee7f3bd": {"doc_hash": "f3891d1377de56929b69f7692cbf6750d91cb5e8db1f45b33fb55794aeca17cf"}, "704ea28c-6a22-4a19-87bf-eec34b5c2ea8": {"doc_hash": "586a78490b475d5fdf665061af27aa5bfd935e408461b66602705e2c5b390ece"}, "e44f53a6-8d0a-4503-97ce-601bbe725bf1": {"doc_hash": "1a84407e1ac61feb0879a832cde81a8fbb938cce06122efee33e7bbad4754620"}, "d1704578-3270-4f71-9154-5cc972b76587": {"doc_hash": "e9f4d68c3c17f598ae17108184747128f2df635dd2bf30a73484d6acd9ea3b45"}, "221043d2-f195-4081-bb2b-7dbc1604164b": {"doc_hash": "c6d3a80f1f976eb0f0ee0f7b4e257509ef7b2861fb4dfa5cafcb3a41e4167ac7"}, "c848e26b-2ccc-4683-953d-e6a371591e7a": {"doc_hash": "f8a887bb7c2127157983166345a0f0fcd75d68b7823ade94cead94e9f8612c51"}, "d1e0e105-dcc1-44b6-9e40-9add6a966224": {"doc_hash": "bbbd33b79b46743a1e7f183353a196a107318ec42d38ff2d30577b20d37df358"}, "0285f772-127d-4af1-9e1f-925450f84adb": {"doc_hash": "a167a01a2e81e2c98c566754695b68c74e785bcea00f8655e00c01533410ab5a"}, "26b8973f-9867-488a-916a-6c9e21fde866": {"doc_hash": "0ec39d04c96e5b2eb63c95c9ba7be9775917d1d2f96ca35c6fc55d78e8ead9a5"}, "2fcc3f90-a161-44de-ab59-f63cbacad9d9": {"doc_hash": "c22417fa4df88d369ff247b3dc2aca03a24092271e4c4d21bfc2168fbebf79b8"}, "5f6bc4f8-d211-41de-8921-dcdd1351cfe8": {"doc_hash": "4c295601e9c220fb5bc6edf3a35a84cf87403f3df07bfd2dbeea85572141b904"}, "a6fc214f-d4dc-4b5a-8e50-63892c4cfaa1": {"doc_hash": "462f6cf58622c629ae13d85b07494fcfed80a31bfee1bf714638e49cd3a8d9f4"}, "33aa3fdb-97b0-47e7-96c2-a817471a5939": {"doc_hash": "a1d901b196e16a65a3d88df7bcf0ccfc15d094a2ee0fb76ccd87eec282513518"}, "7b69e3d3-a4f7-4fff-b169-9400b8da2684": {"doc_hash": "31ab62738c82cd587b7031480266754435feae25ad9681c548148539ce03bf61"}, "e4fdb07d-5203-487b-acd2-5b1749323a22": {"doc_hash": "ed7256ba1bb276afb5e8f579b10b2f48b4ceba325d858cf4e57e23105454c7d7"}, "fa8c4556-86a5-462e-a972-1bcf5ec3ea3f": {"doc_hash": "7eea009b83dbf0d3b76fa6769dafffb558339d3fb49c2abf71089041d2e478ca"}, "a3eca64f-d25e-4720-b8c0-bb2d6af3e968": {"doc_hash": "375a6defe465098f316f2d39e273aa708205e27f9e9933f1079f24743c99c0be"}, "f0fb8f60-5fb3-4ae8-8671-13b3671b78bf": {"doc_hash": "a77012b07980905357507c838fea92f245667c2e0006165b6030255d33655ceb"}, "1cee749a-c8a5-4428-b0be-60d7d365c9eb": {"doc_hash": "9841e3e7ac9e76da8db62d6c80d961e39e34063839d26dfabae48ddb0aebb30b"}, "4f1d28bd-ed57-4d51-a427-a2f0b70c978a": {"doc_hash": "d694d54095f691008cc2ad246122d769cf617169891651a55667362a6088221b"}, "8167a2dd-9bd4-40e6-8696-271a354d943c": {"doc_hash": "2f6ace30d32d7d01f8c833f8e2a79ec1f6d6431cd02a1a9caf23ce32b1dfff6f"}, "d18791fe-f37c-4a1e-8772-ca72ca822868": {"doc_hash": "eed45026c45d2d66877e80706dce595c09198cccf7f38a7d3ab7d5551152f51d"}, "09174847-a1fd-454d-8f19-04ae8b653994": {"doc_hash": "a50bb62d1de808f570ffe6891beba50e56e0b9acaf56867e0b7da5c78729c37d"}, "01cc60fa-eab7-4676-8cb7-43e998861f38": {"doc_hash": "e1201a1cf2c5a259cbf3864213bec5f6060823e89def2a2ed26115532cbb6c65"}, "8816326a-17b3-433f-8fb0-160506403cf0": {"doc_hash": "d22c6b5e259e8192014f4c5ceba07c92d990ecda8f60ad530353809845d2201a"}, "ce2e6fcd-0576-4df0-b68f-0fa83543aa34": {"doc_hash": "d249ca14dff6d3f1dee92d14a2eaab6987a2ddb4a4057b0db65ae67fffd05827"}, "99e9d8f1-554c-4b27-a9e3-e9d14cdbeaf2": {"doc_hash": "ec70c3295387e1b71c338e2abb17532474bf240c961ccf182dd6b41874b2c863"}, "19e4e299-00f6-4ddf-b55b-49d3c4813143": {"doc_hash": "1c4d7781f4bf0e14e88bc2518d2015f16a6bf711dbe6bba652035479baff2d8c"}, "8d0aa7d0-a1ed-4898-b0aa-4dea4ff4dd76": {"doc_hash": "25716a7541bda62d1c162db3a23ae41308bc9670ae9a697f47f10af7519b756a"}, "5514afae-bac0-40cb-b228-70fcd7cf5416": {"doc_hash": "1cee9991862395b9f101a5ac886322f7d2721ac7896c12cf7e3710149604fe27"}, "3fee2379-693b-4b3a-984d-3a581bd4038b": {"doc_hash": "625d74d8a5da9466ab723fe00477c0c1a503d809d3404609615b036bc6ff60b1"}, "a3b71136-2621-4b3a-ae23-68c55aa7f593": {"doc_hash": "59c2d9861c9229b5bc261524fcc4962adeba4ba3a6c194e687c6368a9231b0b3"}, "a830f680-5650-4b16-91e8-86ed503b4457": {"doc_hash": "1cff442c88b2f1afbcb2eb1a850bbeac937f3612518fb72f0ee5e629c6479f22"}, "ef65b31c-de2e-4e09-a341-30df25e0efbc": {"doc_hash": "48490fc7bd8e441fb7eab8a1e3704e05e65f39cac06557861ad58428fb72c6c7"}, "2fed5ece-7295-48fe-bffe-44f37282f96c": {"doc_hash": "630777430501751ad0fb7fcc415ad54ea0f7660a4e90891cf2d92c4f1ca17c8a"}, "8f035391-6611-4960-ba5e-1f40cb0022a7": {"doc_hash": "ad6b3b2ff2575c8870ee52814f3fe322e9b6af3e47256d97f0355fb83d25676d"}, "8f1abc55-23b6-488f-9275-bd14a327b1cd": {"doc_hash": "ebe74bcf74f5d3c277ac2e8e362441f238f5efb33fd5108d2120c3dbcff633ee"}, "050a5ab4-8bc6-44f8-bb8e-8c60e1203796": {"doc_hash": "818a1ff45aae5b5cadad8c05731c510aefc1eaa0cbfe0df5728bfc36b335225e"}, "af6e9453-95d1-4c3a-bd74-dc7954d48720": {"doc_hash": "bcf6ebaf12d09b466625c4862ec27053231a194b7dcb5bc7d42ed33e857c80fd"}, "5878e1b0-ee34-48cf-9495-636d873f6b48": {"doc_hash": "629617b9f89cdd8561481f41f472d0dd15d152c3eb2bf30beecf3a25589a51b3"}, "6ef8001b-efbc-42e8-b1f0-542641c8ea6b": {"doc_hash": "1f366607b5446370f0f3c0a8c41c96658dae011f29e9e2ad0b60fd27f823acf2"}, "c302174f-0c08-4786-a76f-ecc13a0340cc": {"doc_hash": "bd29f0e2980e6fc712690004503d2fab332fcb75fbefc4d0d4e41d84c8254a46"}, "ee195179-8562-4f6d-91f2-58b5c1b95f25": {"doc_hash": "c3bb6b5c876388f35fff1e9c2b7bd437fc3b9a71b79e56a027ca4d6ff4e6109c"}, "919427db-4195-44c5-871c-88d7f6a13989": {"doc_hash": "7abec6e73fc2bf6c7c21552eac1309605bb17e084561ed5dbc038a9a255b21b5"}, "5426871d-a8f7-40d9-aac5-8a16d057b4fb": {"doc_hash": "04803e94228d1240d9e5c0df5aa46b0c28e64b1b82f5e5e515b0eccda18c3cce"}, "7a171734-75d0-4028-bc67-7d8171de8b87": {"doc_hash": "e7e3e8520865f2daabaf74129bb989bc60bc396c40362e377d74eb54415fac34"}, "c5b83618-c9ef-4693-81a8-312cf86ce1b4": {"doc_hash": "6a91dca572337fc0c7e3c0517609a4fde4cb1f8eb341a147d57058401458e647"}, "092dc66d-977b-4035-b1b9-db64e44125b2": {"doc_hash": "304794a29a5ad997ee93406c66f00b17ea6cf571e46c71b6aa648f9bf090c23d"}, "fe58345f-d05a-4bd0-81da-324defa1df84": {"doc_hash": "dc542cb99b721c16569126d856e9c38ac3274242f6904075231bcc707276d19a"}, "4d9fbe00-68d9-4197-859d-a8fbaa4e7ae7": {"doc_hash": "b0fcf18ab9be799162f76763f40fce62fc4f5a6025fe9de4126286800ff4c4f6"}, "8eb8de8a-ca43-451e-9642-e183a5c90edc": {"doc_hash": "f1a06fec8e50fd52be733f4371c9303f9d177cf6f186c47ef7af57af301aa80f"}, "3a23ceb8-63db-44bf-83c7-8f5cbf99bc66": {"doc_hash": "5e3887395082184e14b487a092d8186b0ad731dce1baa949da2178ec444aaf31"}, "fde7295f-1dab-441c-b35e-5f8b9dd67c77": {"doc_hash": "9f57d4920b0ece13e7a2728097870636e3c2d045d6d529d94d224e9575e02819"}, "fbfe1e1e-a39d-46a0-abe8-cf9d312dfd7f": {"doc_hash": "98107d3e5f1dd24cae0682455102b3ada4133ad202270c6ad1b64ce29b2b8f99"}, "c1d9a3e5-3867-4294-a28f-cc8feb9f610c": {"doc_hash": "2c561f9566608ea1b94d464238a7f664453aa239139c556458a545a2b0bbfaec"}, "1824a8f9-491e-4516-9baa-6131c0c78c1c": {"doc_hash": "b7cdb42b23c79fdf133a0c42e12bd8ecc0ed76e905a82bd9dc5eeca498174188"}, "bd3746e7-da54-4c45-99ee-269c1ac11a18": {"doc_hash": "ad7c9200259ed95943f381a7b3455a6aa96047eb34e3141c43dd1ac47e80c3f9"}, "8c8ed0d4-c2ac-4714-8149-fef19e2b0ff4": {"doc_hash": "3202017cdd55205080a06dcfe63641b7d28008a38404b6681f3341002058c04a"}, "aa9895ea-86cb-4307-bbfb-0c13ec70ef3b": {"doc_hash": "fbdfa076e91ddf86b8aadae93d9eda4d51339a8962bc5c3fd485690076166ccc"}, "8b8a59fe-6504-401f-9508-76241c41c8ed": {"doc_hash": "03e0de922b2b01df602428192447908885f766bcd08322c578cecf0da99542bc"}, "3a24fbe8-1de7-46c8-8d2e-4af623df4e61": {"doc_hash": "3cead16fbf9366b5bd6d33ec08209c9e67afd24e8ae4ec3aa66339d8481c06b5"}, "521736eb-acca-42f3-8193-e027002c7f6b": {"doc_hash": "58b679fcbf290142856a720475a9f57586c37d66ff661459f8ab3b7b3ec11aa5"}, "7483b2aa-2315-4e35-84d3-058941830d1b": {"doc_hash": "94f4a9780dcca3acb318c9bcee129323aff3e3bb8dc189fad5a1070cc6016822"}, "fd870fe2-0a27-4f3d-8929-d8b427e518d3": {"doc_hash": "c969afdd579e9f8f4d4d7f70896a08a32ca080b75c4a20113dbd39b0807d4051"}, "a5ef87d6-8101-443a-b2b6-f01a4c214d26": {"doc_hash": "ba6b3efc09e2f97160d3e825a012935912f3ff219b0ede6aec44c5f2b2f9e23b"}, "0c7bc33f-3200-4760-a9c0-2bb6ea435a13": {"doc_hash": "8867e95c4f81d6d8d6de9bd19735bba2fd5fada781ad21317c2fcbb53e617c7d"}, "be0f5c84-0755-4356-9ae8-9c21e44efcb1": {"doc_hash": "974a4bba2a988a34798677494cbb4acb8096c19523e880343afd01e5a48ed4e6"}, "e3fd6050-26a2-4166-a498-4d48631a0f69": {"doc_hash": "1187080638bbe51699bea6c92a240851f02c1258143285cb6e4b9c215d463840"}, "be2d8d25-2ab8-4f31-8c29-0855305c8b29": {"doc_hash": "2a54361d967078406081731093c9504ffb7450ba94c7d7225092a2bdf1db8c3d"}, "7b5e3d52-8ef4-466a-a529-58ed09640aa9": {"doc_hash": "c80c688d39c28c081e35ef0a353c85c3e6d1dd52a0f03e859732268f4e8dea01"}, "e076b117-0d72-43c5-96d4-64693b85886d": {"doc_hash": "7f3844e450a076a182459a5bf48f8e0874d02f06457b4dedb125b5b66efc9227"}, "e9048fce-b353-4059-a3db-15675f2596e3": {"doc_hash": "105b2007aae291c4ce4b2cfc2174d5844fb422dbf42d4e03e5f72aa046652d78"}, "039eb23c-0653-417c-b5a8-f371c35ad956": {"doc_hash": "54746619c3a23ce0a8fa99ba88d50532e2255691d9a3fb88a32ef421c4351d1b"}, "f6c853d8-6da3-4177-899e-deed22667ed0": {"doc_hash": "5fba2f23602ed67f8964839d283111bba1fd23f361af57f81dc29da192533fa6"}, "d172a959-b2ae-40aa-8170-96f018dc1e3e": {"doc_hash": "1ce9fe7867677a693d9670fb7da409d7f629942a226d0486b2fa4e516535e559"}, "efbe03d1-bc3f-471c-a275-ef79d526ed0d": {"doc_hash": "389a3457f5e80020e839db81e67945805200458bf1efd1040c91ddb11f6c9999"}, "dea75562-ec08-475d-a825-2ecf25b58aed": {"doc_hash": "3e2e23a785b12f5d47c58c05deb1697da2f814352f83564cd715fb3887c9371a"}, "68eff820-5cc9-4310-80c8-da499c8835b1": {"doc_hash": "92fb99edb28be7059820ced0c93c257bae48e78e5f011502958ee40d608fbf07"}, "017db932-59b4-407f-97cf-b65f2e71dbe5": {"doc_hash": "5809d1fe807d1c574ab7a228b66757399aaa3058bdf1c964620ac52dc36572ec"}, "862a067e-ed8d-46e2-b0fe-28933c4eef7f": {"doc_hash": "b6760e158593a3e323d06b60c68aa06a3fb69812ceff5732fefc2a68deaee199"}, "dbeed5b2-056c-4c6e-ad34-79e7922deace": {"doc_hash": "80c261379fa13d5b4e9fb1993411a342fa704127381cdf14693edbc18f7f33f3"}, "3d525d1a-886d-4dc9-9a4d-6ec76037022b": {"doc_hash": "769cb53152f8194f0bbd86989d36d99e7035420c2f394008321cd46fff41594b"}, "bbf0ee24-fcdd-4d29-80cd-fea7d9aff353": {"doc_hash": "37403c73058987ee2114d71cd3ba0fc529c5d5cb255e802e4280d425bd33d867"}, "0ad223bd-3727-4850-8b7b-bc5f297e4a33": {"doc_hash": "35a8009b0cf5f8f33c438e7d6d7f0dba472533fe2038415aad330beea2cc9380"}, "673fb36b-60a5-4c40-8152-eb689ce78af1": {"doc_hash": "958f86cecf125b644539d23a0a2d725e899ccac8d4fd2a05acd2f99dd9f7fa95"}, "9c9d0bdd-015d-46ae-93b7-334d31dd2f0c": {"doc_hash": "ab44a0d53763c53909542d478d79c99e5246679ffb8e9985303c2146b73b21a6"}, "4c0606bc-0d2b-4c50-b562-12fabde55d06": {"doc_hash": "d22b31afdda0f63c2711ea2a21b08a86ba7e82a615cea59a88fc015a68c9dec9"}, "6bbb132d-5515-4a54-9327-bb19bf8247c2": {"doc_hash": "22d41c88c96373eb07ff64fec8cb6fb494b9eab01bcdf95677ff5db62834f388"}, "89ec3e24-4800-4711-9db5-2d43547026d8": {"doc_hash": "f2e934a474a3ced035dde95777cbfb9e9c127d9809b525a2054350dc386e523c"}, "52d70004-1e1b-4512-88f4-bc56af39ea67": {"doc_hash": "55e81d0845707f812e4e685b69f4019ac43eea71f246cabc5de56233c3f76674"}, "5865ea89-0a6b-487f-9e07-22fbf696cb6e": {"doc_hash": "d1f0f27036f91320ebc40b1d0d4d14f827ae240791273e260230b71448a71144"}, "b0da131e-0e61-4213-a1fc-637c523cbd38": {"doc_hash": "7b62abf81a683c83ad2b6e78d1ccc7531f585a75d540c325b9be1ba4dae29cd2"}, "735bf168-9126-4174-ac1b-438970d94674": {"doc_hash": "af704c90f470e7f3276ef582128f879797d0c19f346a12c605c0fc92338c3143"}, "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe": {"doc_hash": "4db75509088fc6b5194947cead74c72633ffa79d1f46e219bde1f3f5452f47fb"}, "07802023-2755-4197-9f0e-97253661fb27": {"doc_hash": "b06b7fa8637508a772b5f95787313ea822d4345776fbe0519f1675cc66f2dcab"}, "8ca3ad30-f63f-4fd9-ba96-4c8320e9b8f7": {"doc_hash": "f9a42d8f3282f8dfc8be2e3e1c2a2517c79969e2d7ad83b19aad07044c910e21"}, "122f93c7-4a3a-43c8-b7a8-833521da0acd": {"doc_hash": "9dfecea074671663d80eb2381520abd946ae7d0056c9b87641b3eb5f5a4d42ef"}, "4e83a925-55aa-4378-a95d-40ca8144e809": {"doc_hash": "fd73c829290970d3addd5f5be7deed0a01a4016b250321c312dd20252d11a48f"}, "02446440-8c8b-41dc-b35f-09f994b57351": {"doc_hash": "77b5ea27f83ba083fc6dd9f6343a2a943b65affe0e240d286ec614ecb94c042f"}, "76edec7a-92b8-4b70-a75e-7ea892a48e3b": {"doc_hash": "a02d34f4edfeabb31ae587f4533664019246e4942c5f5a24e890e88592ad5cdf"}, "2eb6f3b2-feb9-4485-adf7-c2be88b42afa": {"doc_hash": "8fd54fa2eea10a51ece419220efa1817a15509d671bec801946e219995beb0cd"}, "dcb76755-3f2c-4c48-8eb8-6b6102a7740a": {"doc_hash": "27db665bf62e91af95f32e4bb820ca1c0528be5a0d08e87c5bd3adfaa50984fb"}, "7f1c46d8-c596-4848-a35c-fca2ee50b974": {"doc_hash": "cbda875a4dafd68a8928895e185e471753bd358160bac23a59ceccfcc360e424"}, "a94e02c9-b05b-4ba4-9051-5088d414ba55": {"doc_hash": "ad732bdd88013ce5d00244be3df530d6eb978cc5e78802f09da9f720f0e3ee95"}, "35925b98-f7e7-4d87-b562-b7e0105731a8": {"doc_hash": "0361d0cb2bce407a8a728f368158704b97dda87efd1b5c41e91988f09fa35422"}, "c4c26dee-fc40-4fe0-87d4-038c28465546": {"doc_hash": "3effcea00a8cd1f65605dd9437d74b2f476d9b5a297306392e7ee749c42ec9b3"}, "16069126-531d-471c-a0e0-f418797427b4": {"doc_hash": "a7112d62590d756825d43e7074b290fca65c309b84cff0251458aea795199f84"}, "66d0f3cf-5ff9-4b1a-a3a5-9e506653dba9": {"doc_hash": "89e663a6b7b724408e3ee306489416f5b9f9f8408f60ef29130b3f396f171a68"}, "2d5b4c52-5e4f-4d8e-8362-53128ac2eaae": {"doc_hash": "e6d57fd97176c40f5b5fccbac825ed899f5701ac83c4d1c7b286f6aa54c70d5f"}, "d6d249b1-bca0-4808-9b7c-f22bd731d348": {"doc_hash": "002891b7c8fe3dbc42ec8f467e23cb0de291eebaa108cdf3c55a7c193b6b7ec3"}, "66e61355-0d9d-485e-9b64-23103ad364ee": {"doc_hash": "75b85afcf792e6adcf612109b0efbb8a71d60273f183b493d5d2a088c8e953d1"}, "be1cb307-408b-41ed-bbf1-5ec07174114e": {"doc_hash": "56d34720a4a9f7479514b24d1ef37c47fa47b9bfb857ae429786f4c5abae8f0b"}, "608d9f0c-8330-4c34-bb2a-678cc9ef5491": {"doc_hash": "a60934969a9460a0e55bcf90e0c661b0653de66f225ead8af266c430b9e7461a"}, "d1f11c12-232d-4d11-92c5-ff3f8b69aecb": {"doc_hash": "cd1437a2b7c25d5a26553468dac950d8eab3315a9d4a2ab4e6b499a6d81048b5"}, "42998b3a-0e07-49b9-9c3b-7e92fd3737fc": {"doc_hash": "cdb6c4eca63a1945d3988bbdf666472553fe1bac540f9996b064c9d60c5eaccc"}, "f42db065-56ff-4ed5-9bc6-afafc1b95217": {"doc_hash": "2a4fec4588007097e0d9bf3774988a982f8d915e9f381a380724ddedb718ab0a"}, "7b23acd7-e33a-4c5e-8dbf-504c94849de8": {"doc_hash": "66fa0f31b3959eddf0c5fa05a8d8bc788ac0a8241c47e3340694934994f94c7c"}, "35180dc8-95e1-44f3-8043-e97f652eed45": {"doc_hash": "2c9db9e970afa3f14bd4d57f79fa317d290714902da650fd6651a5244dee32ac"}, "b8eed6e0-8a2f-4afc-8671-7b81b4bad4bf": {"doc_hash": "ba486aab96c6ae609b06fea8bc1a1db344d85bb9315a42907db8aa0219de49c9"}, "0d2564e3-5ac2-4d48-9c50-858540423f89": {"doc_hash": "6902359dc97c6ad1cb2e50fcfbf81c37db53cfe496e155c225d84e1c9ebbad5a"}, "56adac30-e1fb-4005-aca4-db130f88615b": {"doc_hash": "d3d55ee34d86080d2e986939eab37eee235450c128caf8f154db7fba020dd6a0"}, "50e5c828-fee8-4c12-a4d2-f09b297889a1": {"doc_hash": "c4469c4c65d5bb63526ad650559f01313127b9e5f3cb56f374757e0cf7332d23"}, "e54c1fbf-6589-4b29-9e6a-1e0512be5890": {"doc_hash": "9049ffba680d30ef9211cc2f6ae7ecaf5106e4bd449ff3b07e2a9b17206978b9"}, "0881c52d-ac30-486d-b81b-ccc63a26eadd": {"doc_hash": "3f14c6f2f1bc506f3822f973d2e3baba0af6ef9aa32876bc76e8ec5a8b266d6c"}, "328dde78-be5a-422c-8700-31a230c24203": {"doc_hash": "017d29ee02d2eeeffdae1d2b2921a3b59e45ae744e1235370f9f20079b8ba109"}, "6af5b53a-d0e6-4e2d-9270-944522990bfc": {"doc_hash": "c2374a7e5de16654b3364215fcd550d1d4c9aae90c2f16cb86efe6422cd63dba"}, "51d8b98f-e792-482a-86ba-03c99a2fcd8c": {"doc_hash": "d682e472dfee35ce3ce4b4ae9a1a77d1c5df4621ca432f60b604317246e04bc2"}, "b32529a5-5c1a-486f-bd7a-dd00eb11475f": {"doc_hash": "70f6431d71646818be0702d8b43a2dbf0ef831671483265b9080b4b946fa7788"}, "ca42a91d-8d2b-4ba8-adc2-7e775423b2c7": {"doc_hash": "477cfb8e09880ac2e976507cefa8b08def6225047c6a4e215701910d5e6bbd3a"}, "8e645981-817a-4859-8849-20f8ea3bf958": {"doc_hash": "e9c000075f77c4a3ddc715f820893ac5f70ee84d24cc683bfb903a52aa38c5fd"}, "9718fd86-7058-4bdf-99e3-09bfcd26e1a2": {"doc_hash": "c62334134d54b9e98eb7a89a4adbd87730a23cba2341b9d1de4f1965cea20cfa"}, "6e4f9a52-6011-4ca4-92b7-43af1a7b754b": {"doc_hash": "596fcb88632eb8ebed6094be295bd19e86fd9a8153f1da57d27069c450ec89ba"}, "d829dba7-f334-4fde-beb2-bf5de44e4a87": {"doc_hash": "1fc5eca958e33fc8be56eb66aaf36e24d92e33eaa06ec89751078d97e8996067"}, "9b6a7482-083b-4906-b57f-dc881a39b8eb": {"doc_hash": "9a2379cf0f58f00a638a977ddd59c9d6f5e39db7400b268ff99324899a0eb7b2"}, "d4c65170-e9bc-4019-a6ec-21b87efd2e44": {"doc_hash": "278e3960cc48a2b022904dc82b62474ecc0ff28eecaa4644fb0fd28bd824a2b8"}, "e81d697f-11e3-4d9a-b266-1349dbb12fbd": {"doc_hash": "b2ccb44d9cac3354edde872d580eb6293279fef86060099c10dd8acc557234b6"}, "f0a675c1-1e19-4b33-a4e2-2b4981d09b70": {"doc_hash": "53285e8d5721d9b1f28cc25f7f7e4d9344c36d2e9c51bedeb5aee3e38322f613"}, "498256a8-a679-4d3b-9487-0b94401fce41": {"doc_hash": "bd1c227e61e62e9c9f39b6699aca3983f37ad6883902bf4b700d3005336a4a55"}, "a24c5a8a-eedb-4c40-9a4a-52f761e50d72": {"doc_hash": "ddea097021ca65adea7a972c9aefa20bdc1d9a85bb0a963efacbd521796f305c"}, "8634b0bd-e4a9-43f9-8535-19526f8fe9f4": {"doc_hash": "c2581c2e45776f22d1dcb0f83e1a6029f6d3132edb244bf07544b303c0e21ef5"}, "d6caec65-9148-4483-bb89-e8096c8e5226": {"doc_hash": "3ff03526006de31a353baa87b9707aab1b26d1c7aae94a2febcc2d3aca66c761"}, "cffe936e-711c-4abe-b9a7-c10bf63a6a5c": {"doc_hash": "1ef9014d97472ba55f6450e92ba727dbc242df20a44fede775686c77c48b0786"}, "4c1c9c97-efec-43e9-b671-6f754bcc5a8d": {"doc_hash": "1068ff99e451458ecb0780ce2d40ac02d86542ccd3bc6b287d538ab4be20124d"}, "2b95165a-646a-4656-b7f6-d1da44d87678": {"doc_hash": "1d8bc82ad1b928cec84086ee6a2dcfa1e93a56f69b9b8359b4c2cb59beb8214f"}, "7bbca3ab-aaed-4e41-836d-278a8e5b0689": {"doc_hash": "538402c1896ecc65b996e1f55049fb574ee733c99ad0edf591980102432029d7"}, "9ffb8c30-4c8f-4e6a-8fe1-adb9640da2c4": {"doc_hash": "dad7fcdd8893bb38647ec3afc7644b4150d8c09152ab1c0d22414a4e08509cef"}, "3663fede-2101-4c4d-9ba7-4b1dfef452e6": {"doc_hash": "fbebb18636052ba8a8df4f55d7c5727e209dc5d4b35a0d41c28ec1401033b994"}, "4ac79bc9-3cbd-4930-8b8f-500f8f742b68": {"doc_hash": "08098151f61b889333f8474d7be23f57b93a8c9a4009a219230bb45864186dab"}, "335b7063-7776-452b-89a6-cbd17640c4ea": {"doc_hash": "7909d9bf2f81766e241e9fb7e04633475d41efbfb4e36dccf7931f29f22e3745"}, "c3185488-af73-454f-9884-78a2d670d97e": {"doc_hash": "d2e76be4a04703b7f4a8d34d3116968b0fcc74dcfd143f90a56b7acf47cebfab"}, "71e22586-52aa-4ffc-9294-a2886de9420a": {"doc_hash": "686c657e33981e2e4c26753b20de132e5b8f1e75f09fbe45505e8ed39e20ea08"}, "9fa50a59-93e9-450c-921f-6e10ac70743b": {"doc_hash": "51848a93293f5d16c48933d509cf6297a9d38925938a6802d6c8ec8292b6deab"}, "afd566a7-a110-4eea-981c-ae9a502183bc": {"doc_hash": "d14e34d80280c6e473adc7f1c2ec0b757a3724cb13cac0633e92f0f1f58b7ef8"}, "47077349-6f5e-4ef8-9ab7-0c9232528f75": {"doc_hash": "5c2a074b6d151f222d8a7fe3637ea3e6f65f823db6e6fe3e94cbb3ffb1b8c68a"}, "d2898402-0758-4ae2-a111-d4210f1d55d7": {"doc_hash": "6e35de2eb94e00abccc01716199d703f2fe7dde95d185c8ed6e158201802aaf2"}, "4598e687-3e46-402f-af33-555c46198cf8": {"doc_hash": "dd7d0dfb76bd256653329280db017d1fb3576bcbd73c07634b9ad7b9f9104fe9"}, "c0e1d2cd-8435-46b3-980b-7f55e7344d3b": {"doc_hash": "8de7a4db0ccde5c060023bcf3b4311bf4018acaf41481ad0a0be416f1a5750f1"}, "90707f2c-11b6-4e7a-aef8-9096eb6db2b2": {"doc_hash": "7e867b9b9aa05592b84345b90f276fd6279169dc608924b56393de7e8bf3c3e4"}, "4d059e42-d4f6-482c-b043-f1975d856e96": {"doc_hash": "22fbeff86c95078b8a4d636456354fb1ba96fd85122360a2f45a0edbcfc8bc6d"}, "f5cc379f-94f8-484d-80fb-accfe34143dc": {"doc_hash": "7e5149840fad9bcdddcee5f726a941c1821b8d3fed9e8a51584c3dd3039beb8c"}, "6f28ba4c-3389-4422-a681-46ee6a85328e": {"doc_hash": "9272ca1795fd87ed02195f9c647e7c81e5de8590c524540450bb5cc92cf964e2"}, "8cbfa767-a894-48a4-b9a2-a1d984d8b465": {"doc_hash": "129b18ec8f34be20eee53174470477c16345232818e34da353b73cd342435592"}, "7521c9d7-6759-47ef-a62a-76aa91f83931": {"doc_hash": "24ec2f9257cfa4afa3b63f0d8c0e107586168716e237a3fa3a00c3085438d8ba"}, "fd357d15-6e69-47bc-8a3c-9076059ca1aa": {"doc_hash": "ac9fff6e9fdce958f1dbec77c5a953df2e098eb923c135282935fb7ba5112c04"}, "39f75cde-83ff-4fd0-85c6-9cb2f4dec03b": {"doc_hash": "d961d77fd55e4a67772cc9abbc0d920e009a5262d96dc0f6dca016350477be80"}, "a337ee94-e861-46c6-a977-4b1d27207607": {"doc_hash": "5887de89413b21bacdb0c5eca319ee1c72af86e5e24f9e57f0cb6f8e737e13af"}, "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8": {"doc_hash": "b56ce61e5d6257cbb1b89061b43ddddf3c8e03c26650597ebe461a333837b0c7"}, "9a52ae33-d8c2-4345-971c-e027d78d6572": {"doc_hash": "7e33f214676037d6754f05f1d81ef182ceac9e08543501731854998672d4be99"}, "9083eb9c-0989-4bb2-b3fa-9f02fbc6acf2": {"doc_hash": "02bfcc16abbc756dceda9a4e87571217d0b698932060c93c0f6384ce038d0467"}, "82a26f48-f338-46e1-ab78-77aba2d98c7b": {"doc_hash": "1f5f39db082514dcb7d7af7bab80b69976abc09c4364b02f12348c02b886b1ef"}, "aec303e5-bf22-4867-87a2-fff16eb9fabf": {"doc_hash": "81a5ac739e12ed5eb201b352229181eb5b752c51026a7c18edd501bfe16b199a"}, "7d1edffe-b7b7-49c1-8227-29ad315005f0": {"doc_hash": "b3a56cb2eed87f83b7fc9ca8dcaf9f0dbd624e1febf811240a02adf057e29018"}, "65e13cc7-4604-47d7-ab3c-05b67bd57050": {"doc_hash": "39e91ea359fd48fa0f79e87278e5b38bc524af638263def22527660b81b8dcc4"}, "45ca20d3-9a52-4ad4-b21b-b0e0ea6291de": {"doc_hash": "2209ef682cfc55fe9014a41f35d4644d5d2729b5178c06f9528e1c2451c9d6c6"}, "f50ba7be-16a9-4851-93b9-37a240bb19b5": {"doc_hash": "65423c04300dc786e4493ef409e8751e23c0fcda902add11359e2bb6c8c776aa"}, "9c03e6f4-822d-4692-bcfa-827aed8137db": {"doc_hash": "d21fbb6756dcfcceb0a6711822a67151597672c5d6ca5ceb320b8c106e3e2b1f"}, "2211243b-44b5-452a-9bf0-22f8cac74ebd": {"doc_hash": "ae98014e425e3f839ea22fac0769a4a5e311bd28118fe21176290a597ddb539e"}, "22633822-2951-47ae-9575-1192d148f7a9": {"doc_hash": "e57d6d4a9e5dcca2ecba0f3222e64ec17c309c9528cf3b5445618a84d2a7d6b6"}, "5c2d91c5-1ce1-4c95-8ef4-40fa7a5d4e96": {"doc_hash": "e656a1ffc8fbf4216a3b180e9d19a62624c16a809b404b65aa549ca3bc061b87"}, "bb6207c6-4b32-42e2-9b85-da07c23227ed": {"doc_hash": "3dc38b9b24209e0e707185c8945429c82f2ea7f3dfb12e90ff2db18ce883bd33"}, "0f27e216-4b02-481c-ae19-6c8c507dfaf1": {"doc_hash": "170cd9f875e3a8f1f57a39d08fd253b6fa003ea845ee0e56c7150afee9f4e049"}, "ed305d92-9308-403e-af76-0310bb7dde19": {"doc_hash": "b0dd46668cea1122d2cc4011eaead6899afb9ffb9ad83501db40fc11bb7fee42"}, "fee2e630-636b-4de5-a8f1-4b1bbf3f3cf6": {"doc_hash": "ef62d19393f49e4a77d69883f8abb9437f0aa8aff6013b00b0d698c31791abd5"}, "a7afd14d-1708-4eb5-910a-96fd24197561": {"doc_hash": "5138056ee194059e09d61e890703fd90346e722e142440e003a7758729bf2e92"}, "1be9f85c-a1e4-4f19-9d36-1b88a1d16631": {"doc_hash": "4c4a0d0ba298f3d85d5c1ae2e18623ebeee6ee754aeae393421a5ea40a0893d3"}, "cc285eff-c1d3-4e2f-9186-934d3da74e10": {"doc_hash": "f73a780b81ec98cb548f2a0f86431b714e9bc7fde94429459e459474d0cbc4e1"}, "9bf621bb-1287-4ef9-884a-944fde799720": {"doc_hash": "39783c636c9af176c67ad0a995ba52270746d5020b3f6381f4a1556b0abbf0d8"}, "7d47b796-d69f-4a87-8234-d0629d1155fa": {"doc_hash": "78902e2e7a68513999d83c5948f44746305b12c47f7318cf29e581067b188420"}, "a7276d79-e83e-446a-947a-c15072631047": {"doc_hash": "69a5526c896fcf122309dd00b57e106a7a31e5bd01218731a1dab24296fcf630"}, "c78bd177-fa9b-4ece-be84-46c77a169b27": {"doc_hash": "b37b165ec6c63dce1be22272c6b66b9c6a9f0d4a13e36d9491b2d1b45dc157f6"}, "4bef2b94-8207-452b-98a1-5e0c83bd6d1d": {"doc_hash": "4ec424cb7a69b8b80272faa761997ac91dc0ba62e70fffbcbe2f1bd4cb100c3b"}, "05c3801a-f835-48a3-9009-86e66e22f8b4": {"doc_hash": "5830c5f64eae2461c4858e40d6536854bf72b36cfc5abaff860a62d32bd14d97"}, "b74ff1b5-e0aa-4d84-a378-14040e11cef9": {"doc_hash": "b908b755e9f6733f5af3c82447c2ed9411c28e75edc2421cf8cb25653165dea5"}, "359369b4-74e0-4d30-ba12-05010a5345d0": {"doc_hash": "1f3f8477669b56ac2da98c74845a95de10e28fda6500c881570286b8c6dcbebf"}, "41be2939-14be-4f5b-a6dd-d1f2bd452c7c": {"doc_hash": "97e2270ee04a84b84e99ff357054ca278d9c2a9f6f4480726bdfc2a24d6a0de4"}, "440a5b63-c639-4618-8663-1516f7107a5e": {"doc_hash": "813c457b30d24e9b712a637c63544e6f441eae1a116e455642199eea43478844"}, "dae3c2bc-3288-4783-86bc-760f2ae6f945": {"doc_hash": "5f8650674eab9b91398177d77ba130913ed3c72635bef3756b1af6ac7a3294a6"}, "3cdd291c-f8cb-4158-8bd7-6bd73ed31e4e": {"doc_hash": "a081f29577139bd6a9e06f72d3ab394e67c1e050eba600e471133c2c45cbc7f2"}, "ac743f89-f3de-4125-a677-360f283b5aba": {"doc_hash": "6f04b8d8ce7c0e3dc6dc947c2e37d118fb7ba9ecb3065f71441bde9c2f99c16a"}, "9cfbcb28-6854-4c16-b18c-ac8916a96193": {"doc_hash": "88a6822d04a1a304c4ac45bfb297f204b8d3572cf3d8a8ce278f452c584f0671"}, "1f693fec-5edb-47b2-994d-96128d9bd262": {"doc_hash": "922545594029394cc3482eedb04cc701830a6da4d3e69208d89862667de043ee"}, "50311660-e2f9-4712-a8bf-da5f413c2135": {"doc_hash": "3946fa5990acc4d340cbc6d61d167c209b5119881f6bc8e339e226cef846e4e3"}, "1c52626d-39e4-43c7-90e3-839322b4ee6a": {"doc_hash": "586f3077d098d016533eb8b28b020e80b4b766256894b322d692238f9f92a2f4"}, "22a08ddc-ea62-47a8-add2-316a99312fdf": {"doc_hash": "9a396c06b45e379d09c988b68322e9c43dcbca6fc9afd40a188d9cb484c9fcda"}, "af2c3795-d140-4c41-a8ea-f8a7dc17cf5a": {"doc_hash": "5d74fb3288374d3ce8431b7a68d95b3287e932b9a3c662db466d98a728aa346d"}, "c12d7f98-c884-49b1-b2e0-4c0b18b39c71": {"doc_hash": "fe518c38a21c5c1caf875b8d62aa9db9ba4ea3122897129fe3de93260ba6fa8f"}, "70d92ac1-82f8-4108-a8d0-8d0901b1f9ae": {"doc_hash": "09307c41cdc97a37f88fa8836d918164f1ceff4c656bc634f14a1559da9603fb"}, "256a90e7-1492-46b4-9fe1-db7e92796fb1": {"doc_hash": "8e290edd64f5d8d78c0a88da0ec1b5a03a232878cbf20728ec0587cf64c32bc2"}, "31550f3e-33ab-43ce-9f7f-9a830a1596d6": {"doc_hash": "fc2d9f557b6848a7a391df99ca643201bb151af28f3f5c4377cb1d199b25b9c3"}, "c16a1353-52d0-44bb-b8e1-b8fafd5cbad9": {"doc_hash": "2a211d590bede439db9675e0f52a4d80c1532a3e75a570ba77ed099e015791fe"}, "161bbe4d-cbe8-4289-9ce4-6c08b262eeaa": {"doc_hash": "d8a16d886bcdd01cc94a531a28ea4f05ef7e348a808642cf5f5efc2c4d89c108"}, "08720dee-6c13-47bb-874e-c8dab90a8963": {"doc_hash": "9b1c25c931cbc5b1e37ed997c5a8e2d91a666066fc59681f4221777ce608e113"}, "0e6157c4-b777-4911-bcfb-0756ef7aa163": {"doc_hash": "40fd2fc1d407a9bfa4378bf24a594822dea7b017ca8b18c25dd235d312b13b9e"}, "eee3412c-3791-4d6a-a064-ff044afbac98": {"doc_hash": "e0626a2755fe176d6eda77973c8620fe863f012aa1704faf0c8dde882fc80bb8"}, "85f62711-490d-4e0f-8d5d-167e868e706f": {"doc_hash": "48bcdb077982c8901d6d0789bc42bc9c43985abb2f83e56e21a39136a8cbe226"}, "3f44d0bb-2268-47a7-b8e2-678d926a89e7": {"doc_hash": "03b8e4fc1c3ec7edaaae732b3a2eac3fa7d044888f92c090cffa08a1ce8d979a"}, "2a6017ca-3554-41a9-bea1-b2d676d7bbb2": {"doc_hash": "d1af45d1c70b73024bad713589fd56f7bccc1d2d66af2f95739a83e6601ce610"}, "4c59e0fd-943c-48bf-98a6-3652cf72a05f": {"doc_hash": "a5bb1470c74e14750a3a9bb81e13089bbb58773b473bbc8bc55d5bff4cd18e5c"}, "d901b462-1fbf-455a-9537-262368e392d4": {"doc_hash": "d306814d207d52d3a9002af78ed986dff5b9575adbb5a4e275574646fb7e3e42"}, "02af9c40-b042-433f-ac24-a325a70e1f36": {"doc_hash": "5ad5ab41cfa89b2d5bea4810970fbffbda2e7e4b94bcb897a3a93f9068f133de"}, "01962dab-dd21-48f0-9653-b6ca2769d285": {"doc_hash": "07fa63bbc39cd9ee493cfb5f19c73dff917b76b240cd1631ffd08314998b9411"}, "0fa9a2b2-30a9-4371-bd74-3e5e72c60feb": {"doc_hash": "9a99045ecb9844feef9a91f36aa0f6ea2d8555c4061b5761bc17f7808b27b6d7"}, "1c037a2d-1643-40fa-9b6c-e969b225bbf8": {"doc_hash": "22a7f11db1af98ed8d0a4f4fe5ef60a27a012533642320749a486bbf772e9bb3"}, "1557277a-62cc-42cb-ad65-9b557391f8f8": {"doc_hash": "009ca05aecab85755ed9909f0f66e1ee2ae00f1c01fa9d8d3958693d95e3f10b"}, "190afaa3-e863-4aa3-a7c9-a132ac68873f": {"doc_hash": "e7fba59e11b438f5378b327f4b33996775a1f8679996f9c30d83fd156f12e017"}, "8ed2d930-3c06-47af-9393-b21d93d3bf04": {"doc_hash": "b33c81f050a4902aeadd2bcc9d0d2ba3c6e6fa06bd4877c14cd750801979aaff"}, "ca74daf6-d95a-4832-be3e-ad2cb1653393": {"doc_hash": "7048e5936ea2435132bae59dabbb55218481689a83e286b3cc03b0889dc485ce"}, "c380a3d1-633d-4218-940a-bba23769ed86": {"doc_hash": "40547da8490a1cdcab1957550140658a284c937aeeab84d904bb827b8ec77c8c"}, "ef278c6a-dd99-4ad7-81fa-16f396db38ab": {"doc_hash": "6337e3705bc6acceebdcbfa2b0b23fc19f4ef7ab7fec569e84b085cf642948e6"}, "7df98990-3765-4a07-87e1-1531ae9200da": {"doc_hash": "11732f15478d37ca72fb027202d21a72ccc2dfcc897e2ab80e75f7abafb0d522"}, "a3305451-4b8f-4934-a041-affea476fdc4": {"doc_hash": "cafbd61ac033ad7e81ec2e933e79656977644360311eb090f933c4e5f20baa8d"}, "f0d773b1-8620-45e2-826e-be237ae7d0fe": {"doc_hash": "c25074ae85fa6504fcc8a06101d8233ec8e29b693e9e80e27fa3fb123e967ae1"}, "9961e50b-c328-40b3-b0bc-d749de739153": {"doc_hash": "cb02520948b3602f65fac4831b465e0be13d22c2cba034d4b7cece2fa14cd89d"}, "a720d204-8b5e-408c-8d9c-d031c4e867a5": {"doc_hash": "044fd3cd4d8fe1d1e5d8d6f9604fd45a49b92cda352ea5c938d95fc0fb700eb2"}, "855ae1d1-ac7e-4c73-923f-5b773fa837dc": {"doc_hash": "9e2d3ed03d302c4e178f81774e73924bdb98e39ab61ec787b53eefec42946ee4"}, "6a99ce7c-a48c-4fc6-8a53-c3d09aa7be01": {"doc_hash": "e5c2905cfca6f8980c772961b08f621f22e0502f2631156d30557651bc531a17"}, "1247ba68-4d2d-4184-8f8b-eff0cc551aaf": {"doc_hash": "04f3698d5fb718f4864eb8a4143423fe82080170dd9252c75c729bfc071fda46"}, "7499da42-0943-43bf-b821-3ddcdd9cdfc2": {"doc_hash": "1c64fa916ea6abc4b84cdb400312777ebd2632148203f04e122009997833ddd7"}, "6992e214-471e-4752-bf56-63c3d3143eb8": {"doc_hash": "f0f9ac2c17a6872607ce4373c2fbc49a8b8372b6d9d4627b78a4c20380f6c534"}, "22586eaa-3ea8-484e-8d59-6270bdf1d36a": {"doc_hash": "013771f1540a76006cd8dd8be24bf7ec483351dcb98b56316c0fda87751968c2"}, "6aa86a7d-9968-4eda-90b9-0ba1c9fb3c2b": {"doc_hash": "533cd90323b91c9522ee85727a39eb4a37c00f0ce74f8aa1063e0977200a2e1a"}, "93aebee2-17f9-4135-ac31-07138482737c": {"doc_hash": "f70341cc3b2bc90d3377f1c4898fd9b83df070d377b275b47f99bddd5603dd0b"}, "d931a88f-6e21-4528-8676-46fa98e95b9b": {"doc_hash": "cf8081428bbb5970295cc515580708ee9efe7c9bcd471841c2d890daaa79b281"}, "8ec6d3b2-0708-47ec-8a1e-cc2cebad9d30": {"doc_hash": "ae37f70d4b8e10b1532c0f4c27c99f147afcdc5a719c37f0d190cfa27bbe9ce4"}, "a86fdcff-98e5-425a-bf0e-0b2c58c08848": {"doc_hash": "0771543bfdff61342d022949e7bacdaa5f1ca73fce7beffa95756aa58e6c90dd"}, "2c6d9045-7bfb-4af6-8784-b44ef7dfdbc0": {"doc_hash": "c8d3ed10f314bf6f2587b5ec0b814e9ef42e9e9389ad4444e26801c58ebc27f7"}, "97e1c587-8e14-4ef7-9d60-0f7f75f162b1": {"doc_hash": "79817fba08af00f44c19b66ee52b6581c575e32a7351e212758f58073fda9d4c"}, "3eef13e9-eb6c-4807-bf82-b336d290311e": {"doc_hash": "9e5f213ee93557b408a952534c7c9e3c6bfc3933298909be6667115e910553fc"}, "3ee7e499-0038-42e4-87ed-0f4f26479bef": {"doc_hash": "d6e2b1141b0eb4e2f98decf7011f37896f9b22752ceab9c5a2fa4ea1bcf6da4e"}, "16362345-c3b1-4967-ad23-cf9c2f62bb42": {"doc_hash": "03ce317a675d233e3788db8ed17f9b322cefc9b063e0f32c078b1b474f4a90e4"}, "d6cacf12-9c6c-418c-b193-276197f63716": {"doc_hash": "4842c0840b3f20228e97e526357cad4ae80e0369bb6d8b6f777c7157de056376"}, "1b179977-1acb-4a75-98d6-e25b919d590b": {"doc_hash": "e8b337d5b96d647ada856a5efa7bbfca8c1ca2770dca675f93a5ca22c5e454c0"}, "948f44bb-9dca-4a2e-a9cb-441ab6dbf7a4": {"doc_hash": "9f34ee717c30bc78259c832d593733a7313250fc9d885536feb4509faf6b87bc"}, "c0396be3-5c9c-48cb-9a6d-232504d68760": {"doc_hash": "cb4ff3af1b5a93e61bd276931a1cab4e05a84f73fcf54d2d2c6732754bd05957"}, "6cd7999c-a22f-4b66-934e-3a55df869ad6": {"doc_hash": "afb21cf33fd67f891971a1025e6fd12cd7eb1c43ad090af334a134b80dd95e13"}, "a2470cfa-30cc-4fbe-8229-568ba6b1fa4c": {"doc_hash": "64ec37805b5149674bef56ecec979fce6120ddc34e7a3f3bd882e8b81ab4cb0a"}, "6d8e9914-dbe9-4712-bc91-b963609ab752": {"doc_hash": "c4eea354f5f45aff63a60c298ca5dab1ea761e3baf9e6d3762f55a39850cdd48"}, "2aac128c-fe5b-4ccd-98b9-c78f40dec500": {"doc_hash": "0ed7e3deab79384067294725e85e15a8d100cf4f0fb7597e93bf03b58d5c2725"}, "6fc356bf-bb76-4f35-b3fe-51ec2cc8608b": {"doc_hash": "7fdec655d3e77165cce13657266988e05f247f32dac7eddc4d18485d8f2b83a1"}, "33ed1d90-38d5-4f4c-98fd-9544e23ad651": {"doc_hash": "9d6bfff230544efb7bbdffbb2d92b1f75a9cacc6f46be6fb7ad7056ec2cffff2"}, "b2891faa-4c8d-4ea7-b703-205e30eba003": {"doc_hash": "25faa7d5b8878f0a9593ccfc24c566f2d6ba123ebead42f0c0f001fdb3b498c9"}, "ae018603-54e0-476f-96d9-6a1f9e02e1b4": {"doc_hash": "8b03e45ba5f251f1fca72d6d2819a37bb6c51d63a1abfe03bb6472130ad35250"}, "3f9f5894-60ab-4eab-a06d-374d870d35a8": {"doc_hash": "fdfb81965015ec94f4490ca6565fce8905773a6bc25d6c1c81c7c06ee007d5be"}, "4e11668a-f651-4175-97f0-60ac4ba12c45": {"doc_hash": "be902029a8e3c78131a70d8ca0dd8a3448c351caab929765d99e4593bad9ef73"}, "da650e2f-8f7a-4fee-892a-8f8d3ef30ce7": {"doc_hash": "21e27b23985fa499595f37c6d81bb2663b7dfefa0bdd09485b4450ad9cb631e5"}, "e4ed39b9-a2eb-47eb-bc4f-c0bb6ff9356a": {"doc_hash": "6400d9c2edef75d2dc35a97cebb1e59fcefcbb12f87e92f3464cc3336e585c11"}, "f4f8b74f-197d-4844-a837-e12b5b2635cd": {"doc_hash": "056517676313f8ff0c90091997b1b673afb34dd3bf222465c3ffafb9f962157e"}, "65042908-4328-43fb-bda2-95eff76438fd": {"doc_hash": "109772ec0a974c37db2aab2f8856a5e4c6464a2b5d4c1728cf7278e8754f5174"}, "d8d35861-d6a7-4567-84a4-ec7b3f4d24e8": {"doc_hash": "a201d2664cd7c8357f54170f06afd803faac1a9f1952c9f6ba06c377140ecb53"}, "f5ccf084-2d0f-4597-a824-4515a303f172": {"doc_hash": "c240c6f93476ca75540c6e69ead8f8d98c485df16b082a9de5f69d9368f2634b"}, "ff835e5b-9684-4a39-9b52-b0e698ce8eac": {"doc_hash": "b657d7a5e5590e0dea8582d8b03c5112b4bfb43de6b8a27adbf837691ce4b215"}, "e076e46b-e267-4222-ba81-432160b97335": {"doc_hash": "a89a56239dbe62a7d237351b6a1a072d293ee8a9fcf5f523b5f9b46f319c55d4"}, "8d95b184-7a57-49ea-9f97-0078434cbb3a": {"doc_hash": "fc104c62a5b9bc1d9b24f38bca3ca7d32a9f59289032a18055c7762923dbd8e8"}, "5a1eb26d-5e27-4361-bf52-8f7632cc278f": {"doc_hash": "b0062cab4ee2cd60ae7e7b0166fb8b10f4407f60756067e428b6c47d7f407b7a"}, "90052333-1eef-4abb-bc36-93f2d90bb153": {"doc_hash": "e4fae9451601eb79e705aaea42d7fc21601b3cd7ba0ad5dcc77a1425e9c26d04"}, "c4c57fc5-89e2-4169-9240-4622f377a3d6": {"doc_hash": "422d6099cfafbbbdb406ddbd2317cffa23848d9b4788454099dc18816a5acdd7"}, "d4855309-2bce-4c87-aa16-06c788af0e60": {"doc_hash": "37726e72e22c2d974100b58e5cf06d4234f5b6df81a1096de673a253d2175d17"}, "f6ee9b93-564a-4d76-bff9-b401196b8cc6": {"doc_hash": "953c976134c9e9ad20f705097ff7a6285c779040bb9ca8ccc02dbefaa5e014c9"}, "3160e92b-bacc-473a-bce1-834307053fd1": {"doc_hash": "8195a8eaab912dba795dd961683198735525de3805f5514e7f07de446b95caa5"}, "73c47245-f800-4b9f-ba2e-2505a918834b": {"doc_hash": "eb7b9e530848f079f9dd5c75b97a3187c4c5c6c9c0296895cbeb0c76d6a76d85"}, "a0d2dacd-1a29-445e-b976-b1ea94046b05": {"doc_hash": "7bcff92a8f23ea4ddb82c87c1947b9bf24c75fdd5a2f46e5c330901ba7eb9bfb"}, "fdaa8371-c635-4ba0-93e8-44ce88dec4d5": {"doc_hash": "121b24e3b5d581929296828e4674129b38bf675ac151d61d0a59633336350d63"}, "9b7c0b02-7130-4b04-837a-dff39d1ce218": {"doc_hash": "dc3c57915bd030e9a5ccba31c74785d74b07663f0c41845e3870c5214761c207"}, "662b19ef-7a43-4585-98ba-b25073dfb6c4": {"doc_hash": "baa0570a85d093492c5c77a64743264200f0178b20cf6074c4d65783fe332f5b"}, "0b9ec1dc-863a-45b5-b3d8-6d42ae491643": {"doc_hash": "c0cee8a88f4b9ec20c0dadde3614f423cf808286e0f13f6e6b8b7e74e7bbed44"}, "78f3e08f-5050-4fc7-ac86-8800ea2339b9": {"doc_hash": "e2633d6546382fe81ad92c70afa7809ea2647166a26a42cc5cf44eeb91fefa2a"}, "fdc92f9d-cf67-46c4-9424-3ddf3d09168e": {"doc_hash": "d79efe60897f281843b4dce14a28f43de022dea50afa4169e01cff8d42512da9"}, "9307e053-4e56-496f-80ff-61de31159145": {"doc_hash": "697f4764167d55b183a2b15f37d04b01b961884258414d91b70f5bcadbef144b"}, "57425ccf-afb6-472e-8749-93bf84d1bd04": {"doc_hash": "db0495c1a7f3036858f89af42133ad7836dbde468598d931d7f88417dad03c29"}, "2d5375c3-8565-4c20-95b4-0d7a357d6a1b": {"doc_hash": "0ad76a0ffbd2103fc1346acf2be713c5938ce355809bd436567bcd66b4d85e80"}, "5abdbc24-8c45-463b-bd90-72ce5c7ed801": {"doc_hash": "00de344ccbd3192df63f2536b6b1caa6e0afe6d4781a69f8d6d0eaa3aab24365"}, "cda3d6ce-4a08-4381-b89a-54cb8073e206": {"doc_hash": "158d00aa86bdb8971b17b945fcbe554a865b95f391c0de1bd81681b051402a70"}, "c8e64605-0526-446a-8b29-d359d8b7ad16": {"doc_hash": "a25b16f7fe6deea2d7d2c46b9dfff22c84b005dd2577724977d30ef0315be351"}, "2b74c845-f2eb-4823-98ca-62f1cf7a0229": {"doc_hash": "6db624f240b04d589b39b9d086444ba5a1e4ec0b134f1f9a0aebde8d5ac4ba37"}, "a5892a70-c3b5-4131-b3e8-3e4ea6b1c8d2": {"doc_hash": "beae4d03306dd8e1bbce94618beca233cfc8cc90ed7419426cecc147c13b87bd"}, "15301fe8-6386-4313-91c0-e0e3766c0da3": {"doc_hash": "b8e6ef916efc71059dab0083cd41c96e8100e6569fb06916567510e2103dfc11"}, "2ebf010e-dc5c-433a-b882-f8de385a9695": {"doc_hash": "35f22f2b13115b7d8bc5d03ff4ab23f91ff24bca641213fd3515b1d2d57026c1"}, "fb8b32ec-a884-4ff7-ad1c-3c204ee8d271": {"doc_hash": "7e0e05ed161f600c97816420449641af63e5bdf4e1ffa00f0e111b0caa1cb71a"}, "898989b8-ac70-44cb-af04-a0534985c99d": {"doc_hash": "ec6ef59f6735ccaa158a4d185243675f5c71bb1e268ff56023c356d63066733b"}, "9f1d1b55-585f-4e7c-805b-417f7053e529": {"doc_hash": "4d205325bd7c131b5edaaedbd53e6906b9715db0a70d01b122087df4e1982c83"}, "6023ebb6-0bf9-4356-a084-41a779f44df9": {"doc_hash": "2a7f70c236edaa9e4ffba05a039f8d21e0de6b8be9f2aafc3bb3ae12b40b4b24"}, "ca0f3a20-5daf-4428-bd50-e4d0d7b39da7": {"doc_hash": "98f6a2d2a9dcc1c675c9d0bf03aefc5cf92dcb3c40dec8c3a53e22880110c30b"}, "b0723038-4d6c-4c60-8233-06a87e2be3f7": {"doc_hash": "0dbd826cc6e37bb601fb80c05249ae8a05f55392a121c3bb77f5e26ddf1a1383"}, "d93dc380-6baf-4642-8c5f-edf54bcfbb9e": {"doc_hash": "d7d48c2df475be5e57c26cb32d4c4424a5570c8ede5de23e03eec137ee5dd73c"}, "19c5f721-61c6-4781-9e85-214a3a526f6b": {"doc_hash": "9f6c7c0e6ca2185f72738758470bb8af00d2de4a660978def0a4ef69257c68b7"}, "c818cace-def7-4dc6-ad58-3060cc7d4c45": {"doc_hash": "809a1ef974ae8c21e4daf808c00cb7a2e1cd74cef5e0764e3297a7141ba176c7"}, "cc889666-1378-4e6d-a13a-3ae3f87d846b": {"doc_hash": "53b834a14c099a881983b5dd847e6cd983576622761492243666197c38937836"}, "b84ab6df-93d7-4a4c-9d56-f89f29438f82": {"doc_hash": "9febc03a5cf3a2e73ba5f8e57b70b45b505587d3ce2674d5d8a7808a49d99a1c"}, "d0e98af0-b1ad-422b-b0ef-ac14dc99547b": {"doc_hash": "b7bd95a19f36d5ee54c0348d91e761e241aaed91b4314c8c37ec0e221011100e"}, "fa3bafa5-624d-45c2-950e-b6a22aaab9b4": {"doc_hash": "8ba28656a2a46bed2fe03ffe60f19837a42904ad09001d8e97bf232cc319b99a"}, "417c75c9-fba8-4430-9602-44342cda31ae": {"doc_hash": "e2d420936766142e6442cc7c540ebd3fc8c3c3f77964196aef794aaf85cfc92d"}, "5b996906-7614-46a6-97fe-c5c952f20a77": {"doc_hash": "b072073eeadf82477d4d33460a0993349665704491a8cc082acecf0554f279d8"}, "d96d28dc-bce7-40df-a39f-714cc7a2ce6d": {"doc_hash": "c8c12fb21db39554712c0e39ee69d18bed63c204d4602d97ff25e0b5f1a801d5"}, "f24e87a3-6a82-4e7c-8a31-9c7982f6019d": {"doc_hash": "c399804beff4201cbffb9b96d3eb992c136d22eabd970706513de73c66a9ccbf"}, "bdfd4d76-fbd4-48bc-9326-c29669419284": {"doc_hash": "e89f2752f37a9d007874231f98bb06c381067eb5c8a6e674ebb5c0687b9cf046"}, "83b5ff1f-0194-4c2c-a2fe-41d5047ff345": {"doc_hash": "5c18ee82369978b77da792d168bd3be565e7ec59e30fc03578782157f03479a5"}, "4328b76e-d908-4fd3-8862-7cd38b6179ba": {"doc_hash": "048cc057e095e5f2ef60a6504684c199178b261c3d21a5dd8803915b72119855"}, "2a0dc2c1-773e-46e4-a6b5-3e440d506e9d": {"doc_hash": "7fb0b4636653a39ac3b153398a4e157accd5dd934c80293b49b93efd8a422ca8"}, "6111774e-9a8e-4603-84b4-3cf77d512be8": {"doc_hash": "45cefb7001cef71cef3348b5e2b93d951a8e2c32f1ea4def41a03b7e4b328ace"}, "34a6c6a0-5c88-4b5e-9c40-4df866e76e71": {"doc_hash": "724a1bcc25dbd866528489b912f5201f7f23a3f2a109f0376cd2189539ef4ed0"}, "db4856d7-42df-4494-bb35-936cb19923bc": {"doc_hash": "6b13d8de7de1cd69ff6c90cac6e6093c4e222e45054f3deae69cd3e05b2cfdd9"}, "bf621a8b-ad3b-4370-8940-c3e63aa2fdc8": {"doc_hash": "621a3102d0d875388204b9c0f647da931c3cbdc9b283221eded4469335d11e1e"}, "0211de59-b806-4626-9915-f5dbac44700b": {"doc_hash": "666fa6f2da39e65d45c9b4c701dd344add4a8a069837b25e5bfba8f975b0175d"}, "29e7cba9-9fca-4377-8a45-4f6099e630b0": {"doc_hash": "f84c83837ca5605e1fc3c6f7e39288fba879c6ed6f1e7d58bf1de07421ed8217"}, "83811f45-c32f-49d4-be0b-a502316923d2": {"doc_hash": "2b7c24252354c3143bbd902c5bd9803408b7df42f8d94a7e66e0fc19879b0887"}, "e68eb8c6-67d3-4d36-b473-40c1c827e9b9": {"doc_hash": "2bdaf787d9ac3eb0cf262115ea0ccae3ee52e907c5dfa14e3b70f25f33c2c15b"}, "ab921b73-7166-4243-8f4b-9bc4b023ce5f": {"doc_hash": "961ae7e520ccb09d080427abfacf52c7957efdd50df284e178fa5b08f3445bea"}, "8f399fbb-0356-45c4-9217-614129e8cc11": {"doc_hash": "caabc5d49729d914cf48e46afc311310e4554c4df451afcf0c1ff55eca58f15b"}, "3cbc1128-e3a5-43fa-844b-e7f30ba467b7": {"doc_hash": "a19869de102257c9607dc8901a94973aa554b338ee42465b69a65f9523896f34"}, "af5de915-c5ea-4076-9b7c-d9784e7e281b": {"doc_hash": "adb5558518a6c6a231c1d74118d5bf423e7baf2c43921b87cbc213ee61debcba"}, "bed30783-b402-4f73-8b27-7e60c81ad72f": {"doc_hash": "3798bb22718fdcee31384f403cef5b5483f823a4b1fb5fb3d25a32150836cdb1"}, "a3c5d270-293d-499b-b14a-c5a7604f0369": {"doc_hash": "f1478c35500023b4b71f33b66c1567081760611fa79303e7fd35debd833ee9ed"}, "b984c275-9cb6-476e-8fd0-0f9ff585fa6e": {"doc_hash": "2af70417c06652e4a10adea29dd99ab99183df4b9832f14f000877639f4ee0b5"}, "19594150-639a-41eb-b717-e5cc5e35dcdf": {"doc_hash": "e54db4599f3f10d04b75219504cc10022f889c2b153bdfb08393947a197852d8"}, "28beace1-16bf-48cc-bea9-a883430446cc": {"doc_hash": "709e4fde5ce6d1bd1d71f0d802772a2243427a7f03994555547f7cbbead57c12"}, "ebc9e5e4-bdd5-44a1-b43b-e8aeaaae876f": {"doc_hash": "c06ecb33cd5dde4a0fdbd88dd12524fb708bdb958b89cd5121b614b389ef8f2a"}, "e31100c7-2806-4cf3-ad88-dd0e91938213": {"doc_hash": "e8664f6c8eea5bedb723a7c05620609e787118fca4aaf21461f0b4bee640acc9"}, "9a6fb848-f629-4481-92a0-f60bac8ce8a1": {"doc_hash": "bd3f77f69b3cc59e5b0caf56006d1f0c70700b0e9b884546f13fa26e90013069"}, "72e2c97c-4bea-4e04-93d2-712a0b7d6631": {"doc_hash": "bb0989f71c189367ec31038133fcff5d5be2e4b061dc85b324e298d1eb98b4ff"}, "12f281de-ac03-4b2f-bff8-27751028eb8c": {"doc_hash": "408d05348a93490430db89c61c2505debc9b73d893a77ec69ecd86cb3cd598d5"}, "83ba3d8f-2795-44cf-a792-0fcf42afaea6": {"doc_hash": "eec92dc59d760e1a974e2a140646d1ef144ff9786e6c07a457c563c5f54c2878"}, "508cba33-6de5-409b-90f7-c9e10acd8f57": {"doc_hash": "f55e59f7b58afe9862f2b0ceb05a68ea567733493c1bdc01ee6ab36bb8330802"}, "59f19983-7ae2-464c-9c1e-ed42c3cff673": {"doc_hash": "93269d5008e6ffd7af336421303bb6d4620664e03b212d9711064c8da4d178a2"}, "5f119514-cdb7-4a8d-8b7f-57a364619997": {"doc_hash": "7496b8c63aa09829d68df5e1ce5c9216cff190db483c06637f142262ea51e000"}, "156a65a4-7c85-4727-a3a8-b14021b9ce85": {"doc_hash": "0dd7437d7ca9fb60580295095a8dfeb1357de2ce8a623c20b94338337f5d0d51"}, "1ce65f78-e610-4d74-95e7-829b66fa3a82": {"doc_hash": "c05eae22947395b5d0faa85b322ed99fc1846614d4c6ba55e25c9aca253d0639"}, "f74b3de8-e050-4788-9930-f1cde21c66d6": {"doc_hash": "dfe68f44c218789621f9e6e6c25b7da531afdd619af143b85ebc7507788aa14b"}, "c68c559b-5281-4126-af5f-4314ad332645": {"doc_hash": "bb16b2fa117ce66ac37cfc4566d91fcd616b9f41ee6b34b754a7869c1727d1ab"}, "1e8ec85f-7cd1-44ce-9bbd-7ce0bac64d4f": {"doc_hash": "fa242ca03de9d7f3e020c2f58c4497b90b77891f8cf560adfde01ee1f994937b"}, "fa8181ff-e6ae-4c1e-8b52-0f05703ccfe0": {"doc_hash": "39ddba971732b60ea1a2b4b4f9ca1b0bbddad2c7e7d5e6c3ff09fc01a22cc896"}, "dd5b52e6-0fd8-4aec-99b8-aedb82b37b1e": {"doc_hash": "d47755f6079fa3a19ae2c9aac647fd5ab98a971751269c18388ec01d8dae50dc"}, "1bdb572a-b55f-4685-84be-0c276145f10b": {"doc_hash": "208ecdf3e9ab2a3a42ceb1f65934229e9b604d796e6230925846278bdaaea67a"}, "62088ca8-07ef-4860-b230-5e330f7a70c6": {"doc_hash": "f64ef0e56072f1082dec9eeea11cbbda4530eff53dff39729c36cb0eb96cbbd1"}, "00f964b1-ee51-4d18-8b1c-164c99dbe4f6": {"doc_hash": "6b023e2defa8ddbd6e3ce3f9b1e191856f64a384df0745404ba022a6550748ab"}, "fcb53cf6-3bc8-4d1b-a35b-14c51afe1fa8": {"doc_hash": "0c2620e406e95e61c4fee094ade3d56c476356f3d87976153adf2c48c9d50868"}, "cf80ad43-189d-4ca2-9423-44cea057f933": {"doc_hash": "5415a8936d1afa89beebb76a9b281ec31be83e7a8e5f1f637cf28ea1cf60493a"}, "11aaa8b3-0062-4462-97e7-abfd917bc170": {"doc_hash": "0a5645de0e66c024493c33d2a90d53e164eb18cab38a8b8269f8bb603153e4ec"}, "4c334a0a-6779-4c37-9f3f-981612dd5506": {"doc_hash": "64bd66102bf6eadfbcaf5b6b14bf0911a26ddf2bf0e7ba995ed78a45bff129ab"}, "8e81ca0a-bfdc-4b3f-b716-75ad9900bfce": {"doc_hash": "032591b86f29c952b22e3b0540fd84e1e6872dff830dc98008b577b99d1f87b3"}, "67e247a1-e6a7-4920-8ab9-1053ea049662": {"doc_hash": "1d1458b801c0f97f4eb4a4da42ea2023f3fa3b3bd4cca45b96f1b94ee551bcf7"}, "55113dc6-7ed3-43e1-a244-275477d952dd": {"doc_hash": "1d558c154eed0b5d65656b5acc198fc8ddb8bc69a267564fa5b88324e7b76425"}, "60648308-46db-46b7-998f-d12629a6a39b": {"doc_hash": "f0ccaf8fa744167d51d5bc0cd317d7596b8ae1f28c4b6d94f22139fd4b4a1dad"}, "f1053373-eca2-4aca-8dab-582726698803": {"doc_hash": "d4487a13910251686ec546ff6145b23f8ea60f33a11e3606b088146a73ece234"}, "d7750eb9-1116-4a24-910f-031b11a5dd19": {"doc_hash": "21c1e84cb876b54d0ce84c6d7c890066144482b4aae2f424bf40f5003043c36b"}, "9bf2bf4d-57ab-480b-8ad4-db7f0ea89218": {"doc_hash": "e1c906fa330729cbb2dc84a4e2ee73cee07ade1a4ef73735c96eb83a253efe3b"}, "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7": {"doc_hash": "b38bcd69ec30c058739e6f7921f93917a9bf6a9ade4d18c6b6e8af49050c1ec0"}, "eebeee3f-45fd-4594-bd3e-17a000d55153": {"doc_hash": "3605a1c3d1e79b1001c0856ffae914ef65e90d6f5c08e67a4f4cdc13e8169e7f"}, "59ef877b-7477-4724-aa2b-2f046742617f": {"doc_hash": "1927387dad45e56304016b34eb032e038f23590e03c37131870d7ab266420429"}, "3dede866-7084-459a-958f-af077d8891f2": {"doc_hash": "cbef0f0b9e718ba56391b802f894b2ffd1d45ee5e91299aa76d44c49e1247728"}, "915e33cb-caef-4157-bb5d-0d063abe139f": {"doc_hash": "2376bbba118d63d9692714341fd1d140e846b96059777de9e424f7ebcf47d922"}, "1582a79f-62c7-4e66-bafb-b776837a288f": {"doc_hash": "87be9fd599effb472c6cee08aa89a7b26969c3c93aa84af0e89cfd289ec1435f"}, "efc3d9d0-45a2-4528-8f39-1826c98b6800": {"doc_hash": "de3559973456c0889a76b5dd1b561ea26b8fd96e16c66791b157c26f8bdc8bd6"}, "f4203622-bd7f-44ac-bbf5-620addc160ab": {"doc_hash": "fed3cafd7ae8cc1e481bc1be0735ddb154e1e7d8ba217b724bc6b6fe69e5c9f7"}, "4a1764fd-db95-49cb-af19-37a28c32cb03": {"doc_hash": "1c46c9239d9cea5fea26edfbb93638725515fd6173682fc4a4e2311f15eb5d4f"}, "38237853-26ff-4466-a131-3d3202dabb3e": {"doc_hash": "14298b9c3a692a85c68beb8f7bcea0e68db640c7932b15f1d9a0a8708d13d30d"}, "d88cafe9-2ffc-43ee-a55b-11152e2dd684": {"doc_hash": "171d4b2888b686f6729622ea8415a4706511e10c51854218b890aba655597986"}, "874d48fb-ac08-43fd-aea4-07c9498e6bca": {"doc_hash": "054d0c0a191ff926f91c40faa3a45959915b9c5132d932b5599e538255dfb717"}, "7ea3cb17-46f7-4e1e-8bc4-39eef0c4a76f": {"doc_hash": "d1ff962b518f03feec27e8cae90776c6581d4809dfe98e0a590c117cf1559475"}, "b950066f-e175-453c-9307-12f7f4957de1": {"doc_hash": "f59582097faf8a927c1f64a2e52204c5ceec0802684992e49bcd6490631dd8e5"}, "1ab9ace6-f28b-45be-bf3c-ad69b9f23c6f": {"doc_hash": "19edc1a52fe4c5983f36b19e5428aca8af8d99a96b438a1b3d4dd4249cb85e40"}, "1f73cf19-45e9-4454-b920-6ee849dee333": {"doc_hash": "7a2e125bd4ba43d0912eb4580f5aac205e90fb145f4ca66a1e61f41aaf5deb8a"}, "e48ca6d4-11cc-4818-92fd-b1fd4c422dd9": {"doc_hash": "000cf06e0524d9ac1f081c1320150495a90617774165635d9b2b35267c34823d"}, "68093135-cfb8-4f5d-b07a-e12794d36145": {"doc_hash": "13e22cb81f614cc8f3184f1951431b2b20be158f06b087b6c3d4092fe0128e66"}, "150a5700-15b4-43d5-b1ab-15ac377fb379": {"doc_hash": "24315bb6643a02eadf4c995522fa2a951d588b0cbb871b126b5b9be9cbf2ca5f"}, "44fc390f-39bf-4da3-9de9-bda7973b9e54": {"doc_hash": "ddb373a736275e38536d1447790c30db36724c4389884ec4b404821b0951ef62"}, "07fd7e5d-4fcf-4e36-b6cc-ff8af2311d14": {"doc_hash": "3ad308296ff3b4d5e2086f110111ceb25ecb03dc932d90d645c80ce9f7054619"}, "fc5ad508-75b0-46d3-a66d-cc9c40fd6e1e": {"doc_hash": "e9a3bd137c094a4bca453b3916dc6d47010453c4e5101010562fa736694a749a"}, "c184e4e5-56aa-4d5d-8e9e-a93de196c28c": {"doc_hash": "b88c06717879209e6a8aa842eb876c5744db75e0136331edfc10998960aba62a"}, "a622be9a-1681-4931-9334-9d0733067e4d": {"doc_hash": "3004b32bb6dfaacf7487df57ac71cf73cd09bdb0f7e021042a0ec3e6feb37d8b"}, "891d2b25-c901-4c0f-b9f5-136922fbce65": {"doc_hash": "269973beb075a5fd1b4e6d672d5810181e19a9c834ac8959782496604935af63"}, "e35d356b-c366-4902-a444-65115763451a": {"doc_hash": "7eb3bfb278be7db68cfbadfc17abc55e0126fdb53b4522cc8555c458b980e717"}, "4452d168-e485-470a-9d20-73365a394242": {"doc_hash": "ffd3f2841cd7f3c354c2bf1f156d76266b466ef2e364dd89978ad68a71a761b5"}, "6eb27494-bfbf-4edf-8657-15d3b1aa2333": {"doc_hash": "16e748280f59e75dd065cf675247ea63daf70d151dda89deaf999a19c12acaa0"}, "b43720bc-5924-48e5-aae1-9d41790dcb4d": {"doc_hash": "c63c59bfae6b41d4ebfd97b47dd3cb019581951db86cf32bd6625786b3f24be3"}, "4399bea1-532b-4c88-ac59-b79e0e65b6fb": {"doc_hash": "04d6349e04647e3571866c92abcd12576fd64a5ad88943b986eb6706e6e66ad5"}, "e0e7eb8d-0161-4052-b785-acea76242652": {"doc_hash": "85ac1fa277bfe671b405a47e771bf3d17c3ff49c655560c1b7e916e266a5a618"}, "6bd96b1e-94f4-41fa-8131-fdf17a4abb97": {"doc_hash": "447feacc3edcfae916671cdfbc665b4607b545d92c546a26bfddb7ef0d2f9dac"}, "be1535d8-3079-41bd-b62f-de8cf1cb176e": {"doc_hash": "bbb82f21a2d7e783bb70f9b16bb944f6dc8bb734d4bd87622cea7681057b2e96"}, "62864485-f80f-40fc-855f-9760b57f77f9": {"doc_hash": "207017dc30a6a1e10dbb1edb650491d8cce9057cfb06ace83c6b2932299fb3be"}, "78d3748a-bb2b-4c51-92c6-f7a0b3e66ab0": {"doc_hash": "d702412b3454d82c3d94ec17417576aa147b9586ca9728aa5357180ac035fc1f"}, "1a7ced0e-fe07-40c6-ba3d-f61c1fabb512": {"doc_hash": "8d8ac3d808b6329dea08c442d2291c08f2e8cbb620f8fa0d6c2fd266f6edd93f"}, "c6bc5174-1419-487f-bdb2-7ae0620207ee": {"doc_hash": "1fddaeb05032680ad22f04eb575c8f2159d9f2ecb669f610318ad8c51f56e5d0"}, "5557e1c6-7541-4a55-b67b-19dd4e388091": {"doc_hash": "bdd6fec8f85b260048447ca3327313b924900fd49d865da900c91159fa18c63c"}, "accd31e4-d7ee-4f87-8409-067c84ec0474": {"doc_hash": "fca89bbbb31a97fa3adf9cc993652caf69278296762b3707256fe86f30ccd3d8"}, "e9722366-3ff3-4ff3-8017-521ce85d8c8d": {"doc_hash": "69f2f1f7a49bb0fb2834f987188e007ef990df796a1e1fba667edb9da0974d51"}, "147092c1-1102-4b9e-a42b-f51f2553c1d8": {"doc_hash": "94d2a88e3aea34120bb25f8c3684bb80ec8a915f1e30710f8f5e87ff8bed67e9"}, "574ff711-e261-4047-aa3d-1f1b7a68fbcb": {"doc_hash": "99a6bf2da62cc7218ac6a5d030464fd8dc38c0dc828e7b7f881aa6fa926658d6"}, "2e3949b0-fedb-4f2f-896d-535dcd2954d3": {"doc_hash": "9295cca88ac2eb8c7c004ecff682375cdf8820ede1bef5528f9cb93f8f0f2d37"}, "ea19df4d-7808-460c-a1b0-58255df16051": {"doc_hash": "e842a32896c0826b9100b718c0e66ca05ff90b00d8d69f1e43d958b3ded6996c"}, "2dfd8e3b-bbed-4587-a172-9c2ca1b1ff39": {"doc_hash": "cc0acb15c195200f297c3abdf521f43f7cdfb0df586860e65c26c0c1d9d5772a"}, "fc9a5387-f75d-4432-a0de-550e357c130d": {"doc_hash": "052ae9a118e3c2662fbcad52d5257a62975b9cf18f8187c6785c806d9fac22fa"}, "cb8bccb1-e9c1-4b13-a02a-16e17a700a13": {"doc_hash": "5646e5f9aecac5f4cc0371dad7f82cd1db0c2628258fb763642ecaa2aee6c8b5"}, "6c47fe64-e54d-485f-9ace-85ce5eef8338": {"doc_hash": "aaafeabdec79dec6e8c38199b92c56747fe6bfce4ea0a1a440bae50a21520c58"}, "0561e07b-94c2-4d9d-93cc-068a71b47def": {"doc_hash": "6b77cbfcc7bb847c928ec2ac1913f2ea6e59c62587b29da91e93660363145861"}, "f880dc81-23b5-40f1-9806-3d7c8b25a629": {"doc_hash": "6ea1f8f8d9a59ab93e3c76f754a07a0c1d619462bfc7465a8a30ae1bd3953823"}, "409aa88e-fc1d-4573-baba-324998416f6c": {"doc_hash": "131b8ddd0ce68861906e48026017ca55386e4d3ebd107a36b38ebbe5b88cc0a4"}, "ac34d774-ae06-4fea-9801-61b0f03b1591": {"doc_hash": "7197c573c096df3ddc70fcc55579f163829a65940ce6d25c18582dfa52030c97"}, "8d3a90ab-56a9-4a75-a7d1-e26a16e82733": {"doc_hash": "a0ec562f42a1b12b387e68b67a1d805f77cf9bee1afa6766fe634abc84172cfe"}, "b7882349-5a1c-4951-a560-9c7246465a58": {"doc_hash": "7174d14307010758c96b444453274895eb0a4a4b38580b30b82a171c726234ec"}, "86c2b3ca-6b7f-410b-8b6d-d94cf84e08fe": {"doc_hash": "c5c6f1d07aedf6f9cda8c4bed62bef88744ce3908de14dd51ad5712f0cdf4796"}, "2a64dbab-bf37-4e88-930c-1c5af7428671": {"doc_hash": "049e34cc33fe7d81a71a6f6bfb90308095c6788bd001a5f0ee0aa3e7d07f881c"}, "3e502692-cc6f-4181-a94a-ad189d3b43bd": {"doc_hash": "fb1e34bf1b76cead6b170cfd3eded85839f8b6fa6cb8992e8d8c4d3d62ce1381"}, "ba27e2d7-2469-4a2a-8207-20fc6c89bbaa": {"doc_hash": "58d50f784fa14d760e9440430ab54f124f5deaa46e671b00086a46ef1ffaf2f3"}, "67902284-c4a8-4cf2-b476-ec49863010b5": {"doc_hash": "f2cf4bb9b58e3883411f55128e37de55bfa669a64d1223d095238e33f8513f87"}, "1f592df9-186f-4b87-a6f7-d970dfa8c635": {"doc_hash": "5f90ec042e7c479783e8d151e2b10e8844a96d0198d7e57b5930c690267f47bd"}, "6e9d6a07-7572-4f16-b9d8-dca652765dd5": {"doc_hash": "3ce56431ea154d3e4034515fc22feb02056aede0f512f15192b811f917d41c23"}, "dd1e0eec-1ab7-45b0-903e-316d2f8a355b": {"doc_hash": "ced9ba8924600cbeb7e9b981e863c0bbcb59357e589ad4d96a37fbf336484156"}, "d10a97b7-8dac-438d-a4b3-03d58e79c0d1": {"doc_hash": "c58fbd2491fea6492066f9cd5452d23c4dfe907ede13832441ad87e4cd30c3e2"}, "f2f91975-ca4a-4682-a092-1a0e65182983": {"doc_hash": "04cdd7eff2f7c0ea82b4255d594c1867e774235bcb9e435d4f19efcb3dadb44e"}, "975f9793-5e62-4f9e-8e18-21bbccc33dd1": {"doc_hash": "a3f011b19b0c4efa2be160e2103f8cc4bde1340a4d30b29bd129f02654ac7a5c"}, "5416b827-38f8-4ee9-8b6c-78dad7c7ea58": {"doc_hash": "4b826aef7ca91d43172a28166e90c9d09230f676f032a983b4929fa791ef9719"}, "e361eb00-babf-4ef3-9034-0d96beaf0455": {"doc_hash": "daaa8dd97404b0260bfc35871bc978c52e9639f11054041ccee6565174aa9632"}, "8f4576b7-b6f4-4d1f-ac86-51c435918639": {"doc_hash": "17802cf28ba2d52acbd4c8d636f09c206199c723fe5c4e7399893427c0e057ae"}, "6de26390-981c-409b-90a9-869f983eae6e": {"doc_hash": "197cb82e0b3a8c7566b7f17c4392bfce5272777a55929bb5fb6d7c466b53884e"}, "90995119-baf6-46b4-b74b-53aac89f5727": {"doc_hash": "c930348d29c91f631779df0ec817f826dd1ce111927e3d906e54d9239c71aed9"}, "b6210497-2f1c-4937-941e-d233ac9cb99b": {"doc_hash": "70d119ae99436a010e554f034fdfa769699a993d1c6f8bd5adc58fe11f268648"}, "2292d7c7-9f03-4733-bb99-10c656670b57": {"doc_hash": "05455e292b727bf87c528e4989d8dde219aeaf16a9c2a2e8443b4b78c997cc62"}, "12a3f7c5-f6f5-46c2-a23a-a898dcc9ae13": {"doc_hash": "99ffb6ce71cb6c3020705ee0b68a6f9af4ee6dea0ea3e210dbdcf18303cf4012"}, "7e175dff-e596-476f-8743-f62dff600981": {"doc_hash": "1b01f796b237c8ddbd02231798191d52e73b1deb4e398e8bdc3ebd4949788399"}, "736e71ca-4b0f-415b-a941-4b26a226c3e4": {"doc_hash": "3586e15116bf8a80b364d1ee60566b9c70636586c00a8b1e7a5525ab4b9936c3"}, "edd8efdf-c492-449b-b9f5-b99f6cbf0687": {"doc_hash": "f7dbf3fd0f9aee3eab7e5817dd2c0c425f23deb6912b15ab33974c6d8f77fe97"}, "d8ba98d3-0bf7-4449-b74e-9681ca396477": {"doc_hash": "3ea2248bb5ec6eadde47d6372968aba0bfe0196dc7cc53a7f163888fb3d6f39e"}, "b329e402-438a-405d-8cfe-030d66389563": {"doc_hash": "73a18b2c83fa866fd7ae2f23150de01a525560a2ceac09cd3dacc9380cf39749"}, "03028a81-8c63-42f1-ab7d-d3cfdf35c467": {"doc_hash": "8ebce336a0e2d7f9045abe28f72243bf7a7d81e8b69ad425a776440e4b5cbbfa"}, "200b0fd5-3144-46c4-9d6b-e62b180ecc09": {"doc_hash": "74f581775d73fb198c4062cb41dc065b34f0b67071c0130b3fdee327a27720a7"}, "d8c83223-fda2-4684-bea8-94fb5ad215e5": {"doc_hash": "ad4e621f10a7420fe9fb6cc361b183ad4d08a55b0e113b50699672dbbf93d00d"}, "7378ece4-4537-421e-8ea9-7ad438a974a5": {"doc_hash": "890c06556f6440425d72daf59ee6bbb2f4d06336645fcfd216eb01a1cff1d3fa"}, "f3555700-a627-48a8-92a9-fe6338d5cc37": {"doc_hash": "961f9217bb2add5e3735fb993b303a8a8fe489e23f5eb6ec48993aa96619885e"}, "7df9d401-efd6-4633-8054-28ce4c214530": {"doc_hash": "a3fef702b2dd97c816f6f2f27d286e9ec46acb98004b97fdaf90f601b6b5c220"}, "27da9991-9fab-4a52-af6b-e20f01adc03a": {"doc_hash": "1e0b37f59cd45fe9da6c19f05026685dfb4f464deb4549eb0179a3ce385fb9e8"}, "a1945505-0017-48ce-9133-24b19a7d87bf": {"doc_hash": "62c22e3f7e40fb251757cd788b5151337e27c3b00ba8a9cb2ba68c8b0124a5cb"}, "920dbf0c-f117-4977-a88e-00eec0734149": {"doc_hash": "dbbe724e92d1b354cd20fb84e488b08ff2e01a46deee3ac29017575e960a7918"}, "28809ff8-de50-4bba-9cb5-fa048426548c": {"doc_hash": "ff832afce32504a2279a1f6900758826f86ca20cc0e67e615fe6cd74f90a4e05"}, "2a506cf2-d292-4110-821c-285c3d79d639": {"doc_hash": "f28ff9737392cc7f53f8bbcc23f3c0355f5ec1fb6a53de61abc588ec300c31b1"}, "0ed2e100-9d04-48c4-a012-17e692ad436a": {"doc_hash": "5b148d9ccb0473b289575ff7d2362fefbf52a2cc6ffe737aefe3030d91bbfdac"}, "19eb6f9b-82ab-48ef-926f-391b4675346f": {"doc_hash": "b1a38c54db096266b9d48fe058f6365eff6b8607dcbfe0e4f75c8755c4a5094f"}, "d6f6f3de-085a-442d-915d-6c6000de634f": {"doc_hash": "f25ce9813be184800884f751ec0a43904e4623dc743fb5744c69be5a38b79765"}, "1359f785-6658-4190-8f1e-65c99970d2d0": {"doc_hash": "c43dcb48b1a977d4f020af142ee91b95e3cff0d8a0f472a662b7f83f43a1355b"}, "84f11eb6-7b86-4125-9b98-6254d8723728": {"doc_hash": "df09399187eced18659bead94c6fa1ab94af07acf8c8e4bb6414c7ac9f20b12f"}, "414acc17-1d10-475c-848f-a10772677fff": {"doc_hash": "e1f7b0b30f52426244d185b61830d030ab4fd84a879b0516a5d98d14bb5d8a3e"}, "6d847e74-8787-43ad-ac99-1a40c37a848a": {"doc_hash": "9a00c82a7d9b45c9a5ab83f0062b051dc8f7f1a6d14eca63ad737a449507132c"}, "89eda177-32ab-4c5c-a7b0-6bd1b1bd58cf": {"doc_hash": "c7523b7268c35f6b7e9b200dcd9eb1aaa10e181867789cf32ec09ddc32ad65ac"}, "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308": {"doc_hash": "056fa8cd0f950792932a49441039288b563f5f56bcc6c07477de4119187abf15"}, "620fdaf3-830f-4006-83f2-f79032e7e800": {"doc_hash": "19c44155b0af2bd3bdf9cc4da6ff9ce48fc2c120c0aa462e34650f275f92ec9d"}, "05474b19-ca98-49f3-a807-390df07c59f0": {"doc_hash": "58d48e9bcc934706d0ccb7daf3063f1620644accea02297116faefda25e03721"}, "14a62fd7-2527-400d-94be-60f8ffc01073": {"doc_hash": "a4e0cf485c6b618bbe1c319147ec75bcc75f01ad8f2a63a0a0886ab9b7e9484e"}, "0b1e602b-ffc7-4d75-aaab-1881cc5ac04b": {"doc_hash": "97f4f77925c826d00941f75d2c68c082985dd836c1a1c21d865279b5b4e5906b"}, "88ac1b33-2ed0-4e25-b5a7-ef6887effc48": {"doc_hash": "628a25fb7049bf7f5520aab25068d1cf4ec6c4d30b1064063a4db5c0d26d01a1"}, "5e31968c-e386-450c-bc59-d0d811c3c66b": {"doc_hash": "5871be289336a5aa8e26a964b577c7c7045dc82b8c832b5b46fe6ec655cf0386"}, "4acc118a-d80d-4c09-aab6-0d33452bd8a5": {"doc_hash": "d7f13c49e388a69522158a839edd5641f3716af2b9d0cb9451b51524cca3d4fb"}, "370aac71-32c2-4283-abe2-814b3d8b1b5c": {"doc_hash": "2dc087750a8cee81d707100449331a5c18524e76113e8e9373387bc794066c8f"}, "a212f221-e681-4355-8f0c-76e557428cf7": {"doc_hash": "c3fcf631b77e5a068afaf35899f2b9a9456d8e06e6de3374fadfdb8c8f19f2bc"}, "1186821f-f81f-4c9d-8b00-5ff6ad45c011": {"doc_hash": "16c89af7c164e070aaa2e4616efbd77ad0b326173b471146155a5c362d98481c"}, "064f80ed-a48a-4a53-a62e-e1de4263dcd6": {"doc_hash": "85691de6895310881d2d26f6ff344fa8e9670096e16a9b0bd0cae743091909cc"}, "c5f8e92b-a165-414f-9bbe-25b84f289775": {"doc_hash": "df36bd40e84dd073d3a0488615f74c2bcc73940c2a0d8475ed6798e180607fdc"}, "c01975cd-e1e5-4eb6-8ba8-076a82dc074d": {"doc_hash": "bedc789cb1fd922662db0dadaf9a6f95eecaa08d1e4d085823831703759a3800"}, "a75e252e-6a04-4548-99f3-59a4863569b4": {"doc_hash": "1cc2dab981bb88b72b1972965ebe8efc5de3bd7c09bf862d3347b620fae21ade"}, "1c59258e-4be3-45f6-b639-b9198cb1f53c": {"doc_hash": "e75d590fd225401170b709b7f87f377c88d17da8bb02295a896d95d30ad292a4"}, "82b4a723-f318-476c-becf-be7bef443acb": {"doc_hash": "6d9f1a08b727a4f6552190f4db9ea38b255a4d419f288d8cfc16b72359b8fc02"}, "0104b44b-beaa-4ba3-be23-c1e8a09b984a": {"doc_hash": "18ca3e32710efbf742d043b546a13259d8efb85d50e02e2089e1e313ba5f2bc9"}, "73dd1a9e-37d6-4fa8-9fa8-dc79376650d4": {"doc_hash": "3a54da0435ebe4cf8b3d0d14c4a14cbccbfb8f3256e43151f3a87f223496c15c"}, "5853a3f4-2020-4b86-a024-efd6f24d1a0a": {"doc_hash": "88d84e9934ca679dc388a6d7194984e408cad8e88521a191021fab0a46bc4cb9"}, "fa6f6982-ee30-43fd-bb83-064aa77ac2de": {"doc_hash": "82add6eb371262b0de38e50738215090141c5479055b8c7b88769ba3ea256118"}, "010d9b9f-2fef-4ce2-8aa4-c1b58460855c": {"doc_hash": "3a3190ada578fa8fa2a4c3c1011fa01a62f5241765b62ef1dd9c69b76d0bc07b"}, "1a21a141-68f0-46db-ac77-b27f23d03e6d": {"doc_hash": "a95ca13a2aa7c2d7d137b876e8fb8e2c77bb1fb9847b886a03424314732f2e10", "ref_doc_id": "b44f345e-021e-452d-8444-5c02929d5ee2"}, "5e0d633d-f3a6-4966-bf4c-2e615c166ddc": {"doc_hash": "d950f3c4d44b336fa1928d42e9937e28fa00b2c41d4b5f71778ba7e5bfe0ee95", "ref_doc_id": "b1de3bc9-eeb0-44b8-9c16-b001f4eb71e1"}, "c6a16fd7-55af-4039-a8b5-95419276a05e": {"doc_hash": "211af800bc52980c9b44f5a86b496f277a4f75a6c809addd2bfa3361d51c0276", "ref_doc_id": "b1de3bc9-eeb0-44b8-9c16-b001f4eb71e1"}, "5206be4b-9410-4269-8437-546c0744b527": {"doc_hash": "d56aecbc9fd03e656abb699872cd1c4463235e7e7705bbdf016e4d3d8a434505", "ref_doc_id": "d634c371-9de9-41ed-a611-2caa4dc0fbf0"}, "34c6c8f6-1a5f-4301-b166-683080b318d8": {"doc_hash": "666d17c897954b04543e79c6f1d3be8db1d24b73e2c61b3a4903ce6bf2b24c5f", "ref_doc_id": "b9da05a9-ce03-4b35-b03f-7091be90a627"}, "54bb733b-b229-4380-8c75-636c6d338ad4": {"doc_hash": "eb8cffc84a9ef6e08c6df372b517010e630268e1b8f8a896f1960e20bc656206", "ref_doc_id": "b9da05a9-ce03-4b35-b03f-7091be90a627"}, "9e0cd98d-8c9c-4ff5-830e-b23abbd98f8a": {"doc_hash": "cbb2f5a59635a10431845271d2d40613659406fcd8775a3bf8f6f9f74fd12b06", "ref_doc_id": "ba9116ca-8808-4a88-89dd-76c797b5dae4"}, "f032c2f2-a356-4b44-90b0-155a7fd9ec67": {"doc_hash": "f3891d1377de56929b69f7692cbf6750d91cb5e8db1f45b33fb55794aeca17cf", "ref_doc_id": "3efefea7-6951-4863-9485-08186ee7f3bd"}, "33fc5ccd-23bd-486b-a287-fd11e09328e7": {"doc_hash": "ad68a4d8a1a468263e5120d9ec7e7e7921ac012196979ccc8edb35b6f48a544f", "ref_doc_id": "704ea28c-6a22-4a19-87bf-eec34b5c2ea8"}, "db08b862-d231-4396-8418-5c650e9d7804": {"doc_hash": "810e441210b3d9981e816368431acb323c9043b754bc4ce2871af45e492c5fed", "ref_doc_id": "704ea28c-6a22-4a19-87bf-eec34b5c2ea8"}, "5ff17540-6f07-465b-923c-b3bc8f3601a7": {"doc_hash": "1a84407e1ac61feb0879a832cde81a8fbb938cce06122efee33e7bbad4754620", "ref_doc_id": "e44f53a6-8d0a-4503-97ce-601bbe725bf1"}, "41b32821-b308-4931-8166-37810e9ca9c6": {"doc_hash": "c3252331e73a86c77b6defd2044e7fc52c4b13796342041df65e6e59bb92cd42", "ref_doc_id": "d1704578-3270-4f71-9154-5cc972b76587"}, "e35ca365-71e3-482d-8a83-e39016535016": {"doc_hash": "b7d2c9bfb60eb22eecba64773a6d4c642cbc39d8b407f9055e92d3c7a8672539", "ref_doc_id": "d1704578-3270-4f71-9154-5cc972b76587"}, "97a0a33c-738f-4bbe-a1e7-0cf34f51defc": {"doc_hash": "c6d3a80f1f976eb0f0ee0f7b4e257509ef7b2861fb4dfa5cafcb3a41e4167ac7", "ref_doc_id": "221043d2-f195-4081-bb2b-7dbc1604164b"}, "647a73c0-48e6-4a45-a7b0-a37002f0c4e3": {"doc_hash": "f8a887bb7c2127157983166345a0f0fcd75d68b7823ade94cead94e9f8612c51", "ref_doc_id": "c848e26b-2ccc-4683-953d-e6a371591e7a"}, "bd05519c-4c0d-402e-96c6-6be8565c5c37": {"doc_hash": "bbbd33b79b46743a1e7f183353a196a107318ec42d38ff2d30577b20d37df358", "ref_doc_id": "d1e0e105-dcc1-44b6-9e40-9add6a966224"}, "ee2cfff8-ce87-4ae1-bc04-6882b2a49116": {"doc_hash": "a167a01a2e81e2c98c566754695b68c74e785bcea00f8655e00c01533410ab5a", "ref_doc_id": "0285f772-127d-4af1-9e1f-925450f84adb"}, "321d9bfd-924e-4ff5-8e6e-ff917b6ff7f1": {"doc_hash": "ae517480471b79234aceca692837ef038e433f4a8f6cba38a7c3c6f956f85095", "ref_doc_id": "26b8973f-9867-488a-916a-6c9e21fde866"}, "1b3ce2e2-2ba8-4d78-abbb-a4f19fa7b311": {"doc_hash": "f1b3e5408e921cbbfaee2961d41aa2ce6136aa6cff4d332649315b2e773f46a0", "ref_doc_id": "26b8973f-9867-488a-916a-6c9e21fde866"}, "6da18a34-4c28-4491-8722-7d0a461267f1": {"doc_hash": "c22417fa4df88d369ff247b3dc2aca03a24092271e4c4d21bfc2168fbebf79b8", "ref_doc_id": "2fcc3f90-a161-44de-ab59-f63cbacad9d9"}, "83526869-c9bd-4270-9782-79374a3de2d6": {"doc_hash": "4c295601e9c220fb5bc6edf3a35a84cf87403f3df07bfd2dbeea85572141b904", "ref_doc_id": "5f6bc4f8-d211-41de-8921-dcdd1351cfe8"}, "7fa8cfe2-c3d6-4d61-8c8d-f1e09946e930": {"doc_hash": "06dbb27853c5c3b288963427e0257753ee8dadf518898c31df59aaf243b9f9ef", "ref_doc_id": "a6fc214f-d4dc-4b5a-8e50-63892c4cfaa1"}, "f8c0009e-47a2-4aa1-b3d1-a7b573a5a6f2": {"doc_hash": "63b96cdda878ce6ef24a590eb7f209a7581ca2ba6e3b8c9ce63d88e96cf1d430", "ref_doc_id": "a6fc214f-d4dc-4b5a-8e50-63892c4cfaa1"}, "cb5d5214-9c8a-45c6-b632-d04a288a74f1": {"doc_hash": "a1d901b196e16a65a3d88df7bcf0ccfc15d094a2ee0fb76ccd87eec282513518", "ref_doc_id": "33aa3fdb-97b0-47e7-96c2-a817471a5939"}, "40013129-77f7-47b9-9d1d-1c0a810a63c1": {"doc_hash": "861f35173ef36dba335faf4d3b71dc6686028bddf70b0faa06e495ba91c7c192", "ref_doc_id": "7b69e3d3-a4f7-4fff-b169-9400b8da2684"}, "b38bbce8-8b11-4fc9-bf2f-471732894291": {"doc_hash": "258bea22d289f838a37fb75375b7d703b114de82f5e30f74ecc9b8efa8d8497a", "ref_doc_id": "7b69e3d3-a4f7-4fff-b169-9400b8da2684"}, "3f1e1cbd-5cb8-41dd-bfda-bacefce7a1fe": {"doc_hash": "ed7256ba1bb276afb5e8f579b10b2f48b4ceba325d858cf4e57e23105454c7d7", "ref_doc_id": "e4fdb07d-5203-487b-acd2-5b1749323a22"}, "7587357e-3542-4693-87bf-c830216f5a5c": {"doc_hash": "7eea009b83dbf0d3b76fa6769dafffb558339d3fb49c2abf71089041d2e478ca", "ref_doc_id": "fa8c4556-86a5-462e-a972-1bcf5ec3ea3f"}, "6f3be005-e7c9-416f-bb3e-7aa89bdb1df2": {"doc_hash": "375a6defe465098f316f2d39e273aa708205e27f9e9933f1079f24743c99c0be", "ref_doc_id": "a3eca64f-d25e-4720-b8c0-bb2d6af3e968"}, "fb3dab49-7e8b-48bb-b2be-fef77ec22d67": {"doc_hash": "a77012b07980905357507c838fea92f245667c2e0006165b6030255d33655ceb", "ref_doc_id": "f0fb8f60-5fb3-4ae8-8671-13b3671b78bf"}, "55a71b8c-5c72-41b9-8401-76fc72c04286": {"doc_hash": "4d3c448fa41d7c6791629eb1e7bede2998377333821738c25283c6a2eac222af", "ref_doc_id": "1cee749a-c8a5-4428-b0be-60d7d365c9eb"}, "dfbb1e1c-50f8-4c4d-ae14-2bc62f055edb": {"doc_hash": "8243ea1378f45036a90ea4e40cfaa776f79d63ea6d530a882ac7c9b2f8188388", "ref_doc_id": "1cee749a-c8a5-4428-b0be-60d7d365c9eb"}, "d6b10dff-13ff-4d99-9685-36411b55f367": {"doc_hash": "445dffa5e3f7e5bc10c5187d731ca2696762b279aab0e5cde993c372d8ee0611", "ref_doc_id": "4f1d28bd-ed57-4d51-a427-a2f0b70c978a"}, "2933616c-bc90-4053-8ed2-961aaafaeb39": {"doc_hash": "f4f013b3356195f02d7e4e5ca05d0debdeb2850660431d6444474d92b88da26f", "ref_doc_id": "4f1d28bd-ed57-4d51-a427-a2f0b70c978a"}, "cb8e75ad-2c82-4c93-9b9d-6163d530b2d4": {"doc_hash": "2f6ace30d32d7d01f8c833f8e2a79ec1f6d6431cd02a1a9caf23ce32b1dfff6f", "ref_doc_id": "8167a2dd-9bd4-40e6-8696-271a354d943c"}, "149a46c5-0b70-4a8d-b42c-b20d486fad13": {"doc_hash": "4867de0bab7191780681d8f99ca8dc13f371c58f1afd7e8f8fb2563e100dc4da", "ref_doc_id": "d18791fe-f37c-4a1e-8772-ca72ca822868"}, "f7fac754-8196-4312-8501-f304b96c3e22": {"doc_hash": "0578ee745aa417982d28d45cefedd069ebdd9febd968b6f9d9bff8241a871590", "ref_doc_id": "d18791fe-f37c-4a1e-8772-ca72ca822868"}, "ce30ffd7-7b1c-46f9-ae72-e44dde8a5a42": {"doc_hash": "a50bb62d1de808f570ffe6891beba50e56e0b9acaf56867e0b7da5c78729c37d", "ref_doc_id": "09174847-a1fd-454d-8f19-04ae8b653994"}, "1020a8f1-572e-42f6-a800-dc7885d38128": {"doc_hash": "e1201a1cf2c5a259cbf3864213bec5f6060823e89def2a2ed26115532cbb6c65", "ref_doc_id": "01cc60fa-eab7-4676-8cb7-43e998861f38"}, "273831e1-3d50-4628-9856-09f69a524017": {"doc_hash": "023ea7ab68a823e9cf9138f40779d54696cc231ba48c9ad270b117bdf4b4b54d", "ref_doc_id": "8816326a-17b3-433f-8fb0-160506403cf0"}, "a53eebd0-f693-4ae7-819f-ee9ca80c55df": {"doc_hash": "626bdeb10d96c6b2a6916ba90bffa5f57a1149b179b716a0a40545fbf31d3895", "ref_doc_id": "8816326a-17b3-433f-8fb0-160506403cf0"}, "2fcbc527-3641-4fbc-8838-0c31039cb272": {"doc_hash": "d249ca14dff6d3f1dee92d14a2eaab6987a2ddb4a4057b0db65ae67fffd05827", "ref_doc_id": "ce2e6fcd-0576-4df0-b68f-0fa83543aa34"}, "968d9ef0-7ae4-4405-ad47-cf49f9f09cfe": {"doc_hash": "ec70c3295387e1b71c338e2abb17532474bf240c961ccf182dd6b41874b2c863", "ref_doc_id": "99e9d8f1-554c-4b27-a9e3-e9d14cdbeaf2"}, "a3813c2f-9b60-4c6b-8e01-ab673e93161d": {"doc_hash": "f1507c54cf702a8e2ca43038bc875f5486a5298ca94135776bfaaca4bb9acfcf", "ref_doc_id": "19e4e299-00f6-4ddf-b55b-49d3c4813143"}, "fa8fa216-8c84-4754-9a0d-1924575ebe5a": {"doc_hash": "b6a3076ff069d56e788ce6ba29ceb58e88335ad01c38b57cc3815840cbe72c3b", "ref_doc_id": "19e4e299-00f6-4ddf-b55b-49d3c4813143"}, "8d5fc85b-f697-4571-95ee-51864a44a920": {"doc_hash": "25716a7541bda62d1c162db3a23ae41308bc9670ae9a697f47f10af7519b756a", "ref_doc_id": "8d0aa7d0-a1ed-4898-b0aa-4dea4ff4dd76"}, "2ecc5660-ebce-4aff-9e45-35d257d35653": {"doc_hash": "f79f0604d9899511e444967afff22a2973cd9a27e67ca5037465aabcb9f79fb2", "ref_doc_id": "5514afae-bac0-40cb-b228-70fcd7cf5416"}, "42824e57-b69a-4cc8-96f4-26b9ba5cf547": {"doc_hash": "7d306833dd1f4984b00a7aeb7d6e97239d1fd3e65cedcd7a342376c5fb90b2bf", "ref_doc_id": "5514afae-bac0-40cb-b228-70fcd7cf5416"}, "e0d2c2a9-5c99-43ba-873f-ba7ad0681a5c": {"doc_hash": "625d74d8a5da9466ab723fe00477c0c1a503d809d3404609615b036bc6ff60b1", "ref_doc_id": "3fee2379-693b-4b3a-984d-3a581bd4038b"}, "f4f35fab-630c-45dc-bc24-870d3efe143c": {"doc_hash": "061d6d14168c7ee1c82e1670c00a41e8ed4629f4a4fbeade7c29ecf8695db7d2", "ref_doc_id": "a3b71136-2621-4b3a-ae23-68c55aa7f593"}, "895da9ca-f653-428c-82ce-b6a13c8050eb": {"doc_hash": "b1dce701b8156681942c444a16cb89a54cfae0ebe58af5891497b9db5bf798e1", "ref_doc_id": "a3b71136-2621-4b3a-ae23-68c55aa7f593"}, "ed8deb87-c04e-4a92-bcab-33ae4657fd33": {"doc_hash": "8cc811d425db14f5825341c1e8449ad0bc21e3bb93f1087616bbdc7b23b166f3", "ref_doc_id": "a3b71136-2621-4b3a-ae23-68c55aa7f593"}, "20b090d9-1f84-43e0-b944-1cc041c163d3": {"doc_hash": "4719eb67895f2277aeff00780b725f0a9b7eb1b4dac3fcd2dcf32f0e53715bf6", "ref_doc_id": "a3b71136-2621-4b3a-ae23-68c55aa7f593"}, "c4486261-f911-449b-b1ec-c21b60850318": {"doc_hash": "43ff62a18d858405ec4a45f3597424585b82a43424af872476768be117b67595", "ref_doc_id": "a3b71136-2621-4b3a-ae23-68c55aa7f593"}, "9d9f3378-a6fc-44bb-b32c-29c1a42371b1": {"doc_hash": "1cff442c88b2f1afbcb2eb1a850bbeac937f3612518fb72f0ee5e629c6479f22", "ref_doc_id": "a830f680-5650-4b16-91e8-86ed503b4457"}, "75bcdf99-6195-4081-b367-dbea800b182c": {"doc_hash": "48490fc7bd8e441fb7eab8a1e3704e05e65f39cac06557861ad58428fb72c6c7", "ref_doc_id": "ef65b31c-de2e-4e09-a341-30df25e0efbc"}, "38be8bd9-5d4d-4f8d-af14-1f00d0f03d1c": {"doc_hash": "630777430501751ad0fb7fcc415ad54ea0f7660a4e90891cf2d92c4f1ca17c8a", "ref_doc_id": "2fed5ece-7295-48fe-bffe-44f37282f96c"}, "d09d22c6-b901-4304-9977-01d00b4ef557": {"doc_hash": "ad6b3b2ff2575c8870ee52814f3fe322e9b6af3e47256d97f0355fb83d25676d", "ref_doc_id": "8f035391-6611-4960-ba5e-1f40cb0022a7"}, "6e72af55-7377-44c0-a9f0-e408c0ec56b8": {"doc_hash": "ebe74bcf74f5d3c277ac2e8e362441f238f5efb33fd5108d2120c3dbcff633ee", "ref_doc_id": "8f1abc55-23b6-488f-9275-bd14a327b1cd"}, "419035e9-8207-4e24-ac06-47ea936a2196": {"doc_hash": "818a1ff45aae5b5cadad8c05731c510aefc1eaa0cbfe0df5728bfc36b335225e", "ref_doc_id": "050a5ab4-8bc6-44f8-bb8e-8c60e1203796"}, "b0dcba9d-f6a1-4f3d-a5c2-43e1fd5a3dde": {"doc_hash": "a52d978488d8329677228cfaf0f45f05c98dc348cff2e479a75c4e4856bd9e6d", "ref_doc_id": "af6e9453-95d1-4c3a-bd74-dc7954d48720"}, "317de460-bdc9-44a2-8b6c-2e86f41c25bc": {"doc_hash": "a3bd6bc0e61b1275125aad944f21a71f1af76758a28e60a58350705b68f6aea6", "ref_doc_id": "af6e9453-95d1-4c3a-bd74-dc7954d48720"}, "9777a22c-e388-47f8-b569-2476b42799d5": {"doc_hash": "629617b9f89cdd8561481f41f472d0dd15d152c3eb2bf30beecf3a25589a51b3", "ref_doc_id": "5878e1b0-ee34-48cf-9495-636d873f6b48"}, "191368fe-b562-493d-85a6-fa0a95295ae5": {"doc_hash": "c9f970c5be3ea7996d177863dfdbc6298d94193358bfd94ace6b008f473d8372", "ref_doc_id": "6ef8001b-efbc-42e8-b1f0-542641c8ea6b"}, "96af74fb-8dfe-49fd-a02e-b9be4d6ecb9a": {"doc_hash": "2f996a9eeffa35974854cdb6ea67b718c46cb5cb7548db3e7b60a129b3dceefc", "ref_doc_id": "6ef8001b-efbc-42e8-b1f0-542641c8ea6b"}, "c431188e-6249-4984-92d2-dd7a757a40b6": {"doc_hash": "6640069fcb17dfa7bb5a971180d1d555b0abd835a752f8b601c98c8436480522", "ref_doc_id": "6ef8001b-efbc-42e8-b1f0-542641c8ea6b"}, "62eb39e6-a4ee-4331-9733-638a40dfb8e5": {"doc_hash": "bd29f0e2980e6fc712690004503d2fab332fcb75fbefc4d0d4e41d84c8254a46", "ref_doc_id": "c302174f-0c08-4786-a76f-ecc13a0340cc"}, "aaf9a95a-76be-4876-8100-ee29a29fe231": {"doc_hash": "f5fbd63d901f7c9639ba7d7352eb4ddc88c772213edb6f6ff955b7b284c8868f", "ref_doc_id": "ee195179-8562-4f6d-91f2-58b5c1b95f25"}, "1f1f5a4b-feef-4683-8a98-d4ca039a940b": {"doc_hash": "9c9f7421a3d26f83756991d6bad0abcd1a84feba1db6c12e4f5f4ae923697aa2", "ref_doc_id": "ee195179-8562-4f6d-91f2-58b5c1b95f25"}, "534abb3d-583a-4929-afd7-a17cb90fcda3": {"doc_hash": "7abec6e73fc2bf6c7c21552eac1309605bb17e084561ed5dbc038a9a255b21b5", "ref_doc_id": "919427db-4195-44c5-871c-88d7f6a13989"}, "dac57474-b516-46f7-8418-5b80dc406ca3": {"doc_hash": "38f98e101062fa2dc8feed6f031782e286e48407c680160dac6d361d36c6c403", "ref_doc_id": "5426871d-a8f7-40d9-aac5-8a16d057b4fb"}, "fa6ffb69-d9aa-4389-b3b7-081bb07e1e36": {"doc_hash": "a4214636f16c586a5af860fde39d20b2356901d3b31d964af59c928157d589eb", "ref_doc_id": "5426871d-a8f7-40d9-aac5-8a16d057b4fb"}, "7b434ed9-6785-4dcb-8535-f94106085f72": {"doc_hash": "e7e3e8520865f2daabaf74129bb989bc60bc396c40362e377d74eb54415fac34", "ref_doc_id": "7a171734-75d0-4028-bc67-7d8171de8b87"}, "d90f37fa-fc73-4f3c-9510-119d2c314542": {"doc_hash": "6a91dca572337fc0c7e3c0517609a4fde4cb1f8eb341a147d57058401458e647", "ref_doc_id": "c5b83618-c9ef-4693-81a8-312cf86ce1b4"}, "09c8943a-c02c-4746-8da0-fb3a3efc5693": {"doc_hash": "4290e543fd18562c3fe242a9097f594d776ca63286a9eff8ac75c11bb9f14a0d", "ref_doc_id": "092dc66d-977b-4035-b1b9-db64e44125b2"}, "63e49e4c-5813-4c53-9878-aa0c5b80fdcd": {"doc_hash": "b807594224481aacaefc811dc980396fe34ea51b80ffc1e2a1c3126ff4143c1a", "ref_doc_id": "092dc66d-977b-4035-b1b9-db64e44125b2"}, "15027205-fd03-46af-b4de-dbe28c269e56": {"doc_hash": "dc542cb99b721c16569126d856e9c38ac3274242f6904075231bcc707276d19a", "ref_doc_id": "fe58345f-d05a-4bd0-81da-324defa1df84"}, "05d11658-5a42-4388-92d3-18c156019ab8": {"doc_hash": "b0fcf18ab9be799162f76763f40fce62fc4f5a6025fe9de4126286800ff4c4f6", "ref_doc_id": "4d9fbe00-68d9-4197-859d-a8fbaa4e7ae7"}, "837247a2-e9a9-4bf3-8a59-5e3b8e43c31a": {"doc_hash": "f1a06fec8e50fd52be733f4371c9303f9d177cf6f186c47ef7af57af301aa80f", "ref_doc_id": "8eb8de8a-ca43-451e-9642-e183a5c90edc"}, "6a6611b8-0673-4588-9ed7-8ccb014067c9": {"doc_hash": "5e3887395082184e14b487a092d8186b0ad731dce1baa949da2178ec444aaf31", "ref_doc_id": "3a23ceb8-63db-44bf-83c7-8f5cbf99bc66"}, "d82a8c0a-b617-46d8-8895-031c68080902": {"doc_hash": "9f57d4920b0ece13e7a2728097870636e3c2d045d6d529d94d224e9575e02819", "ref_doc_id": "fde7295f-1dab-441c-b35e-5f8b9dd67c77"}, "224f3d72-3d70-45ae-b201-3933caf9fe2f": {"doc_hash": "98107d3e5f1dd24cae0682455102b3ada4133ad202270c6ad1b64ce29b2b8f99", "ref_doc_id": "fbfe1e1e-a39d-46a0-abe8-cf9d312dfd7f"}, "cf2c62a6-27b7-498d-bb0a-cca1ebfe15f9": {"doc_hash": "ecc1902cce7d97b1c9293e3ee9a7de8222b467edac0bf94126aa032a1d8ce5a2", "ref_doc_id": "c1d9a3e5-3867-4294-a28f-cc8feb9f610c"}, "4b342e25-3105-4af1-9b0e-e2fc9f1b4cb9": {"doc_hash": "d7469debb868398067f79b148a6d586aa1c07b79a5c161d0ede9ec63078d6dec", "ref_doc_id": "c1d9a3e5-3867-4294-a28f-cc8feb9f610c"}, "6bd536f9-06b1-4a58-a6ed-dec3915db86b": {"doc_hash": "b7cdb42b23c79fdf133a0c42e12bd8ecc0ed76e905a82bd9dc5eeca498174188", "ref_doc_id": "1824a8f9-491e-4516-9baa-6131c0c78c1c"}, "b7057106-8942-4f6f-9e5a-cb6d7e31374c": {"doc_hash": "ad7c9200259ed95943f381a7b3455a6aa96047eb34e3141c43dd1ac47e80c3f9", "ref_doc_id": "bd3746e7-da54-4c45-99ee-269c1ac11a18"}, "5603d457-6462-44a8-a526-e474e9e09c98": {"doc_hash": "9d955542f188aefcc381ba5f2bf6cd59d02a2456e4a36f8976598faae5f4f273", "ref_doc_id": "8c8ed0d4-c2ac-4714-8149-fef19e2b0ff4"}, "eca6b4bd-796d-4c5b-b550-78a855911b10": {"doc_hash": "10316e816bd7baa7da6ec0e351458a9d7a9739a8e9de034d3aa04493df8b7314", "ref_doc_id": "8c8ed0d4-c2ac-4714-8149-fef19e2b0ff4"}, "9d5010a1-d017-465d-b055-7bb723c90073": {"doc_hash": "fbdfa076e91ddf86b8aadae93d9eda4d51339a8962bc5c3fd485690076166ccc", "ref_doc_id": "aa9895ea-86cb-4307-bbfb-0c13ec70ef3b"}, "391586bf-21bf-46dd-b4b3-d880818213e7": {"doc_hash": "cdc4185a2a8de0308e4702e38189bc235c7ee93d5ccfde4fa4f8d681efa79df3", "ref_doc_id": "8b8a59fe-6504-401f-9508-76241c41c8ed"}, "7a9dc37a-1c17-4b9b-88fa-cf8e7025b9df": {"doc_hash": "3b52ea4b09b3c3fa3e3fcf50f8057a39ddf940bf5df4fb078ec727b0af330719", "ref_doc_id": "8b8a59fe-6504-401f-9508-76241c41c8ed"}, "9b529c0f-a5b1-416d-be9a-454a4eb160b8": {"doc_hash": "3cead16fbf9366b5bd6d33ec08209c9e67afd24e8ae4ec3aa66339d8481c06b5", "ref_doc_id": "3a24fbe8-1de7-46c8-8d2e-4af623df4e61"}, "91638b40-0ac4-476c-a324-5c3d550460d6": {"doc_hash": "58b679fcbf290142856a720475a9f57586c37d66ff661459f8ab3b7b3ec11aa5", "ref_doc_id": "521736eb-acca-42f3-8193-e027002c7f6b"}, "be44db68-6034-4857-b81e-0e88daa4ab6b": {"doc_hash": "94f4a9780dcca3acb318c9bcee129323aff3e3bb8dc189fad5a1070cc6016822", "ref_doc_id": "7483b2aa-2315-4e35-84d3-058941830d1b"}, "acf75009-97e0-40f5-a220-2b6c7487d8ec": {"doc_hash": "c969afdd579e9f8f4d4d7f70896a08a32ca080b75c4a20113dbd39b0807d4051", "ref_doc_id": "fd870fe2-0a27-4f3d-8929-d8b427e518d3"}, "53c5aa70-7a38-4f98-b854-de913f009119": {"doc_hash": "47ed478e9782e36896cbb0294bf580a1fddd1656b83ffac17cfbeacdfae425aa", "ref_doc_id": "a5ef87d6-8101-443a-b2b6-f01a4c214d26"}, "ffe7e3a3-0187-4e8d-8813-3f625d2183ee": {"doc_hash": "eb327f4252a62fdfb38c10711f6c750d39f5e6f027813880ff08e12be4055ac8", "ref_doc_id": "a5ef87d6-8101-443a-b2b6-f01a4c214d26"}, "6f1d5ba8-823b-482f-861c-83e51d5225f8": {"doc_hash": "8867e95c4f81d6d8d6de9bd19735bba2fd5fada781ad21317c2fcbb53e617c7d", "ref_doc_id": "0c7bc33f-3200-4760-a9c0-2bb6ea435a13"}, "40876cbf-fa8d-4440-b087-065b81ed3f9b": {"doc_hash": "a481899b6ebcc2a517134a1843fbc9f187cacf1849a382dbbbd696787e620786", "ref_doc_id": "be0f5c84-0755-4356-9ae8-9c21e44efcb1"}, "a7b7665c-4365-4ebd-8b58-34917e88e2e8": {"doc_hash": "74d715492aee9b029b0ffbaa622bf9568cf8996c29b6893fcdaaffb151b3e25e", "ref_doc_id": "be0f5c84-0755-4356-9ae8-9c21e44efcb1"}, "df2acc49-b550-45e9-8c6e-a970888f0ec0": {"doc_hash": "1187080638bbe51699bea6c92a240851f02c1258143285cb6e4b9c215d463840", "ref_doc_id": "e3fd6050-26a2-4166-a498-4d48631a0f69"}, "d676d47d-ef17-4b19-87dd-ca4708bb423f": {"doc_hash": "2a54361d967078406081731093c9504ffb7450ba94c7d7225092a2bdf1db8c3d", "ref_doc_id": "be2d8d25-2ab8-4f31-8c29-0855305c8b29"}, "ed1d61d5-1512-427a-83c7-cb23cffd7658": {"doc_hash": "c80c688d39c28c081e35ef0a353c85c3e6d1dd52a0f03e859732268f4e8dea01", "ref_doc_id": "7b5e3d52-8ef4-466a-a529-58ed09640aa9"}, "6be96f21-d6bd-498d-9263-97817e856ecd": {"doc_hash": "7f3844e450a076a182459a5bf48f8e0874d02f06457b4dedb125b5b66efc9227", "ref_doc_id": "e076b117-0d72-43c5-96d4-64693b85886d"}, "7fad9ba3-0068-4dc4-9e3b-9eb9e02ea1fc": {"doc_hash": "105b2007aae291c4ce4b2cfc2174d5844fb422dbf42d4e03e5f72aa046652d78", "ref_doc_id": "e9048fce-b353-4059-a3db-15675f2596e3"}, "00b114e4-f5b6-4787-8c2f-e4a983089ee7": {"doc_hash": "0b1248e32e3e7daf1b2287acee2222d52e5086a8d20bd353f24605354e7ecd49", "ref_doc_id": "039eb23c-0653-417c-b5a8-f371c35ad956"}, "f42ff8b3-0b3d-45fa-84f9-c48b56399739": {"doc_hash": "e00a63dd2f68cc18b0d7055ac93fae1a420f1ba5a64f7ba95a8a4f9e01462ff1", "ref_doc_id": "039eb23c-0653-417c-b5a8-f371c35ad956"}, "bc036322-9cf3-4661-9631-997a5c2735b1": {"doc_hash": "5fba2f23602ed67f8964839d283111bba1fd23f361af57f81dc29da192533fa6", "ref_doc_id": "f6c853d8-6da3-4177-899e-deed22667ed0"}, "32bc3270-eb5e-4d2d-b68b-e793000aac2e": {"doc_hash": "1ce9fe7867677a693d9670fb7da409d7f629942a226d0486b2fa4e516535e559", "ref_doc_id": "d172a959-b2ae-40aa-8170-96f018dc1e3e"}, "98b80ca9-c90d-4fe8-a8b2-787c0ca3d276": {"doc_hash": "389a3457f5e80020e839db81e67945805200458bf1efd1040c91ddb11f6c9999", "ref_doc_id": "efbe03d1-bc3f-471c-a275-ef79d526ed0d"}, "a8bd793e-40c2-49b0-adac-ad00b7dd76f0": {"doc_hash": "09ecee6017ca681944f2516409edc770b9e7b3cb0c2ff88e43b16fd7aee60e3e", "ref_doc_id": "dea75562-ec08-475d-a825-2ecf25b58aed"}, "ba1d04f4-43e5-4119-8be0-d1ac4cc6f7a5": {"doc_hash": "58e3c92838a380024632e823adf1052872d0209664f755cf9a7725f025f5d92a", "ref_doc_id": "dea75562-ec08-475d-a825-2ecf25b58aed"}, "7d00dede-a4a5-4f63-8bfc-3c6ec2394b7e": {"doc_hash": "12fc10673b9ebcb14a26727b56fc2763bd29de1b58c307fd6446aac3b8bf2ed7", "ref_doc_id": "68eff820-5cc9-4310-80c8-da499c8835b1"}, "10383505-6df5-48f8-87d3-b5ded692f430": {"doc_hash": "24bd4ef1982c6e1d2bfcc0f20afd7525ebf1a9ef71d8eb194e0f58fb98054e22", "ref_doc_id": "68eff820-5cc9-4310-80c8-da499c8835b1"}, "3a8a32f2-cef0-4039-a955-e01736532671": {"doc_hash": "5809d1fe807d1c574ab7a228b66757399aaa3058bdf1c964620ac52dc36572ec", "ref_doc_id": "017db932-59b4-407f-97cf-b65f2e71dbe5"}, "987c44f3-a474-470c-be38-d07facc02fdf": {"doc_hash": "b6760e158593a3e323d06b60c68aa06a3fb69812ceff5732fefc2a68deaee199", "ref_doc_id": "862a067e-ed8d-46e2-b0fe-28933c4eef7f"}, "78fa2dfd-fda3-4137-9923-a94f8430f61d": {"doc_hash": "80c261379fa13d5b4e9fb1993411a342fa704127381cdf14693edbc18f7f33f3", "ref_doc_id": "dbeed5b2-056c-4c6e-ad34-79e7922deace"}, "5ca786c1-211c-40a5-8f61-8e6e16c7c3e1": {"doc_hash": "769cb53152f8194f0bbd86989d36d99e7035420c2f394008321cd46fff41594b", "ref_doc_id": "3d525d1a-886d-4dc9-9a4d-6ec76037022b"}, "8c717067-da72-44a7-b404-ced3b7e1a260": {"doc_hash": "37403c73058987ee2114d71cd3ba0fc529c5d5cb255e802e4280d425bd33d867", "ref_doc_id": "bbf0ee24-fcdd-4d29-80cd-fea7d9aff353"}, "22a48e6f-e991-4b09-a028-9035ca78b528": {"doc_hash": "ec68a6d66eaa590223b7fc8a742fbb4c50b9c250c1921110847205f0a7f9781e", "ref_doc_id": "0ad223bd-3727-4850-8b7b-bc5f297e4a33"}, "a6c01898-9ee1-446d-8bc5-9994f96945f5": {"doc_hash": "344636540ecec5bf0f96bbd2681b2a01d6ee3b7d0f8b4b8462a604948bee7c1b", "ref_doc_id": "0ad223bd-3727-4850-8b7b-bc5f297e4a33"}, "561bf132-26fa-453f-870b-797e8806dc79": {"doc_hash": "958f86cecf125b644539d23a0a2d725e899ccac8d4fd2a05acd2f99dd9f7fa95", "ref_doc_id": "673fb36b-60a5-4c40-8152-eb689ce78af1"}, "93b06f1f-1274-47d8-8043-6836eb97f58e": {"doc_hash": "60214fffd4166cba4b6f9206944d9ff1c0f98d71d2c745170f45e13ffb6744d1", "ref_doc_id": "9c9d0bdd-015d-46ae-93b7-334d31dd2f0c"}, "52eeecd8-d684-48a4-8bcf-c517b0df1f23": {"doc_hash": "69bf607b236aaa36d261cd6ae625f76f5189fd15eef33d0d3a683753bbbfcae4", "ref_doc_id": "9c9d0bdd-015d-46ae-93b7-334d31dd2f0c"}, "e90529fe-4586-4d42-9731-b818d4d2d229": {"doc_hash": "f5455c2dfc0235184d0c6098928481b15c80f2067cc6fe055cff2ab33b7d4507", "ref_doc_id": "4c0606bc-0d2b-4c50-b562-12fabde55d06"}, "d5305b49-b753-408c-9877-fa6511afbd7e": {"doc_hash": "7aafcac1b34e4b426d2f84e973cd63c85c37a33eb5e9a4296576ed584e6c0207", "ref_doc_id": "4c0606bc-0d2b-4c50-b562-12fabde55d06"}, "2917c38c-4692-4470-800c-7c3027a2ace2": {"doc_hash": "b9ee8520a7e761f49070ed87597477b024501a8ffb98d734992a848e49815108", "ref_doc_id": "6bbb132d-5515-4a54-9327-bb19bf8247c2"}, "00150e60-39fe-42f4-9972-31c9e177a573": {"doc_hash": "9c8353e8c9c4894b2392ed49e3b6ba73504984da246d587801a474e8bcb361be", "ref_doc_id": "6bbb132d-5515-4a54-9327-bb19bf8247c2"}, "2028b1da-53b9-485b-801e-091c456f4a41": {"doc_hash": "b59ac08dbd3ba32e2456514ae7d5fe8206fbf9abf25e2f60852a17e33f7f2971", "ref_doc_id": "6bbb132d-5515-4a54-9327-bb19bf8247c2"}, "d91b78d0-2b01-47b8-bcd9-08246b49e731": {"doc_hash": "0face583a98cb2862d077a432837918af3a2c52b1663e9127eca932e39a17eeb", "ref_doc_id": "89ec3e24-4800-4711-9db5-2d43547026d8"}, "55ae615a-8549-42c3-ac66-8c2a13d9485e": {"doc_hash": "2eacedd043ceb4566cc3f0219f24be360eb825c6bfc74412d592a90f31c0d51a", "ref_doc_id": "89ec3e24-4800-4711-9db5-2d43547026d8"}, "09348b39-ba96-49c8-b1d4-680cab185707": {"doc_hash": "7f32a482cbc56d85175f0683aac1476b4e65c728c7aa517fd3397aeb7a97ad7e", "ref_doc_id": "89ec3e24-4800-4711-9db5-2d43547026d8"}, "32e7d9e3-1cf2-4ec9-b477-d1b56eb5c330": {"doc_hash": "55e81d0845707f812e4e685b69f4019ac43eea71f246cabc5de56233c3f76674", "ref_doc_id": "52d70004-1e1b-4512-88f4-bc56af39ea67"}, "73900e0c-45a6-4d8f-abed-d85f22c1c98b": {"doc_hash": "d1f0f27036f91320ebc40b1d0d4d14f827ae240791273e260230b71448a71144", "ref_doc_id": "5865ea89-0a6b-487f-9e07-22fbf696cb6e"}, "2280cac8-7338-4b05-9cfa-7ed57fbf59a3": {"doc_hash": "e606dd422d2f959b1a9f54ba0e3afa1035aa62a7cece1be15fdad808b5ad352b", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "2152a185-6a71-4ee2-bbd2-99a73ddd5b4a": {"doc_hash": "0355267dba0d3ce58c54938377459458dbaeaf6ee31732a1e1e56069badf5cc7", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "38bb1b76-bac9-4783-8c92-5139ad93ceae": {"doc_hash": "3f98d31a29128156066f14d65eaf44f01d64cc59b2961cef25e9484ba3611108", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "4e28de87-c680-4ac3-9933-27fdc4e991ab": {"doc_hash": "84688287f458a3866fabbd153775fc526e4f3dc2cd4c20fd0a4a79d8c87f8843", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "93efb03a-5e3f-4ed4-9263-9291fa3b79f7": {"doc_hash": "7a84d8eb96092237de43c417b0a8a76ff8cfb8067a0b2a518ffb77475bea881c", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "b3e3c50e-37d1-428e-a7a1-f25a02eabca7": {"doc_hash": "a90cd5c5e8f2581f4f39768f8d442863390b8f1b09e864ced42a3ec8d52a01fd", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "766ba1ce-19e8-4fd4-8606-62e1791cbc0c": {"doc_hash": "3cae689986e5523c8ec4ae4eaf94a5ee3e3653dfa76ae0389d9775bd463760d4", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "ba1ad904-77cb-48dd-97d2-f47d89a2667d": {"doc_hash": "11ff2a1f70c4c3ed951980affced35dc0fcf85f54b8b2f00e60d30098746ce69", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "75f06133-9e57-46f2-adf9-ca8182f548ef": {"doc_hash": "364d268b91e8683cbf9e08255af28339bc5a67ba9fff5a18e00d19199a714515", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "b06896f8-9e7f-4ba7-99e5-17b94ab45d68": {"doc_hash": "7a5586c89c6a4ebc257969186e528b485b293b0801d08992138867d7a423bd35", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "59499569-33f4-4308-9501-2e65a2cebc78": {"doc_hash": "9cc933191ff26acc60336b051ea4e60d3e2ad7b2f47d53c07a760ccaa2b164dd", "ref_doc_id": "b0da131e-0e61-4213-a1fc-637c523cbd38"}, "bce5f297-f6f3-41d8-a98c-24a3744172ac": {"doc_hash": "ff5f939f3033d59c33705cbb99e5b853eae52d4dafc594e64e4b6e3a9128696b", "ref_doc_id": "735bf168-9126-4174-ac1b-438970d94674"}, "d8d5e533-9eaf-4872-a54f-6001a561c5ec": {"doc_hash": "d7dd77f83a5abb955432698c492c755e822116b136f32a04b6696e9029ad7da1", "ref_doc_id": "735bf168-9126-4174-ac1b-438970d94674"}, "5083c770-1566-4e37-8913-72dab29e1f11": {"doc_hash": "75ad9570137e5a0bf5b8067a491d3891e3b2aa1026eb60addf472f06368976b1", "ref_doc_id": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe"}, "61966595-32a0-4425-bea6-6801c89f7759": {"doc_hash": "29e5b385f4db0bc48cad16a81adda38d55d3652aa90fc904041d021fbc91f54c", "ref_doc_id": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe"}, "ed3c91a0-7997-4102-bf5d-e31a1ecf1b60": {"doc_hash": "aee66a0e978e44398756a986c1671e7e49ae548072925b84bd5fe7dad069f1a7", "ref_doc_id": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe"}, "34c214bc-397f-441e-b963-7880ce2814d7": {"doc_hash": "c385af4ae4c06c69b178fe4a6865f07c8e9d075be665480d3988e725bd2c5ca8", "ref_doc_id": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe"}, "df737f92-774b-4164-9424-99c25187258f": {"doc_hash": "b06b7fa8637508a772b5f95787313ea822d4345776fbe0519f1675cc66f2dcab", "ref_doc_id": "07802023-2755-4197-9f0e-97253661fb27"}, "398985d9-ed0c-4b48-ac5f-87dd636301d9": {"doc_hash": "f9a42d8f3282f8dfc8be2e3e1c2a2517c79969e2d7ad83b19aad07044c910e21", "ref_doc_id": "8ca3ad30-f63f-4fd9-ba96-4c8320e9b8f7"}, "5cf91c47-636e-4984-9d97-d444e6b3fc1d": {"doc_hash": "9dfecea074671663d80eb2381520abd946ae7d0056c9b87641b3eb5f5a4d42ef", "ref_doc_id": "122f93c7-4a3a-43c8-b7a8-833521da0acd"}, "1f2e304f-f408-4828-a560-34fde8c210e5": {"doc_hash": "fd73c829290970d3addd5f5be7deed0a01a4016b250321c312dd20252d11a48f", "ref_doc_id": "4e83a925-55aa-4378-a95d-40ca8144e809"}, "880ce47a-2f35-4a6b-9249-a2d9a0f21d9e": {"doc_hash": "5337e5a5c9b6670872879ad33cf1ff76d557f478a2b34528c950f24bd19cf3a2", "ref_doc_id": "02446440-8c8b-41dc-b35f-09f994b57351"}, "acd29a91-ebc8-4b37-af5d-6d5fc32e3146": {"doc_hash": "c0cba999a92e5ddabb58c94ade717bcd43e4c133d19d2cd82c65fb76b69bf969", "ref_doc_id": "02446440-8c8b-41dc-b35f-09f994b57351"}, "16c5e2c0-ea79-427a-97f5-b245756d5626": {"doc_hash": "a02d34f4edfeabb31ae587f4533664019246e4942c5f5a24e890e88592ad5cdf", "ref_doc_id": "76edec7a-92b8-4b70-a75e-7ea892a48e3b"}, "55dc4cd9-aaa3-4256-9990-9430b7003a46": {"doc_hash": "8fd54fa2eea10a51ece419220efa1817a15509d671bec801946e219995beb0cd", "ref_doc_id": "2eb6f3b2-feb9-4485-adf7-c2be88b42afa"}, "513c1963-63ae-4822-94a2-59158ae58326": {"doc_hash": "27db665bf62e91af95f32e4bb820ca1c0528be5a0d08e87c5bd3adfaa50984fb", "ref_doc_id": "dcb76755-3f2c-4c48-8eb8-6b6102a7740a"}, "3eaaa76c-9103-4e98-b4a3-0c12c315f70f": {"doc_hash": "cbda875a4dafd68a8928895e185e471753bd358160bac23a59ceccfcc360e424", "ref_doc_id": "7f1c46d8-c596-4848-a35c-fca2ee50b974"}, "a4ccfc6e-496a-4f16-9f07-bb8625b2dbee": {"doc_hash": "ad732bdd88013ce5d00244be3df530d6eb978cc5e78802f09da9f720f0e3ee95", "ref_doc_id": "a94e02c9-b05b-4ba4-9051-5088d414ba55"}, "9e2dbc1b-30d2-4d87-a363-f963a6c0f183": {"doc_hash": "0361d0cb2bce407a8a728f368158704b97dda87efd1b5c41e91988f09fa35422", "ref_doc_id": "35925b98-f7e7-4d87-b562-b7e0105731a8"}, "35871a58-acb5-4fee-86c4-98b4b45a75a4": {"doc_hash": "3effcea00a8cd1f65605dd9437d74b2f476d9b5a297306392e7ee749c42ec9b3", "ref_doc_id": "c4c26dee-fc40-4fe0-87d4-038c28465546"}, "15a95d56-ac7e-40fa-b29d-3ec3b71a0b48": {"doc_hash": "a7112d62590d756825d43e7074b290fca65c309b84cff0251458aea795199f84", "ref_doc_id": "16069126-531d-471c-a0e0-f418797427b4"}, "ead86ba9-5480-460b-ab61-e7066c03c5d9": {"doc_hash": "0f42c3525795e7da2fa7832c1e4c314bc2b2dc19094c5e5aaba6fd24f0c2e4fa", "ref_doc_id": "66d0f3cf-5ff9-4b1a-a3a5-9e506653dba9"}, "2d1c4bac-3b98-43d7-beb0-e95b26a4df87": {"doc_hash": "68d58837e4b2886169026108a79543cde4dee4456910e053708cd13a48770269", "ref_doc_id": "66d0f3cf-5ff9-4b1a-a3a5-9e506653dba9"}, "b976a669-8292-44a4-9fa7-31423ada0779": {"doc_hash": "e6d57fd97176c40f5b5fccbac825ed899f5701ac83c4d1c7b286f6aa54c70d5f", "ref_doc_id": "2d5b4c52-5e4f-4d8e-8362-53128ac2eaae"}, "0ae502ac-65d8-450e-81a8-dbc0509d7b5c": {"doc_hash": "10eb4ecc277f9ec8831c969b64e23b40514f1aafb3cf5bad568fa1de62d57bf5", "ref_doc_id": "d6d249b1-bca0-4808-9b7c-f22bd731d348"}, "2fe6d08c-4383-409a-82e3-040b2579afe4": {"doc_hash": "e4037c94bc6993326de8c8279fbeb0b1dd578b000b353a06f551be01c954000f", "ref_doc_id": "d6d249b1-bca0-4808-9b7c-f22bd731d348"}, "bbb46434-6fb9-4272-b9f5-e6e61b82ad90": {"doc_hash": "952a015c3b58e3535193a3b042f90d3e4663416de4077f5d0b3729e797365b81", "ref_doc_id": "66e61355-0d9d-485e-9b64-23103ad364ee"}, "bac0c78c-4d56-4424-bd39-0248eb070d82": {"doc_hash": "44b5881a7554d9fd38793d0aebf63c50b5e452a3fbb51da7a7e5ae4e3bee157b", "ref_doc_id": "66e61355-0d9d-485e-9b64-23103ad364ee"}, "f3fac04b-d639-4512-8379-b252313729ed": {"doc_hash": "e8fe11ad8a44a0086193b957aaeb112485db5396a644af5e51f8ae0dcd34e4c6", "ref_doc_id": "66e61355-0d9d-485e-9b64-23103ad364ee"}, "4591559e-d4b8-4690-9e2c-b05f44527013": {"doc_hash": "56d34720a4a9f7479514b24d1ef37c47fa47b9bfb857ae429786f4c5abae8f0b", "ref_doc_id": "be1cb307-408b-41ed-bbf1-5ec07174114e"}, "283f6095-94e3-40a4-bbf9-e2f5c472cae0": {"doc_hash": "a60934969a9460a0e55bcf90e0c661b0653de66f225ead8af266c430b9e7461a", "ref_doc_id": "608d9f0c-8330-4c34-bb2a-678cc9ef5491"}, "cd299b46-2d37-4e6f-bf7f-55df66528c88": {"doc_hash": "cd1437a2b7c25d5a26553468dac950d8eab3315a9d4a2ab4e6b499a6d81048b5", "ref_doc_id": "d1f11c12-232d-4d11-92c5-ff3f8b69aecb"}, "b47ca0ce-c409-4770-9a0e-74a458ab4b0e": {"doc_hash": "cdb6c4eca63a1945d3988bbdf666472553fe1bac540f9996b064c9d60c5eaccc", "ref_doc_id": "42998b3a-0e07-49b9-9c3b-7e92fd3737fc"}, "d400acbb-951d-4669-93ea-6e1d9caf022b": {"doc_hash": "efec56a6d3cf866e1e0fed790621d5819fb9aa72b2d863ae2f69d47e0a88cfd7", "ref_doc_id": "f42db065-56ff-4ed5-9bc6-afafc1b95217"}, "63cc5008-689a-4cf3-8022-34c9144c2f7d": {"doc_hash": "fbce068658aafe9ee8d6be0cc49b27fd5efe2bc0ccab62616851c4d7e0bf77d2", "ref_doc_id": "f42db065-56ff-4ed5-9bc6-afafc1b95217"}, "bdd4a900-2c00-4174-840c-0352831d5f9f": {"doc_hash": "6ba946f8e4e54824e525d3361dc0aab42894c0d0342614b6e623ada42009c107", "ref_doc_id": "f42db065-56ff-4ed5-9bc6-afafc1b95217"}, "ef3ad34a-889c-49c8-9f56-ea02ff411fd6": {"doc_hash": "66fa0f31b3959eddf0c5fa05a8d8bc788ac0a8241c47e3340694934994f94c7c", "ref_doc_id": "7b23acd7-e33a-4c5e-8dbf-504c94849de8"}, "44686243-92a9-481f-833d-521bd78d6322": {"doc_hash": "2c9db9e970afa3f14bd4d57f79fa317d290714902da650fd6651a5244dee32ac", "ref_doc_id": "35180dc8-95e1-44f3-8043-e97f652eed45"}, "e4f4dd0d-24a7-4a48-831d-6e761584e57b": {"doc_hash": "ba486aab96c6ae609b06fea8bc1a1db344d85bb9315a42907db8aa0219de49c9", "ref_doc_id": "b8eed6e0-8a2f-4afc-8671-7b81b4bad4bf"}, "cee3c258-874c-4b17-9a1c-781361f024c0": {"doc_hash": "6902359dc97c6ad1cb2e50fcfbf81c37db53cfe496e155c225d84e1c9ebbad5a", "ref_doc_id": "0d2564e3-5ac2-4d48-9c50-858540423f89"}, "f20cd66b-9f52-487e-8b46-6d330004b8d9": {"doc_hash": "cb9a944d4ce40825ddc77f4cd795944d14aa0221a42486ebde1b22e7fcf96e84", "ref_doc_id": "56adac30-e1fb-4005-aca4-db130f88615b"}, "9f01a8d5-aaee-4b6d-8186-168c9bdc7047": {"doc_hash": "b731a93cd854d7f614644cbcee2d5a182288392d776b5e06a3f44c68833be750", "ref_doc_id": "56adac30-e1fb-4005-aca4-db130f88615b"}, "7e1e0ead-92b2-4bf8-a196-24c16c673c82": {"doc_hash": "c4469c4c65d5bb63526ad650559f01313127b9e5f3cb56f374757e0cf7332d23", "ref_doc_id": "50e5c828-fee8-4c12-a4d2-f09b297889a1"}, "007c8ee9-b90c-42e1-9fc6-3808d6c9b41f": {"doc_hash": "9049ffba680d30ef9211cc2f6ae7ecaf5106e4bd449ff3b07e2a9b17206978b9", "ref_doc_id": "e54c1fbf-6589-4b29-9e6a-1e0512be5890"}, "36308075-d9b7-4383-bec9-abbf2960df42": {"doc_hash": "3f14c6f2f1bc506f3822f973d2e3baba0af6ef9aa32876bc76e8ec5a8b266d6c", "ref_doc_id": "0881c52d-ac30-486d-b81b-ccc63a26eadd"}, "97f86b0c-2a26-4f14-8bec-72970b3d470d": {"doc_hash": "017d29ee02d2eeeffdae1d2b2921a3b59e45ae744e1235370f9f20079b8ba109", "ref_doc_id": "328dde78-be5a-422c-8700-31a230c24203"}, "9f4627e2-fa2f-4e1b-b0cf-dc5db7f3297d": {"doc_hash": "c2374a7e5de16654b3364215fcd550d1d4c9aae90c2f16cb86efe6422cd63dba", "ref_doc_id": "6af5b53a-d0e6-4e2d-9270-944522990bfc"}, "8f16a91d-0a2a-4741-9682-a0531dfa9d38": {"doc_hash": "8eaf568d2ac8ccf31c5146cb9cc33980b838281cc8d1d408f3ba54c9d34290cf", "ref_doc_id": "51d8b98f-e792-482a-86ba-03c99a2fcd8c"}, "ad9ae60c-fcf4-4fd2-b02f-a49f0d65ef8e": {"doc_hash": "e7b027022577fea3c168b7ca16e0d34f5b4b7c536a90742e01e377e521f2884f", "ref_doc_id": "51d8b98f-e792-482a-86ba-03c99a2fcd8c"}, "8eb90ee4-7f49-4798-a60c-730945f61c0a": {"doc_hash": "fe91b04a7e60e10b01c4a9097251802e29ca1d125ec4271488f33a635e0a9e26", "ref_doc_id": "b32529a5-5c1a-486f-bd7a-dd00eb11475f"}, "6c0336b2-032c-40fb-b110-5dd9ed7e3c4c": {"doc_hash": "5e6e36c50635d8a5aae63a81249a4c65a75f79a6d92ca49f646ea0f7700f31a9", "ref_doc_id": "b32529a5-5c1a-486f-bd7a-dd00eb11475f"}, "b3607e79-5c0c-4d19-800d-790103bda024": {"doc_hash": "477cfb8e09880ac2e976507cefa8b08def6225047c6a4e215701910d5e6bbd3a", "ref_doc_id": "ca42a91d-8d2b-4ba8-adc2-7e775423b2c7"}, "71b03761-89ee-40a5-aa05-f28b8516b765": {"doc_hash": "e9c000075f77c4a3ddc715f820893ac5f70ee84d24cc683bfb903a52aa38c5fd", "ref_doc_id": "8e645981-817a-4859-8849-20f8ea3bf958"}, "09d32dac-5624-4c8c-bb07-c49e3f0a5b34": {"doc_hash": "e94b694c2b9fb6f30427e318c5649d1b7b18b630d556d9cba8b45d046a4cc621", "ref_doc_id": "9718fd86-7058-4bdf-99e3-09bfcd26e1a2"}, "9593c827-ae40-40d9-9ab8-d8cdeea3d28a": {"doc_hash": "95f3d3d2c43da8dd1f566a1c95329b2e73fefcdc3643ef65da774fa22d7c7cbd", "ref_doc_id": "9718fd86-7058-4bdf-99e3-09bfcd26e1a2"}, "2395ae92-7848-429d-8f93-87b509415b06": {"doc_hash": "596fcb88632eb8ebed6094be295bd19e86fd9a8153f1da57d27069c450ec89ba", "ref_doc_id": "6e4f9a52-6011-4ca4-92b7-43af1a7b754b"}, "3f6017f3-156a-4815-869c-1c295abb5f08": {"doc_hash": "69b9f304facfa184148fdfaaa2580cba0b7307f89001ee199a24891e20b1a365", "ref_doc_id": "d829dba7-f334-4fde-beb2-bf5de44e4a87"}, "40dfb3eb-ac61-4f72-a3a3-644d34d12e0e": {"doc_hash": "3dd0c7845b6e30fcd43e691bf8f44a84ba0ed98c336ff944fc1aee773c4fcdb5", "ref_doc_id": "d829dba7-f334-4fde-beb2-bf5de44e4a87"}, "3c0971a6-6312-4bf2-b6cc-43b432594c0b": {"doc_hash": "9a2379cf0f58f00a638a977ddd59c9d6f5e39db7400b268ff99324899a0eb7b2", "ref_doc_id": "9b6a7482-083b-4906-b57f-dc881a39b8eb"}, "0499af6a-be85-4661-9db9-3bf7cd698241": {"doc_hash": "278e3960cc48a2b022904dc82b62474ecc0ff28eecaa4644fb0fd28bd824a2b8", "ref_doc_id": "d4c65170-e9bc-4019-a6ec-21b87efd2e44"}, "d7af722a-d0dc-49fa-9622-651e4fb9903e": {"doc_hash": "b2ccb44d9cac3354edde872d580eb6293279fef86060099c10dd8acc557234b6", "ref_doc_id": "e81d697f-11e3-4d9a-b266-1349dbb12fbd"}, "89224f74-877a-4267-81f1-2e28e1a1122a": {"doc_hash": "53285e8d5721d9b1f28cc25f7f7e4d9344c36d2e9c51bedeb5aee3e38322f613", "ref_doc_id": "f0a675c1-1e19-4b33-a4e2-2b4981d09b70"}, "d14190c0-d698-4641-a587-0fe4c46b3222": {"doc_hash": "bd1c227e61e62e9c9f39b6699aca3983f37ad6883902bf4b700d3005336a4a55", "ref_doc_id": "498256a8-a679-4d3b-9487-0b94401fce41"}, "92a134ad-857b-476a-9201-275cecdb8993": {"doc_hash": "13be37750dcdb395056ac5c0964c2ded29a4410cafd1b3ab84faf81a11c58a57", "ref_doc_id": "a24c5a8a-eedb-4c40-9a4a-52f761e50d72"}, "7adb4dad-97d0-4710-84a6-e6d0ed00475f": {"doc_hash": "bb6007c1305e91c60d40e96053b189d5b69be53e5ff82bb2733942db87a12e86", "ref_doc_id": "a24c5a8a-eedb-4c40-9a4a-52f761e50d72"}, "42f947b8-1754-4fbb-86cc-f4553372ccab": {"doc_hash": "c2581c2e45776f22d1dcb0f83e1a6029f6d3132edb244bf07544b303c0e21ef5", "ref_doc_id": "8634b0bd-e4a9-43f9-8535-19526f8fe9f4"}, "e2c2ef31-6f78-402f-85b9-59ad79478874": {"doc_hash": "3ff03526006de31a353baa87b9707aab1b26d1c7aae94a2febcc2d3aca66c761", "ref_doc_id": "d6caec65-9148-4483-bb89-e8096c8e5226"}, "c9e51bc7-c2fc-4248-81be-0579aa6fc945": {"doc_hash": "1ef9014d97472ba55f6450e92ba727dbc242df20a44fede775686c77c48b0786", "ref_doc_id": "cffe936e-711c-4abe-b9a7-c10bf63a6a5c"}, "4d3fd578-b72d-402e-963a-9d9ddb774e24": {"doc_hash": "1068ff99e451458ecb0780ce2d40ac02d86542ccd3bc6b287d538ab4be20124d", "ref_doc_id": "4c1c9c97-efec-43e9-b671-6f754bcc5a8d"}, "53e425fb-fc2d-42e5-b0ae-f3fa8e6fc5b0": {"doc_hash": "1d8bc82ad1b928cec84086ee6a2dcfa1e93a56f69b9b8359b4c2cb59beb8214f", "ref_doc_id": "2b95165a-646a-4656-b7f6-d1da44d87678"}, "82358acd-1890-4a80-a60f-39fa26d8bae2": {"doc_hash": "538402c1896ecc65b996e1f55049fb574ee733c99ad0edf591980102432029d7", "ref_doc_id": "7bbca3ab-aaed-4e41-836d-278a8e5b0689"}, "2c8a6747-e58b-475e-94de-73835e9c3e13": {"doc_hash": "dad7fcdd8893bb38647ec3afc7644b4150d8c09152ab1c0d22414a4e08509cef", "ref_doc_id": "9ffb8c30-4c8f-4e6a-8fe1-adb9640da2c4"}, "c3303e27-d577-4c55-8649-4f7ba78a2a42": {"doc_hash": "fbebb18636052ba8a8df4f55d7c5727e209dc5d4b35a0d41c28ec1401033b994", "ref_doc_id": "3663fede-2101-4c4d-9ba7-4b1dfef452e6"}, "a5648aa4-c706-4225-8899-8a1e62bcfbc9": {"doc_hash": "bb76f17dd22d9dcdabaa2017a471eb01aba4cad67f7990192fc465a40c5d24b1", "ref_doc_id": "4ac79bc9-3cbd-4930-8b8f-500f8f742b68"}, "a2e76eab-6ea7-44b7-85f2-74572b7972b8": {"doc_hash": "c8bc08222b9c73cf1b51bc69a2444ace363c7d829e44151e9adeb307141f0e02", "ref_doc_id": "4ac79bc9-3cbd-4930-8b8f-500f8f742b68"}, "32a616d9-5348-4414-8ce3-5980e4827766": {"doc_hash": "7909d9bf2f81766e241e9fb7e04633475d41efbfb4e36dccf7931f29f22e3745", "ref_doc_id": "335b7063-7776-452b-89a6-cbd17640c4ea"}, "433a6444-78b9-4079-a176-6657ff564d67": {"doc_hash": "d2e76be4a04703b7f4a8d34d3116968b0fcc74dcfd143f90a56b7acf47cebfab", "ref_doc_id": "c3185488-af73-454f-9884-78a2d670d97e"}, "d24b35e2-9016-4871-aa36-9932c8043fcc": {"doc_hash": "7b340bde010cc175bb7ec51fe86825fc3279069d51a895a4cb8a285287640cfe", "ref_doc_id": "71e22586-52aa-4ffc-9294-a2886de9420a"}, "61e17edb-6c19-4778-be4c-abc53816b6e9": {"doc_hash": "288a89b9051a699af62877d9dd0b47a917f770a124882898c60ec7031a99a52b", "ref_doc_id": "71e22586-52aa-4ffc-9294-a2886de9420a"}, "75c2f334-7cbe-4775-8e23-bf4e1330c833": {"doc_hash": "51848a93293f5d16c48933d509cf6297a9d38925938a6802d6c8ec8292b6deab", "ref_doc_id": "9fa50a59-93e9-450c-921f-6e10ac70743b"}, "6637d344-fbef-4478-87aa-0daa97af4cdf": {"doc_hash": "d14e34d80280c6e473adc7f1c2ec0b757a3724cb13cac0633e92f0f1f58b7ef8", "ref_doc_id": "afd566a7-a110-4eea-981c-ae9a502183bc"}, "b37127c2-7b5a-410a-b072-6fae7db7d775": {"doc_hash": "5c2a074b6d151f222d8a7fe3637ea3e6f65f823db6e6fe3e94cbb3ffb1b8c68a", "ref_doc_id": "47077349-6f5e-4ef8-9ab7-0c9232528f75"}, "41aa21e9-fbe6-4e30-88d0-103599d9b806": {"doc_hash": "6e35de2eb94e00abccc01716199d703f2fe7dde95d185c8ed6e158201802aaf2", "ref_doc_id": "d2898402-0758-4ae2-a111-d4210f1d55d7"}, "286a5d9e-8c78-4887-824a-ea58afe42e94": {"doc_hash": "dd7d0dfb76bd256653329280db017d1fb3576bcbd73c07634b9ad7b9f9104fe9", "ref_doc_id": "4598e687-3e46-402f-af33-555c46198cf8"}, "5f0d489a-fbb5-4abd-93ac-f0d1deaec11c": {"doc_hash": "8de7a4db0ccde5c060023bcf3b4311bf4018acaf41481ad0a0be416f1a5750f1", "ref_doc_id": "c0e1d2cd-8435-46b3-980b-7f55e7344d3b"}, "354ed93c-dbc4-4fc9-bf0f-dce1007a3c94": {"doc_hash": "7e867b9b9aa05592b84345b90f276fd6279169dc608924b56393de7e8bf3c3e4", "ref_doc_id": "90707f2c-11b6-4e7a-aef8-9096eb6db2b2"}, "f42ada98-81bd-41b1-84d9-a29ec0f428d8": {"doc_hash": "22fbeff86c95078b8a4d636456354fb1ba96fd85122360a2f45a0edbcfc8bc6d", "ref_doc_id": "4d059e42-d4f6-482c-b043-f1975d856e96"}, "a6b669d8-8d75-40a7-b657-88d0f3e34da7": {"doc_hash": "7e5149840fad9bcdddcee5f726a941c1821b8d3fed9e8a51584c3dd3039beb8c", "ref_doc_id": "f5cc379f-94f8-484d-80fb-accfe34143dc"}, "d7927e0f-e3ab-4871-9c06-99309a2ede93": {"doc_hash": "9272ca1795fd87ed02195f9c647e7c81e5de8590c524540450bb5cc92cf964e2", "ref_doc_id": "6f28ba4c-3389-4422-a681-46ee6a85328e"}, "a311859c-1de4-4afd-8a48-fd5c8b69ced3": {"doc_hash": "129b18ec8f34be20eee53174470477c16345232818e34da353b73cd342435592", "ref_doc_id": "8cbfa767-a894-48a4-b9a2-a1d984d8b465"}, "63a55fe4-f155-4ada-a387-1d6a7af9a1be": {"doc_hash": "5204a57fa235d624cf9a5fcb3d6a6bf66a5140328ff2a13ec2fc1bf2d82f1f8d", "ref_doc_id": "7521c9d7-6759-47ef-a62a-76aa91f83931"}, "afb73ac9-c63b-4961-ba2f-66c889fbec1a": {"doc_hash": "37b6ebd7218b70a5e0ce3dadc2e159e41e0c84de1be85fc4d211295ab5072228", "ref_doc_id": "7521c9d7-6759-47ef-a62a-76aa91f83931"}, "2396d0fe-bdfc-440b-91ad-2dc3c8afd843": {"doc_hash": "9a20fc51ef9c3744a416204ea96ff25e7472ad02a79954219fe11f26e32c769b", "ref_doc_id": "7521c9d7-6759-47ef-a62a-76aa91f83931"}, "d74dea6b-0288-4026-8088-2fe78e893e70": {"doc_hash": "ac9fff6e9fdce958f1dbec77c5a953df2e098eb923c135282935fb7ba5112c04", "ref_doc_id": "fd357d15-6e69-47bc-8a3c-9076059ca1aa"}, "7f502ac9-71cd-4c7f-a917-967396de942d": {"doc_hash": "d961d77fd55e4a67772cc9abbc0d920e009a5262d96dc0f6dca016350477be80", "ref_doc_id": "39f75cde-83ff-4fd0-85c6-9cb2f4dec03b"}, "c102ca41-67b1-4fbc-b8ba-a7bc353bb4ce": {"doc_hash": "5887de89413b21bacdb0c5eca319ee1c72af86e5e24f9e57f0cb6f8e737e13af", "ref_doc_id": "a337ee94-e861-46c6-a977-4b1d27207607"}, "bc17cdb9-0dba-4e5b-9e0b-bc06f2b175d1": {"doc_hash": "4aabe71b7003f87e0232d9fa10c6c613ce205e849aef5edaa9e42fe64d9914ec", "ref_doc_id": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8"}, "aeb573f6-5f1a-425e-bad5-34c4ea637293": {"doc_hash": "6cb43791cb10dc598918aadccd5722c171ee558ede4bee9f40afd574c8c8df34", "ref_doc_id": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8"}, "96a4fa6b-8f08-4ece-95d9-89c085259679": {"doc_hash": "70764b55faf44f02f18dd91c8cbf942a8e54d4290da8e51f598924bc55ff542a", "ref_doc_id": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8"}, "9b20e937-c179-4e11-9d06-bc9a72e7ce7b": {"doc_hash": "0f85036a89c809eafa494736ef05c069519ab33967d6b971b8668f7eedd445cf", "ref_doc_id": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8"}, "a7eb74e6-5e52-4f72-a3ca-012bbd68774a": {"doc_hash": "ae538ce228d593b13bd513141bc76fa2aede43cb2726b2760d2af0b70c1b86b3", "ref_doc_id": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8"}, "7c33e08c-d449-4277-87ca-9aa177e2d592": {"doc_hash": "ad550f93a0c90e884ff0ae5f028fc5a731371cdc9b7d5d0a47e90c39cb0d7d36", "ref_doc_id": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8"}, "a8a8fe34-2aee-4354-8e75-378e1956169e": {"doc_hash": "7e33f214676037d6754f05f1d81ef182ceac9e08543501731854998672d4be99", "ref_doc_id": "9a52ae33-d8c2-4345-971c-e027d78d6572"}, "bdf60020-de77-4c6a-af15-91135247ce28": {"doc_hash": "02bfcc16abbc756dceda9a4e87571217d0b698932060c93c0f6384ce038d0467", "ref_doc_id": "9083eb9c-0989-4bb2-b3fa-9f02fbc6acf2"}, "c2684062-76f8-44b5-b323-85004de742f0": {"doc_hash": "1f5f39db082514dcb7d7af7bab80b69976abc09c4364b02f12348c02b886b1ef", "ref_doc_id": "82a26f48-f338-46e1-ab78-77aba2d98c7b"}, "6707f1a7-2a0d-47cb-b471-fb984b6fd7e6": {"doc_hash": "81a5ac739e12ed5eb201b352229181eb5b752c51026a7c18edd501bfe16b199a", "ref_doc_id": "aec303e5-bf22-4867-87a2-fff16eb9fabf"}, "9f76359e-4bc1-449a-98cb-48d1e0bdad86": {"doc_hash": "b3a56cb2eed87f83b7fc9ca8dcaf9f0dbd624e1febf811240a02adf057e29018", "ref_doc_id": "7d1edffe-b7b7-49c1-8227-29ad315005f0"}, "ecbbe97f-710c-41e3-8161-fd8071bf5058": {"doc_hash": "688ba02673ffbe2f65cdc6917740baa697a236af32a116952f7448d9e50f4732", "ref_doc_id": "65e13cc7-4604-47d7-ab3c-05b67bd57050"}, "53b51d92-eaac-4483-9af7-a2076dc568d3": {"doc_hash": "d1ebb1a5d5c109d56f26cc82a0c230bcdd0434161ec1dbfc99107eaf38ec6496", "ref_doc_id": "65e13cc7-4604-47d7-ab3c-05b67bd57050"}, "9ea45f58-511b-48ff-8823-3bc28bf5dac6": {"doc_hash": "2209ef682cfc55fe9014a41f35d4644d5d2729b5178c06f9528e1c2451c9d6c6", "ref_doc_id": "45ca20d3-9a52-4ad4-b21b-b0e0ea6291de"}, "d137ce59-1287-4a4a-baaf-3b0985c30a7d": {"doc_hash": "15c80adb38c2d85412dfb329c70ccb64032e1ee65db567280849eb733d8ef5e7", "ref_doc_id": "f50ba7be-16a9-4851-93b9-37a240bb19b5"}, "8fb2b68f-5aef-498e-9981-7131cc7e7d85": {"doc_hash": "e9de2ff3e68f85ee5f7f68565f909570e3de783e7223a83278876db9d728ab5d", "ref_doc_id": "f50ba7be-16a9-4851-93b9-37a240bb19b5"}, "964c7418-3e05-4905-836b-5f75ec97e094": {"doc_hash": "7a89d455fff972b938d9a10da5ef64b716a71c6e5975ec892e2e82ebf52d5fc0", "ref_doc_id": "f50ba7be-16a9-4851-93b9-37a240bb19b5"}, "dce81be4-2e37-46a9-9e07-fd447f198e6f": {"doc_hash": "7cc7a219ed0a4cf0b017577b08d7c8acb43a7aa3fda0ee32a37fb013f47b148b", "ref_doc_id": "9c03e6f4-822d-4692-bcfa-827aed8137db"}, "6537fa30-cedc-4d52-852a-85c2d9e0d688": {"doc_hash": "89dd4430bfcf324291f63bc3cf484f670c869a0af7cdcf1188842ddb0b6c84e5", "ref_doc_id": "9c03e6f4-822d-4692-bcfa-827aed8137db"}, "ae340dc6-c9ae-4043-8a60-0888eb042624": {"doc_hash": "22f5d0110bc416168a2aaf285bbcf2014955b68899ea672fdb26ec543d5c6ac1", "ref_doc_id": "2211243b-44b5-452a-9bf0-22f8cac74ebd"}, "bca4b3a9-9999-44e2-bbb8-b48a259d6ed4": {"doc_hash": "9087ca0816a74d5f2674d30f31b2cce065bc95793bfa2d9ddac711b320f2401d", "ref_doc_id": "2211243b-44b5-452a-9bf0-22f8cac74ebd"}, "ac9a9161-7ac9-4e63-9c02-cd6b7495e625": {"doc_hash": "de8ab1552fef5e40cb45b0a809d2c56c21e5eb09477537e436f82a51a7f2c602", "ref_doc_id": "2211243b-44b5-452a-9bf0-22f8cac74ebd"}, "3814df53-62a0-4b8e-b5d8-fc48b5a07b57": {"doc_hash": "e57d6d4a9e5dcca2ecba0f3222e64ec17c309c9528cf3b5445618a84d2a7d6b6", "ref_doc_id": "22633822-2951-47ae-9575-1192d148f7a9"}, "122143d9-0b23-4b9b-acea-4ba577533585": {"doc_hash": "e656a1ffc8fbf4216a3b180e9d19a62624c16a809b404b65aa549ca3bc061b87", "ref_doc_id": "5c2d91c5-1ce1-4c95-8ef4-40fa7a5d4e96"}, "16244553-8122-45fa-94ad-465ad53e9f7f": {"doc_hash": "4de00d2cb196b39a1a8bd3f40a45cbd7d9ed5d522181a8f7b6c06c78375edc93", "ref_doc_id": "bb6207c6-4b32-42e2-9b85-da07c23227ed"}, "c0b17737-b3cb-4d11-bd68-cbbbc1e1096f": {"doc_hash": "3f115cb8912d0cde4f0ca7cc751ee26ee68813017ffb02b59e228e2d7ac1b35f", "ref_doc_id": "bb6207c6-4b32-42e2-9b85-da07c23227ed"}, "bc8f669f-1ab5-4714-8c0c-49986b7d6f12": {"doc_hash": "170cd9f875e3a8f1f57a39d08fd253b6fa003ea845ee0e56c7150afee9f4e049", "ref_doc_id": "0f27e216-4b02-481c-ae19-6c8c507dfaf1"}, "4f8b3054-d62e-4171-9bb1-d27af1e797d3": {"doc_hash": "bfd5c2fad2ae68534b55230d9ef40b4e86a1a95939ef66aaa264b58a9a81c751", "ref_doc_id": "ed305d92-9308-403e-af76-0310bb7dde19"}, "2f181e22-83c9-467c-81f6-42d2da9fce5c": {"doc_hash": "524f6c2f17d66fab5cb556bd84f44a868014ab07b9a4ab0a7b9d0879af5da5e5", "ref_doc_id": "ed305d92-9308-403e-af76-0310bb7dde19"}, "df5376b4-93bf-411d-a498-9a6baee29e57": {"doc_hash": "ef62d19393f49e4a77d69883f8abb9437f0aa8aff6013b00b0d698c31791abd5", "ref_doc_id": "fee2e630-636b-4de5-a8f1-4b1bbf3f3cf6"}, "3044b959-d29b-47f4-9e9e-314f2f57a9ac": {"doc_hash": "5138056ee194059e09d61e890703fd90346e722e142440e003a7758729bf2e92", "ref_doc_id": "a7afd14d-1708-4eb5-910a-96fd24197561"}, "6333d5e7-ecdc-402d-b026-fcc5a24602d9": {"doc_hash": "67c2c8b14b7a0ab4b63c0fa54aca2cb3598180fc88089de59de8725abb12adde", "ref_doc_id": "1be9f85c-a1e4-4f19-9d36-1b88a1d16631"}, "30c64545-ba0e-46f4-8ded-b95248e04249": {"doc_hash": "6f51fff25eef6a2f9d6adce9e24cb8f9b5ecef58ef905688c57a9c356900594e", "ref_doc_id": "1be9f85c-a1e4-4f19-9d36-1b88a1d16631"}, "de233484-494c-4dd2-8a03-82d1d89490e6": {"doc_hash": "f73a780b81ec98cb548f2a0f86431b714e9bc7fde94429459e459474d0cbc4e1", "ref_doc_id": "cc285eff-c1d3-4e2f-9186-934d3da74e10"}, "f474ade8-79d3-4652-9a1e-4c687f281018": {"doc_hash": "39783c636c9af176c67ad0a995ba52270746d5020b3f6381f4a1556b0abbf0d8", "ref_doc_id": "9bf621bb-1287-4ef9-884a-944fde799720"}, "d6c15559-e4da-4864-9912-51d36db56413": {"doc_hash": "78902e2e7a68513999d83c5948f44746305b12c47f7318cf29e581067b188420", "ref_doc_id": "7d47b796-d69f-4a87-8234-d0629d1155fa"}, "cd2c3088-e9af-4d1b-ad34-84c07a9f5530": {"doc_hash": "69a5526c896fcf122309dd00b57e106a7a31e5bd01218731a1dab24296fcf630", "ref_doc_id": "a7276d79-e83e-446a-947a-c15072631047"}, "f49ea804-b81c-4edc-9c13-279f048ee088": {"doc_hash": "b37b165ec6c63dce1be22272c6b66b9c6a9f0d4a13e36d9491b2d1b45dc157f6", "ref_doc_id": "c78bd177-fa9b-4ece-be84-46c77a169b27"}, "b85d199c-4ca0-4adb-a1e1-b552af5c5dba": {"doc_hash": "e091a4ec62633d58c3d7c2ac1a0d22aba0ef0593b1d2fedc830a3846ab92d508", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "d5f07dbc-b4bd-48c9-ba59-8d2c55c1a7c4": {"doc_hash": "09189c3e8d332f958f3305c0202d07159f4ff7acddc7ff6077738b50df5d1309", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "c8bff656-39c7-4e0a-a2c6-59f73a147312": {"doc_hash": "4ad54a50d8b56756b2aa298ac9e6ef888c0009530b070c5de46eb15132872990", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "b84629d5-5740-41c0-aee5-eecc14f212bf": {"doc_hash": "e6212c5cafe4f1b2bdc53d4aa1ac21f4206a3f1589b6d25753d73e69a873fb75", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "896e10a6-42a2-407d-b5ff-fde999481d55": {"doc_hash": "af58161dead76fbc2cef8ec0d141aec2927b4c273673d03b8539a6bb5768745c", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "75315c01-ac2c-4e30-87c7-907724f4f852": {"doc_hash": "ac0d145fda0871f9f7c10dd9ce069761286238db5b485aab2bdeaaa3775acae9", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "e8e0557e-aa9f-419c-8dd6-ec0cf68ef837": {"doc_hash": "11d2d49fefc5b80d67a80c3f953c6c74f717bfaa54a225bd23ed167d91f76b98", "ref_doc_id": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d"}, "aa3fa935-0f20-42fa-ba9a-a9644e44b756": {"doc_hash": "96c966cbba99c53a0b72cb114675cca444a11ca51f22fa99b1d5057b034bb26a", "ref_doc_id": "05c3801a-f835-48a3-9009-86e66e22f8b4"}, "37ac3a04-b249-46e0-9cd3-799294fc0d4e": {"doc_hash": "61581be9c7797b9f356ba5b0f66db151ea5d77d80bbea7faa4a0ab0119718ea6", "ref_doc_id": "05c3801a-f835-48a3-9009-86e66e22f8b4"}, "4e90bc47-e1b4-4dce-a6eb-48f943b97270": {"doc_hash": "b908b755e9f6733f5af3c82447c2ed9411c28e75edc2421cf8cb25653165dea5", "ref_doc_id": "b74ff1b5-e0aa-4d84-a378-14040e11cef9"}, "b0e08832-d657-452c-8a33-082a8aeaad82": {"doc_hash": "1f3f8477669b56ac2da98c74845a95de10e28fda6500c881570286b8c6dcbebf", "ref_doc_id": "359369b4-74e0-4d30-ba12-05010a5345d0"}, "b6c69e6d-cf7d-4065-abad-8d54b2775a0a": {"doc_hash": "62fcf89ee6116f335b0c3c449e76212b2e6b7431fa90d43ca97cb1f619487747", "ref_doc_id": "41be2939-14be-4f5b-a6dd-d1f2bd452c7c"}, "e4e87621-8ada-41ab-8ace-9cb59048ce1e": {"doc_hash": "d19e6c0ca2d775693b61f905582a0343d6c194cb1a1a19088bef2987c22f48af", "ref_doc_id": "41be2939-14be-4f5b-a6dd-d1f2bd452c7c"}, "f52f2b07-cc7d-4cc8-9127-a57db09ba910": {"doc_hash": "5071f953d9a73a2cce63e8f9d78d006ec1c1c038bec69e1130994831b52953c4", "ref_doc_id": "41be2939-14be-4f5b-a6dd-d1f2bd452c7c"}, "fe3b6026-e45f-4e89-acef-46e8ed5d77c8": {"doc_hash": "813c457b30d24e9b712a637c63544e6f441eae1a116e455642199eea43478844", "ref_doc_id": "440a5b63-c639-4618-8663-1516f7107a5e"}, "03f5a904-b699-4542-9bfd-846f0a5f6142": {"doc_hash": "5f8650674eab9b91398177d77ba130913ed3c72635bef3756b1af6ac7a3294a6", "ref_doc_id": "dae3c2bc-3288-4783-86bc-760f2ae6f945"}, "d8ccec8a-565c-4f65-acd0-863cbed22ad3": {"doc_hash": "a081f29577139bd6a9e06f72d3ab394e67c1e050eba600e471133c2c45cbc7f2", "ref_doc_id": "3cdd291c-f8cb-4158-8bd7-6bd73ed31e4e"}, "8e9a80b0-6c72-4787-9673-a14270ec4731": {"doc_hash": "6f04b8d8ce7c0e3dc6dc947c2e37d118fb7ba9ecb3065f71441bde9c2f99c16a", "ref_doc_id": "ac743f89-f3de-4125-a677-360f283b5aba"}, "1c2c8921-9e62-4a0e-8c54-bd5c3bd56180": {"doc_hash": "88a6822d04a1a304c4ac45bfb297f204b8d3572cf3d8a8ce278f452c584f0671", "ref_doc_id": "9cfbcb28-6854-4c16-b18c-ac8916a96193"}, "b406262a-39f9-4eda-a2f0-77569235a484": {"doc_hash": "922545594029394cc3482eedb04cc701830a6da4d3e69208d89862667de043ee", "ref_doc_id": "1f693fec-5edb-47b2-994d-96128d9bd262"}, "43a53b8e-963f-48f1-913c-f4e1b9a0fca1": {"doc_hash": "3946fa5990acc4d340cbc6d61d167c209b5119881f6bc8e339e226cef846e4e3", "ref_doc_id": "50311660-e2f9-4712-a8bf-da5f413c2135"}, "4458cc67-a0a6-49d8-9783-154e76a2094c": {"doc_hash": "586f3077d098d016533eb8b28b020e80b4b766256894b322d692238f9f92a2f4", "ref_doc_id": "1c52626d-39e4-43c7-90e3-839322b4ee6a"}, "e8089dba-c086-40c5-952e-2b6c598f3d7b": {"doc_hash": "9a396c06b45e379d09c988b68322e9c43dcbca6fc9afd40a188d9cb484c9fcda", "ref_doc_id": "22a08ddc-ea62-47a8-add2-316a99312fdf"}, "311e7959-b9ae-4bbb-9348-f8ffcfc6e7ac": {"doc_hash": "5d74fb3288374d3ce8431b7a68d95b3287e932b9a3c662db466d98a728aa346d", "ref_doc_id": "af2c3795-d140-4c41-a8ea-f8a7dc17cf5a"}, "ce0acce8-24b0-4e3c-a591-f4240baefc60": {"doc_hash": "fe518c38a21c5c1caf875b8d62aa9db9ba4ea3122897129fe3de93260ba6fa8f", "ref_doc_id": "c12d7f98-c884-49b1-b2e0-4c0b18b39c71"}, "3969dfe4-7b62-4fc2-87bc-1f672b61800c": {"doc_hash": "b4ebe66a37fd320e2b02b542265c3ed66bb35ca59812110e23d2824e2ba7c4f7", "ref_doc_id": "70d92ac1-82f8-4108-a8d0-8d0901b1f9ae"}, "ec59a3fa-d1f0-4676-b267-ee72e21a8e84": {"doc_hash": "93ab6d1de2e76188109fbe0e598a13f98e64d46538a6b4b78ecf74b985803a12", "ref_doc_id": "70d92ac1-82f8-4108-a8d0-8d0901b1f9ae"}, "6e198b31-05f9-4b2a-865f-5e633a420058": {"doc_hash": "4a3558b0274a3aa6d0d26d23c9ba4ee4b50b947f8b27e0efd6556de57cb5b4fb", "ref_doc_id": "256a90e7-1492-46b4-9fe1-db7e92796fb1"}, "583be6be-4f38-4234-a02e-15de6dcc94ca": {"doc_hash": "33dad04fa231bb16aa0dbff2e8453b7ba220d7147e579d53944a00b7bb965bd4", "ref_doc_id": "256a90e7-1492-46b4-9fe1-db7e92796fb1"}, "c836bc35-3f36-4e91-9b15-80427f159d1d": {"doc_hash": "b273951d05a776a0a8b7bfa7428dce308fad939aaa9c031405107a400de5da38", "ref_doc_id": "256a90e7-1492-46b4-9fe1-db7e92796fb1"}, "8b546ea0-e82a-4162-8f9c-693888cfdd31": {"doc_hash": "2f83f475935ddcf136cfd0857d0b2ce5f9c471cd12a464822ad46aafeb640c69", "ref_doc_id": "256a90e7-1492-46b4-9fe1-db7e92796fb1"}, "d35a3985-bdf6-467a-854d-e5a9fb22e1ea": {"doc_hash": "d830bc61d576303b7c160026d5a11624ea031ff9e2441e1192b3392225ce7fa9", "ref_doc_id": "256a90e7-1492-46b4-9fe1-db7e92796fb1"}, "1b917eec-49cc-43a2-a249-a045a1eac0e7": {"doc_hash": "808c6997644df5098c7c56797e90d2c7a3a560037f933f23b2850be6cb7e2da1", "ref_doc_id": "256a90e7-1492-46b4-9fe1-db7e92796fb1"}, "59ef8bf7-33b0-40ff-8d5c-e6aebf14a23e": {"doc_hash": "fc2d9f557b6848a7a391df99ca643201bb151af28f3f5c4377cb1d199b25b9c3", "ref_doc_id": "31550f3e-33ab-43ce-9f7f-9a830a1596d6"}, "9e45b1fe-a71b-4e62-bdd4-f995c1944c07": {"doc_hash": "2a211d590bede439db9675e0f52a4d80c1532a3e75a570ba77ed099e015791fe", "ref_doc_id": "c16a1353-52d0-44bb-b8e1-b8fafd5cbad9"}, "09f055ae-0319-40b9-9e32-fed709a17920": {"doc_hash": "d8a16d886bcdd01cc94a531a28ea4f05ef7e348a808642cf5f5efc2c4d89c108", "ref_doc_id": "161bbe4d-cbe8-4289-9ce4-6c08b262eeaa"}, "313079e2-cbe8-4b08-bd3b-0cc60846a8db": {"doc_hash": "9b1c25c931cbc5b1e37ed997c5a8e2d91a666066fc59681f4221777ce608e113", "ref_doc_id": "08720dee-6c13-47bb-874e-c8dab90a8963"}, "eacae598-8adf-4695-b753-33e13398dfba": {"doc_hash": "c851eb92437fae98c2d11790f974b13f544e5f4cca5888d163a4ded0bc16d4b1", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "0992bc16-09f0-4147-967a-fb9071d0c564": {"doc_hash": "075337564aeb41683663a2a83447612f2d3407040b74a583c1d0511003c64de9", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "aad08716-4d9d-4e8e-b993-df2ab0ee2b82": {"doc_hash": "9b58d0abaa33ad550bedbc7263d0f4ed5b0f3118f5c7cc69df7436a57dd1fb07", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "74c3aac2-7711-4e8e-a610-a22a40869c9f": {"doc_hash": "eb09b3be5ab5a9d99b7b166759c802063568622662a921ae04be348c25a89d3e", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "f47ed1a9-d036-4e76-8928-5ca3cfd975d7": {"doc_hash": "c51cf9f37433f7e326442bab5c2aad38e7eab9c40753f380894305221c1bacec", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "a55f13a0-1417-4af9-ab69-7346d95c500e": {"doc_hash": "6f552161a213a479bd7eac7c1b64e73f5a3473eba7699cdaaf172402b03f31db", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "79429f11-1e58-451a-870e-d02b164f82ce": {"doc_hash": "69716dc61aa3509517cc3fea46ac95cc4f5ba3de40f64802a709cf0eeb4cf4a2", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "a3107513-4df1-499f-bbb1-3e7db5dea53c": {"doc_hash": "dbcceadd0815e0b54b55de087c92be17b288b072dfb624f918e516e1ad4d903b", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "7f18c61a-78bc-40ab-ab5d-f5617e9f51f5": {"doc_hash": "19ec447e4810d25674b42bd1b51839bd559c0b1fed794292468ed03818607b9a", "ref_doc_id": "0e6157c4-b777-4911-bcfb-0756ef7aa163"}, "757ebc42-76e2-4fdb-961e-fa38b97a211e": {"doc_hash": "72b4b11eb15661ae260436e0074213218b4565f4b85d9e314fe854eda546e538", "ref_doc_id": "eee3412c-3791-4d6a-a064-ff044afbac98"}, "7ae188ff-7f6e-4e18-98bb-ff6f4fef3450": {"doc_hash": "785aa5a1204deb2ae4581518fd272f4ed69d4acd5c95eef96a157a66d19e7d5c", "ref_doc_id": "eee3412c-3791-4d6a-a064-ff044afbac98"}, "7b239a19-a599-4997-b943-4e59c017d776": {"doc_hash": "2abf8bb72fc5034facbb3b0bb04f1e1ad26136debc66070e05d5b76f222f98ba", "ref_doc_id": "eee3412c-3791-4d6a-a064-ff044afbac98"}, "5290a4ac-7b6e-41eb-9cf7-4cab6b54fa91": {"doc_hash": "775f7bf6a02a93c2b70a26ac6d79fa9e90e14caa15d063c08d5150957943a1ab", "ref_doc_id": "85f62711-490d-4e0f-8d5d-167e868e706f"}, "77567b34-6503-40b6-9ffe-327aae8701ef": {"doc_hash": "0441594ae417a246eeb7b3b360857dcd822f207f5947be8cc8bf809b568304f1", "ref_doc_id": "85f62711-490d-4e0f-8d5d-167e868e706f"}, "c87d977f-5ba1-4c1f-a7f1-21c821cb0a31": {"doc_hash": "305b85efb17b7872f9cbb66ca7fd30a73fa8a54f40aa2928894e1cb20283cd3d", "ref_doc_id": "85f62711-490d-4e0f-8d5d-167e868e706f"}, "44beb03c-341e-4f4e-beb1-a077e8ccb039": {"doc_hash": "03b8e4fc1c3ec7edaaae732b3a2eac3fa7d044888f92c090cffa08a1ce8d979a", "ref_doc_id": "3f44d0bb-2268-47a7-b8e2-678d926a89e7"}, "36cfc8f7-accb-4680-8c5a-f451c9e8ee32": {"doc_hash": "d1af45d1c70b73024bad713589fd56f7bccc1d2d66af2f95739a83e6601ce610", "ref_doc_id": "2a6017ca-3554-41a9-bea1-b2d676d7bbb2"}, "10ede6ce-d5b0-4477-a584-54af35558a27": {"doc_hash": "a5bb1470c74e14750a3a9bb81e13089bbb58773b473bbc8bc55d5bff4cd18e5c", "ref_doc_id": "4c59e0fd-943c-48bf-98a6-3652cf72a05f"}, "21e5b78d-853d-4f67-8513-aeba11b3b089": {"doc_hash": "d306814d207d52d3a9002af78ed986dff5b9575adbb5a4e275574646fb7e3e42", "ref_doc_id": "d901b462-1fbf-455a-9537-262368e392d4"}, "d9355869-8188-479f-ba91-b3a849f3feb0": {"doc_hash": "9f49599cb8721d2ce7f8eaa5f311f1f07bac47cd508cbbbcd1ef65218ac99737", "ref_doc_id": "02af9c40-b042-433f-ac24-a325a70e1f36"}, "6a9d8116-d789-4016-97de-a7a5ced7a13e": {"doc_hash": "8fe61270119220dc980d9e60791f28642b58414067edadba0f94f62e8d10292a", "ref_doc_id": "02af9c40-b042-433f-ac24-a325a70e1f36"}, "4df3708e-e1c6-4c96-a61b-eed3d27bf09c": {"doc_hash": "07fa63bbc39cd9ee493cfb5f19c73dff917b76b240cd1631ffd08314998b9411", "ref_doc_id": "01962dab-dd21-48f0-9653-b6ca2769d285"}, "5a1a4e79-6334-4c46-8aa8-230f686dcf79": {"doc_hash": "9a99045ecb9844feef9a91f36aa0f6ea2d8555c4061b5761bc17f7808b27b6d7", "ref_doc_id": "0fa9a2b2-30a9-4371-bd74-3e5e72c60feb"}, "747c4740-e247-466c-bc1f-aeb8c73b0bc4": {"doc_hash": "22a7f11db1af98ed8d0a4f4fe5ef60a27a012533642320749a486bbf772e9bb3", "ref_doc_id": "1c037a2d-1643-40fa-9b6c-e969b225bbf8"}, "5878eca1-8dd7-4e61-a735-da45eae7e4b3": {"doc_hash": "009ca05aecab85755ed9909f0f66e1ee2ae00f1c01fa9d8d3958693d95e3f10b", "ref_doc_id": "1557277a-62cc-42cb-ad65-9b557391f8f8"}, "f60374b7-e6f7-403e-85d9-f0117111a926": {"doc_hash": "e7fba59e11b438f5378b327f4b33996775a1f8679996f9c30d83fd156f12e017", "ref_doc_id": "190afaa3-e863-4aa3-a7c9-a132ac68873f"}, "30952e72-4860-413a-a6ca-6404f162f822": {"doc_hash": "2f9c79b9cfbf57025a1036678be6a21be48348fa01b7ec4df06b1e9251758ae7", "ref_doc_id": "8ed2d930-3c06-47af-9393-b21d93d3bf04"}, "0df00af9-eaee-4c6c-bd68-b8441fc0c96e": {"doc_hash": "06d015cdb377917bb711a841b754b9861b0e405ec6fb97acbf7b2b4cf98c95a7", "ref_doc_id": "8ed2d930-3c06-47af-9393-b21d93d3bf04"}, "8d8502f8-f856-4db1-9dc4-32df0e81ca31": {"doc_hash": "5fd8bd34f9b6aea4741bdde8db323c1b997ae988cfd27cb0593328a0bae0f5ca", "ref_doc_id": "8ed2d930-3c06-47af-9393-b21d93d3bf04"}, "1ccc3eb6-8f51-428e-8638-3cbf7246e29a": {"doc_hash": "e7326bf32af4753b82339e1aa15282b7d399ea8f2f9fff8639f7d04b1607981b", "ref_doc_id": "ca74daf6-d95a-4832-be3e-ad2cb1653393"}, "6f82bdb3-0002-433f-b688-aee378e6a17c": {"doc_hash": "981e18cd1098b1e3b4526d0709b226dafa60d0f74effbdc4350d1c3b0768bfd1", "ref_doc_id": "ca74daf6-d95a-4832-be3e-ad2cb1653393"}, "86055967-d5a5-46dc-b6cc-478838cbe4a6": {"doc_hash": "4cfa7f096abb5ac56eecad291d2ce7ca12c95c33ef12f3d9697f2c2717170b7b", "ref_doc_id": "ca74daf6-d95a-4832-be3e-ad2cb1653393"}, "3fa6178e-1245-4378-b45f-04c5053250a6": {"doc_hash": "9d8149f29ab02714692e845d651424d7e5a5538e5555dcfd50c304ccadd159ef", "ref_doc_id": "ca74daf6-d95a-4832-be3e-ad2cb1653393"}, "84e683a4-26c2-4af4-98c7-1f7d7efaba25": {"doc_hash": "40547da8490a1cdcab1957550140658a284c937aeeab84d904bb827b8ec77c8c", "ref_doc_id": "c380a3d1-633d-4218-940a-bba23769ed86"}, "3c810d7c-7c49-4e31-a434-8f4f562d4d6d": {"doc_hash": "8facd41c9eaa68a0660c377c8f562fb39cdbacb41cd92456808f27bce365001c", "ref_doc_id": "ef278c6a-dd99-4ad7-81fa-16f396db38ab"}, "a8d13bc5-8498-417a-b45a-c8801c220b06": {"doc_hash": "8d3922eff31c76ea173eb974d33b85b8ebd543b9a4835844ee36bc11b9c30108", "ref_doc_id": "ef278c6a-dd99-4ad7-81fa-16f396db38ab"}, "fb777cd5-2514-4217-b8af-ef41525121f1": {"doc_hash": "e109984f46a78464856d004c794a882203a29f1aa3769cabc8ab5f177300bf30", "ref_doc_id": "ef278c6a-dd99-4ad7-81fa-16f396db38ab"}, "69d0ec3a-114b-41ca-a362-3bd0918be710": {"doc_hash": "18a4e23a0a5b2d187eae91aa4f16bb6139bcd20edb21b63c3686a94b77b3146d", "ref_doc_id": "ef278c6a-dd99-4ad7-81fa-16f396db38ab"}, "b51fd1e5-ae4d-45ed-9357-b91ad9a532d3": {"doc_hash": "6eab8f0dcd8562b6558b49cd0ae08b051b00ca97e6ded74f260f819498136042", "ref_doc_id": "ef278c6a-dd99-4ad7-81fa-16f396db38ab"}, "a04ee503-6034-49ce-834f-f82e3a9946e2": {"doc_hash": "11732f15478d37ca72fb027202d21a72ccc2dfcc897e2ab80e75f7abafb0d522", "ref_doc_id": "7df98990-3765-4a07-87e1-1531ae9200da"}, "ee39ed17-9cdb-4c9c-b256-1bacc9e86b03": {"doc_hash": "cafbd61ac033ad7e81ec2e933e79656977644360311eb090f933c4e5f20baa8d", "ref_doc_id": "a3305451-4b8f-4934-a041-affea476fdc4"}, "58ad1cec-7e26-4634-9e99-bcea093f36ee": {"doc_hash": "51964923cadf5fc598b67a073af8a7e7a05b8cfe7b9384013d1c7d83a32cbeb9", "ref_doc_id": "f0d773b1-8620-45e2-826e-be237ae7d0fe"}, "c52f800e-9b4d-42db-a310-3fe88ff2e778": {"doc_hash": "2bcc378fdf1f22649fe141da91c58d815fc75f30c7f364af8b151f116cf480cd", "ref_doc_id": "f0d773b1-8620-45e2-826e-be237ae7d0fe"}, "93df3978-bf3e-4ca2-9d32-f60058b37e6f": {"doc_hash": "cb02520948b3602f65fac4831b465e0be13d22c2cba034d4b7cece2fa14cd89d", "ref_doc_id": "9961e50b-c328-40b3-b0bc-d749de739153"}, "1efdddff-8acd-42fd-9447-b27d95039767": {"doc_hash": "1b92dd3a66858035c8eed0f640158114b629a96d01cf256fd2a2de66f9930aaa", "ref_doc_id": "a720d204-8b5e-408c-8d9c-d031c4e867a5"}, "0b376168-1a32-49ae-9b11-22c8d54a5b48": {"doc_hash": "cb39d4d9eb1cd95b50e2e1250b4e500c3e25d58961ba6abc02c6de930f19f302", "ref_doc_id": "a720d204-8b5e-408c-8d9c-d031c4e867a5"}, "a5e10307-f5df-44ea-a7b3-29fab8307477": {"doc_hash": "f37d343c688283220d84505716cc48ab35de852cf5350a61d40d3ae21c609006", "ref_doc_id": "a720d204-8b5e-408c-8d9c-d031c4e867a5"}, "aa3451a6-1e97-4532-ab28-c92ad4881d82": {"doc_hash": "236bc9f0be194f392704957f5b491d92d4c1b8608c59b6c92d5f9f59fb6bd351", "ref_doc_id": "a720d204-8b5e-408c-8d9c-d031c4e867a5"}, "f61634a6-585b-4616-b38f-929497e9d44c": {"doc_hash": "9e2d3ed03d302c4e178f81774e73924bdb98e39ab61ec787b53eefec42946ee4", "ref_doc_id": "855ae1d1-ac7e-4c73-923f-5b773fa837dc"}, "59b661fc-7b42-4837-8be6-bfb6a94471f4": {"doc_hash": "e5c2905cfca6f8980c772961b08f621f22e0502f2631156d30557651bc531a17", "ref_doc_id": "6a99ce7c-a48c-4fc6-8a53-c3d09aa7be01"}, "9c149185-cc02-4ec7-8766-19350ab1aff0": {"doc_hash": "04f3698d5fb718f4864eb8a4143423fe82080170dd9252c75c729bfc071fda46", "ref_doc_id": "1247ba68-4d2d-4184-8f8b-eff0cc551aaf"}, "f34b606e-84f2-4ad1-b1d7-30363ad8948c": {"doc_hash": "6f4f7960282ba660903fc8c1bfc81814dbd78630ea9ff3b37beb80c067d6e643", "ref_doc_id": "7499da42-0943-43bf-b821-3ddcdd9cdfc2"}, "ebce6e2e-da3c-48f9-94a2-32672b56d7e4": {"doc_hash": "8b8367d3c3a55eb585e1bb9c2f9b63f6f493bc763be02388d800a740bc23d990", "ref_doc_id": "7499da42-0943-43bf-b821-3ddcdd9cdfc2"}, "3006f7ae-77e1-43f2-b8c6-28fa0e7bbb46": {"doc_hash": "7801a13c2895a7022839666a31911011cb19950264bdba7724cc8db30e550fd0", "ref_doc_id": "7499da42-0943-43bf-b821-3ddcdd9cdfc2"}, "4e2a00cd-3b40-4934-a4d9-ebe85fe03235": {"doc_hash": "7a678734a362a5f2d8f9602acf1395370a345c3a8d0e0a3a531f1155a69ec56e", "ref_doc_id": "7499da42-0943-43bf-b821-3ddcdd9cdfc2"}, "0fa89834-5a93-4e98-8204-99da953af5ae": {"doc_hash": "f0f9ac2c17a6872607ce4373c2fbc49a8b8372b6d9d4627b78a4c20380f6c534", "ref_doc_id": "6992e214-471e-4752-bf56-63c3d3143eb8"}, "3b366dd3-16f8-4505-9fde-31a7428219ba": {"doc_hash": "013771f1540a76006cd8dd8be24bf7ec483351dcb98b56316c0fda87751968c2", "ref_doc_id": "22586eaa-3ea8-484e-8d59-6270bdf1d36a"}, "215e7bef-f1b1-4977-be95-91a2ebb27bd1": {"doc_hash": "533cd90323b91c9522ee85727a39eb4a37c00f0ce74f8aa1063e0977200a2e1a", "ref_doc_id": "6aa86a7d-9968-4eda-90b9-0ba1c9fb3c2b"}, "401e04d1-039e-4fc0-86d4-a9260e67f4c7": {"doc_hash": "fc6a2fad2041983d798667051e7b113530b6d7a2b1bdeda74a9dc6f1418d9e43", "ref_doc_id": "93aebee2-17f9-4135-ac31-07138482737c"}, "b0ed5bba-5dfa-4a43-9142-24dcc62ed67d": {"doc_hash": "23a721076b3ff514822e3b69c007fe4949b0e91e39ea09e706d14e80930d47dd", "ref_doc_id": "93aebee2-17f9-4135-ac31-07138482737c"}, "638ba149-6239-45ef-85a4-f3665b1c36ce": {"doc_hash": "29262c53eb943e3b6818b3e6ad6e801e42d37b3744a7f86008cfb7c7e182988c", "ref_doc_id": "d931a88f-6e21-4528-8676-46fa98e95b9b"}, "15db7b38-2a9c-40f6-9f5f-80819271e42d": {"doc_hash": "a854df0c5b4ff172ae40b04c2607cd73236920848131ef6abbf113697b74ba01", "ref_doc_id": "d931a88f-6e21-4528-8676-46fa98e95b9b"}, "1fed45a6-83e6-4c77-a75e-ead7c91d4766": {"doc_hash": "8aa3c742427be66dfb47b78986d06e4bfe857832c18ce93646ce8c4e0305ef99", "ref_doc_id": "d931a88f-6e21-4528-8676-46fa98e95b9b"}, "6309964c-c094-4688-9552-1ca97439e588": {"doc_hash": "fac3a1ee777ea6782b894c2a2015cdd75677e3775827b47e9f1ed1fd043c3b57", "ref_doc_id": "d931a88f-6e21-4528-8676-46fa98e95b9b"}, "06d252cb-34c7-414c-a7c2-44364dc6c59c": {"doc_hash": "5a554763b136b63d87de7cc201ca13f51085f980ffa5d8d3877548b4dbad9251", "ref_doc_id": "d931a88f-6e21-4528-8676-46fa98e95b9b"}, "0438e4ff-9fa8-424d-a2cd-ffbcb192d005": {"doc_hash": "ae37f70d4b8e10b1532c0f4c27c99f147afcdc5a719c37f0d190cfa27bbe9ce4", "ref_doc_id": "8ec6d3b2-0708-47ec-8a1e-cc2cebad9d30"}, "d187bf28-9762-49aa-a240-3b0d67eca27e": {"doc_hash": "0771543bfdff61342d022949e7bacdaa5f1ca73fce7beffa95756aa58e6c90dd", "ref_doc_id": "a86fdcff-98e5-425a-bf0e-0b2c58c08848"}, "18b4f325-fca0-466e-ae67-1737070e9a43": {"doc_hash": "c8d3ed10f314bf6f2587b5ec0b814e9ef42e9e9389ad4444e26801c58ebc27f7", "ref_doc_id": "2c6d9045-7bfb-4af6-8784-b44ef7dfdbc0"}, "a41bf46e-5368-4517-917a-5ca82f78ad11": {"doc_hash": "79817fba08af00f44c19b66ee52b6581c575e32a7351e212758f58073fda9d4c", "ref_doc_id": "97e1c587-8e14-4ef7-9d60-0f7f75f162b1"}, "db4385a9-2d32-44dd-a819-41c1f4b11f14": {"doc_hash": "9e5f213ee93557b408a952534c7c9e3c6bfc3933298909be6667115e910553fc", "ref_doc_id": "3eef13e9-eb6c-4807-bf82-b336d290311e"}, "c9969dcc-0cd3-4cbe-9a0b-2476d0a448c0": {"doc_hash": "d6e2b1141b0eb4e2f98decf7011f37896f9b22752ceab9c5a2fa4ea1bcf6da4e", "ref_doc_id": "3ee7e499-0038-42e4-87ed-0f4f26479bef"}, "05173fa6-1961-48ec-b958-3755d2b06dfa": {"doc_hash": "03ce317a675d233e3788db8ed17f9b322cefc9b063e0f32c078b1b474f4a90e4", "ref_doc_id": "16362345-c3b1-4967-ad23-cf9c2f62bb42"}, "d306aaa9-5ed9-464c-814c-13cb60cf9b05": {"doc_hash": "4842c0840b3f20228e97e526357cad4ae80e0369bb6d8b6f777c7157de056376", "ref_doc_id": "d6cacf12-9c6c-418c-b193-276197f63716"}, "02134d43-c540-429f-af7f-737ab56f8824": {"doc_hash": "42fad09637f31c36d63ca25fd0fb4a043f6964c40760cff27fac8bb37a582cb6", "ref_doc_id": "1b179977-1acb-4a75-98d6-e25b919d590b"}, "2fce8277-cbc2-47e1-9200-b9c35ef6170d": {"doc_hash": "b4c1927a4b3db3eb8c475b458af0e6ec7418442831e62ab3711145967f7ce414", "ref_doc_id": "1b179977-1acb-4a75-98d6-e25b919d590b"}, "c88dcc84-1fc3-491e-a318-b3e3a730c1ff": {"doc_hash": "9f34ee717c30bc78259c832d593733a7313250fc9d885536feb4509faf6b87bc", "ref_doc_id": "948f44bb-9dca-4a2e-a9cb-441ab6dbf7a4"}, "7d43579c-faad-4b25-b482-37199e6e0fb6": {"doc_hash": "cb4ff3af1b5a93e61bd276931a1cab4e05a84f73fcf54d2d2c6732754bd05957", "ref_doc_id": "c0396be3-5c9c-48cb-9a6d-232504d68760"}, "79f22da6-55bd-4779-97e8-149b6c62b39d": {"doc_hash": "afb21cf33fd67f891971a1025e6fd12cd7eb1c43ad090af334a134b80dd95e13", "ref_doc_id": "6cd7999c-a22f-4b66-934e-3a55df869ad6"}, "18c193f3-15c9-4efa-9f45-94578bb2236a": {"doc_hash": "64ec37805b5149674bef56ecec979fce6120ddc34e7a3f3bd882e8b81ab4cb0a", "ref_doc_id": "a2470cfa-30cc-4fbe-8229-568ba6b1fa4c"}, "181773aa-2718-4e08-8e7e-5c3f15e0cdae": {"doc_hash": "078108f5fb924327875b346d0679cd87b9fd25232f2b52e51fcbf86ad579a19e", "ref_doc_id": "6d8e9914-dbe9-4712-bc91-b963609ab752"}, "5d35c348-c827-4d40-9a89-373d23e5a727": {"doc_hash": "6b3e1a6430cd0e7a3512a978f29b3d99de6803fc939d5c863effcf51ad7c2a63", "ref_doc_id": "6d8e9914-dbe9-4712-bc91-b963609ab752"}, "b60fc15d-5062-4866-ac15-c262ef81d3b8": {"doc_hash": "09390fd912da221736d67f8312e5028bee6ddd986af8702ecac16b35ab341d87", "ref_doc_id": "2aac128c-fe5b-4ccd-98b9-c78f40dec500"}, "6c98a2c2-e6c6-43cf-9b7f-8f49f3088572": {"doc_hash": "c7348e6d83a299df14b9882e9115bd0fdf610a045c27795df13e6b6405f89dd2", "ref_doc_id": "2aac128c-fe5b-4ccd-98b9-c78f40dec500"}, "23fa3ffc-6239-4eb9-bfa2-dfa12da8d59a": {"doc_hash": "7fdec655d3e77165cce13657266988e05f247f32dac7eddc4d18485d8f2b83a1", "ref_doc_id": "6fc356bf-bb76-4f35-b3fe-51ec2cc8608b"}, "37fa4639-8e15-4ce1-b839-358c7d68cca8": {"doc_hash": "9d6bfff230544efb7bbdffbb2d92b1f75a9cacc6f46be6fb7ad7056ec2cffff2", "ref_doc_id": "33ed1d90-38d5-4f4c-98fd-9544e23ad651"}, "71664224-91e2-4536-8190-64a601c386b3": {"doc_hash": "25faa7d5b8878f0a9593ccfc24c566f2d6ba123ebead42f0c0f001fdb3b498c9", "ref_doc_id": "b2891faa-4c8d-4ea7-b703-205e30eba003"}, "bb30c329-ff71-4344-96da-13d3fe073dfb": {"doc_hash": "706a577a823bddea98f76b2b590e0a033dcea62105a15a60194712af7a530c7e", "ref_doc_id": "ae018603-54e0-476f-96d9-6a1f9e02e1b4"}, "066a9cfd-e1af-448e-a48d-06be18cf3882": {"doc_hash": "b6a3076ff069d56e788ce6ba29ceb58e88335ad01c38b57cc3815840cbe72c3b", "ref_doc_id": "ae018603-54e0-476f-96d9-6a1f9e02e1b4"}, "eeb008ed-da15-4129-973f-233b52bb579a": {"doc_hash": "fdfb81965015ec94f4490ca6565fce8905773a6bc25d6c1c81c7c06ee007d5be", "ref_doc_id": "3f9f5894-60ab-4eab-a06d-374d870d35a8"}, "d863ef37-1a06-4bfd-a032-96c1175e3c91": {"doc_hash": "be902029a8e3c78131a70d8ca0dd8a3448c351caab929765d99e4593bad9ef73", "ref_doc_id": "4e11668a-f651-4175-97f0-60ac4ba12c45"}, "f875f121-3ade-4f5d-a20c-d53952072431": {"doc_hash": "21e27b23985fa499595f37c6d81bb2663b7dfefa0bdd09485b4450ad9cb631e5", "ref_doc_id": "da650e2f-8f7a-4fee-892a-8f8d3ef30ce7"}, "448ca447-c83d-4c92-913f-75fbf25089f2": {"doc_hash": "6400d9c2edef75d2dc35a97cebb1e59fcefcbb12f87e92f3464cc3336e585c11", "ref_doc_id": "e4ed39b9-a2eb-47eb-bc4f-c0bb6ff9356a"}, "7b92f493-2006-4e2c-82bc-2b924f6def6a": {"doc_hash": "056517676313f8ff0c90091997b1b673afb34dd3bf222465c3ffafb9f962157e", "ref_doc_id": "f4f8b74f-197d-4844-a837-e12b5b2635cd"}, "cadf3bc9-cf31-4026-9535-bb1b477a7dd1": {"doc_hash": "109772ec0a974c37db2aab2f8856a5e4c6464a2b5d4c1728cf7278e8754f5174", "ref_doc_id": "65042908-4328-43fb-bda2-95eff76438fd"}, "336ea24a-b915-431f-95d2-cb924fb19198": {"doc_hash": "a201d2664cd7c8357f54170f06afd803faac1a9f1952c9f6ba06c377140ecb53", "ref_doc_id": "d8d35861-d6a7-4567-84a4-ec7b3f4d24e8"}, "717232eb-77de-4ae3-8776-2b45f48df2c5": {"doc_hash": "37e6891bc88f0cf58264573fab9a2aebae432960d7ce646d6145e7423b2e7e73", "ref_doc_id": "f5ccf084-2d0f-4597-a824-4515a303f172"}, "1ae6912c-7d80-4ac3-9bb8-50876b12b95c": {"doc_hash": "ccbcb4194d7d54c48ac958d13ac79a3fb6d360183ea6f0126f8754357818ddf4", "ref_doc_id": "f5ccf084-2d0f-4597-a824-4515a303f172"}, "fc0b1161-83c0-47d5-b885-8635993105b5": {"doc_hash": "b657d7a5e5590e0dea8582d8b03c5112b4bfb43de6b8a27adbf837691ce4b215", "ref_doc_id": "ff835e5b-9684-4a39-9b52-b0e698ce8eac"}, "36163756-e56b-4bd4-af24-ffbf51b0642d": {"doc_hash": "02e2b349893a995511ebc5198e2c4fbaa67ae8ffd0a98028f8817e5b54898c66", "ref_doc_id": "e076e46b-e267-4222-ba81-432160b97335"}, "483a7573-810c-4bb0-bed4-dac31d05c186": {"doc_hash": "df23ec71ce60eb916782b6f5e7e4892f8e1ab988a1082f79f9b78881bae11388", "ref_doc_id": "e076e46b-e267-4222-ba81-432160b97335"}, "701bb856-5753-4dd2-b143-ea53ec4d0264": {"doc_hash": "471a03bd0bf367f9d892ed225d6d35c2ec417ece5764ee1b9c5e6e99a5e7ddf2", "ref_doc_id": "8d95b184-7a57-49ea-9f97-0078434cbb3a"}, "22f00626-d5d7-4e22-b391-756b11dd6058": {"doc_hash": "327564e2021bceb1c63cc9cb8fe4811ecd7df00f43e950e8e3f9cb5fc1ebe74a", "ref_doc_id": "8d95b184-7a57-49ea-9f97-0078434cbb3a"}, "986bcf5a-42bb-4d94-8961-263af023c5e3": {"doc_hash": "b0062cab4ee2cd60ae7e7b0166fb8b10f4407f60756067e428b6c47d7f407b7a", "ref_doc_id": "5a1eb26d-5e27-4361-bf52-8f7632cc278f"}, "1a4aab45-0f42-43cc-a4c5-2d09c6d924db": {"doc_hash": "e4fae9451601eb79e705aaea42d7fc21601b3cd7ba0ad5dcc77a1425e9c26d04", "ref_doc_id": "90052333-1eef-4abb-bc36-93f2d90bb153"}, "eb71eff4-f9d8-40b3-bd30-ac641a328c6e": {"doc_hash": "422d6099cfafbbbdb406ddbd2317cffa23848d9b4788454099dc18816a5acdd7", "ref_doc_id": "c4c57fc5-89e2-4169-9240-4622f377a3d6"}, "f207701a-6ba2-47d6-b5ea-d6cfbd4b1ebd": {"doc_hash": "2c164980a04dbaa11e10f40b62b93bfb084ec45c1a43ff4afc89068fec49ece4", "ref_doc_id": "d4855309-2bce-4c87-aa16-06c788af0e60"}, "489fb18e-b4b1-454c-a67d-7d7fb59740fb": {"doc_hash": "690708afed80fda76e5bfa64c7512cac9b488200affec3a48ffff369b1e45ace", "ref_doc_id": "d4855309-2bce-4c87-aa16-06c788af0e60"}, "7a819d31-6b54-493f-95a0-f448d9ce1fd6": {"doc_hash": "ae7086b112df79d1f0d8da083fe8be223d9b5fa33dbc5b0164f87226f46c9131", "ref_doc_id": "f6ee9b93-564a-4d76-bff9-b401196b8cc6"}, "adba7a17-5f9c-4fc4-9443-5b8a7db8f4bf": {"doc_hash": "c6579527d4edf505dba5ecc2a41e7dc00e982e5387e2205ceff7841206d0dd76", "ref_doc_id": "f6ee9b93-564a-4d76-bff9-b401196b8cc6"}, "f1db27d0-7bdd-45c8-b176-2d67b88afa16": {"doc_hash": "8195a8eaab912dba795dd961683198735525de3805f5514e7f07de446b95caa5", "ref_doc_id": "3160e92b-bacc-473a-bce1-834307053fd1"}, "c3762752-511f-49dc-9786-9f8971fc3261": {"doc_hash": "eb7b9e530848f079f9dd5c75b97a3187c4c5c6c9c0296895cbeb0c76d6a76d85", "ref_doc_id": "73c47245-f800-4b9f-ba2e-2505a918834b"}, "aa336a1e-7b2b-4f21-b5ee-ea82fa6256b7": {"doc_hash": "7bcff92a8f23ea4ddb82c87c1947b9bf24c75fdd5a2f46e5c330901ba7eb9bfb", "ref_doc_id": "a0d2dacd-1a29-445e-b976-b1ea94046b05"}, "46d90144-2268-4281-a199-62c4808e7d89": {"doc_hash": "1bc576a7a3c992b3d115e6da2e8420d6c808a9fc35b53b85aaed8fb29b60b92b", "ref_doc_id": "fdaa8371-c635-4ba0-93e8-44ce88dec4d5"}, "db5fc5e9-2c47-40f8-ae4f-ceaffdc356f2": {"doc_hash": "f032f766183121aebd96ebc9c572a6a6bbe4a0a20b1d572b8925b3e37f31e4aa", "ref_doc_id": "fdaa8371-c635-4ba0-93e8-44ce88dec4d5"}, "9f1f5d14-7989-458b-9cd6-27cbaa641a0e": {"doc_hash": "dc3c57915bd030e9a5ccba31c74785d74b07663f0c41845e3870c5214761c207", "ref_doc_id": "9b7c0b02-7130-4b04-837a-dff39d1ce218"}, "08bafc7d-0800-43d2-90be-6621c509b0a0": {"doc_hash": "baa0570a85d093492c5c77a64743264200f0178b20cf6074c4d65783fe332f5b", "ref_doc_id": "662b19ef-7a43-4585-98ba-b25073dfb6c4"}, "1927e4b0-fccb-4800-9ff5-d021a266544c": {"doc_hash": "c0cee8a88f4b9ec20c0dadde3614f423cf808286e0f13f6e6b8b7e74e7bbed44", "ref_doc_id": "0b9ec1dc-863a-45b5-b3d8-6d42ae491643"}, "679a572e-1bfb-4b1b-8ae1-9653f51c7681": {"doc_hash": "e2633d6546382fe81ad92c70afa7809ea2647166a26a42cc5cf44eeb91fefa2a", "ref_doc_id": "78f3e08f-5050-4fc7-ac86-8800ea2339b9"}, "8885b49d-1484-43c9-9ebc-71c5b9fbb1ab": {"doc_hash": "41a7d1f3e3b4ff753569bfee407e043d653bd35f44caffdeb9698f4670962043", "ref_doc_id": "fdc92f9d-cf67-46c4-9424-3ddf3d09168e"}, "f1ed8dbc-273f-4019-97a5-875834980b7a": {"doc_hash": "d31ec7bee49a721a970b73b410b3bd0b01e9e4a1ebe269f5a5a83cc74549eb2d", "ref_doc_id": "fdc92f9d-cf67-46c4-9424-3ddf3d09168e"}, "4aade879-ed3e-43be-9a84-ea172767c765": {"doc_hash": "697f4764167d55b183a2b15f37d04b01b961884258414d91b70f5bcadbef144b", "ref_doc_id": "9307e053-4e56-496f-80ff-61de31159145"}, "7e542d59-9a36-40c6-85d7-e6a05758c108": {"doc_hash": "db0495c1a7f3036858f89af42133ad7836dbde468598d931d7f88417dad03c29", "ref_doc_id": "57425ccf-afb6-472e-8749-93bf84d1bd04"}, "94d834a4-bcfe-4413-ae7f-eccba3cdd30d": {"doc_hash": "0ad76a0ffbd2103fc1346acf2be713c5938ce355809bd436567bcd66b4d85e80", "ref_doc_id": "2d5375c3-8565-4c20-95b4-0d7a357d6a1b"}, "992eda31-2b7e-4ca3-9621-ee11f13aec9f": {"doc_hash": "00de344ccbd3192df63f2536b6b1caa6e0afe6d4781a69f8d6d0eaa3aab24365", "ref_doc_id": "5abdbc24-8c45-463b-bd90-72ce5c7ed801"}, "5d1c5802-ddbf-4bef-9d55-d8699830bb6c": {"doc_hash": "158d00aa86bdb8971b17b945fcbe554a865b95f391c0de1bd81681b051402a70", "ref_doc_id": "cda3d6ce-4a08-4381-b89a-54cb8073e206"}, "ab9de956-5e53-4adf-8a98-864569b75922": {"doc_hash": "7255ddf648c873933a168f00d49d0de360aae68bd282e25ebc46afea4c688199", "ref_doc_id": "c8e64605-0526-446a-8b29-d359d8b7ad16"}, "91db5b7f-c830-4eda-8931-d0dae5774a38": {"doc_hash": "60d7c0b925c6bc50927938d24e333cf03cbd62b1cbe0b8996de01bbd31a7f427", "ref_doc_id": "c8e64605-0526-446a-8b29-d359d8b7ad16"}, "3191bc0d-8c6d-4f8b-b345-edaaddfa8a61": {"doc_hash": "6db624f240b04d589b39b9d086444ba5a1e4ec0b134f1f9a0aebde8d5ac4ba37", "ref_doc_id": "2b74c845-f2eb-4823-98ca-62f1cf7a0229"}, "e438b15c-fd86-45b3-8637-09895c26345a": {"doc_hash": "beae4d03306dd8e1bbce94618beca233cfc8cc90ed7419426cecc147c13b87bd", "ref_doc_id": "a5892a70-c3b5-4131-b3e8-3e4ea6b1c8d2"}, "3bb7a5f5-7dc8-489e-a283-b12ebb04408a": {"doc_hash": "b8e6ef916efc71059dab0083cd41c96e8100e6569fb06916567510e2103dfc11", "ref_doc_id": "15301fe8-6386-4313-91c0-e0e3766c0da3"}, "aec84650-5157-41ad-8f74-764067e6cfe6": {"doc_hash": "35f22f2b13115b7d8bc5d03ff4ab23f91ff24bca641213fd3515b1d2d57026c1", "ref_doc_id": "2ebf010e-dc5c-433a-b882-f8de385a9695"}, "3bb5a027-b6ad-4f01-bb49-0762e20fe1e7": {"doc_hash": "5169df85cfd3c523c4e00f43c3d8fd42daf1cee7f248f01f7035237d523f5605", "ref_doc_id": "fb8b32ec-a884-4ff7-ad1c-3c204ee8d271"}, "555a95e7-21c5-400f-9f98-cc1e4989687b": {"doc_hash": "b18521b8eeeb1172a691d720295cf4dd86106526de86366ecb86bc21c307db55", "ref_doc_id": "fb8b32ec-a884-4ff7-ad1c-3c204ee8d271"}, "90ec1747-210d-48d5-953d-ba68b2873bae": {"doc_hash": "ec6ef59f6735ccaa158a4d185243675f5c71bb1e268ff56023c356d63066733b", "ref_doc_id": "898989b8-ac70-44cb-af04-a0534985c99d"}, "9f6345e8-8309-45f7-b8e4-784b2badcdb3": {"doc_hash": "4d205325bd7c131b5edaaedbd53e6906b9715db0a70d01b122087df4e1982c83", "ref_doc_id": "9f1d1b55-585f-4e7c-805b-417f7053e529"}, "730279df-8057-4fe0-83e5-2ac247609e6a": {"doc_hash": "2a7f70c236edaa9e4ffba05a039f8d21e0de6b8be9f2aafc3bb3ae12b40b4b24", "ref_doc_id": "6023ebb6-0bf9-4356-a084-41a779f44df9"}, "a26e3599-1ca0-40cd-a4d8-1da5889c5f1e": {"doc_hash": "98f6a2d2a9dcc1c675c9d0bf03aefc5cf92dcb3c40dec8c3a53e22880110c30b", "ref_doc_id": "ca0f3a20-5daf-4428-bd50-e4d0d7b39da7"}, "3a638184-ea50-40c1-8a14-53737ee43c32": {"doc_hash": "0dbd826cc6e37bb601fb80c05249ae8a05f55392a121c3bb77f5e26ddf1a1383", "ref_doc_id": "b0723038-4d6c-4c60-8233-06a87e2be3f7"}, "f6eaedfc-4a90-4eb3-bd22-2220bd8a2e7c": {"doc_hash": "d7d48c2df475be5e57c26cb32d4c4424a5570c8ede5de23e03eec137ee5dd73c", "ref_doc_id": "d93dc380-6baf-4642-8c5f-edf54bcfbb9e"}, "175f8362-4da2-4329-b3b5-e7e8946382f7": {"doc_hash": "9f6c7c0e6ca2185f72738758470bb8af00d2de4a660978def0a4ef69257c68b7", "ref_doc_id": "19c5f721-61c6-4781-9e85-214a3a526f6b"}, "09042f83-755c-4784-8d61-202d3d72df5e": {"doc_hash": "809a1ef974ae8c21e4daf808c00cb7a2e1cd74cef5e0764e3297a7141ba176c7", "ref_doc_id": "c818cace-def7-4dc6-ad58-3060cc7d4c45"}, "8261f1ff-c8d1-4fc6-bbb9-c9781ddb5663": {"doc_hash": "53b834a14c099a881983b5dd847e6cd983576622761492243666197c38937836", "ref_doc_id": "cc889666-1378-4e6d-a13a-3ae3f87d846b"}, "f1f87439-ed50-425e-83e3-e82c625a2fa0": {"doc_hash": "c0f667040ee45247c281e7d5de99f6c483969534773170d07467b7874a234504", "ref_doc_id": "b84ab6df-93d7-4a4c-9d56-f89f29438f82"}, "0b5a7135-3cdb-4361-a1c6-a6b30cec5a1d": {"doc_hash": "a7bc83e9b02726f19afabb9e2071c83e84b74e662e27b5d9c8ef2b5cc788bcef", "ref_doc_id": "b84ab6df-93d7-4a4c-9d56-f89f29438f82"}, "9705bc65-4811-4a59-abc9-1c598a43af71": {"doc_hash": "cd48d03c4abc57806ba30b6ba341aed0bf4067ed3c07d39c5151affb5f47a99c", "ref_doc_id": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b"}, "57235d4f-039a-4d4c-b936-9b9a96eaf022": {"doc_hash": "0be671925126a8ffd63dfe46d6c41a31d6921393e1dac278c4153ed8a2400071", "ref_doc_id": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b"}, "a4603b1b-3248-4602-98f3-aa2d6773813a": {"doc_hash": "1d1c2c84e8fe8ff1a0ee8d96a8b21b88027920f95ebe5cab0cc319a49636e354", "ref_doc_id": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b"}, "b5ac4d9f-d1c6-4bef-a292-aff2a2ba2c7d": {"doc_hash": "47fe0e452658d2e020d03f6c8953efeaab208d736f3eed2f5d3fbdbc31fdc1b8", "ref_doc_id": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b"}, "bf0b3627-d13c-46c1-bf3e-25a4082ad525": {"doc_hash": "6951dca5e90b080ffe1b30b39917f14d3caf5883d56f9442a97e36e79c84c7a9", "ref_doc_id": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b"}, "0ee1e1f7-d8d7-452c-825e-d7d81afc1f01": {"doc_hash": "557e81037416979e028f13da9efe1b614656e49a5d98b8cf0fe85785c17a5789", "ref_doc_id": "fa3bafa5-624d-45c2-950e-b6a22aaab9b4"}, "c21e6f30-5945-4966-9b43-106313626095": {"doc_hash": "a9f51228274a7fb6f59a4e48f2b8e8b5c12d3ca525a3431d74840ee61a5620ae", "ref_doc_id": "fa3bafa5-624d-45c2-950e-b6a22aaab9b4"}, "bc3752c1-8037-4a6c-936e-72541936477f": {"doc_hash": "a3e36c8892fce40987651620556ecba8072843829c4f1d0cc39a571b72225724", "ref_doc_id": "417c75c9-fba8-4430-9602-44342cda31ae"}, "d2459874-dab9-4d78-88b3-82007e824175": {"doc_hash": "256a872a49f3a198f354b0e23320dde80d666732188a6258fbb77a25867116f8", "ref_doc_id": "417c75c9-fba8-4430-9602-44342cda31ae"}, "30017663-ea88-4057-965e-0722f850f7e8": {"doc_hash": "748cedb2febbab5ab48756ff760126fd84c6ecded5eb808fc0c1fcc47c467fe3", "ref_doc_id": "5b996906-7614-46a6-97fe-c5c952f20a77"}, "c822843e-a34f-4356-9de4-ffe8dab2a5b9": {"doc_hash": "6c7378347b2db9737ac08b36fdd8827eaf569d610b19209a3f3d52cf2544037d", "ref_doc_id": "5b996906-7614-46a6-97fe-c5c952f20a77"}, "5cfdfe85-811d-43f8-91ab-dd115cb47998": {"doc_hash": "c8c12fb21db39554712c0e39ee69d18bed63c204d4602d97ff25e0b5f1a801d5", "ref_doc_id": "d96d28dc-bce7-40df-a39f-714cc7a2ce6d"}, "9af725bc-b605-4edb-b913-7849cc6e0591": {"doc_hash": "c399804beff4201cbffb9b96d3eb992c136d22eabd970706513de73c66a9ccbf", "ref_doc_id": "f24e87a3-6a82-4e7c-8a31-9c7982f6019d"}, "7e69eac5-5163-477f-91f9-1fa3229f665d": {"doc_hash": "2354d8420ccab6a5106f6eba93f1a2894bce0f89c08b8bcca7972062a111d14c", "ref_doc_id": "bdfd4d76-fbd4-48bc-9326-c29669419284"}, "fb047dde-bbf3-4c26-b9d3-cd55d983e164": {"doc_hash": "7fe9ebc64056f5b792bd6c2cca59e2d0835d852071622f93a9c25898f78b1a4c", "ref_doc_id": "bdfd4d76-fbd4-48bc-9326-c29669419284"}, "2e18a7f7-8685-481c-ad32-15c5060da519": {"doc_hash": "4966c03a9bb37ee0fcfd61ef837217c2a5e0976352e8f1efd545d5413c337988", "ref_doc_id": "bdfd4d76-fbd4-48bc-9326-c29669419284"}, "42abe211-7a4c-43e6-a293-72269d32952b": {"doc_hash": "5c18ee82369978b77da792d168bd3be565e7ec59e30fc03578782157f03479a5", "ref_doc_id": "83b5ff1f-0194-4c2c-a2fe-41d5047ff345"}, "a5dd6794-73db-4562-bba0-5afa4c327de7": {"doc_hash": "048cc057e095e5f2ef60a6504684c199178b261c3d21a5dd8803915b72119855", "ref_doc_id": "4328b76e-d908-4fd3-8862-7cd38b6179ba"}, "ce2a35d8-06c9-4645-be80-cd30b4ca1a90": {"doc_hash": "7fb0b4636653a39ac3b153398a4e157accd5dd934c80293b49b93efd8a422ca8", "ref_doc_id": "2a0dc2c1-773e-46e4-a6b5-3e440d506e9d"}, "25fdc0ec-39e5-4e01-a5c3-f3c38a8c83a3": {"doc_hash": "eb17e75a55cb8c6771469cf4227b2e7ece17297a2bdc89077c7bdb69a88653d3", "ref_doc_id": "6111774e-9a8e-4603-84b4-3cf77d512be8"}, "768df622-0abc-4a65-bd4d-f6ad161c2f4f": {"doc_hash": "079cce50fbd80268e0daa283b35cde97a3d6610d3b222e067e3edafb1dc4e548", "ref_doc_id": "6111774e-9a8e-4603-84b4-3cf77d512be8"}, "eebe3aa5-df7c-4e3c-a942-45285444a307": {"doc_hash": "724a1bcc25dbd866528489b912f5201f7f23a3f2a109f0376cd2189539ef4ed0", "ref_doc_id": "34a6c6a0-5c88-4b5e-9c40-4df866e76e71"}, "fedfebe7-ebca-4776-b74a-c316c98e3e64": {"doc_hash": "6b13d8de7de1cd69ff6c90cac6e6093c4e222e45054f3deae69cd3e05b2cfdd9", "ref_doc_id": "db4856d7-42df-4494-bb35-936cb19923bc"}, "74f2fc39-7912-48e4-87fb-5c6cc2fde8bb": {"doc_hash": "621a3102d0d875388204b9c0f647da931c3cbdc9b283221eded4469335d11e1e", "ref_doc_id": "bf621a8b-ad3b-4370-8940-c3e63aa2fdc8"}, "474591a1-f4ad-42fc-905e-d8f3c2829dba": {"doc_hash": "2d428a41976e56221c0fe35762c011a921c3a933feb79ae6638b615c1ec1946a", "ref_doc_id": "0211de59-b806-4626-9915-f5dbac44700b"}, "6089e2ac-2767-4893-b2d8-cda7f867d53f": {"doc_hash": "06b076f87812dbb1392629943ce387ae1cff1b769a9de3ee8526e97c336b4edb", "ref_doc_id": "0211de59-b806-4626-9915-f5dbac44700b"}, "46c124ee-9496-49c7-816d-514227bce8fc": {"doc_hash": "411c929b7dd81206f1eb69c69115bc6ced99bab073a80320aaaf6384532c2e74", "ref_doc_id": "29e7cba9-9fca-4377-8a45-4f6099e630b0"}, "f253845d-28f1-4350-9258-922fe38ffdbc": {"doc_hash": "4928b7e9bdcbdf5b084bb747bc6427912059953be638dc07ece9df58fba6a742", "ref_doc_id": "29e7cba9-9fca-4377-8a45-4f6099e630b0"}, "a9664bb2-0980-4654-aa45-fe6514264b00": {"doc_hash": "2b7c24252354c3143bbd902c5bd9803408b7df42f8d94a7e66e0fc19879b0887", "ref_doc_id": "83811f45-c32f-49d4-be0b-a502316923d2"}, "d2b72417-7fd9-4677-a504-888f67093d83": {"doc_hash": "2bdaf787d9ac3eb0cf262115ea0ccae3ee52e907c5dfa14e3b70f25f33c2c15b", "ref_doc_id": "e68eb8c6-67d3-4d36-b473-40c1c827e9b9"}, "dec2bcde-2b71-4730-87e5-1780dddddf13": {"doc_hash": "823acd1fb339c2666bfb800daa7e297ebdb9ffd49e485b7b7fd4077318d86b63", "ref_doc_id": "ab921b73-7166-4243-8f4b-9bc4b023ce5f"}, "7864c26c-87eb-40c6-aedc-1dd5b32babdb": {"doc_hash": "685b185c38b5116283d268cbfb247b3faae610de1171cb084789de478bc5a208", "ref_doc_id": "ab921b73-7166-4243-8f4b-9bc4b023ce5f"}, "218803b7-f733-4013-93ac-a2df757dce26": {"doc_hash": "cebd91b07de312920d5807ea3de9e7bdf00868c866793b62cbca1d25f83bbc80", "ref_doc_id": "ab921b73-7166-4243-8f4b-9bc4b023ce5f"}, "8bf22cc1-ee7e-47a0-b9f3-25599ed5a5a4": {"doc_hash": "caabc5d49729d914cf48e46afc311310e4554c4df451afcf0c1ff55eca58f15b", "ref_doc_id": "8f399fbb-0356-45c4-9217-614129e8cc11"}, "d9ccc57a-faa6-4d7f-96a9-aed7e0b32fe5": {"doc_hash": "3644992cad7ae3c88d4d06482f3372a1bd36608a9cc9a0bd7dd23f722ae092db", "ref_doc_id": "3cbc1128-e3a5-43fa-844b-e7f30ba467b7"}, "dc3f2bb8-6dcf-43d5-bbc7-53e517269d4c": {"doc_hash": "60c7c679a4b8122356047a4dba2dc9452dd141fa559baa5e78cf51573c8f1f44", "ref_doc_id": "3cbc1128-e3a5-43fa-844b-e7f30ba467b7"}, "18060bf3-0d21-4a7a-9556-87f637f86f4a": {"doc_hash": "a32386dca5e702566c72e945bba88355234f88fd0c3ea49c21c73aa86d6c70d5", "ref_doc_id": "3cbc1128-e3a5-43fa-844b-e7f30ba467b7"}, "ce6e4dd2-a3dc-4166-9f34-629755229aa0": {"doc_hash": "adb5558518a6c6a231c1d74118d5bf423e7baf2c43921b87cbc213ee61debcba", "ref_doc_id": "af5de915-c5ea-4076-9b7c-d9784e7e281b"}, "ccfddc33-4448-42c9-914c-d0712d037306": {"doc_hash": "3798bb22718fdcee31384f403cef5b5483f823a4b1fb5fb3d25a32150836cdb1", "ref_doc_id": "bed30783-b402-4f73-8b27-7e60c81ad72f"}, "8e3b1012-5176-4f45-9f8b-0bca5c8d0f14": {"doc_hash": "f1478c35500023b4b71f33b66c1567081760611fa79303e7fd35debd833ee9ed", "ref_doc_id": "a3c5d270-293d-499b-b14a-c5a7604f0369"}, "a7c98940-4c11-47ea-9643-606e2bfdfed4": {"doc_hash": "67070e733bfa3843092cbad2acfa4107d8f96eb0744d4bcef314b31158b9c5e7", "ref_doc_id": "b984c275-9cb6-476e-8fd0-0f9ff585fa6e"}, "72b05e7e-e550-430e-bcd6-aee0f58110e6": {"doc_hash": "475efdf86789519364049ad41f2ac2f64cfc18a360c09bfd7c6613444f000728", "ref_doc_id": "b984c275-9cb6-476e-8fd0-0f9ff585fa6e"}, "2813f53a-835c-4f83-9b33-167520f0dec0": {"doc_hash": "3b2bec0ed2b982ee1f46b091da0b0c1a130c2d74af9c54d6de1e76dfc6f558ea", "ref_doc_id": "19594150-639a-41eb-b717-e5cc5e35dcdf"}, "a52b1e21-95ee-44d7-a0c6-4624ea5a9e7c": {"doc_hash": "4f20bc767f07d1cc5013a42dd07cfe3650fa6cf9a6e488e4d113d8be8ab95dc5", "ref_doc_id": "19594150-639a-41eb-b717-e5cc5e35dcdf"}, "dc0f7af8-2894-4b14-9916-254a2c5c4c0a": {"doc_hash": "9ddd0c7d503fee6905a508d942aee815f46aee6e66265a630784f1afae8d6ad2", "ref_doc_id": "19594150-639a-41eb-b717-e5cc5e35dcdf"}, "8f2243e2-360e-4d65-8adb-fcc7a7470e6c": {"doc_hash": "709e4fde5ce6d1bd1d71f0d802772a2243427a7f03994555547f7cbbead57c12", "ref_doc_id": "28beace1-16bf-48cc-bea9-a883430446cc"}, "7b861663-eb98-4fbc-acbd-39487b5c25ce": {"doc_hash": "c06ecb33cd5dde4a0fdbd88dd12524fb708bdb958b89cd5121b614b389ef8f2a", "ref_doc_id": "ebc9e5e4-bdd5-44a1-b43b-e8aeaaae876f"}, "2e396980-a2af-41b2-ba6a-b7ce05affb82": {"doc_hash": "b6c7fe4320a7449162b7f5ddf37e7c96d343c28115b9ffeeae656f47db70695c", "ref_doc_id": "e31100c7-2806-4cf3-ad88-dd0e91938213"}, "8da1a317-aa43-4d09-838f-e036348933d1": {"doc_hash": "293210414bb780de86427f3943efc51effbd21d396592f04fd07bba7a2b3d2a1", "ref_doc_id": "e31100c7-2806-4cf3-ad88-dd0e91938213"}, "a05e5fe0-43d8-4c89-952d-3d1ff4da7cc7": {"doc_hash": "bd3f77f69b3cc59e5b0caf56006d1f0c70700b0e9b884546f13fa26e90013069", "ref_doc_id": "9a6fb848-f629-4481-92a0-f60bac8ce8a1"}, "3c5c1994-301f-4039-8a55-870ffc4d0a3b": {"doc_hash": "bb0989f71c189367ec31038133fcff5d5be2e4b061dc85b324e298d1eb98b4ff", "ref_doc_id": "72e2c97c-4bea-4e04-93d2-712a0b7d6631"}, "969e5ed6-a454-413e-80f0-1e97b696c411": {"doc_hash": "408d05348a93490430db89c61c2505debc9b73d893a77ec69ecd86cb3cd598d5", "ref_doc_id": "12f281de-ac03-4b2f-bff8-27751028eb8c"}, "47d4c52b-f11c-4b4c-8555-9a80ae8f9971": {"doc_hash": "eec92dc59d760e1a974e2a140646d1ef144ff9786e6c07a457c563c5f54c2878", "ref_doc_id": "83ba3d8f-2795-44cf-a792-0fcf42afaea6"}, "c851db0f-4717-4472-b13b-d5f978951042": {"doc_hash": "f55e59f7b58afe9862f2b0ceb05a68ea567733493c1bdc01ee6ab36bb8330802", "ref_doc_id": "508cba33-6de5-409b-90f7-c9e10acd8f57"}, "7edc57b6-22dd-42a3-8e2a-2f2ef4d20cb4": {"doc_hash": "93269d5008e6ffd7af336421303bb6d4620664e03b212d9711064c8da4d178a2", "ref_doc_id": "59f19983-7ae2-464c-9c1e-ed42c3cff673"}, "6201ead9-56e3-49fc-8f9d-7899835bc6dd": {"doc_hash": "7496b8c63aa09829d68df5e1ce5c9216cff190db483c06637f142262ea51e000", "ref_doc_id": "5f119514-cdb7-4a8d-8b7f-57a364619997"}, "a4969d07-3445-46d0-abf5-b86b08d477c0": {"doc_hash": "0dd7437d7ca9fb60580295095a8dfeb1357de2ce8a623c20b94338337f5d0d51", "ref_doc_id": "156a65a4-7c85-4727-a3a8-b14021b9ce85"}, "64f16b75-c741-476b-9d53-482965fd7fea": {"doc_hash": "db46f73bd0ba631c650efea4b61a6f914fe3c71cfc1c70e4c6da64657d92d80a", "ref_doc_id": "1ce65f78-e610-4d74-95e7-829b66fa3a82"}, "db4dfab9-1668-4504-bbaf-412b541b5c51": {"doc_hash": "a3a7feac5aa32551ae2e727e71458210f4d5aca4de436b6f95df0dea7865ce7d", "ref_doc_id": "1ce65f78-e610-4d74-95e7-829b66fa3a82"}, "c796d7f3-fd92-4326-8f2e-d0c77058b9f9": {"doc_hash": "b39d282f5c5a177cc4bce0d7ac3720f7d59cec7893ac2c697eb0ec2e51af41a8", "ref_doc_id": "1ce65f78-e610-4d74-95e7-829b66fa3a82"}, "655ea0db-bf1c-4b3d-9ac1-572eab9e2b9b": {"doc_hash": "3a264fdbd480e24e17146c739703c0dcd4f9c1256655bc968f1c6609a3114025", "ref_doc_id": "f74b3de8-e050-4788-9930-f1cde21c66d6"}, "aed38f7b-538d-420b-9844-dbddbe381bff": {"doc_hash": "29e96859c0d279709720683b65bbafec550d4f0df1fc833ec0a8e171adfd8634", "ref_doc_id": "f74b3de8-e050-4788-9930-f1cde21c66d6"}, "3681e209-b352-4940-997e-fa71ddd0ab2f": {"doc_hash": "f93499c1c624ddfa0dada67f379369e40195a1ca847ceb1da02f95e968fc095a", "ref_doc_id": "c68c559b-5281-4126-af5f-4314ad332645"}, "b8e90eda-348b-470d-8d66-0364f23c40f8": {"doc_hash": "43fc7c7713760771a69a7329979a216792e91884fcc06528fffdc44c2977995a", "ref_doc_id": "c68c559b-5281-4126-af5f-4314ad332645"}, "a1758505-9a8b-4ede-879a-11f3f95a78ca": {"doc_hash": "fa242ca03de9d7f3e020c2f58c4497b90b77891f8cf560adfde01ee1f994937b", "ref_doc_id": "1e8ec85f-7cd1-44ce-9bbd-7ce0bac64d4f"}, "c07e8683-808f-4945-af47-e0b621e9199e": {"doc_hash": "39ddba971732b60ea1a2b4b4f9ca1b0bbddad2c7e7d5e6c3ff09fc01a22cc896", "ref_doc_id": "fa8181ff-e6ae-4c1e-8b52-0f05703ccfe0"}, "b3e9c1a0-35aa-42b5-8290-0f1692140eb2": {"doc_hash": "d47755f6079fa3a19ae2c9aac647fd5ab98a971751269c18388ec01d8dae50dc", "ref_doc_id": "dd5b52e6-0fd8-4aec-99b8-aedb82b37b1e"}, "b7a00520-fa68-409e-b9a9-f8cea8f893e9": {"doc_hash": "091293fe7a29677c51f172062660bf7d055e9796bb2bc76b69306649e289af79", "ref_doc_id": "1bdb572a-b55f-4685-84be-0c276145f10b"}, "4ee122ed-e385-4b97-92df-55dd6b0d296b": {"doc_hash": "19940baa3f8af9aae27a5d8fc27df8119503e128a62b42bb2a5b588c99af5772", "ref_doc_id": "1bdb572a-b55f-4685-84be-0c276145f10b"}, "6aebe6ae-d75c-458b-882b-9eb6d5ba5883": {"doc_hash": "2df4a1297cde6f0ee3f0d3236310bc2afb76e4455094d5fff7b463bd3582d30e", "ref_doc_id": "62088ca8-07ef-4860-b230-5e330f7a70c6"}, "c632575c-81af-480e-88cc-0baca5147f5d": {"doc_hash": "ef944018675c54b8b3bd4182ddec0411ad23dff2999a689fadb19b22a4d07e6c", "ref_doc_id": "62088ca8-07ef-4860-b230-5e330f7a70c6"}, "fcbf1997-d4d6-4640-8386-53f653120762": {"doc_hash": "d7fe92ba8f65827f3b33aee125cd8f9939f0d71fb4ed4f687122c271cd70035f", "ref_doc_id": "00f964b1-ee51-4d18-8b1c-164c99dbe4f6"}, "ae71eee0-ef60-45c7-add5-b6af2af55918": {"doc_hash": "b6a3076ff069d56e788ce6ba29ceb58e88335ad01c38b57cc3815840cbe72c3b", "ref_doc_id": "00f964b1-ee51-4d18-8b1c-164c99dbe4f6"}, "9d5cb9d3-2796-4c29-8404-587751e5aafc": {"doc_hash": "0c2620e406e95e61c4fee094ade3d56c476356f3d87976153adf2c48c9d50868", "ref_doc_id": "fcb53cf6-3bc8-4d1b-a35b-14c51afe1fa8"}, "3794f396-e1d4-433b-9b6b-5848b538b08c": {"doc_hash": "c70447b4f925cdbf46e0cb53e5bd1bb15dac6ee0ed83dbb8f0b84ece164ec9c0", "ref_doc_id": "cf80ad43-189d-4ca2-9423-44cea057f933"}, "db626320-6672-4893-b9cc-d44946a0fdd9": {"doc_hash": "2d8370c7d7a4fa757aad61f3492500049dd59305a999f09f9df0fce62e8c6b3f", "ref_doc_id": "cf80ad43-189d-4ca2-9423-44cea057f933"}, "45599a4e-ddc6-4173-870f-979c786f0c18": {"doc_hash": "0a5645de0e66c024493c33d2a90d53e164eb18cab38a8b8269f8bb603153e4ec", "ref_doc_id": "11aaa8b3-0062-4462-97e7-abfd917bc170"}, "998e8eed-e203-455b-9d35-0a3f89e67644": {"doc_hash": "64bd66102bf6eadfbcaf5b6b14bf0911a26ddf2bf0e7ba995ed78a45bff129ab", "ref_doc_id": "4c334a0a-6779-4c37-9f3f-981612dd5506"}, "3a29c109-3384-4429-bb4a-41d3dc12b31b": {"doc_hash": "032591b86f29c952b22e3b0540fd84e1e6872dff830dc98008b577b99d1f87b3", "ref_doc_id": "8e81ca0a-bfdc-4b3f-b716-75ad9900bfce"}, "d6124a1f-f588-4ddd-99e2-f1da86c2ac7f": {"doc_hash": "1d1458b801c0f97f4eb4a4da42ea2023f3fa3b3bd4cca45b96f1b94ee551bcf7", "ref_doc_id": "67e247a1-e6a7-4920-8ab9-1053ea049662"}, "3e6d2a28-a3c6-4c18-8bb2-b806c9212a56": {"doc_hash": "1d558c154eed0b5d65656b5acc198fc8ddb8bc69a267564fa5b88324e7b76425", "ref_doc_id": "55113dc6-7ed3-43e1-a244-275477d952dd"}, "a5351a49-923f-4528-89e2-a5e3810c6bac": {"doc_hash": "6d1432ac380c9ce7f31eba1fe6e16fde90eff78fa8922e8f17f8afec4b930358", "ref_doc_id": "60648308-46db-46b7-998f-d12629a6a39b"}, "da8c3476-8569-4b26-9860-0a593984e49d": {"doc_hash": "13efe56c1c0299acf827c75a6f1abfb580fb03de6ce9f301888ff8c055597552", "ref_doc_id": "60648308-46db-46b7-998f-d12629a6a39b"}, "fca54a78-2438-4d0e-a1ea-20ee0f83b5c8": {"doc_hash": "d4487a13910251686ec546ff6145b23f8ea60f33a11e3606b088146a73ece234", "ref_doc_id": "f1053373-eca2-4aca-8dab-582726698803"}, "110290ad-bbaf-48e9-b587-4c219e5d26b0": {"doc_hash": "21c1e84cb876b54d0ce84c6d7c890066144482b4aae2f424bf40f5003043c36b", "ref_doc_id": "d7750eb9-1116-4a24-910f-031b11a5dd19"}, "5706b23c-6e77-41e4-bf32-cdc50ed666d2": {"doc_hash": "22294476a137e04aad97494f5631ac3f79eabc0021e4f3ba26308d65c3ce2680", "ref_doc_id": "9bf2bf4d-57ab-480b-8ad4-db7f0ea89218"}, "0ddf0f3c-e4cf-4317-b33e-a1f8d4839dc1": {"doc_hash": "7f07b60c13a938dbc43edb80a2f0adc44926918941e502d4af622117bc14a289", "ref_doc_id": "9bf2bf4d-57ab-480b-8ad4-db7f0ea89218"}, "89da9148-5541-4d97-899e-ad0d910bde64": {"doc_hash": "a8f4482621d235567f65f86338fc76876725a74424daf071a39e873bca1f748b", "ref_doc_id": "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7"}, "3faf16e7-a986-4e6e-9269-3e61c170e783": {"doc_hash": "3ae5a8a656b355802d3d32fe8576bf4cfa6f745ad4ce81bb526a783a4a5a262c", "ref_doc_id": "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7"}, "13c9584b-3514-48ec-99f3-346cd3ea072b": {"doc_hash": "0febd715cefc8e98d77b4304b437f4d3df40364e2296a6d55454610ef8c8f327", "ref_doc_id": "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7"}, "777afc82-577f-40d0-a223-7cc7d78bd18e": {"doc_hash": "3605a1c3d1e79b1001c0856ffae914ef65e90d6f5c08e67a4f4cdc13e8169e7f", "ref_doc_id": "eebeee3f-45fd-4594-bd3e-17a000d55153"}, "1350c3db-fba3-43ec-931d-1ec7acfdcb9d": {"doc_hash": "1927387dad45e56304016b34eb032e038f23590e03c37131870d7ab266420429", "ref_doc_id": "59ef877b-7477-4724-aa2b-2f046742617f"}, "b67d7e1b-3a0d-4c46-9885-e01e0c9a3464": {"doc_hash": "cbef0f0b9e718ba56391b802f894b2ffd1d45ee5e91299aa76d44c49e1247728", "ref_doc_id": "3dede866-7084-459a-958f-af077d8891f2"}, "298ba775-6e67-4790-b7bf-17a49037d70d": {"doc_hash": "2376bbba118d63d9692714341fd1d140e846b96059777de9e424f7ebcf47d922", "ref_doc_id": "915e33cb-caef-4157-bb5d-0d063abe139f"}, "02d7d03d-30f1-4004-af90-54c55b1b4ba5": {"doc_hash": "87be9fd599effb472c6cee08aa89a7b26969c3c93aa84af0e89cfd289ec1435f", "ref_doc_id": "1582a79f-62c7-4e66-bafb-b776837a288f"}, "dab633e8-2dd9-49f2-9323-15dd7d1d4b1a": {"doc_hash": "de3559973456c0889a76b5dd1b561ea26b8fd96e16c66791b157c26f8bdc8bd6", "ref_doc_id": "efc3d9d0-45a2-4528-8f39-1826c98b6800"}, "f3773539-b42d-4648-9fea-51e10e47b4c2": {"doc_hash": "fed3cafd7ae8cc1e481bc1be0735ddb154e1e7d8ba217b724bc6b6fe69e5c9f7", "ref_doc_id": "f4203622-bd7f-44ac-bbf5-620addc160ab"}, "28844de7-23bc-4ba1-939a-5f2080c493f0": {"doc_hash": "1c46c9239d9cea5fea26edfbb93638725515fd6173682fc4a4e2311f15eb5d4f", "ref_doc_id": "4a1764fd-db95-49cb-af19-37a28c32cb03"}, "a6685c54-07fb-4ed0-a912-a2407b62d4ad": {"doc_hash": "14298b9c3a692a85c68beb8f7bcea0e68db640c7932b15f1d9a0a8708d13d30d", "ref_doc_id": "38237853-26ff-4466-a131-3d3202dabb3e"}, "0073a059-442c-4c1c-8841-dcb0f3581e9a": {"doc_hash": "171d4b2888b686f6729622ea8415a4706511e10c51854218b890aba655597986", "ref_doc_id": "d88cafe9-2ffc-43ee-a55b-11152e2dd684"}, "eb8413a2-2299-432c-a99b-7be0e2814f5b": {"doc_hash": "054d0c0a191ff926f91c40faa3a45959915b9c5132d932b5599e538255dfb717", "ref_doc_id": "874d48fb-ac08-43fd-aea4-07c9498e6bca"}, "38fba293-73ef-49b7-a748-03d8b9bf28b0": {"doc_hash": "d1ff962b518f03feec27e8cae90776c6581d4809dfe98e0a590c117cf1559475", "ref_doc_id": "7ea3cb17-46f7-4e1e-8bc4-39eef0c4a76f"}, "5e75468b-ef8a-414c-b9f6-0ea312199010": {"doc_hash": "f59582097faf8a927c1f64a2e52204c5ceec0802684992e49bcd6490631dd8e5", "ref_doc_id": "b950066f-e175-453c-9307-12f7f4957de1"}, "678d5340-180b-4d84-b14b-f8d611bc28b0": {"doc_hash": "19edc1a52fe4c5983f36b19e5428aca8af8d99a96b438a1b3d4dd4249cb85e40", "ref_doc_id": "1ab9ace6-f28b-45be-bf3c-ad69b9f23c6f"}, "ba07fd4f-3b11-44ea-9846-8336d71fca7e": {"doc_hash": "7a2e125bd4ba43d0912eb4580f5aac205e90fb145f4ca66a1e61f41aaf5deb8a", "ref_doc_id": "1f73cf19-45e9-4454-b920-6ee849dee333"}, "726cd99e-6f99-497d-a1b0-af0ced98a9aa": {"doc_hash": "000cf06e0524d9ac1f081c1320150495a90617774165635d9b2b35267c34823d", "ref_doc_id": "e48ca6d4-11cc-4818-92fd-b1fd4c422dd9"}, "e9ef314f-576c-4e39-9cb5-2e99231690f2": {"doc_hash": "13e22cb81f614cc8f3184f1951431b2b20be158f06b087b6c3d4092fe0128e66", "ref_doc_id": "68093135-cfb8-4f5d-b07a-e12794d36145"}, "c94fd1cf-c01c-4b07-a239-f3fed8e2851e": {"doc_hash": "24315bb6643a02eadf4c995522fa2a951d588b0cbb871b126b5b9be9cbf2ca5f", "ref_doc_id": "150a5700-15b4-43d5-b1ab-15ac377fb379"}, "94eebd20-ca4d-4acc-ac91-7f7b74d93dc6": {"doc_hash": "ddb373a736275e38536d1447790c30db36724c4389884ec4b404821b0951ef62", "ref_doc_id": "44fc390f-39bf-4da3-9de9-bda7973b9e54"}, "210939bb-803e-419c-8925-fddba8b02bcb": {"doc_hash": "3ad308296ff3b4d5e2086f110111ceb25ecb03dc932d90d645c80ce9f7054619", "ref_doc_id": "07fd7e5d-4fcf-4e36-b6cc-ff8af2311d14"}, "167361f7-9e89-44fd-9aa3-37bffe89c8a3": {"doc_hash": "0d93f85660f7a7eb621b0ba344319bfae776392a17767fe90fa009e502e01a59", "ref_doc_id": "fc5ad508-75b0-46d3-a66d-cc9c40fd6e1e"}, "52fd06a0-e233-464d-a44e-7f9ba17bfc17": {"doc_hash": "7f87c9d2c7a8f845047aaa5f7ca47165769572a17019e9a4abadf05ede34eab1", "ref_doc_id": "fc5ad508-75b0-46d3-a66d-cc9c40fd6e1e"}, "d5a32807-6a4f-431d-898e-414361c5cb80": {"doc_hash": "b88c06717879209e6a8aa842eb876c5744db75e0136331edfc10998960aba62a", "ref_doc_id": "c184e4e5-56aa-4d5d-8e9e-a93de196c28c"}, "366c7d37-50ec-47e7-9afb-b1e1b00d7461": {"doc_hash": "3004b32bb6dfaacf7487df57ac71cf73cd09bdb0f7e021042a0ec3e6feb37d8b", "ref_doc_id": "a622be9a-1681-4931-9334-9d0733067e4d"}, "5f5b2507-0b6d-4d0c-bcc3-84fbfbc10dd6": {"doc_hash": "269973beb075a5fd1b4e6d672d5810181e19a9c834ac8959782496604935af63", "ref_doc_id": "891d2b25-c901-4c0f-b9f5-136922fbce65"}, "6e7de4c5-60e8-4b08-876b-4e1afb5d7a66": {"doc_hash": "623a49bf25e494fab90bce221022051f930dfd5e6ca4678409afbd63ebf47972", "ref_doc_id": "e35d356b-c366-4902-a444-65115763451a"}, "79f0b2d9-a146-45ba-81f7-d060be069173": {"doc_hash": "4eb7cca5318bc2a173cce1fd352f6f75f2a705bd030da0ceb3eac8bcbb17633f", "ref_doc_id": "e35d356b-c366-4902-a444-65115763451a"}, "09aa5e87-af12-4259-959b-be45b179d774": {"doc_hash": "ffd3f2841cd7f3c354c2bf1f156d76266b466ef2e364dd89978ad68a71a761b5", "ref_doc_id": "4452d168-e485-470a-9d20-73365a394242"}, "b2ead909-1187-486f-a974-444041aad18d": {"doc_hash": "16e748280f59e75dd065cf675247ea63daf70d151dda89deaf999a19c12acaa0", "ref_doc_id": "6eb27494-bfbf-4edf-8657-15d3b1aa2333"}, "894ffaca-1a42-4698-94d0-6ebd6f814b39": {"doc_hash": "c63c59bfae6b41d4ebfd97b47dd3cb019581951db86cf32bd6625786b3f24be3", "ref_doc_id": "b43720bc-5924-48e5-aae1-9d41790dcb4d"}, "d36db55a-6794-49b5-90d4-127b2ff3d745": {"doc_hash": "04d6349e04647e3571866c92abcd12576fd64a5ad88943b986eb6706e6e66ad5", "ref_doc_id": "4399bea1-532b-4c88-ac59-b79e0e65b6fb"}, "7d3b2e24-e9bb-45ec-a42f-f704bf27b104": {"doc_hash": "85ac1fa277bfe671b405a47e771bf3d17c3ff49c655560c1b7e916e266a5a618", "ref_doc_id": "e0e7eb8d-0161-4052-b785-acea76242652"}, "b45d69f1-959e-4d40-a478-b9c49d2aa46e": {"doc_hash": "447feacc3edcfae916671cdfbc665b4607b545d92c546a26bfddb7ef0d2f9dac", "ref_doc_id": "6bd96b1e-94f4-41fa-8131-fdf17a4abb97"}, "54d9fc7e-42f8-4c31-ae67-09c395eb2b5f": {"doc_hash": "aae9b653353fab40d2c7b0f5eb2220a6a8d68e924f5b101d6b7311c4be5aa858", "ref_doc_id": "be1535d8-3079-41bd-b62f-de8cf1cb176e"}, "4ae9cfcc-56c4-4ac1-8bce-7f80d0d29d7f": {"doc_hash": "b8607e55fb9c8b8ed8b96dd30c09748d1302c014728fb670e8ea72a146ab4578", "ref_doc_id": "be1535d8-3079-41bd-b62f-de8cf1cb176e"}, "8ba7c95a-9057-41f6-8033-544fff268466": {"doc_hash": "c7cbb4213805604fc800ef30bf7be1e0a84a394369755b114d9aca89e7f4cded", "ref_doc_id": "be1535d8-3079-41bd-b62f-de8cf1cb176e"}, "4b13be37-9c6e-4111-a910-2c7991bb7045": {"doc_hash": "b0c32de9203175f37b166f4cc61de16241ff6529d830776df37a10ede1eda2d2", "ref_doc_id": "be1535d8-3079-41bd-b62f-de8cf1cb176e"}, "887c76c9-7953-4cd8-a049-c78861e428fb": {"doc_hash": "cc3f8186e7e1d2983164591bce5381172ce28bda69ad3471e7df16a2b755d0da", "ref_doc_id": "62864485-f80f-40fc-855f-9760b57f77f9"}, "65d56dc8-cd2a-4031-891f-8cb314a1b5d4": {"doc_hash": "50aafff984e95565cb26c2f0498ae99cdc060e1909ee05c834f8b872a041c2da", "ref_doc_id": "62864485-f80f-40fc-855f-9760b57f77f9"}, "aca93c95-a2f4-48c3-bdf6-966b4f53f00f": {"doc_hash": "65b9fae8ba39f29990087c373d667e001e46ffbdaafad09123cb83a9c1d2f488", "ref_doc_id": "78d3748a-bb2b-4c51-92c6-f7a0b3e66ab0"}, "6610ebd6-c239-462b-873e-da22dd95bfe3": {"doc_hash": "2b20f813a9fd00cec4913b89f111052ef0ec5b7d55f8fa7e2b3da07efd41b752", "ref_doc_id": "78d3748a-bb2b-4c51-92c6-f7a0b3e66ab0"}, "b782fbc0-7632-4bb2-84c4-134b07b34a90": {"doc_hash": "8d8ac3d808b6329dea08c442d2291c08f2e8cbb620f8fa0d6c2fd266f6edd93f", "ref_doc_id": "1a7ced0e-fe07-40c6-ba3d-f61c1fabb512"}, "ebdf107d-e177-45d4-bee8-c05f1f74cfb5": {"doc_hash": "c9beb10d47057f561263b60a33d81402173f33468fbbce9b88f1d62307fb2614", "ref_doc_id": "c6bc5174-1419-487f-bdb2-7ae0620207ee"}, "6b44c90b-04f5-4796-8018-c9e45bdf4ecf": {"doc_hash": "acc0561597c4153027ff7c249cea86c1d85a6ab65ce8c885513bc9d176255440", "ref_doc_id": "c6bc5174-1419-487f-bdb2-7ae0620207ee"}, "a6e122df-446b-4b30-9cf1-e39b55e44e0e": {"doc_hash": "bdd6fec8f85b260048447ca3327313b924900fd49d865da900c91159fa18c63c", "ref_doc_id": "5557e1c6-7541-4a55-b67b-19dd4e388091"}, "e0e523fc-f905-4ea1-9725-ddb4fd0d0d4d": {"doc_hash": "fca89bbbb31a97fa3adf9cc993652caf69278296762b3707256fe86f30ccd3d8", "ref_doc_id": "accd31e4-d7ee-4f87-8409-067c84ec0474"}, "30d289c3-312e-4e8b-b7c8-e09a17d4f412": {"doc_hash": "5f3e185915e7039f65f8add99e8470932e90a9b6b1075bc8e0fa98b1b927f195", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "fd4adb43-013f-4886-943d-a676cabc8c5a": {"doc_hash": "98c7867ae6e5b41ea6cc6aff2e6519a6a720bb7fdae31a202bc344a5bdb149b6", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "2d94e5d0-7057-4cd7-9beb-7fb0647d5d8b": {"doc_hash": "c196c8fd96d100648836db8fc22c70b1898050c7fed816b13ed422dab2cfb044", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "1bf8226b-66b7-4f1c-93ed-28d7cc636df4": {"doc_hash": "f31da86617354ebdd1d0c1bbd3ee5a9973d4f336d7e10f2297ef7c60904d0d39", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "4a979cbe-8e5c-40ec-b607-a5558f20d0e9": {"doc_hash": "738edb02c4f9a1284060fb40b14bd6e8ef631f53b341ae79d102cc9d9943ca86", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "93e07af7-c4d4-4333-9787-4b79b66eb616": {"doc_hash": "f7293dcb32c6f77aa3962f85b8e343c0a56a2640efdfe3a3e2b8c545f675c74c", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "b078b0f9-802f-468d-95f5-10bebf455ef9": {"doc_hash": "d1633f6016e5e01c08cc4979683bea32c044acb68495d61a5835fa6da122fa10", "ref_doc_id": "e9722366-3ff3-4ff3-8017-521ce85d8c8d"}, "e9a5d53c-f9e0-4bac-abab-873257d7c7fe": {"doc_hash": "94d2a88e3aea34120bb25f8c3684bb80ec8a915f1e30710f8f5e87ff8bed67e9", "ref_doc_id": "147092c1-1102-4b9e-a42b-f51f2553c1d8"}, "881e962d-55cc-42b0-acd5-60fddada208f": {"doc_hash": "3dd3e74c9db658a765d4763e3e978dcf3914d6b6207a77c414aaf4f3f83d3b1c", "ref_doc_id": "574ff711-e261-4047-aa3d-1f1b7a68fbcb"}, "b1285bd8-c119-44e4-a6fc-e3c9e7483292": {"doc_hash": "acfefa4adbda93698afc3c49bdfff516fbea66d5a74c1f3171dc1bc1ee92b867", "ref_doc_id": "574ff711-e261-4047-aa3d-1f1b7a68fbcb"}, "14c8f229-a448-42a1-8ef5-0e7128010194": {"doc_hash": "cf892b0044b47104442538d5d465cdbee45f37c69e3f9abe87da0364d1c143f7", "ref_doc_id": "2e3949b0-fedb-4f2f-896d-535dcd2954d3"}, "6cc7f615-9b3e-45ca-913d-4d0e1df0d8e2": {"doc_hash": "8029c7419c18a8fd32b7bf5c2300e43b912808830567060475f29d5fddd40c66", "ref_doc_id": "2e3949b0-fedb-4f2f-896d-535dcd2954d3"}, "2ef39962-6661-4b58-8397-ffeefb8ee539": {"doc_hash": "e842a32896c0826b9100b718c0e66ca05ff90b00d8d69f1e43d958b3ded6996c", "ref_doc_id": "ea19df4d-7808-460c-a1b0-58255df16051"}, "015acb02-515e-42bc-9e4f-62723517ca90": {"doc_hash": "cc0acb15c195200f297c3abdf521f43f7cdfb0df586860e65c26c0c1d9d5772a", "ref_doc_id": "2dfd8e3b-bbed-4587-a172-9c2ca1b1ff39"}, "c77f6f3f-c4b3-494e-b112-2552c2c76fbb": {"doc_hash": "a21eebae94e4b8f9b1e1594309e23a7644f4cf9b52bb92b31e62d135813d895b", "ref_doc_id": "fc9a5387-f75d-4432-a0de-550e357c130d"}, "9a343352-76db-4fb3-9a42-d0c264d3f73d": {"doc_hash": "2fbfbac75a3ab2cee20db372e6438bafcd08c25ad0d21a9e2bd3d95b6d6b61fa", "ref_doc_id": "fc9a5387-f75d-4432-a0de-550e357c130d"}, "e9e7b2d9-9b29-437c-85a1-fb0bc97d018b": {"doc_hash": "5646e5f9aecac5f4cc0371dad7f82cd1db0c2628258fb763642ecaa2aee6c8b5", "ref_doc_id": "cb8bccb1-e9c1-4b13-a02a-16e17a700a13"}, "e62b2ced-c426-4577-ad6c-7e0fafd6d007": {"doc_hash": "d97ccd89974e5365d30a5237a0f5ca8e90526f925cc125f8d2728cd900a20c6d", "ref_doc_id": "6c47fe64-e54d-485f-9ace-85ce5eef8338"}, "34bd076e-38ac-43aa-9015-3f9c7e7e1ef0": {"doc_hash": "095dacab9af9c016a309fcd975dd50a894f2e3a83c36e9e99e7a761c7ddb9d02", "ref_doc_id": "6c47fe64-e54d-485f-9ace-85ce5eef8338"}, "3a8943b0-2593-4a61-88ab-100498f3e78f": {"doc_hash": "51ef15558d138a4852e71aba96d36fa41596501f1e8b254b10cded622beab87b", "ref_doc_id": "0561e07b-94c2-4d9d-93cc-068a71b47def"}, "08cbcf82-c8d9-4c1c-9e80-169d62362fd9": {"doc_hash": "e8ffb995ea510c082e2924e3fbb7841abc4c8eff7e0dee04d8289dfd79858013", "ref_doc_id": "0561e07b-94c2-4d9d-93cc-068a71b47def"}, "deabb435-ae19-4635-b8c6-e9b9c1c36f15": {"doc_hash": "6ea1f8f8d9a59ab93e3c76f754a07a0c1d619462bfc7465a8a30ae1bd3953823", "ref_doc_id": "f880dc81-23b5-40f1-9806-3d7c8b25a629"}, "ea2a36ab-a69f-4f83-ae37-7219bd7ff6ad": {"doc_hash": "0632fc58f80cbf747413f71bc645b055b68b2dbdb9808cf8f416f2ea7cdc1eb4", "ref_doc_id": "409aa88e-fc1d-4573-baba-324998416f6c"}, "c08266ee-d29d-4b79-af1f-f0c0b5fb5da1": {"doc_hash": "2f34b08c5b681be8037668876d1cf70dc671c29282834b254915179b29ba2a45", "ref_doc_id": "409aa88e-fc1d-4573-baba-324998416f6c"}, "f40b59dd-becf-465a-b319-0c6ba4fb7c4f": {"doc_hash": "553e1fcd50eb745ed59c896d2f932eb16ee91a0012bba75e8e4f15b99ee9c66f", "ref_doc_id": "ac34d774-ae06-4fea-9801-61b0f03b1591"}, "efa9a90e-cdca-4eaf-9b47-668fbea7a773": {"doc_hash": "4d31c82551a81a52359b979b3978a1ec86f49f833b7f97209cb0b1d28bf3b181", "ref_doc_id": "ac34d774-ae06-4fea-9801-61b0f03b1591"}, "94d87f48-7247-47ba-945a-d89901592ab2": {"doc_hash": "5095228aae49e2a1eb104b3087ea72f3add18ab8d8fc500c40ae3815eb858253", "ref_doc_id": "ac34d774-ae06-4fea-9801-61b0f03b1591"}, "36dd9097-2549-4120-b106-6521b178a630": {"doc_hash": "fc7d0300239114073742cc6955fa3e60c9526e09a3fb5bf4e8624d7f26c586ba", "ref_doc_id": "ac34d774-ae06-4fea-9801-61b0f03b1591"}, "5de54994-5de6-4bef-a5d4-2f348e4404ca": {"doc_hash": "a3ff94bf8bc5167c0108a1f33e116da48335c2520b833508ab5c3b23bbe0b90e", "ref_doc_id": "8d3a90ab-56a9-4a75-a7d1-e26a16e82733"}, "79f29cd6-4f76-44d8-a3e7-60cf290497d0": {"doc_hash": "1313fc924acf2f32d56769fa35cc4bca460691e965e4664c024f6efaace7ea2a", "ref_doc_id": "8d3a90ab-56a9-4a75-a7d1-e26a16e82733"}, "9e865bba-322b-40c8-9d37-e31a7997186b": {"doc_hash": "7174d14307010758c96b444453274895eb0a4a4b38580b30b82a171c726234ec", "ref_doc_id": "b7882349-5a1c-4951-a560-9c7246465a58"}, "ad3ac723-9670-4823-9411-6445277918a4": {"doc_hash": "c5c6f1d07aedf6f9cda8c4bed62bef88744ce3908de14dd51ad5712f0cdf4796", "ref_doc_id": "86c2b3ca-6b7f-410b-8b6d-d94cf84e08fe"}, "24899395-398d-4219-b0cd-894026d3965f": {"doc_hash": "049e34cc33fe7d81a71a6f6bfb90308095c6788bd001a5f0ee0aa3e7d07f881c", "ref_doc_id": "2a64dbab-bf37-4e88-930c-1c5af7428671"}, "5184cb88-f9af-48ad-90ea-d59ea81abaf6": {"doc_hash": "fb1e34bf1b76cead6b170cfd3eded85839f8b6fa6cb8992e8d8c4d3d62ce1381", "ref_doc_id": "3e502692-cc6f-4181-a94a-ad189d3b43bd"}, "a11580df-4129-47ea-a853-9bb1a4c29b87": {"doc_hash": "58d50f784fa14d760e9440430ab54f124f5deaa46e671b00086a46ef1ffaf2f3", "ref_doc_id": "ba27e2d7-2469-4a2a-8207-20fc6c89bbaa"}, "7fe4c8e5-3284-4ca4-987e-d7e5d5b80c32": {"doc_hash": "33d48671979c126dc3539baf856c50fe865d27b4dac63a6b8577663a49029718", "ref_doc_id": "67902284-c4a8-4cf2-b476-ec49863010b5"}, "7842293d-9802-40e6-980a-5b319743b8dc": {"doc_hash": "c7468a62c2f625a5dea1a1aa9914a068a4b0cbefb759e61e6a6f45c17f558f46", "ref_doc_id": "67902284-c4a8-4cf2-b476-ec49863010b5"}, "c4c55463-cb82-4f9d-b378-fd9e70247cf8": {"doc_hash": "9e62526ee61a7975b85fdf03db613116c8b675f034e41741379c6fee0ba751a8", "ref_doc_id": "67902284-c4a8-4cf2-b476-ec49863010b5"}, "d643b816-1921-4621-bdce-b5829548a1f8": {"doc_hash": "5f90ec042e7c479783e8d151e2b10e8844a96d0198d7e57b5930c690267f47bd", "ref_doc_id": "1f592df9-186f-4b87-a6f7-d970dfa8c635"}, "0c3b826d-92c6-46a7-b3eb-f9d4eaaf238e": {"doc_hash": "68ef6553bddaf60c1444f4ee27124107fdf565565be542d1c355bcc9618e0c9f", "ref_doc_id": "6e9d6a07-7572-4f16-b9d8-dca652765dd5"}, "a1a2cd01-29ad-4d84-9eee-c5eb4ebf6982": {"doc_hash": "e1e35e03389ace7b5f7d15d76ae92f7e648e589c64f9d30fe19b6827c74e1159", "ref_doc_id": "6e9d6a07-7572-4f16-b9d8-dca652765dd5"}, "106b45bc-4f19-4289-9426-210b10d17372": {"doc_hash": "ced9ba8924600cbeb7e9b981e863c0bbcb59357e589ad4d96a37fbf336484156", "ref_doc_id": "dd1e0eec-1ab7-45b0-903e-316d2f8a355b"}, "dd007daf-6ad5-4d8d-b976-3713f258e662": {"doc_hash": "c58fbd2491fea6492066f9cd5452d23c4dfe907ede13832441ad87e4cd30c3e2", "ref_doc_id": "d10a97b7-8dac-438d-a4b3-03d58e79c0d1"}, "9f6b0a3a-b9a6-484f-a082-d0517d46151f": {"doc_hash": "04cdd7eff2f7c0ea82b4255d594c1867e774235bcb9e435d4f19efcb3dadb44e", "ref_doc_id": "f2f91975-ca4a-4682-a092-1a0e65182983"}, "a09a1c9b-7cd1-4606-89fd-b8e47be9957f": {"doc_hash": "667bf7ad920db854ee26bd3e4c27c8017b80d69246b70d1fd12bffedd7f40458", "ref_doc_id": "975f9793-5e62-4f9e-8e18-21bbccc33dd1"}, "d65aa49d-448d-4b94-9752-c7c780424d93": {"doc_hash": "8e3f98b1c2faf180d71da141f562ec628df8452c163c91cf8add7e6bfa357416", "ref_doc_id": "975f9793-5e62-4f9e-8e18-21bbccc33dd1"}, "fddaa038-ce6a-480f-b984-ea8d3d669585": {"doc_hash": "53a9e6ca92d5ffbfd7a0bacfe3530760bcb0bf09057d9b6e46d24c1fcf504a9e", "ref_doc_id": "975f9793-5e62-4f9e-8e18-21bbccc33dd1"}, "e6cb946e-8344-4b7c-8576-672b76aab0ea": {"doc_hash": "4b826aef7ca91d43172a28166e90c9d09230f676f032a983b4929fa791ef9719", "ref_doc_id": "5416b827-38f8-4ee9-8b6c-78dad7c7ea58"}, "97decda0-724e-40f7-a1e2-3b24a1b2ff79": {"doc_hash": "daaa8dd97404b0260bfc35871bc978c52e9639f11054041ccee6565174aa9632", "ref_doc_id": "e361eb00-babf-4ef3-9034-0d96beaf0455"}, "e5ca0d64-2bf2-46d6-a453-c61ec77d2681": {"doc_hash": "17802cf28ba2d52acbd4c8d636f09c206199c723fe5c4e7399893427c0e057ae", "ref_doc_id": "8f4576b7-b6f4-4d1f-ac86-51c435918639"}, "83351168-5bbb-4330-9104-5c55e41d2a3e": {"doc_hash": "197cb82e0b3a8c7566b7f17c4392bfce5272777a55929bb5fb6d7c466b53884e", "ref_doc_id": "6de26390-981c-409b-90a9-869f983eae6e"}, "4f78e6a5-bb97-4819-a5b5-f0a3efdf7634": {"doc_hash": "557e49091fcfb76a77108dab748edb5d55aafa1e36ae42d20ca8ce1303525f79", "ref_doc_id": "90995119-baf6-46b4-b74b-53aac89f5727"}, "720da9fd-0af3-4337-99d9-01b0a0998960": {"doc_hash": "b9e2c2b7845c4615bfd870cde27ff165dee7e15ddec3f1ad2a7d69381387628e", "ref_doc_id": "90995119-baf6-46b4-b74b-53aac89f5727"}, "478c6a5e-3a0a-4730-b00e-84a49644cc09": {"doc_hash": "5830bc26c222335ce51cb9c1367f7dbf2639ff2a6a4cb2a844649790b2b0b8bd", "ref_doc_id": "90995119-baf6-46b4-b74b-53aac89f5727"}, "3a76468a-ae8c-4a9c-9576-a2b94eb25cfa": {"doc_hash": "70d119ae99436a010e554f034fdfa769699a993d1c6f8bd5adc58fe11f268648", "ref_doc_id": "b6210497-2f1c-4937-941e-d233ac9cb99b"}, "52ec34e4-7a8f-47bd-a23b-2dbf0c7b486d": {"doc_hash": "05455e292b727bf87c528e4989d8dde219aeaf16a9c2a2e8443b4b78c997cc62", "ref_doc_id": "2292d7c7-9f03-4733-bb99-10c656670b57"}, "466e922f-af69-4b4f-8deb-f7981d48a140": {"doc_hash": "99ffb6ce71cb6c3020705ee0b68a6f9af4ee6dea0ea3e210dbdcf18303cf4012", "ref_doc_id": "12a3f7c5-f6f5-46c2-a23a-a898dcc9ae13"}, "273077e7-f591-4931-a73c-ef265687d1f7": {"doc_hash": "1b01f796b237c8ddbd02231798191d52e73b1deb4e398e8bdc3ebd4949788399", "ref_doc_id": "7e175dff-e596-476f-8743-f62dff600981"}, "d1f144be-48c2-4c0a-bd6a-be2634f2b6ac": {"doc_hash": "3586e15116bf8a80b364d1ee60566b9c70636586c00a8b1e7a5525ab4b9936c3", "ref_doc_id": "736e71ca-4b0f-415b-a941-4b26a226c3e4"}, "55c3407e-1084-47ba-b37c-e95738123b51": {"doc_hash": "f7dbf3fd0f9aee3eab7e5817dd2c0c425f23deb6912b15ab33974c6d8f77fe97", "ref_doc_id": "edd8efdf-c492-449b-b9f5-b99f6cbf0687"}, "1b6e16da-56f3-4cb3-90b8-d67bec70b816": {"doc_hash": "3ea2248bb5ec6eadde47d6372968aba0bfe0196dc7cc53a7f163888fb3d6f39e", "ref_doc_id": "d8ba98d3-0bf7-4449-b74e-9681ca396477"}, "38e6e48c-db2e-484f-a094-a488e5972646": {"doc_hash": "73a18b2c83fa866fd7ae2f23150de01a525560a2ceac09cd3dacc9380cf39749", "ref_doc_id": "b329e402-438a-405d-8cfe-030d66389563"}, "f372bfa7-7fdb-4d06-86ff-cd73911d3d21": {"doc_hash": "43037f556e33305d58ab71661a5199697d01217145605572723047d805545400", "ref_doc_id": "03028a81-8c63-42f1-ab7d-d3cfdf35c467"}, "24ac5882-2bd7-4ff1-9b98-ba8770b3ffd0": {"doc_hash": "b404bf8468c31c57d4f4821b0df94ce51f831696de33a489b53491cdcfb71224", "ref_doc_id": "03028a81-8c63-42f1-ab7d-d3cfdf35c467"}, "3f01046c-69e7-4876-9d78-3a7d4e12f46b": {"doc_hash": "d9b5a4c16e1bef225ad9931e4c93ffe5663ee5694b1e7f24182712064bdce775", "ref_doc_id": "200b0fd5-3144-46c4-9d6b-e62b180ecc09"}, "473548ed-5ea6-4164-af8b-97b177ca0a89": {"doc_hash": "eb255cb21aa4d8d26b4cb76643b288fba10affb51c9af015394433d218dd1319", "ref_doc_id": "200b0fd5-3144-46c4-9d6b-e62b180ecc09"}, "0dd5647b-7817-4aa8-8ddf-3df18fdfd62b": {"doc_hash": "9d7eef85ada703e422f70a4471542217f5046a7f50aa7aa62dc2e58c313f85c2", "ref_doc_id": "200b0fd5-3144-46c4-9d6b-e62b180ecc09"}, "67e4dd21-bf18-4826-9a5f-441eb36f8f35": {"doc_hash": "ad4e621f10a7420fe9fb6cc361b183ad4d08a55b0e113b50699672dbbf93d00d", "ref_doc_id": "d8c83223-fda2-4684-bea8-94fb5ad215e5"}, "feb2056d-66e3-4e9a-a001-09cb926c9e1a": {"doc_hash": "f8879379425ae99e591f138fe05d58e83b1a29e96bf8a37dcb4a160d4f741d41", "ref_doc_id": "7378ece4-4537-421e-8ea9-7ad438a974a5"}, "822f78a3-8008-48dc-9938-5bb8da8ce2b8": {"doc_hash": "80a47bfefc47cd63de9cddac89019eb0b5d514c4f4842f0f6681483550c93a6e", "ref_doc_id": "7378ece4-4537-421e-8ea9-7ad438a974a5"}, "c4bd1deb-aac7-4060-b610-7ad7d226c3d2": {"doc_hash": "961f9217bb2add5e3735fb993b303a8a8fe489e23f5eb6ec48993aa96619885e", "ref_doc_id": "f3555700-a627-48a8-92a9-fe6338d5cc37"}, "2830fbd0-7a9c-4238-8246-13376c46862a": {"doc_hash": "13c96fb164e93acf277f5ef449654a4b9027319a33cb728585c48a06e5927836", "ref_doc_id": "7df9d401-efd6-4633-8054-28ce4c214530"}, "eba23fc0-0ce8-47f7-a2dd-666e2e3c1be9": {"doc_hash": "a68b30794756cb5716bf341e2cc6426757e56cfed43fe5cde89e949ea64eceb2", "ref_doc_id": "7df9d401-efd6-4633-8054-28ce4c214530"}, "d1e22760-d66a-4112-98c3-5436d4ffe31e": {"doc_hash": "1e0b37f59cd45fe9da6c19f05026685dfb4f464deb4549eb0179a3ce385fb9e8", "ref_doc_id": "27da9991-9fab-4a52-af6b-e20f01adc03a"}, "dae91af1-7e06-4107-b4ef-373aebc5f69b": {"doc_hash": "62c22e3f7e40fb251757cd788b5151337e27c3b00ba8a9cb2ba68c8b0124a5cb", "ref_doc_id": "a1945505-0017-48ce-9133-24b19a7d87bf"}, "9b5aeef0-360c-4848-b18e-93f2e8afc5f7": {"doc_hash": "3b46788d3aeb16f0e3b1a139a493b1a4a295334990e70cede16a4ad7f26882d8", "ref_doc_id": "920dbf0c-f117-4977-a88e-00eec0734149"}, "f27a3600-c9a8-4741-aaf3-dfa9b68edb9e": {"doc_hash": "536a63c49e7494be5a238a9f238b6313641219ad7104e0139c35e6118054849c", "ref_doc_id": "920dbf0c-f117-4977-a88e-00eec0734149"}, "077278dd-08ad-438d-a8ea-48fcdaa534c9": {"doc_hash": "2bb08ca32eacfa3b58f7de0445c25506ce982790a873b6411e841f352b6ba582", "ref_doc_id": "28809ff8-de50-4bba-9cb5-fa048426548c"}, "9fe921bc-1a97-4d3a-bb1a-bcd2db4ff7eb": {"doc_hash": "c5602d45777526e66d7ee970b0dc3421c8f36ca90d7a28f3574fed1e3b11d6b2", "ref_doc_id": "28809ff8-de50-4bba-9cb5-fa048426548c"}, "56a6c4fd-6f8e-4255-b9c8-d6e191256bd1": {"doc_hash": "f28ff9737392cc7f53f8bbcc23f3c0355f5ec1fb6a53de61abc588ec300c31b1", "ref_doc_id": "2a506cf2-d292-4110-821c-285c3d79d639"}, "582bb8fa-1940-43d1-b99a-6e835ea7fdf5": {"doc_hash": "5b148d9ccb0473b289575ff7d2362fefbf52a2cc6ffe737aefe3030d91bbfdac", "ref_doc_id": "0ed2e100-9d04-48c4-a012-17e692ad436a"}, "82b63fe8-2f5b-4b94-9e87-1ecfdf2cef7c": {"doc_hash": "b1a38c54db096266b9d48fe058f6365eff6b8607dcbfe0e4f75c8755c4a5094f", "ref_doc_id": "19eb6f9b-82ab-48ef-926f-391b4675346f"}, "43ecdfac-f81d-49b4-bea4-21323c7f3f02": {"doc_hash": "f25ce9813be184800884f751ec0a43904e4623dc743fb5744c69be5a38b79765", "ref_doc_id": "d6f6f3de-085a-442d-915d-6c6000de634f"}, "525320e1-d7e6-4fde-b68d-0fc751ade9e2": {"doc_hash": "c43dcb48b1a977d4f020af142ee91b95e3cff0d8a0f472a662b7f83f43a1355b", "ref_doc_id": "1359f785-6658-4190-8f1e-65c99970d2d0"}, "62d9bcfa-8cf9-41a8-98f6-d0bd6ca28b34": {"doc_hash": "df09399187eced18659bead94c6fa1ab94af07acf8c8e4bb6414c7ac9f20b12f", "ref_doc_id": "84f11eb6-7b86-4125-9b98-6254d8723728"}, "cdf14507-1249-45d2-8773-f678853a79a7": {"doc_hash": "252a49067d6e4e83fd2cd3307649deca5fa4d209b0b164497b56067cd9f3dd9b", "ref_doc_id": "414acc17-1d10-475c-848f-a10772677fff"}, "6325b16d-d1ac-4b04-87e2-0cb986d6e1cb": {"doc_hash": "cd6446905f9ae0ba5fd1857f5be5f95b5437708d6ab0bcbc3ca97133310e5e8f", "ref_doc_id": "414acc17-1d10-475c-848f-a10772677fff"}, "5c8c0b2e-1f79-4a68-907b-53ce8ab84c0d": {"doc_hash": "9a00c82a7d9b45c9a5ab83f0062b051dc8f7f1a6d14eca63ad737a449507132c", "ref_doc_id": "6d847e74-8787-43ad-ac99-1a40c37a848a"}, "2aaa3463-40f8-452f-8877-62bccd82d224": {"doc_hash": "c7523b7268c35f6b7e9b200dcd9eb1aaa10e181867789cf32ec09ddc32ad65ac", "ref_doc_id": "89eda177-32ab-4c5c-a7b0-6bd1b1bd58cf"}, "5e97ae9c-ee1d-4106-afd7-294f3d2e9697": {"doc_hash": "b2eb6c814282726917c7d412f57953708fb2893240c646b8b88e5fdec16f2727", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "25eb9485-ac39-48f3-a410-7830284fbb06": {"doc_hash": "c000c08d5f6cf6c457bcaafe5f4214e575c502821bd1eaf645065b16c7d925af", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "08df6085-6d6d-40f7-bb26-522b4eaeafd7": {"doc_hash": "56f21d4cf6e28e26eb3d3619e214c6fa28b38dc3394ecec263a4611ddd9c0a6d", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "a7397399-bf55-4aaf-9d74-8452489fe155": {"doc_hash": "42b1fe42c0ca94416bb243a580472e3e42de3220dc0d5eb87a6dde0263f5fc43", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "b8483197-c75d-4853-95f8-0fe8cdfe9063": {"doc_hash": "9e5a383fed9529732254352ff6163740e9c9e0a933de05b88418dcd21a17b755", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "c874dded-3f2b-4b55-a4b9-37cc14a551e5": {"doc_hash": "834dc3b52aebe85a2680dcee2f0acedd29d8c422c7f14ff75bc668e9198c1c93", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "3fe5ddd7-a586-4a42-a82f-85f279b70bd1": {"doc_hash": "5330185bd1feea5965acb3b9bda7ee0e67d010fe4d8ee9354a271d481cfe3e56", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "612e60ab-3c7d-4ab9-a982-da94e07a2b45": {"doc_hash": "0b6cc9a6cce6773969c08a37000203d118cde9d736264e72f0094a2525bc672b", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "ab205c86-1bd2-451a-b641-af77c82070c6": {"doc_hash": "d4503749a449da1c5fa9746ca47fb22608eae0af1a65079e49ed9219d21cd016", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "ce1f0018-4984-4bd0-a7fd-448eddc976e8": {"doc_hash": "d3d2b4ede8eaca9650797ea47c1a110b8e3f555a837caf616655b379114db88d", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "fcd903d3-89a4-4f5d-a085-ab93f89c6e61": {"doc_hash": "c2ce3e8ea8a1776e1ac2823b4b1606a05fc6c7885f0ee64b9c114ae13d7d7c93", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "b179c5ba-dd58-4b55-85cd-4b5d21771053": {"doc_hash": "f1d7410aadabd3edca14da4fa8254ab4a26ef9338c89dbe96d7b3a20824e0b1b", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "5b7221fd-bf1f-4fd8-b65a-777b1f3de074": {"doc_hash": "594a72acae78c4ccac6cd3790da7ee56c386c5372a69c54ecd026aaf46e8b379", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "251502f5-9209-468a-971f-64115fad10c4": {"doc_hash": "edd393255485ce441b00a99144a8f3bfd33e128f9985e6ef384af3668764525d", "ref_doc_id": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308"}, "e49f5edd-9af5-4caf-af98-0d7d7c590ada": {"doc_hash": "19c44155b0af2bd3bdf9cc4da6ff9ce48fc2c120c0aa462e34650f275f92ec9d", "ref_doc_id": "620fdaf3-830f-4006-83f2-f79032e7e800"}, "88fa2643-000d-416a-8340-9ce27be4e4e2": {"doc_hash": "58d48e9bcc934706d0ccb7daf3063f1620644accea02297116faefda25e03721", "ref_doc_id": "05474b19-ca98-49f3-a807-390df07c59f0"}, "73eea78e-7f19-4930-8346-3b006560ef41": {"doc_hash": "a4e0cf485c6b618bbe1c319147ec75bcc75f01ad8f2a63a0a0886ab9b7e9484e", "ref_doc_id": "14a62fd7-2527-400d-94be-60f8ffc01073"}, "75861bd9-b6f6-48d5-b949-d60c5cff4bb8": {"doc_hash": "97f4f77925c826d00941f75d2c68c082985dd836c1a1c21d865279b5b4e5906b", "ref_doc_id": "0b1e602b-ffc7-4d75-aaab-1881cc5ac04b"}, "194268a9-0070-4f7c-a657-f40074f189d7": {"doc_hash": "628a25fb7049bf7f5520aab25068d1cf4ec6c4d30b1064063a4db5c0d26d01a1", "ref_doc_id": "88ac1b33-2ed0-4e25-b5a7-ef6887effc48"}, "c5cd95ee-e50f-4a68-a364-00c0aadcd616": {"doc_hash": "5871be289336a5aa8e26a964b577c7c7045dc82b8c832b5b46fe6ec655cf0386", "ref_doc_id": "5e31968c-e386-450c-bc59-d0d811c3c66b"}, "50a6acc2-07fb-49f7-a2e4-8ac0b619d5fd": {"doc_hash": "d7f13c49e388a69522158a839edd5641f3716af2b9d0cb9451b51524cca3d4fb", "ref_doc_id": "4acc118a-d80d-4c09-aab6-0d33452bd8a5"}, "3185c93b-9433-42c2-b173-839069e4cf9d": {"doc_hash": "2dc087750a8cee81d707100449331a5c18524e76113e8e9373387bc794066c8f", "ref_doc_id": "370aac71-32c2-4283-abe2-814b3d8b1b5c"}, "0c3fa396-daf0-41a0-b12e-88e8e60da3c2": {"doc_hash": "c3fcf631b77e5a068afaf35899f2b9a9456d8e06e6de3374fadfdb8c8f19f2bc", "ref_doc_id": "a212f221-e681-4355-8f0c-76e557428cf7"}, "94626169-3af6-4ef5-90b6-6fdab2990cb8": {"doc_hash": "16c89af7c164e070aaa2e4616efbd77ad0b326173b471146155a5c362d98481c", "ref_doc_id": "1186821f-f81f-4c9d-8b00-5ff6ad45c011"}, "60fbb8e3-9947-4cee-9252-4beab3626ae7": {"doc_hash": "85691de6895310881d2d26f6ff344fa8e9670096e16a9b0bd0cae743091909cc", "ref_doc_id": "064f80ed-a48a-4a53-a62e-e1de4263dcd6"}, "900439c7-c9b8-4dfb-83c5-15149ba4f527": {"doc_hash": "df36bd40e84dd073d3a0488615f74c2bcc73940c2a0d8475ed6798e180607fdc", "ref_doc_id": "c5f8e92b-a165-414f-9bbe-25b84f289775"}, "64242d9e-fa7a-4892-a5f0-ca7aa5d3453d": {"doc_hash": "bedc789cb1fd922662db0dadaf9a6f95eecaa08d1e4d085823831703759a3800", "ref_doc_id": "c01975cd-e1e5-4eb6-8ba8-076a82dc074d"}, "ce425bc4-9c32-49f4-a6ea-fa841aee1a04": {"doc_hash": "1cc2dab981bb88b72b1972965ebe8efc5de3bd7c09bf862d3347b620fae21ade", "ref_doc_id": "a75e252e-6a04-4548-99f3-59a4863569b4"}, "998511bc-e832-4674-aabf-9a32bca271be": {"doc_hash": "e75d590fd225401170b709b7f87f377c88d17da8bb02295a896d95d30ad292a4", "ref_doc_id": "1c59258e-4be3-45f6-b639-b9198cb1f53c"}, "5f6b60c1-f9f6-4f6e-a38b-5b60f18907c3": {"doc_hash": "6d9f1a08b727a4f6552190f4db9ea38b255a4d419f288d8cfc16b72359b8fc02", "ref_doc_id": "82b4a723-f318-476c-becf-be7bef443acb"}, "c3e4cc5b-0866-4e57-9163-da9f9f658b19": {"doc_hash": "18ca3e32710efbf742d043b546a13259d8efb85d50e02e2089e1e313ba5f2bc9", "ref_doc_id": "0104b44b-beaa-4ba3-be23-c1e8a09b984a"}, "20363f8c-6150-4a10-a080-aa1f7e0f67b9": {"doc_hash": "3a54da0435ebe4cf8b3d0d14c4a14cbccbfb8f3256e43151f3a87f223496c15c", "ref_doc_id": "73dd1a9e-37d6-4fa8-9fa8-dc79376650d4"}, "529d801f-a2c3-4607-9c4f-972c345e0342": {"doc_hash": "88d84e9934ca679dc388a6d7194984e408cad8e88521a191021fab0a46bc4cb9", "ref_doc_id": "5853a3f4-2020-4b86-a024-efd6f24d1a0a"}, "cacfe691-aeba-4701-b7e4-90f31f85c30a": {"doc_hash": "82add6eb371262b0de38e50738215090141c5479055b8c7b88769ba3ea256118", "ref_doc_id": "fa6f6982-ee30-43fd-bb83-064aa77ac2de"}, "a0d38ba7-ed03-4c6f-8f73-49a9f5f63aef": {"doc_hash": "2fe4af0711a3da9ef51f37cf3d645c2f0a14bf35c1e2eed96b013c8ef5ca259f", "ref_doc_id": "010d9b9f-2fef-4ce2-8aa4-c1b58460855c"}, "aba8ab4c-40fd-4ac2-93c1-343748dab437": {"doc_hash": "9fd351443379ff05714ddad9741d7fe072c028de2b339af934eeb7df7ce419de", "ref_doc_id": "010d9b9f-2fef-4ce2-8aa4-c1b58460855c"}}, "docstore/data": {"1a21a141-68f0-46db-ac77-b27f23d03e6d": {"__data__": {"text": "Next: Registration Functions [Registration-Functions.html], Previous: Constructor Functions [Constructor-Functions.html], Up: API\nDescription [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.5 MANAGING MPFR AND GMP VALUES\n\nMPFR and GMP values are different from string values, where you can \u201ctake ownership\u201d of the value simply by assigning pointers.\nFor example:\n\nchar *p = gawk_malloc(42);      p ``owns'' the memory\nchar *q = p;\np = NULL;                       now q ``owns'' it\n\n\nMPFR and GMP objects are indeed allocated on the stack or dynamically, but the MPFR and GMP libraries treat these objects as\nvalues, the same way that you would pass an int or a double by value. There is no way to \u201ctransfer ownership\u201d of MPFR and GMP\nobjects.\n\nThe final results of an MPFR or GMP calculation should be passed back to gawk, by value, as you would a string or a double. gawk\nwill take care of freeing the storage.\n\nThus, code in an extension should look like this:\n\nmpz_t part1, part2, answer;             declare local values\n\nmpz_set_si(part1, 21);                  do some computations\nmpz_set_si(part2, 21);\nmpz_add(answer, part1, part2);\n\u2026\n/* assume that result is a parameter of type (awk_value_t *). */\nmake_number_mpz(answer, & result);      set it with final GMP value\n\nmpz_clear(part1);                       release intermediate values\nmpz_clear(part2);\n\nreturn result;                          value in answer managed by gawk\n", "doc_id": "1a21a141-68f0-46db-ac77-b27f23d03e6d", "embedding": null, "doc_hash": "a95ca13a2aa7c2d7d137b876e8fb8e2c77bb1fb9847b886a03424314732f2e10", "extra_info": null, "node_info": {"start": 0, "end": 1618, "_node_type": "1"}, "relationships": {"1": "b44f345e-021e-452d-8444-5c02929d5ee2"}}, "__type__": "1"}, "5e0d633d-f3a6-4966-bf4c-2e615c166ddc": {"__data__": {"text": "Previous: Built-in Variables That Convey Information [Auto_002dset.html], Up: Predefined Variables [Built_002din-Variables.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.5.3 USING ARGC AND ARGV\n\nBuilt-in Variables That Convey Information [Auto_002dset.html] presented the following program describing the information\ncontained in ARGC and ARGV:\n\n$ awk 'BEGIN {\n>        for (i = 0; i < ARGC; i++)\n>            print ARGV[i]\n>      }' inventory-shipped mail-list\n-| awk\n-| inventory-shipped\n-| mail-list\n\n\nIn this example, ARGV[0] contains \u2018awk\u2019, ARGV[1] contains \u2018inventory-shipped\u2019, and ARGV[2] contains \u2018mail-list\u2019. Notice that the\nawk program is not entered in ARGV. The other command-line options, with their arguments, are also not entered. This includes\nvariable assignments done with the -v option (see Command-Line Options [Options.html]). Normal variable assignments on the command\nline are treated as arguments and do show up in the ARGV array. Given the following program in a file named showargs.awk:\n\nBEGIN {\n    printf \"A=%d, B=%d\\n\", A, B\n    for (i = 0; i < ARGC; i++)\n        printf \"\\tARGV[%d] = %s\\n\", i, ARGV[i]\n}\nEND   { printf \"A=%d, B=%d\\n\", A, B }\n\n\nRunning it produces the following:\n\n$ awk -v A=1 -f showargs.awk B=2 /dev/null\n-| A=1, B=0\n-|        ARGV[0] = awk\n-|        ARGV[1] = B=2\n-|        ARGV[2] = /dev/null\n-| A=1, B=2\n\n\nA program can alter ARGC and the elements of ARGV. Each time awk reaches the end of an input file, it uses the next element of\nARGV as the name of the next input file. By storing a different string there, a program can change which files are read. Use \"-\"\nto represent the standard input. Storing additional elements and incrementing ARGC causes additional files to be read.\n\nIf the value of ARGC is decreased, that eliminates input files from the end of the list. By recording the old value of ARGC\nelsewhere, a program can treat the eliminated arguments as something other than file names.\n\nTo eliminate a file from the middle of the list, store the null string (\"\") into ARGV in place of the file\u2019s name. As a special\nfeature, awk ignores file names that have been replaced with the null string. Another option is to use the delete statement to\nremove elements from ARGV (see The delete Statement [Delete.html]).\n\nAll of these actions are typically done in the BEGIN rule, before actual processing of the input begins. See Splitting a Large\nFile into Pieces [Split-Program.html] and see Duplicating Output into Multiple Files [Tee-Program.html] for examples of each way\nof removing elements from ARGV.\n\nTo actually get options into an awk program, end the awk options with -- and then supply the awk program\u2019s options, in the\nfollowing manner:\n\nawk -f myprog.awk -- -v -q file1 file2 \u2026\n\n\nThe following fragment processes ARGV in order to examine, and then remove, the previously mentioned command-line options:\n\nBEGIN {\n    for (i = 1; i < ARGC; i++) {\n        if (ARGV[i] == \"-v\")\n            verbose = 1\n        else if (ARGV[i] == \"-q\")\n         ", "doc_id": "5e0d633d-f3a6-4966-bf4c-2e615c166ddc", "embedding": null, "doc_hash": "d950f3c4d44b336fa1928d42e9937e28fa00b2c41d4b5f71778ba7e5bfe0ee95", "extra_info": null, "node_info": {"start": 0, "end": 3162, "_node_type": "1"}, "relationships": {"1": "b1de3bc9-eeb0-44b8-9c16-b001f4eb71e1", "3": "c6a16fd7-55af-4039-a8b5-95419276a05e"}}, "__type__": "1"}, "c6a16fd7-55af-4039-a8b5-95419276a05e": {"__data__": {"text": "(ARGV[i] == \"-q\")\n            debug = 1\n        else if (ARGV[i] ~ /^-./) {\n            e = sprintf(\"%s: unrecognized option -- %c\",\n                    ARGV[0], substr(ARGV[i], 2, 1))\n            print e > \"/dev/stderr\"\n        } else\n            break\n        delete ARGV[i]\n    }\n}\n\n\nEnding the awk options with -- isn\u2019t necessary in gawk. Unless --posix has been specified, gawk silently puts any unrecognized\noptions into ARGV for the awk program to deal with. As soon as it sees an unknown option, gawk stops looking for other options\nthat it might otherwise recognize. The previous command line with gawk would be:\n\ngawk -f myprog.awk -q -v file1 file2 \u2026\n\n\nBecause -q is not a valid gawk option, it and the following -v are passed on to the awk program. (See Processing Command-Line\nOptions [Getopt-Function.html] for an awk library function that parses command-line options.)\n\nWhen designing your program, you should choose options that don\u2019t conflict with gawk\u2019s, because it will process any options that\nit accepts before passing the rest of the command line on to your program. Using \u2018#!\u2019 with the -E option may help (see Executable\nawk Programs [Executable-Scripts.html] and see Command-Line Options [Options.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Built-in Variables That Convey Information [Auto_002dset.html], Up: Predefined Variables [Built_002din-Variables.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c6a16fd7-55af-4039-a8b5-95419276a05e", "embedding": null, "doc_hash": "211af800bc52980c9b44f5a86b496f277a4f75a6c809addd2bfa3361d51c0276", "extra_info": null, "node_info": {"start": 3135, "end": 4684, "_node_type": "1"}, "relationships": {"1": "b1de3bc9-eeb0-44b8-9c16-b001f4eb71e1", "2": "5e0d633d-f3a6-4966-bf4c-2e615c166ddc"}}, "__type__": "1"}, "5206be4b-9410-4269-8437-546c0744b527": {"__data__": {"text": "Next: Other Environment Variables [Other-Environment-Variables.html], Previous: The AWKPATH Environment Variable\n[AWKPATH-Variable.html], Up: The Environment Variables gawk Uses [Environment-Variables.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n2.5.2 THE AWKLIBPATH ENVIRONMENT VARIABLE\n\nThe AWKLIBPATH environment variable is similar to the AWKPATH variable, but it is used to search for loadable extensions (stored\nas system shared libraries) specified with the -l option rather than for source files. If the extension is not found, the path is\nsearched again after adding the appropriate shared library suffix for the platform. For example, on GNU/Linux systems, the suffix\n\u2018.so\u2019 is used. The search path specified is also used for extensions loaded via the @load keyword (see Loading Dynamic Extensions\ninto Your Program [Loading-Shared-Libraries.html]).\n\nIf AWKLIBPATH does not exist in the environment, or if it has an empty value, gawk uses a default path; this is typically\n\u2018/usr/local/lib/gawk\u2019, although it can vary depending upon how gawk was built.15\n\nSee Shell Startup Files [Shell-Startup-Files.html], for information on functions that help to manipulate the AWKLIBPATH variable.\n\ngawk places the value of the search path that it used into ENVIRON[\"AWKLIBPATH\"]. This provides access to the actual search path\nvalue from within an awk program.\n\nAlthough you can change ENVIRON[\"AWKLIBPATH\"] within your awk program, this has no effect on the running program\u2019s behavior. This\nmakes sense: the AWKLIBPATH environment variable is used to find any requested extensions, and they are loaded before the program\nstarts to run. Once your program is running, all the extensions have been found, and gawk no longer needs to use AWKLIBPATH.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(15)\n\nYour version of gawk may use a different directory; it will depend upon how gawk was built and installed. The actual directory is\nthe value of $(pkgextensiondir) generated when gawk was configured. (For more detail, see the INSTALL file in the source\ndistribution, and see Compiling gawk for Unix-Like Systems [Quick-Installation.html]. You probably don\u2019t need to worry about this,\nthough.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Other Environment Variables [Other-Environment-Variables.html], Previous: The AWKPATH Environment Variable\n[AWKPATH-Variable.html], Up: The Environment Variables gawk Uses [Environment-Variables.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "5206be4b-9410-4269-8437-546c0744b527", "embedding": null, "doc_hash": "d56aecbc9fd03e656abb699872cd1c4463235e7e7705bbdf016e4d3d8a434505", "extra_info": null, "node_info": {"start": 0, "end": 2837, "_node_type": "1"}, "relationships": {"1": "d634c371-9de9-41ed-a611-2caa4dc0fbf0"}}, "__type__": "1"}, "34c6c8f6-1a5f-4301-b166-683080b318d8": {"__data__": {"text": "Next: The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html], Up: The Environment Variables gawk Uses\n[Environment-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n2.5.1 THE AWKPATH ENVIRONMENT VARIABLE\n\nIn most awk implementations, you must supply a precise pathname for each program file, unless the file is in the current\ndirectory. But with gawk, if the file name supplied to the -f or -i options does not contain a directory separator \u2018/\u2019, then gawk\nsearches a list of directories (called the search path) one by one, looking for a file with the specified name.\n\nThe search path is a string consisting of directory names separated by colons.13 gawk gets its search path from the AWKPATH\nenvironment variable. If that variable does not exist, or if it has an empty value, gawk uses a default path (described shortly).\n\nThe search path feature is particularly helpful for building libraries of useful awk functions. The library files can be placed in\na standard directory in the default path and then specified on the command line with a short file name. Otherwise, you would have\nto type the full file name for each file.\n\nBy using the -i or -f options, your command-line awk programs can use facilities in awk library files (see A Library of awk\nFunctions [Library-Functions.html]). Path searching is not done if gawk is in compatibility mode. This is true for both\n--traditional and --posix. See Command-Line Options [Options.html].\n\nIf the source code file is not found after the initial search, the path is searched again after adding the suffix \u2018.awk\u2019 to the\nfile name.\n\ngawk\u2019s path search mechanism is similar to the shell\u2019s. (See The Bourne-Again SHell manual\n[https://www.gnu.org/software/bash/manual/].) It treats a null entry in the path as indicating the current directory. (A null\nentry is indicated by starting or ending the path with a colon or by placing two colons next to each other [\u2018::\u2019].)\n\n> NOTE: To include the current directory in the path, either place . as an entry in the path or write a null entry in the path.\n> \n> Different past versions of gawk would also look explicitly in the current directory, either before or after the path search. As\n> of version 4.1.2, this no longer happens; if you wish to look in the current directory, you must include . either as a separate\n> entry or as a null entry in the search path.\n\nThe default value for AWKPATH is \u2018.:/usr/local/share/awk\u2019.14 Since . is included at the beginning, gawk searches first in the\ncurrent directory and then in /usr/local/share/awk. In practice, this means that you will rarely need to change the value of\nAWKPATH.\n\nSee Shell Startup Files [Shell-Startup-Files.html], for information on functions that help to manipulate the AWKPATH variable.\n\ngawk places the value of the search path that it used into ENVIRON[\"AWKPATH\"]. This provides access to the actual search path\nvalue from within an awk program.\n\nAlthough you can change ENVIRON[\"AWKPATH\"] within your awk program, this has no effect on the running program\u2019s behavior. This\nmakes sense: the AWKPATH environment variable is used to find the program source files. Once your program is running, all the\nfiles have been found, and gawk no longer needs to use AWKPATH.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(13)\n\nSemicolons on MS-Windows.\n\n(14)\n\nYour version of gawk may use a different directory; it will depend upon how gawk was built and installed. The actual directory is\nthe value of $(pkgdatadir) generated when gawk was configured. (For more detail, see the INSTALL file in the source distribution,\nand see Compiling gawk for Unix-Like Systems [Quick-Installation.html]. You probably don\u2019t need to worry about this, though.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The", "doc_id": "34c6c8f6-1a5f-4301-b166-683080b318d8", "embedding": null, "doc_hash": "666d17c897954b04543e79c6f1d3be8db1d24b73e2c61b3a4903ce6bf2b24c5f", "extra_info": null, "node_info": {"start": 0, "end": 4098, "_node_type": "1"}, "relationships": {"1": "b9da05a9-ce03-4b35-b03f-7091be90a627", "3": "54bb733b-b229-4380-8c75-636c6d338ad4"}}, "__type__": "1"}, "54bb733b-b229-4380-8c75-636c6d338ad4": {"__data__": {"text": "need to worry about this, though.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html], Up: The Environment Variables gawk Uses\n[Environment-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "54bb733b-b229-4380-8c75-636c6d338ad4", "embedding": null, "doc_hash": "eb8cffc84a9ef6e08c6df372b517010e630268e1b8f8a896f1960e20bc656206", "extra_info": null, "node_info": {"start": 3921, "end": 4286, "_node_type": "1"}, "relationships": {"1": "b9da05a9-ce03-4b35-b03f-7091be90a627", "2": "34c6c8f6-1a5f-4301-b166-683080b318d8"}}, "__type__": "1"}, "9e0cd98d-8c9c-4ff5-830e-b23abbd98f8a": {"__data__": {"text": "Next: Symbol Table Access [Symbol-Table-Access.html], Previous: Requesting Values [Requesting-Values.html], Up: API Description\n[Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.10 ACCESSING AND UPDATING PARAMETERS\n\nTwo functions give you access to the arguments (parameters) passed to your extension function. They are:\n\nawk_bool_t get_argument(size_t count, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t wanted, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result);\n\nFill in the awk_value_t structure pointed to by result with the countth argument. Return true if the actual type matches wanted,\nand false otherwise. In the latter case, result->val_type indicates the actual type (see Table 17.2\n[Requesting-Values.html#table_002dvalue_002dtypes_002dreturned]). Counts are zero-based\u2014the first argument is numbered zero, the\nsecond one, and so on. wanted indicates the type of value expected.\n\nawk_bool_t set_argument(size_t count, awk_array_t array);\n\nConvert a parameter that was undefined into an array; this provides call by reference for arrays. Return false if count is too\nbig, or if the argument\u2019s type is not undefined. See Array Manipulation [Array-Manipulation.html] for more information on creating\narrays.", "doc_id": "9e0cd98d-8c9c-4ff5-830e-b23abbd98f8a", "embedding": null, "doc_hash": "cbb2f5a59635a10431845271d2d40613659406fcd8775a3bf8f6f9f74fd12b06", "extra_info": null, "node_info": {"start": 0, "end": 1384, "_node_type": "1"}, "relationships": {"1": "ba9116ca-8808-4a88-89dd-76c797b5dae4"}}, "__type__": "1"}, "f032c2f2-a356-4b44-90b0-155a7fd9ec67": {"__data__": {"text": "Next: Adding New Features [Adding-Code.html], Up: Making Additions to gawk [Additions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.2.1 ACCESSING THE GAWK GIT REPOSITORY\n\nAs gawk is Free Software, the source code is always available. The gawk Distribution [Gawk-Distribution.html] describes how to get\nand build the formal, released versions of gawk.\n\nHowever, if you want to modify gawk and contribute back your changes, you will probably wish to work with the development version.\nTo do so, you will need to access the gawk source code repository. The code is maintained using the Git distributed version\ncontrol system [https://git-scm.com]. You will need to install it if your system doesn\u2019t have it. Once you have done so, use the\ncommand:\n\ngit clone git://git.savannah.gnu.org/gawk.git\n\n\nThis clones the gawk repository. If you are behind a firewall that does not allow you to use the Git native protocol, you can\nstill access the repository using:\n\ngit clone https://git.savannah.gnu.org/r/gawk.git\n\n\n(Using the https URL is considered to be more secure.)\n\nOnce you have made changes, you can use \u2018git diff\u2019 to produce a patch, and send that to the gawk maintainer; see Reporting\nProblems and Bugs [Bugs.html], for how to do that.\n\nOnce upon a time there was Git\u2013CVS gateway for use by people who could not install Git. However, this gateway no longer works, so\nyou may have better luck using a more modern version control system like Bazaar, that has a Git plug-in for working with Git\nrepositories.", "doc_id": "f032c2f2-a356-4b44-90b0-155a7fd9ec67", "embedding": null, "doc_hash": "f3891d1377de56929b69f7692cbf6750d91cb5e8db1f45b33fb55794aeca17cf", "extra_info": null, "node_info": {"start": 0, "end": 1661, "_node_type": "1"}, "relationships": {"1": "3efefea7-6951-4863-9485-08186ee7f3bd"}}, "__type__": "1"}, "33fc5ccd-23bd-486b-a287-fd11e09328e7": {"__data__": {"text": "Previous: How to Contribute [How-To-Contribute.html], Up: Preface [Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nACKNOWLEDGMENTS\n\nThe initial draft of The GAWK Manual had the following acknowledgments:\n\n> Many people need to be thanked for their assistance in producing this manual. Jay Fenlason contributed many ideas and sample\n> programs. Richard Mlynarik and Robert Chassell gave helpful comments on drafts of this manual. The paper A Supplemental Document\n> for AWK by John W. Pierce of the Chemistry Department at UC San Diego, pinpointed several issues relevant both to awk\n> implementation and to this manual, that would otherwise have escaped us.\n\nI would like to acknowledge Richard M. Stallman, for his vision of a better world and for his courage in founding the FSF and\nstarting the GNU Project.\n\nEarlier editions of this Web page had the following acknowledgements:\n\n> The following people (in alphabetical order) provided helpful comments on various versions of this book: Rick Adams, Dr. Nelson\n> H.F. Beebe, Karl Berry, Dr. Michael Brennan, Rich Burridge, Claire Cloutier, Diane Close, Scott Deifik, Christopher (\u201cTopher\u201d)\n> Eliot, Jeffrey Friedl, Dr. Darrel Hankerson, Michal Jaegermann, Dr. Richard J. LeBlanc, Michael Lijewski, Pat Rankin, Miriam\n> Robbins, Mary Sheehan, and Chuck Toporek.\n> \n> Robert J. Chassell provided much valuable advice on the use of Texinfo. He also deserves special thanks for convincing me not to\n> title this Web page How to Gawk Politely. Karl Berry helped significantly with the TeX part of Texinfo.\n> \n> I would like to thank Marshall and Elaine Hartholz of Seattle and Dr. Bert and Rita Schreiber of Detroit for large amounts of\n> quiet vacation time in their homes, which allowed me to make significant progress on this Web page and on gawk itself.\n> \n> Phil Hughes of SSC contributed in a very important way by loaning me his laptop GNU/Linux system, not once, but twice, which\n> allowed me to do a lot of work while away from home.\n> \n> David Trueman deserves special credit; he has done a yeoman job of evolving gawk so that it performs well and without bugs.\n> Although he is no longer involved with gawk, working with him on this project was a significant pleasure.\n> \n> The intrepid members of the GNITS mailing list, and most notably Ulrich Drepper, provided invaluable help and feedback for the\n> design of the internationalization features.\n> \n> Chuck Toporek, Mary Sheehan, and Claire Cloutier of O\u2019Reilly & Associates contributed significant editorial help for this Web\n> page for the 3.1 release of gawk.\n\nDr. Nelson Beebe, Andreas Buening, Dr. Manuel Collado, Antonio Colombo, Stephen Davies, Scott Deifik, Akim Demaille, Daniel\nRichard G., Juan Manuel Guerrero, Darrel Hankerson, Michal Jaegermann, J\u00fcrgen Kahrs, Stepan Kasal, John Malmberg, Chet Ramey, Pat\nRankin, Andrew Schorr, Corinna Vinschen, and Eli Zaretskii (in alphabetical order) make up the current gawk \u201ccrack portability\nteam.\u201d Without their hard work and help, gawk would not be nearly the robust, portable program it is today. It has been and\ncontinues to be a pleasure working with this team of fine people.\n\nNotable code and documentation contributions were made by a number of people. See Major Contributors to gawk [Contributors.html]\nfor the full list.\n\nThanks to Michael Brennan for the Forewords.\n\nThanks to Patrice Dumas for the new makeinfo program. Thanks to Karl Berry for his past work on Texinfo, and to Gavin Smith, who\ncontinues to work to improve the Texinfo markup", "doc_id": "33fc5ccd-23bd-486b-a287-fd11e09328e7", "embedding": null, "doc_hash": "ad68a4d8a1a468263e5120d9ec7e7e7921ac012196979ccc8edb35b6f48a544f", "extra_info": null, "node_info": {"start": 0, "end": 3676, "_node_type": "1"}, "relationships": {"1": "704ea28c-6a22-4a19-87bf-eec34b5c2ea8", "3": "db08b862-d231-4396-8418-5c650e9d7804"}}, "__type__": "1"}, "db08b862-d231-4396-8418-5c650e9d7804": {"__data__": {"text": "and to Gavin Smith, who\ncontinues to work to improve the Texinfo markup language.\n\nRobert P.J. Day, Michael Brennan, and Brian Kernighan kindly acted as reviewers for the 2015 edition of this Web page. Their\nfeedback helped improve the final work.\n\nI would also like to thank Brian Kernighan for his invaluable assistance during the testing and debugging of gawk, and for his\nongoing help and advice in clarifying numerous points about the language. We could not have done nearly as good a job on either\ngawk or its documentation without his help.\n\nBrian is in a class by himself as a programmer and technical author. I have to thank him (yet again) for his ongoing friendship\nand for being a role model to me for over 30 years! Having him as a reviewer is an exciting privilege. It has also been extremely\nhumbling...\n\nI must thank my wonderful wife, Miriam, for her patience through the many versions of this project, for her proofreading, and for\nsharing me with the computer. I would like to thank my parents for their love, and for the grace with which they raised and\neducated me. Finally, I also must acknowledge my gratitude to G-d, for the many opportunities He has sent my way, as well as for\nthe gifts He has given me with which to take advantage of those opportunities.\n\n\n\nArnold Robbins\nNof Ayalon\nIsrael\nMarch, 2020\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: How to Contribute [How-To-Contribute.html], Up: Preface [Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "db08b862-d231-4396-8418-5c650e9d7804", "embedding": null, "doc_hash": "810e441210b3d9981e816368431acb323c9043b754bc4ce2871af45e492c5fed", "extra_info": null, "node_info": {"start": 3605, "end": 5207, "_node_type": "1"}, "relationships": {"1": "704ea28c-6a22-4a19-87bf-eec34b5c2ea8", "2": "33fc5ccd-23bd-486b-a287-fd11e09328e7"}}, "__type__": "1"}, "5ff17540-6f07-465b-923c-b3bc8f3601a7": {"__data__": {"text": "Next: Control Statements in Actions [Statements.html], Previous: Using Shell Variables in Programs [Using-Shell-Variables.html],\nUp: Patterns, Actions, and Variables [Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7.3 ACTIONS\n\nAn awk program or script consists of a series of rules and function definitions interspersed. (Functions are described later. See\nUser-Defined Functions [User_002ddefined.html].) A rule contains a pattern and an action, either of which (but not both) may be\nomitted. The purpose of the action is to tell awk what to do once a match for the pattern is found. Thus, in outline, an awk\nprogram generally looks like this:\n\n[pattern]  { action }\n pattern  [{ action }]\n\u2026\nfunction name(args) { \u2026 }\n\u2026\n\n\nAn action consists of one or more awk statements, enclosed in braces (\u2018{\u2026}\u2019). Each statement specifies one thing to do. The\nstatements are separated by newlines or semicolons. The braces around an action must be used even if the action contains only one\nstatement, or if it contains no statements at all. However, if you omit the action entirely, omit the braces as well. An omitted\naction is equivalent to \u2018{ print $0 }\u2019:\n\n/foo/  { }     match foo, do nothing --- empty action\n/foo/          match foo, print the record --- omitted action\n\n\nThe following types of statements are supported in awk:\n\nExpressions\n\nCall functions or assign values to variables (see Expressions [Expressions.html]). Executing this kind of statement simply\ncomputes the value of the expression. This is useful when the expression has side effects (see Assignment Expressions\n[Assignment-Ops.html]).\n\nControl statements\n\nSpecify the control flow of awk programs. The awk language gives you C-like constructs (if, for, while, and do) as well as a few\nspecial ones (see Control Statements in Actions [Statements.html]).\n\nCompound statements\n\nEnclose one or more statements in braces. A compound statement is used in order to put several statements together in the body of\nan if, while, do, or for statement.\n\nInput statements\n\nUse the getline command (see Explicit Input with getline [Getline.html]). Also supplied in awk are the next statement (see The\nnext Statement [Next-Statement.html]) and the nextfile statement (see The nextfile Statement [Nextfile-Statement.html]).\n\nOutput statements\n\nSuch as print and printf. See Printing Output [Printing.html].\n\nDeletion statements\n\nFor deleting array elements. See The delete Statement [Delete.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Control Statements in Actions [Statements.html], Previous: Using Shell Variables in Programs [Using-Shell-Variables.html],\nUp: Patterns, Actions, and Variables [Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "5ff17540-6f07-465b-923c-b3bc8f3601a7", "embedding": null, "doc_hash": "1a84407e1ac61feb0879a832cde81a8fbb938cce06122efee33e7bbad4754620", "extra_info": null, "node_info": {"start": 0, "end": 3005, "_node_type": "1"}, "relationships": {"1": "e44f53a6-8d0a-4503-97ce-601bbe725bf1"}}, "__type__": "1"}, "41b32821-b308-4931-8166-37810e9ca9c6": {"__data__": {"text": "Next: Porting gawk to a New Operating System [New-Ports.html], Previous: Accessing The gawk Git Repository\n[Accessing-The-Source.html], Up: Making Additions to gawk [Additions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.2.2 ADDING NEW FEATURES\n\nYou are free to add any new features you like to gawk. However, if you want your changes to be incorporated into the gawk\ndistribution, there are several steps that you need to take in order to make it possible to include them:\n\n 1. Discuss the proposed new feature with the gawk maintainer. The bug list may be used for this. Even if I don\u2019t wish to include\n    your feature, be aware that you are still free to add it and distribute your own \u201cfork\u201d of gawk.\n 2. Before building the new feature into gawk itself, consider writing it as an extension (see Writing Extensions for gawk\n    [Dynamic-Extensions.html]). If that\u2019s not possible, continue with the rest of the steps in this list.\n 3. Be prepared to sign the appropriate paperwork. In order for the FSF to distribute your changes, you must either place those\n    changes in the public domain and submit a signed statement to that effect, or assign the copyright in your changes to the FSF.\n    Both of these actions are easy to do and many people have done so already. If you have questions, please contact me (see\n    Reporting Problems and Bugs [Bugs.html]), or \u201cassign at gnu dot org\u201d.\n 4. Get the latest version. It is much easier for me to integrate changes if they are relative to the most recent distributed\n    version of gawk, or better yet, relative to the latest code in the Git repository. If your version of gawk is very old, I may\n    not be able to integrate your changes at all. (See Getting the gawk Distribution [Getting.html], for information on getting\n    the latest version of gawk.)\n 5. Follow the GNU Coding Standards. This document describes how GNU software should be written. If you haven\u2019t read it, please do\n    so, preferably before starting to modify gawk. (The GNU Coding Standards are available from the GNU Project\u2019s website\n    [https://www.gnu.org/prep/standards/]. Texinfo, Info, and DVI versions are also available.)\n 6. Use the gawk coding style. The C code for gawk follows the instructions in the GNU Coding Standards, with minor exceptions.\n    The code is formatted using the traditional \u201cK&R\u201d style, particularly as regards to the placement of braces and the use of\n    TABs. In brief, the coding rules for gawk are as follows:\n    * Use ANSI/ISO style (prototype) function headers when defining functions.\n    * Put the name of the function at the beginning of its own line.\n    * Use \u2018#elif\u2019 instead of nesting \u2018#if\u2019 inside \u2018#else\u2019.\n    * Put the return type of the function, even if it is int, on the line above the line with the name and arguments of the\n      function.\n    * Put spaces around parentheses used in control structures (if, while, for, do, and switch).\n    * Do not parenthesize the expression used with return.\n    * Do not put spaces in front of parentheses used in function calls.\n    * Put spaces around all C operators and after commas in function calls.\n    * Do not use the comma operator to produce multiple side effects, except in for loop initialization and increment parts, and\n      in macro bodies.\n    * Use real TABs for indenting, not spaces.\n    * Use the \u201cK&R\u201d brace layout style.\n    * Use comparisons against NULL and '\\0' in the conditions of if, while, and for statements, as well as in", "doc_id": "41b32821-b308-4931-8166-37810e9ca9c6", "embedding": null, "doc_hash": "c3252331e73a86c77b6defd2044e7fc52c4b13796342041df65e6e59bb92cd42", "extra_info": null, "node_info": {"start": 0, "end": 3630, "_node_type": "1"}, "relationships": {"1": "d1704578-3270-4f71-9154-5cc972b76587", "3": "e35ca365-71e3-482d-8a83-e39016535016"}}, "__type__": "1"}, "e35ca365-71e3-482d-8a83-e39016535016": {"__data__": {"text": "in the conditions of if, while, and for statements, as well as in the cases of switch\n      statements, instead of just the plain pointer or character value.\n    * Do not, under any circumstances, use the \u2018-1 == foo\u2019 or \u20180 >= bar\u2019 style of comparison expressions. I have known about it\n      for decades, and I understand why some people like it. Nonetheless, I abhor it with a passion, and code that uses it will\n      never be accepted.\n    * Use true and false for bool values, the NULL symbolic constant for pointer values, and the character constant '\\0' where\n      appropriate, instead of 1 and 0.\n    * Provide one-line descriptive comments for each function.\n    * Do not use the alloca() function for allocating memory off the stack. Its use causes more portability trouble than is worth\n      the minor benefit of not having to free the storage. Instead, use malloc() and free().\n    * Do not use comparisons of the form \u2018! strcmp(a, b)\u2019 or similar. As Henry Spencer once said, \u201cstrcmp() is not a boolean!\u201d\n      Instead, use \u2018strcmp(a, b) == 0\u2019.\n    * If adding new bit flag values, use explicit hexadecimal constants (0x001, 0x002, 0x004, and so on) instead of shifting one\n      left by successive amounts (\u2018(1<<0)\u2019, \u2018(1<<1)\u2019, and so on).\n    \n    > NOTE: If I have to reformat your code to follow the coding style used in gawk, I may not bother to integrate your changes at\n    > all.\n\n 7. Update the documentation. Along with your new code, please supply new sections and/or chapters for this Web page. If at all\n    possible, please use real Texinfo, instead of just supplying unformatted ASCII text (although even that is better than no\n    documentation at all). Conventions to be followed in GAWK: Effective AWK Programming are provided after the \u2018@bye\u2019 at the end\n    of the Texinfo source file. If possible, please update the man page as well.\n    \n    You will also have to sign paperwork for your documentation changes.\n\n 8. Submit changes as unified diffs. Use \u2018diff -u -r -N\u2019 to compare the original gawk source tree with your version. I recommend\n    using the GNU version of diff, or best of all, \u2018git diff\u2019 or \u2018git format-patch\u2019. Send the output produced by diff to me when\n    you submit your changes. (See Reporting Problems and Bugs [Bugs.html], for the electronic mail information.)\n    \n    Using this format makes it easy for me to apply your changes to the master version of the gawk source code (using patch). If I\n    have to apply the changes manually, using a text editor, I may not do so, particularly if there are lots of changes.\n\n 9. Include an entry for the ChangeLog file with your submission. This helps further minimize the amount of work I have to do,\n    making it easier for me to accept patches. It is simplest if you just make this part of your diff.\n\nAlthough this sounds like a lot of work, please remember that while you may write the new code, I have to maintain it and support\nit. If it isn\u2019t possible for me to do that with a minimum of extra work, then I probably will not.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Porting gawk to a New Operating System [New-Ports.html], Previous: Accessing The gawk Git Repository\n[Accessing-The-Source.html], Up: Making Additions to gawk [Additions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "e35ca365-71e3-482d-8a83-e39016535016", "embedding": null, "doc_hash": "b7d2c9bfb60eb22eecba64773a6d4c642cbc39d8b407f9055e92d3c7a8672539", "extra_info": null, "node_info": {"start": 3565, "end": 6972, "_node_type": "1"}, "relationships": {"1": "d1704578-3270-4f71-9154-5cc972b76587", "2": "41b32821-b308-4931-8166-37810e9ca9c6"}}, "__type__": "1"}, "97a0a33c-738f-4bbe-a1e7-0cf34f51defc": {"__data__": {"text": "Next: The Configuration Process [Configuration-Philosophy.html], Previous: Shell Startup Files [Shell-Startup-Files.html], Up:\nCompiling and Installing gawk on Unix-Like Systems [Unix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.3 ADDITIONAL CONFIGURATION OPTIONS\n\nThere are several additional options you may use on the configure command line when compiling gawk from scratch, including:\n\n--disable-extensions\n\nDisable the extension mechanism within gawk. With this option, it is not possible to use dynamic extensions. This also disables\nconfiguring and building the sample extensions in the extension directory.\n\nThis option may be useful for cross-compiling. The default action is to dynamically check if the extensions can be configured and\ncompiled.\n\n--disable-lint\n\nDisable all lint checking within gawk. The --lint and --lint-old options (see Command-Line Options [Options.html]) are accepted,\nbut silently do nothing. Similarly, setting the LINT variable (see Built-in Variables That Control awk [User_002dmodified.html])\nhas no effect on the running awk program.\n\nWhen used with the GNU Compiler Collection\u2019s (GCC\u2019s) automatic dead-code-elimination, this option cuts almost 23K bytes off the\nsize of the gawk executable on GNU/Linux x86_64 systems. Results on other systems and with other compilers are likely to vary.\nUsing this option may bring you some slight performance improvement.\n\n> CAUTION: Using this option will cause some of the tests in the test suite to fail. This option may be removed at a later date.\n\n--disable-mpfr\n\nSkip checking for the MPFR and GMP libraries. This is useful mainly for the developers, to make sure nothing breaks if MPFR\nsupport is not available.\n\n--disable-nls\n\nDisable all message-translation facilities. This is usually not desirable, but it may bring you some slight performance\nimprovement.\n\n--enable-versioned-extension-dir\n\nUse a versioned directory for extensions. The directory name will include the major and minor API versions in it. This makes it\npossible to keep extensions for different API versions on the same system without their conflicting with one another.\n\nUse the command \u2018./configure --help\u2019 to see the full list of options supplied by configure.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The Configuration Process [Configuration-Philosophy.html], Previous: Shell Startup Files [Shell-Startup-Files.html], Up:\nCompiling and Installing gawk on Unix-Like Systems [Unix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "97a0a33c-738f-4bbe-a1e7-0cf34f51defc", "embedding": null, "doc_hash": "c6d3a80f1f976eb0f0ee0f7b4e257509ef7b2861fb4dfa5cafcb3a41e4167ac7", "extra_info": null, "node_info": {"start": 0, "end": 2782, "_node_type": "1"}, "relationships": {"1": "221043d2-f195-4081-bb2b-7dbc1604164b"}}, "__type__": "1"}, "647a73c0-48e6-4a45-a7b0-a37002f0c4e3": {"__data__": {"text": "Next: Probable Future Extensions [Future-Extensions.html], Previous: Downward Compatibility and Debugging\n[Compatibility-Mode.html], Up: Implementation Notes [Notes.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nC.2 MAKING ADDITIONS TO GAWK\n\nIf you find that you want to enhance gawk in a significant fashion, you are perfectly free to do so. That is the point of having\nfree software; the source code is available and you are free to change it as you want (see GNU General Public License\n[Copying.html]).\n\nThis section discusses the ways you might want to change gawk as well as any considerations you should bear in mind.\n\n * Accessing The gawk Git Repository [Accessing-The-Source.html]\n * Adding New Features [Adding-Code.html]\n * Porting gawk to a New Operating System [New-Ports.html]\n * Why Generated Files Are Kept In Git [Derived-Files.html]", "doc_id": "647a73c0-48e6-4a45-a7b0-a37002f0c4e3", "embedding": null, "doc_hash": "f8a887bb7c2127157983166345a0f0fcd75d68b7823ade94cead94e9f8612c51", "extra_info": null, "node_info": {"start": 0, "end": 1002, "_node_type": "1"}, "relationships": {"1": "c848e26b-2ccc-4683-953d-e6a371591e7a"}}, "__type__": "1"}, "bd05519c-4c0d-402e-96c6-6be8565c5c37": {"__data__": {"text": "Previous: Builtin Features versus Extensions [Extension-Philosophy.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.9 SUMMARY\n\n * The --non-decimal-data option causes gawk to treat octal- and hexadecimal-looking input data as octal and hexadecimal. This\n   option should be used with caution or not at all; use of strtonum() is preferable. Note that this option may disappear in a\n   future version of gawk.\n * You can take over complete control of sorting in \u2018for (indx in array)\u2019 array traversal by setting PROCINFO[\"sorted_in\"] to the\n   name of a user-defined function that does the comparison of array elements based on index and value.\n * Similarly, you can supply the name of a user-defined comparison function as the third argument to either asort() or asorti() to\n   control how those functions sort arrays. Or you may provide one of the predefined control strings that work for\n   PROCINFO[\"sorted_in\"].\n * You can use the \u2018|&\u2019 operator to create a two-way pipe to a coprocess. You read from the coprocess with getline and write to it\n   with print or printf. Use close() to close off the coprocess completely, or optionally, close off one side of the two-way\n   communications.\n * By using special file names with the \u2018|&\u2019 operator, you can open a TCP/IP (or UDP/IP) connection to remote hosts on the\n   Internet. gawk supports both IPv4 and IPv6.\n * You can generate statement count profiles of your program. This can help you determine which parts of your program may be\n   taking the most time and let you tune them more easily. Sending the USR1 signal while profiling causes gawk to dump the profile\n   and keep going, including a function call stack.\n * You can also just \u201cpretty-print\u201d the program.\n * Persistent memory allows you to preserve the values of variables and arrays between runs of gawk. This feature is currently\n   experimental.\n * New features should be developed using the extension mechanism if possible; they should be added to the core interpreter only\n   as a last resort.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Builtin Features versus Extensions [Extension-Philosophy.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "bd05519c-4c0d-402e-96c6-6be8565c5c37", "embedding": null, "doc_hash": "bbbd33b79b46743a1e7f183353a196a107318ec42d38ff2d30577b20d37df358", "extra_info": null, "node_info": {"start": 0, "end": 2539, "_node_type": "1"}, "relationships": {"1": "d1e0e105-dcc1-44b6-9e40-9add6a966224"}}, "__type__": "1"}, "ee2cfff8-ce87-4ae1-bc04-6882b2a49116": {"__data__": {"text": "Next: Internationalization with gawk [Internationalization.html], Previous: Practical awk Programs [Sample-Programs.html], Up:\nGeneral Introduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nPART III:\nMOVING BEYOND STANDARD AWK WITH GAWK\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n * Advanced Features of gawk\n * Internationalization with gawk [Internationalization.html]\n * Debugging awk Programs [Debugger.html]\n * Namespaces in gawk [Namespaces.html]\n * Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html]\n * Writing Extensions for gawk [Dynamic-Extensions.html]\n\n\n12 ADVANCED FEATURES OF GAWK\n\n> Write documentation as if whoever reads it is a violent psychopath who knows where you live.\n\n\u2014 Steve English, as quoted by Peter Langston\n\nThis chapter discusses advanced features in gawk. It\u2019s a bit of a \u201cgrab bag\u201d of items that are otherwise unrelated to each other.\nFirst, we look at a command-line option that allows gawk to recognize nondecimal numbers in input data, not just in awk programs.\nThen, gawk\u2019s special features for sorting arrays are presented. Next, two-way I/O, discussed briefly in earlier parts of this Web\npage, is described in full detail, along with the basics of TCP/IP networking. We then see how gawk can profile an awk program,\nmaking it possible to tune it for performance. Next, we present an experimental feature that allows you to preserve the values of\nawk variables and arrays between runs of gawk. Finally, we discuss the philosophy behind gawk\u2019s extension mechanism.\n\nAdditional advanced features are discussed in separate chapters of their own:\n\n * Internationalization with gawk [Internationalization.html], discusses how to internationalize your awk programs, so that they\n   can speak multiple national languages.\n * Debugging awk Programs [Debugger.html], describes gawk\u2019s built-in command-line debugger for debugging awk programs.\n * Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html], describes how you can use gawk\n   to perform arbitrary-precision arithmetic.\n * Writing Extensions for gawk [Dynamic-Extensions.html], discusses the ability to dynamically add new built-in functions to gawk.\n\n * Allowing Nondecimal Input Data [Nondecimal-Data.html]\n * Boolean Typed Values [Boolean-Typed-Values.html]\n * Controlling Array Traversal and Array Sorting [Array-Sorting.html]\n * Two-Way Communications with Another Process [Two_002dway-I_002fO.html]\n * Using gawk for Network Programming [TCP_002fIP-Networking.html]\n * Profiling Your awk Programs [Profiling.html]\n * Preserving Data Between Runs [Persistent-Memory.html]\n * Builtin Features versus Extensions [Extension-Philosophy.html]\n * Summary [Advanced-Features-Summary.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Internationalization with gawk [Internationalization.html], Previous: Practical awk Programs [Sample-Programs.html], Up:\nGeneral Introduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ee2cfff8-ce87-4ae1-bc04-6882b2a49116", "embedding": null, "doc_hash": "a167a01a2e81e2c98c566754695b68c74e785bcea00f8655e00c01533410ab5a", "extra_info": null, "node_info": {"start": 0, "end": 3364, "_node_type": "1"}, "relationships": {"1": "0285f772-127d-4af1-9e1f-925450f84adb"}}, "__type__": "1"}, "321d9bfd-924e-4ff5-8e6e-ff917b6ff7f1": {"__data__": {"text": "Next: Transliterating Characters [Translate-Program.html], Previous: Finding Duplicated Words in a Document\n[Dupword-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.2 AN ALARM CLOCK PROGRAM\n\n> Nothing cures insomnia like a ringing alarm clock.\n\n\u2014 Arnold Robbins\n\n> Sleep is for web developers.\n\n\u2014 Erik Quanstrom\n\nThe following program is a simple \u201calarm clock\u201d program. You give it a time of day and an optional message. At the specified time,\nit prints the message on the standard output. In addition, you can give it the number of times to repeat the message as well as a\ndelay between repetitions.\n\nThis program uses the getlocaltime() function from Managing the Time of Day [Getlocaltime-Function.html].\n\nAll the work is done in the BEGIN rule. The first part is argument checking and setting of defaults: the delay, the count, and the\nmessage to print. If the user supplied a message without the ASCII BEL character (known as the \u201calert\u201d character, \"\\a\"), then it\nis added to the message. (On many systems, printing the ASCII BEL generates an audible alert. Thus, when the alarm goes off, the\nsystem calls attention to itself in case the user is not looking at the computer.) Just for a change, this program uses a switch\nstatement (see The switch Statement [Switch-Statement.html]), but the processing could be done with a series of if-else statements\ninstead. Here is the program:\n\n# alarm.awk --- set an alarm\n#\n# Requires getlocaltime() library function\n# usage: alarm time [ \"message\" [ count [ delay ] ] ]\n\nBEGIN {\n    # Initial argument sanity checking\n    usage1 = \"usage: alarm time ['message' [count [delay]]]\"\n    usage2 = sprintf(\"\\t(%s) time ::= hh:mm\", ARGV[1])\n\n    if (ARGC < 2) {\n        print usage1 > \"/dev/stderr\"\n        print usage2 > \"/dev/stderr\"\n        exit 1\n    }\n    switch (ARGC) {\n    case 5:\n        delay = ARGV[4] + 0\n        # fall through\n    case 4:\n        count = ARGV[3] + 0\n        # fall through\n    case 3:\n        message = ARGV[2]\n        break\n    default:\n        if (ARGV[1] !~ /[[:digit:]]?[[:digit:]]:[[:digit:]]{2}/) {\n            print usage1 > \"/dev/stderr\"\n            print usage2 > \"/dev/stderr\"\n            exit 1\n        }\n        break\n    }\n\n    # set defaults for once we reach the desired time\n    if (delay == 0)\n        delay = 180    # 3 minutes\n\n\n    if (count == 0)\n        count = 5\n\n\n    if (message == \"\")\n        message = sprintf(\"\\aIt is now %s!\\a\", ARGV[1])\n    else if (index(message, \"\\a\") == 0)\n        message = \"\\a\" message \"\\a\"\n\n\nThe next section of code turns the alarm time into hours and minutes, converts it (if necessary) to a 24-hour clock, and then\nturns that time into a count of the seconds since midnight. Next it turns the current time into", "doc_id": "321d9bfd-924e-4ff5-8e6e-ff917b6ff7f1", "embedding": null, "doc_hash": "ae517480471b79234aceca692837ef038e433f4a8f6cba38a7c3c6f956f85095", "extra_info": null, "node_info": {"start": 0, "end": 2961, "_node_type": "1"}, "relationships": {"1": "26b8973f-9867-488a-916a-6c9e21fde866", "3": "1b3ce2e2-2ba8-4d78-abbb-a4f19fa7b311"}}, "__type__": "1"}, "1b3ce2e2-2ba8-4d78-abbb-a4f19fa7b311": {"__data__": {"text": "that time into a count of the seconds since midnight. Next it turns the current time into a count of seconds since midnight.\nThe difference between the two is how long to wait before setting off the alarm:\n\n    # split up alarm time\n    split(ARGV[1], atime, \":\")\n    hour = atime[1] + 0    # force numeric\n    minute = atime[2] + 0  # force numeric\n\n    # get current broken down time\n    getlocaltime(now)\n\n    # if time given is 12-hour hours and it's after that\n    # hour, e.g., `alarm 5:30' at 9 a.m. means 5:30 p.m.,\n    # then add 12 to real hour\n    if (hour < 12 && now[\"hour\"] > hour)\n        hour += 12\n\n    # set target time in seconds since midnight\n    target = (hour * 60 * 60) + (minute * 60)\n\n    # get current time in seconds since midnight\n    current = (now[\"hour\"] * 60 * 60) + \\\n               (now[\"minute\"] * 60) + now[\"second\"]\n\n    # how long to sleep for\n    naptime = target - current\n    if (naptime <= 0) {\n        print \"alarm: time is in the past!\" > \"/dev/stderr\"\n        exit 1\n    }\n\n\nFinally, the program uses the system() function (see Input/Output Functions [I_002fO-Functions.html]) to call the sleep utility.\nThe sleep utility simply pauses for the given number of seconds. If the exit status is not zero, the program assumes that sleep\nwas interrupted and exits. If sleep exited with an OK status (zero), then the program prints the message in a loop, again using\nsleep to delay for however many seconds are necessary:\n\n    # zzzzzz..... go away if interrupted\n    if (system(sprintf(\"sleep %d\", naptime)) != 0)\n        exit 1\n\n    # time to notify!\n    command = sprintf(\"sleep %d\", delay)\n    for (i = 1; i <= count; i++) {\n        print message\n        # if sleep command interrupted, go away\n        if (system(command) != 0)\n            break\n    }\n\n    exit 0\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Transliterating Characters [Translate-Program.html], Previous: Finding Duplicated Words in a Document\n[Dupword-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "1b3ce2e2-2ba8-4d78-abbb-a4f19fa7b311", "embedding": null, "doc_hash": "f1b3e5408e921cbbfaee2961d41aa2ce6136aa6cff4d332649315b2e773f46a0", "extra_info": null, "node_info": {"start": 2872, "end": 5067, "_node_type": "1"}, "relationships": {"1": "26b8973f-9867-488a-916a-6c9e21fde866", "2": "321d9bfd-924e-4ff5-8e6e-ff917b6ff7f1"}}, "__type__": "1"}, "6da18a34-4c28-4491-8722-7d0a461267f1": {"__data__": {"text": "Next: Truth Values and Conditions [Truth-Values-and-Conditions.html], Previous: Constants, Variables, and Conversions\n[Values.html], Up: Expressions [Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.2 OPERATORS: DOING SOMETHING WITH VALUES\n\nThis section introduces the operators that make use of the values provided by constants and variables.\n\n * Arithmetic Operators [Arithmetic-Ops.html]\n * String Concatenation [Concatenation.html]\n * Assignment Expressions [Assignment-Ops.html]\n * Increment and Decrement Operators [Increment-Ops.html]", "doc_id": "6da18a34-4c28-4491-8722-7d0a461267f1", "embedding": null, "doc_hash": "c22417fa4df88d369ff247b3dc2aca03a24092271e4c4d21bfc2168fbebf79b8", "extra_info": null, "node_info": {"start": 0, "end": 705, "_node_type": "1"}, "relationships": {"1": "2fcc3f90-a161-44de-ab59-f63cbacad9d9"}}, "__type__": "1"}, "83526869-c9bd-4270-9782-79374a3de2d6": {"__data__": {"text": "Next: Field Values With Fixed-Width Data [Fields-with-fixed-data.html], Previous: Skipping Intervening Fields\n[Skipping-intervening.html], Up: Reading Fixed-Width Data [Constant-Size.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.6.3 CAPTURING OPTIONAL TRAILING DATA\n\nThere are times when fixed-width data may be followed by additional data that has no fixed length. Such data may or may not be\npresent, but if it is, it should be possible to get at it from an awk program.\n\nStarting with version 4.2, in order to provide a way to say \u201canything else in the record after the defined fields,\u201d gawk allows\nyou to add a final \u2018*\u2019 character to the value of FIELDWIDTHS. There can only be one such character, and it must be the final\nnon-whitespace character in FIELDWIDTHS. For example:\n\n$ cat fw.awk                         Show the program\n-| BEGIN { FIELDWIDTHS = \"2 2 *\" }\n-| { print NF, $1, $2, $3 }\n$ cat fw.in                          Show sample input\n-| 1234abcdefghi\n$ gawk -f fw.awk fw.in               Run the program\n-| 3 12 34 abcdefghi\n", "doc_id": "83526869-c9bd-4270-9782-79374a3de2d6", "embedding": null, "doc_hash": "4c295601e9c220fb5bc6edf3a35a84cf87403f3df07bfd2dbeea85572141b904", "extra_info": null, "node_info": {"start": 0, "end": 1199, "_node_type": "1"}, "relationships": {"1": "5f6bc4f8-d211-41de-8921-dcdd1351cfe8"}}, "__type__": "1"}, "7fa8cfe2-c3d6-4d61-8c8d-f1e09946e930": {"__data__": {"text": "Next: And Now for Something Completely Different [Signature-Program.html], Previous: An Easy Way to Use Library Functions\n[Igawk-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.10 FINDING ANAGRAMS FROM A DICTIONARY\n\nAn interesting programming challenge is to search for anagrams in a word list (such as /usr/share/dict/words on many GNU/Linux\nsystems). One word is an anagram of another if both words contain the same letters (e.g., \u201cbabbling\u201d and \u201cblabbing\u201d).\n\nColumn 2, Problem C, of Jon Bentley\u2019s Programming Pearls, Second Edition, presents an elegant algorithm. The idea is to give words\nthat are anagrams a common signature, sort all the words together by their signatures, and then print them. Dr. Bentley observes\nthat taking the letters in each word and sorting them produces those common signatures.\n\nThe following program uses arrays of arrays to bring together words with the same signature and array sorting to print the words\nin sorted order:\n\n# anagram.awk --- An implementation of the anagram-finding algorithm\n#                 from Jon Bentley's \"Programming Pearls,\" 2nd edition.\n#                 Addison Wesley, 2000, ISBN 0-201-65788-0.\n#                 Column 2, Problem C, section 2.8, pp 18-20.\n\n/'s$/   { next }        # Skip possessives\n\n\nThe program starts with a header, and then a rule to skip possessives in the dictionary file. The next rule builds up the data\nstructure. The first dimension of the array is indexed by the signature; the second dimension is the word itself:\n\n{\n    key = word2key($1)  # Build signature\n    data[key][$1] = $1  # Store word with signature\n}\n\n\nThe word2key() function creates the signature. It splits the word apart into individual letters, sorts the letters, and then joins\nthem back together:\n\n# word2key --- split word apart into letters, sort, and join back together\n\nfunction word2key(word,     a, i, n, result)\n{\n    n = split(word, a, \"\")\n    asort(a)\n\n    for (i = 1; i <= n; i++)\n        result = result a[i]\n\n    return result\n}\n\n\nFinally, the END rule traverses the array and prints out the anagram lists. It sends the output to the system sort command because\notherwise the anagrams would appear in arbitrary order:\n\nEND {\n    sort = \"sort\"\n    for (key in data) {\n        # Sort words with same key\n        nwords = asorti(data[key], words)\n        if (nwords == 1)\n            continue\n\n        # And print. Minor glitch: trailing space at end of each line\n        for (j = 1; j <= nwords; j++)\n            printf(\"%s \", words[j]) | sort\n        print \"\" | sort\n    }\n    close(sort)\n}\n\n\nHere is some partial output when the program is run:\n\n$ gawk -f anagram.awk /usr/share/dict/words | grep '^b'\n\u2026\nbabbled blabbed\nbabbler blabber brabble\nbabblers blabbers brabbles\nbabbling blabbing\nbabbly blabby\nbabel bable\nbabels", "doc_id": "7fa8cfe2-c3d6-4d61-8c8d-f1e09946e930", "embedding": null, "doc_hash": "06dbb27853c5c3b288963427e0257753ee8dadf518898c31df59aaf243b9f9ef", "extra_info": null, "node_info": {"start": 0, "end": 3021, "_node_type": "1"}, "relationships": {"1": "a6fc214f-d4dc-4b5a-8e50-63892c4cfaa1", "3": "f8c0009e-47a2-4aa1-b3d1-a7b573a5a6f2"}}, "__type__": "1"}, "f8c0009e-47a2-4aa1-b3d1-a7b573a5a6f2": {"__data__": {"text": "blabbing\nbabbly blabby\nbabel bable\nbabels beslab\nbabery yabber\n\u2026\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: And Now for Something Completely Different [Signature-Program.html], Previous: An Easy Way to Use Library Functions\n[Igawk-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "f8c0009e-47a2-4aa1-b3d1-a7b573a5a6f2", "embedding": null, "doc_hash": "63b96cdda878ce6ef24a590eb7f209a7581ca2ba6e3b8c9ce63d88e96cf1d430", "extra_info": null, "node_info": {"start": 2980, "end": 3442, "_node_type": "1"}, "relationships": {"1": "a6fc214f-d4dc-4b5a-8e50-63892c4cfaa1", "2": "7fa8cfe2-c3d6-4d61-8c8d-f1e09946e930"}}, "__type__": "1"}, "cb5d5214-9c8a-45c6-b632-d04a288a74f1": {"__data__": {"text": "Next: Writing Extensions for gawk [Dynamic-Extensions.html], Previous: Namespaces in gawk [Namespaces.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16 ARITHMETIC AND ARBITRARY-PRECISION ARITHMETIC WITH GAWK\n\nThis chapter introduces some basic concepts relating to how computers do arithmetic and defines some important terms. It then\nproceeds to describe floating-point arithmetic, which is what awk uses for all its computations, including a discussion of\narbitrary-precision floating-point arithmetic, which is a feature available only in gawk. It continues on to present\narbitrary-precision integers, and concludes with a description of some points where gawk and the POSIX standard are not quite in\nagreement.\n\n> NOTE: Most users of gawk can safely skip this chapter. But if you want to do scientific calculations with gawk, this is the\n> place to be.\n\n * A General Description of Computer Arithmetic [Computer-Arithmetic.html]\n * Other Stuff to Know [Math-Definitions.html]\n * Arbitrary-Precision Arithmetic Features in gawk [MPFR-features.html]\n * Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html]\n * Arbitrary-Precision Integer Arithmetic with gawk [Arbitrary-Precision-Integers.html]\n * How To Check If MPFR Is Available [Checking-for-MPFR.html]\n * Standards Versus Existing Practice [POSIX-Floating-Point-Problems.html]\n * Summary [Floating-point-summary.html]", "doc_id": "cb5d5214-9c8a-45c6-b632-d04a288a74f1", "embedding": null, "doc_hash": "a1d901b196e16a65a3d88df7bcf0ccfc15d094a2ee0fb76ccd87eec282513518", "extra_info": null, "node_info": {"start": 0, "end": 1576, "_node_type": "1"}, "relationships": {"1": "33aa3fdb-97b0-47e7-96c2-a817471a5939"}}, "__type__": "1"}, "40013129-77f7-47b9-9d1d-1c0a810a63c1": {"__data__": {"text": "Next: How To Check If MPFR Is Available [Checking-for-MPFR.html], Previous: Floating-Point Arithmetic: Caveat Emptor!\n[FP-Math-Caution.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.5 ARBITRARY-PRECISION INTEGER ARITHMETIC WITH GAWK\n\nWhen given the -M option, gawk performs all integer arithmetic using GMP arbitrary-precision integers. Any number that looks like\nan integer in a source or data file is stored as an arbitrary-precision integer. The size of the integer is limited only by the\navailable memory. For example, the following computes 5432, the result of which is beyond the limits of ordinary hardware\ndouble-precision floating-point values:\n\n$ gawk -M 'BEGIN {\n>   x = 5^4^3^2\n>   print \"number of digits =\", length(x)\n>   print substr(x, 1, 20), \"...\", substr(x, length(x) - 19, 20)\n> }'\n-| number of digits = 183231\n-| 62060698786608744707 ... 92256259918212890625\n\n\nIf instead you were to compute the same value using arbitrary-precision floating-point values, the precision needed for correct\noutput (using the formula \u2018prec = 3.322 * dps\u2019) would be 3.322 x 183231, or 608693.\n\nThe result from an arithmetic operation with an integer and a floating-point value is a floating-point value with a precision\nequal to the working precision. The following program calculates the eighth term in Sylvester\u2019s sequence101 using a recurrence:\n\n$ gawk -M 'BEGIN {\n>   s = 2.0\n>   for (i = 1; i <= 7; i++)\n>       s = s * (s - 1) + 1\n>   print s\n> }'\n-| 113423713055421845118910464\n\n\nThe output differs from the actual number, 113,423,713,055,421,844,361,000,443, because the default precision of 53 bits is not\nenough to represent the floating-point results exactly. You can either increase the precision (100 bits is enough in this case),\nor replace the floating-point constant \u20182.0\u2019 with an integer, to perform all computations using integer arithmetic to get the\ncorrect output.\n\nSometimes gawk must implicitly convert an arbitrary-precision integer into an arbitrary-precision floating-point value. This is\nprimarily because the MPFR library does not always provide the relevant interface to process arbitrary-precision integers or\nmixed-mode numbers as needed by an operation or function. In such a case, the precision is set to the minimum value necessary for\nexact conversion, and the working precision is not used for this purpose. If this is not what you need or want, you can employ a\nsubterfuge and convert the integer to floating point first, like this:\n\ngawk -M 'BEGIN { n = 13; print (n + 0.0) % 2.0 }'\n\n\nYou can avoid this issue altogether by specifying the number as a floating-point value to begin with:\n\ngawk -M 'BEGIN { n = 13.0; print n % 2.0 }'\n\n\nNote that for this particular example, it is likely best to just use the following:\n\ngawk -M 'BEGIN { n = 13; print n % 2 }'\n\n\nWhen dividing two arbitrary precision integers with either \u2018/\u2019 or \u2018%\u2019, the result is typically an arbitrary precision floating\npoint value (unless the denominator evenly divides into the numerator).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(101)\n\nWeisstein, Eric W. Sylvester\u2019s Sequence. From MathWorld\u2014A Wolfram Web", "doc_id": "40013129-77f7-47b9-9d1d-1c0a810a63c1", "embedding": null, "doc_hash": "861f35173ef36dba335faf4d3b71dc6686028bddf70b0faa06e495ba91c7c192", "extra_info": null, "node_info": {"start": 0, "end": 3473, "_node_type": "1"}, "relationships": {"1": "7b69e3d3-a4f7-4fff-b169-9400b8da2684", "3": "b38bbce8-8b11-4fc9-bf2f-471732894291"}}, "__type__": "1"}, "b38bbce8-8b11-4fc9-bf2f-471732894291": {"__data__": {"text": "W. Sylvester\u2019s Sequence. From MathWorld\u2014A Wolfram Web Resource\n(http://mathworld.wolfram.com/SylvestersSequence.html [http://mathworld.wolfram.com/SylvestersSequence.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: How To Check If MPFR Is Available [Checking-for-MPFR.html], Previous: Floating-Point Arithmetic: Caveat Emptor!\n[FP-Math-Caution.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b38bbce8-8b11-4fc9-bf2f-471732894291", "embedding": null, "doc_hash": "258bea22d289f838a37fb75375b7d703b114de82f5e30f74ecc9b8efa8d8497a", "extra_info": null, "node_info": {"start": 3420, "end": 4025, "_node_type": "1"}, "relationships": {"1": "7b69e3d3-a4f7-4fff-b169-9400b8da2684", "2": "40013129-77f7-47b9-9d1d-1c0a810a63c1"}}, "__type__": "1"}, "3f1e1cbd-5cb8-41dd-bfda-bacefce7a1fe": {"__data__": {"text": "Next: String Concatenation [Concatenation.html], Up: Operators: Doing Something with Values [All-Operators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.2.1 ARITHMETIC OPERATORS\n\nThe awk language uses the common arithmetic operators when evaluating expressions. All of these arithmetic operators follow normal\nprecedence rules and work as you would expect them to.\n\nThe following example uses a file named grades, which contains a list of student names as well as three test scores per student\n(it\u2019s a small class):\n\nPat   100 97 58\nSandy  84 72 93\nChris  72 92 89\n\n\nThis program takes the file grades and prints the average of the scores:\n\n$ awk '{ sum = $2 + $3 + $4 ; avg = sum / 3\n>        print $1, avg }' grades\n-| Pat 85\n-| Sandy 83\n-| Chris 84.3333\n\n\nThe following list provides the arithmetic operators in awk, in order from the highest precedence to the lowest:\n\nx ^ y x ** y\n\nExponentiation; x raised to the y power. \u20182 ^ 3\u2019 has the value eight; the character sequence \u2018**\u2019 is equivalent to \u2018^\u2019. (c.e.)\n\n- x\n\nNegation.\n\n+ x\n\nUnary plus; the expression is converted to a number.\n\nx * y\n\nMultiplication.\n\nx / y\n\nDivision; because all numbers in awk are floating-point numbers, the result is not rounded to an integer\u2014\u20183 / 4\u2019 has the value\n0.75. (It is a common mistake, especially for C programmers, to forget that all numbers in awk are floating point, and that\ndivision of integer-looking constants produces a real number, not an integer.)\n\nx % y\n\nRemainder; further discussion is provided in the text, just after this list.\n\nx + y\n\nAddition.\n\nx - y\n\nSubtraction.\n\nUnary plus and minus have the same precedence, the multiplication operators all have the same precedence, and addition and\nsubtraction have the same precedence.\n\nWhen computing the remainder of \u2018x % y\u2019, the quotient is rounded toward zero to an integer and multiplied by y. This result is\nsubtracted from x; this operation is sometimes known as \u201ctrunc-mod.\u201d The following relation always holds:\n\nb * int(a / b) + (a % b) == a\n\n\nOne possibly undesirable effect of this definition of remainder is that \u2018x % y\u2019 is negative if x is negative. Thus:\n\n-17 % 8 = -1\n\n\nThis definition is compliant with the POSIX standard, which says that the % operator produces results equivalent to using the\nstandard C fmod() function, and that function in turn works as just described.\n\nIn other awk implementations, the signedness of the remainder may be machine-dependent.\n\n> NOTE: The POSIX standard only specifies the use of \u2018^\u2019 for exponentiation. For maximum portability, do not use the \u2018**\u2019\n> operator.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: String Concatenation [Concatenation.html], Up: Operators: Doing Something with Values [All-Operators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3f1e1cbd-5cb8-41dd-bfda-bacefce7a1fe", "embedding": null, "doc_hash": "ed7256ba1bb276afb5e8f579b10b2f48b4ceba325d858cf4e57e23105454c7d7", "extra_info": null, "node_info": {"start": 0, "end": 3023, "_node_type": "1"}, "relationships": {"1": "e4fdb07d-5203-487b-acd2-5b1749323a22"}}, "__type__": "1"}, "7587357e-3542-4693-87bf-c830216f5a5c": {"__data__": {"text": "Next: Using Numbers to Subscript Arrays [Numeric-Array-Subscripts.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.1 THE BASICS OF ARRAYS\n\nThis section presents the basics: working with elements in arrays one at a time, and traversing all of the elements in an array.\n\n * Introduction to Arrays [Array-Intro.html]\n * Referring to an Array Element [Reference-to-Elements.html]\n * Assigning Array Elements [Assigning-Elements.html]\n * Basic Array Example [Array-Example.html]\n * Scanning All Elements of an Array [Scanning-an-Array.html]\n * Using Predefined Array Scanning Orders with gawk [Controlling-Scanning.html]", "doc_id": "7587357e-3542-4693-87bf-c830216f5a5c", "embedding": null, "doc_hash": "7eea009b83dbf0d3b76fa6769dafffb558339d3fb49c2abf71089041d2e478ca", "extra_info": null, "node_info": {"start": 0, "end": 800, "_node_type": "1"}, "relationships": {"1": "fa8c4556-86a5-462e-a972-1bcf5ec3ea3f"}}, "__type__": "1"}, "6f3be005-e7c9-416f-bb3e-7aa89bdb1df2": {"__data__": {"text": "Next: Array Functions [Array-Functions.html], Up: Array Manipulation [Array-Manipulation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.12.1 ARRAY DATA TYPES\n\nThe data types associated with arrays are as follows:\n\ntypedef void *awk_array_t;\n\nIf you request the value of an array variable, you get back an awk_array_t value. This value is opaque110 to the extension; it\nuniquely identifies the array but can only be used by passing it into API functions or receiving it from API functions. This is\nvery similar to way \u2018FILE *\u2019 values are used with the <stdio.h> library routines.\n\ntypedef struct awk_element { \u00a0\u00a0\u00a0\u00a0/* convenience linked list pointer, not used by gawk */ \u00a0\u00a0\u00a0\u00a0struct awk_element *next; \u00a0\u00a0\u00a0\u00a0enum {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWK_ELEMENT_DEFAULT = 0,\u00a0\u00a0/* set by gawk */ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0AWK_ELEMENT_DELETE = 1\u00a0\u00a0\u00a0\u00a0/* set by extension */ \u00a0\u00a0\u00a0\u00a0} flags;\n\u00a0\u00a0\u00a0\u00a0awk_value_t index; \u00a0\u00a0\u00a0\u00a0awk_value_t value; } awk_element_t;\n\nThe awk_element_t is a \u201cflattened\u201d array element. awk produces an array of these inside the awk_flat_array_t (see the next item).\nIndividual elements may be marked for deletion. New elements must be added individually, one at a time, using the separate API for\nthat purpose. The fields are as follows:\n\nstruct awk_element *next;\n\nThis pointer is for the convenience of extension writers. It allows an extension to create a linked list of new elements that can\nthen be added to an array in a loop that traverses the list.\n\nenum { \u2026 } flags;\n\nA set of flag values that convey information between the extension and gawk. Currently there is only one: AWK_ELEMENT_DELETE.\nSetting it causes gawk to delete the element from the original array upon release of the flattened array.\n\nindex value\n\nThe index and value of the element, respectively. All memory pointed to by index and value belongs to gawk.\n\ntypedef struct awk_flat_array { \u00a0\u00a0\u00a0\u00a0awk_const void *awk_const opaque1;\u00a0\u00a0\u00a0\u00a0/* for use by gawk */ \u00a0\u00a0\u00a0\u00a0awk_const void *awk_const\nopaque2;\u00a0\u00a0\u00a0\u00a0/* for use by gawk */ \u00a0\u00a0\u00a0\u00a0awk_const size_t count;\u00a0\u00a0\u00a0\u00a0\u00a0/* how many elements */ \u00a0\u00a0\u00a0\u00a0awk_element_t elements[1];\u00a0\u00a0/* will\nbe extended */ } awk_flat_array_t;\n\nThis is a flattened array. When an extension gets one of these from gawk, the elements array is of actual size count. The opaque1\nand opaque2 pointers are for use by gawk; therefore they are marked awk_const so that the extension cannot modify them.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(110)\n\nIt is also a \u201ccookie,\u201d but the gawk developers did not wish to overuse this term.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Array Functions [Array-Functions.html], Up: Array Manipulation [Array-Manipulation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6f3be005-e7c9-416f-bb3e-7aa89bdb1df2", "embedding": null, "doc_hash": "375a6defe465098f316f2d39e273aa708205e27f9e9933f1079f24743c99c0be", "extra_info": null, "node_info": {"start": 0, "end": 3009, "_node_type": "1"}, "relationships": {"1": "a3eca64f-d25e-4720-b8c0-bb2d6af3e968"}}, "__type__": "1"}, "fb3dab49-7e8b-48bb-b2be-fef77ec22d67": {"__data__": {"text": "Next: Scanning All Elements of an Array [Scanning-an-Array.html], Previous: Assigning Array Elements [Assigning-Elements.html],\nUp: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.1.4 BASIC ARRAY EXAMPLE\n\nThe following program takes a list of lines, each beginning with a line number, and prints them out in order of line number. The\nline numbers are not in order when they are first read\u2014instead, they are scrambled. This program sorts the lines by making an\narray using the line numbers as subscripts. The program then prints out the lines in sorted order of their numbers. It is a very\nsimple program and gets confused upon encountering repeated numbers, gaps, or lines that don\u2019t begin with a number:\n\n{\n    if ($1 > max)\n        max = $1\n    arr[$1] = $0\n}\n\nEND {\n    for (x = 1; x <= max; x++)\n        print arr[x]\n}\n\n\nThe first rule keeps track of the largest line number seen so far; it also stores each line into the array arr, at an index that\nis the line\u2019s number. The second rule runs after all the input has been read, to print out all the lines. When this program is run\nwith the following input:\n\n5  I am the Five man\n2  Who are you?  The new number two!\n4  . . . And four on the floor\n1  Who is number one?\n3  I three you.\n\n\nIts output is:\n\n1  Who is number one?\n2  Who are you?  The new number two!\n3  I three you.\n4  . . . And four on the floor\n5  I am the Five man\n\n\nIf a line number is repeated, the last line with a given number overrides the others. Gaps in the line numbers can be handled with\nan easy improvement to the program\u2019s END rule, as follows:\n\nEND {\n    for (x = 1; x <= max; x++)\n        if (x in arr)\n            print arr[x]\n}\n\n\nAs mentioned, the program is simplistic. It can be easily confused; for example, by using negative or nonalphabetic line numbers.\nThe point here is merely to demonstrate basic array usage.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Scanning All Elements of an Array [Scanning-an-Array.html], Previous: Assigning Array Elements [Assigning-Elements.html],\nUp: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "fb3dab49-7e8b-48bb-b2be-fef77ec22d67", "embedding": null, "doc_hash": "a77012b07980905357507c838fea92f245667c2e0006165b6030255d33655ceb", "extra_info": null, "node_info": {"start": 0, "end": 2405, "_node_type": "1"}, "relationships": {"1": "f0fb8f60-5fb3-4ae8-8671-13b3671b78bf"}}, "__type__": "1"}, "55a71b8c-5c72-41b9-8401-76fc72c04286": {"__data__": {"text": "Next: Working With All The Elements of an Array [Flattening-Arrays.html], Previous: Array Data Types [Array-Data-Types.html], Up:\nArray Manipulation [Array-Manipulation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.12.2 ARRAY FUNCTIONS\n\nThe following functions relate to individual array elements:\n\nawk_bool_t get_element_count(awk_array_t a_cookie, size_t *count);\n\nFor the array represented by a_cookie, place in *count the number of elements it contains. A subarray counts as a single element.\nReturn false if there is an error.\n\nawk_bool_t get_array_element(awk_array_t a_cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const awk_value_t *const index,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t wanted, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result);\n\nFor the array represented by a_cookie, return in *result the value of the element whose index is index. wanted specifies the type\nof value you wish to retrieve. Return false if wanted does not match the actual type or if index is not in the array (see Table\n17.2 [Requesting-Values.html#table_002dvalue_002dtypes_002dreturned]).\n\nThe value for index can be numeric, in which case gawk converts it to a string. Using nonintegral values is possible, but requires\nthat you understand how such values are converted to strings (see Conversion of Strings and Numbers [Conversion.html]); thus,\nusing integral values is safest.\n\nAs with all strings passed into gawk from an extension, the string value of index must come from gawk_malloc(), gawk_calloc(), or\ngawk_realloc(), and gawk releases the storage.\n\nawk_bool_t set_array_element(awk_array_t a_cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0awk_value_t *const index,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const\u00a0awk_value_t *const value);\n\nIn the array represented by a_cookie, create or modify the element whose index is given by index. The ARGV and ENVIRON arrays may\nnot be changed, although the PROCINFO array can be.\n\nawk_bool_t set_array_element_by_elem(awk_array_t a_cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_element_t element);\n\nLike set_array_element(), but take the index and value from element. This is a convenience macro.\n\nawk_bool_t del_array_element(awk_array_t a_cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const awk_value_t* const index);\n\nRemove the element with the given index from the array represented by a_cookie. Return true if the element was removed, or false\nif the element did not exist in the array.\n\nThe following functions relate to arrays as a whole:\n\nawk_array_t create_array(void);\n\nCreate a new array to which elements may be added. See How To Create and Populate Arrays [Creating-Arrays.html] for a discussion\nof how to create a new array and add elements to it.\n\nawk_bool_t clear_array(awk_array_t a_cookie);\n\nClear the array represented by a_cookie. Return false if there was some kind of problem, true otherwise. The array remains an\narray, but after calling this function, it has no elements. This is equivalent to using the delete statement (see The delete\nStatement [Delete.html]).\n\nawk_bool_t destroy_array(awk_array_t a_cookie);\n\nClear the array represented by a_cookie and release the array allocated by create_array. Return false if there was some kind of\nproblem, true otherwise. The array will no longer exist and cannot be used again.\n\nawk_bool_t flatten_array_typed(awk_array_t a_cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_flat_array_t **data,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t index_type, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t value_type);\n\nFor the array represented by a_cookie, create an awk_flat_array_t structure and fill", "doc_id": "55a71b8c-5c72-41b9-8401-76fc72c04286", "embedding": null, "doc_hash": "4d3c448fa41d7c6791629eb1e7bede2998377333821738c25283c6a2eac222af", "extra_info": null, "node_info": {"start": 0, "end": 3733, "_node_type": "1"}, "relationships": {"1": "1cee749a-c8a5-4428-b0be-60d7d365c9eb", "3": "dfbb1e1c-50f8-4c4d-ae14-2bc62f055edb"}}, "__type__": "1"}, "dfbb1e1c-50f8-4c4d-ae14-2bc62f055edb": {"__data__": {"text": "array represented by a_cookie, create an awk_flat_array_t structure and fill it in with indices and values of the\nrequested types. Set the pointer whose address is passed as data to point to this structure. Return true upon success, or false\notherwise. See Working With All The Elements of an Array [Flattening-Arrays.html], for a discussion of how to flatten an array and\nwork with it.\n\nawk_bool_t flatten_array(awk_array_t a_cookie, awk_flat_array_t **data);\n\nFor the array represented by a_cookie, create an awk_flat_array_t structure and fill it in with AWK_STRING indices and\nAWK_UNDEFINED values. This is superseded by flatten_array_typed(). It is provided as a macro, and remains for convenience and for\nsource code compatibility with the previous version of the API.\n\nawk_bool_t release_flattened_array(awk_array_t a_cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_flat_array_t *data);\n\nWhen done with a flattened array, release the storage using this function. You must pass in both the original array cookie and the\naddress of the created awk_flat_array_t structure. The function returns true upon success, false otherwise.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Working With All The Elements of an Array [Flattening-Arrays.html], Previous: Array Data Types [Array-Data-Types.html], Up:\nArray Manipulation [Array-Manipulation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "dfbb1e1c-50f8-4c4d-ae14-2bc62f055edb", "embedding": null, "doc_hash": "8243ea1378f45036a90ea4e40cfaa776f79d63ea6d530a882ac7c9b2f8188388", "extra_info": null, "node_info": {"start": 3657, "end": 5156, "_node_type": "1"}, "relationships": {"1": "1cee749a-c8a5-4428-b0be-60d7d365c9eb", "2": "55a71b8c-5c72-41b9-8401-76fc72c04286"}}, "__type__": "1"}, "d6b10dff-13ff-4d99-9685-36411b55f367": {"__data__": {"text": "Next: Referring to an Array Element [Reference-to-Elements.html], Up: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.1.1 INTRODUCTION TO ARRAYS\n\n> Doing linear scans over an associative array is like trying to club someone to death with a loaded Uzi.\n\n\u2014 Larry Wall\n\nThe awk language provides one-dimensional arrays for storing groups of related strings or numbers. Every awk array must have a\nname. Array names have the same syntax as variable names; any valid variable name would also be a valid array name. But one name\ncannot be used in both ways (as an array and as a variable) in the same awk program.\n\nArrays in awk superficially resemble arrays in other programming languages, but there are fundamental differences. In awk, it\nisn\u2019t necessary to specify the size of an array before starting to use it. Additionally, any number or string, not just\nconsecutive integers, may be used as an array index.\n\nIn most other languages, arrays must be declared before use, including a specification of how many elements or components they\ncontain. In such languages, the declaration causes a contiguous block of memory to be allocated for that many elements. Usually,\nan index in the array must be a nonnegative integer. For example, the index zero specifies the first element in the array, which\nis actually stored at the beginning of the block of memory. Index one specifies the second element, which is stored in memory\nright after the first element, and so on. It is impossible to add more elements to the array, because it has room only for as many\nelements as given in the declaration. (Some languages allow arbitrary starting and ending indices\u2014e.g., \u201815 .. 27\u2019\u2014but the size of\nthe array is still fixed when the array is declared.)\n\nA contiguous array of four elements might look like Figure 8.1, conceptually, if the element values are eight, \"foo\", \"\", and 30.\n\nA Contiguous Array [gawk_array-elements.png]\n\nFigure 8.1: A contiguous array\n\nOnly the values are stored; the indices are implicit from the order of the values. Here, eight is the value at index zero, because\neight appears in the position with zero elements before it.\n\nArrays in awk are different\u2014they are associative. This means that each array is a collection of pairs\u2014an index and its\ncorresponding array element value:\n\nIndexValue 330 1\"foo\" 08 2\"\"\n\nThe pairs are shown in jumbled order because their order is irrelevant.41\n\nOne advantage of associative arrays is that new pairs can be added at any time. For example, suppose a tenth element is added to\nthe array whose value is \"number\u00a0ten\". The result is:\n\nIndexValue 10\"number ten\" 330 1\"foo\" 08 2\"\"\n\nNow the array is sparse, which just means some indices are missing. It has elements 0\u20133 and 10, but doesn\u2019t have elements 4, 5, 6,\n7, 8, or 9.\n\nAnother consequence of associative arrays is that the indices don\u2019t have to be nonnegative integers. Any number, or even a string,\ncan be an index. For example, the following is an array that translates words from English to French:\n\nIndexValue \"dog\"\"chien\" \"cat\"\"chat\" \"one\"\"un\" 1\"un\"\n\nHere we decided to translate the number one in both spelled-out and numeric form\u2014thus illustrating that a single array can have\nboth numbers and strings as indices. (In fact, array subscripts are always strings. There are some subtleties to how numbers work\nwhen used as array subscripts; this is discussed in more detail in Using Numbers to Subscript Arrays\n[Numeric-Array-Subscripts.html].) Here, the number 1 isn\u2019t double-quoted, because awk automatically converts it to a string.\n\nThe value of IGNORECASE has no effect upon array subscripting. The identical string value used to store an array element must be\nused to retrieve it.", "doc_id": "d6b10dff-13ff-4d99-9685-36411b55f367", "embedding": null, "doc_hash": "445dffa5e3f7e5bc10c5187d731ca2696762b279aab0e5cde993c372d8ee0611", "extra_info": null, "node_info": {"start": 0, "end": 3879, "_node_type": "1"}, "relationships": {"1": "4f1d28bd-ed57-4d51-a427-a2f0b70c978a", "3": "2933616c-bc90-4053-8ed2-961aaafaeb39"}}, "__type__": "1"}, "2933616c-bc90-4053-8ed2-961aaafaeb39": {"__data__": {"text": "The identical string value used to store an array element must be\nused to retrieve it. When awk creates an array (e.g., with the split() built-in function), that array\u2019s indices are consecutive\nintegers starting at one. (See String-Manipulation Functions [String-Functions.html].)\n\nawk\u2019s arrays are efficient\u2014the time to access an element is independent of the number of elements in the array.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(41)\n\nThe ordering will vary among awk implementations, which typically use hash tables to store array elements and values.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Referring to an Array Element [Reference-to-Elements.html], Up: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2933616c-bc90-4053-8ed2-961aaafaeb39", "embedding": null, "doc_hash": "f4f013b3356195f02d7e4e5ca05d0debdeb2850660431d6444474d92b88da26f", "extra_info": null, "node_info": {"start": 3793, "end": 4757, "_node_type": "1"}, "relationships": {"1": "4f1d28bd-ed57-4d51-a427-a2f0b70c978a", "2": "d6b10dff-13ff-4d99-9685-36411b55f367"}}, "__type__": "1"}, "cb8e75ad-2c82-4c93-9b9d-6163d530b2d4": {"__data__": {"text": "Next: Accessing and Manipulating Redirections [Redirection-API.html], Previous: Symbol Table Access [Symbol-Table-Access.html],\nUp: API Description [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.12 ARRAY MANIPULATION\n\nThe primary data structure109 in awk is the associative array (see Arrays in awk [Arrays.html]). Extensions need to be able to\nmanipulate awk arrays. The API provides a number of data structures for working with arrays, functions for working with individual\nelements, and functions for working with arrays as a whole. This includes the ability to \u201cflatten\u201d an array so that it is easy for\nC code to traverse every element in an array. The array data structures integrate nicely with the data structures for values to\nmake it easy to both work with and create true arrays of arrays (see General-Purpose Data Types [General-Data-Types.html]).\n\n * Array Data Types [Array-Data-Types.html]\n * Array Functions [Array-Functions.html]\n * Working With All The Elements of an Array [Flattening-Arrays.html]\n * How To Create and Populate Arrays [Creating-Arrays.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(109)\n\nOK, the only data structure.", "doc_id": "cb8e75ad-2c82-4c93-9b9d-6163d530b2d4", "embedding": null, "doc_hash": "2f6ace30d32d7d01f8c833f8e2a79ec1f6d6431cd02a1a9caf23ce32b1dfff6f", "extra_info": null, "node_info": {"start": 0, "end": 1438, "_node_type": "1"}, "relationships": {"1": "8167a2dd-9bd4-40e6-8696-271a354d943c"}}, "__type__": "1"}, "149a46c5-0b70-4a8d-b42c-b20d486fad13": {"__data__": {"text": "Previous: Controlling Array Traversal [Controlling-Array-Traversal.html], Up: Controlling Array Traversal and Array Sorting\n[Array-Sorting.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n12.3.2 SORTING ARRAY VALUES AND INDICES WITH GAWK\n\nIn most awk implementations, sorting an array requires writing a sort() function. This can be educational for exploring different\nsorting algorithms, but usually that\u2019s not the point of the program. gawk provides the built-in asort() and asorti() functions\n(see String-Manipulation Functions [String-Functions.html]) for sorting arrays. For example:\n\npopulate the array data\nn = asort(data)\nfor (i = 1; i <= n; i++)\n    do something with data[i]\n\n\nAfter the call to asort(), the array data is indexed from 1 to some number n, the total number of elements in data. (This count is\nasort()\u2019s return value.) data[1] <= data[2] <= data[3], and so on. The default comparison is based on the type of the elements\n(see Variable Typing and Comparison Expressions [Typing-and-Comparison.html]). All numeric values come before all string values,\nwhich in turn come before all subarrays.\n\nAn important side effect of calling asort() is that the array\u2019s original indices are irrevocably lost. As this isn\u2019t always\ndesirable, asort() accepts a second argument:\n\npopulate the array source\nn = asort(source, dest)\nfor (i = 1; i <= n; i++)\n    do something with dest[i]\n\n\nIn this case, gawk copies the source array into the dest array and then sorts dest, destroying its indices. However, the source\narray is not affected.\n\nOften, what\u2019s needed is to sort on the values of the indices instead of the values of the elements. To do that, use the asorti()\nfunction. The interface and behavior are identical to that of asort(), except that the index values are used for sorting and\nbecome the values of the result array:\n\n{ source[$0] = some_func($0) }\n\nEND {\n    n = asorti(source, dest)\n    for (i = 1; i <= n; i++) {\n        Work with sorted indices directly:\n        do something with dest[i]\n        \u2026\n        Access original array via sorted indices:\n        do something with source[dest[i]]\n    }\n}\n\n\nSo far, so good. Now it starts to get interesting. Both asort() and asorti() accept a third string argument to control comparison\nof array elements. When we introduced asort() and asorti() in String-Manipulation Functions [String-Functions.html], we ignored\nthis third argument; however, now is the time to describe how this argument affects these two functions.\n\nBasically, the third argument specifies how the array is to be sorted. There are two possibilities. As with PROCINFO[\"sorted_in\"],\nthis argument may be one of the predefined names that gawk provides (see Using Predefined Array Scanning Orders with gawk\n[Controlling-Scanning.html]), or it may be the name of a user-defined function (see Controlling Array Traversal\n[Controlling-Array-Traversal.html]).\n\nIn the latter case, the function can compare elements in any way it chooses, taking into account just the indices, just the\nvalues, or both. This is extremely powerful.\n\nOnce the array is sorted, asort() takes the values in their final order and uses them to fill in the result array, whereas\nasorti() takes the indices in their final order and uses them to fill in the result array.\n\n> NOTE: Copying array indices and elements isn\u2019t expensive in terms of memory. Internally, gawk maintains reference counts", "doc_id": "149a46c5-0b70-4a8d-b42c-b20d486fad13", "embedding": null, "doc_hash": "4867de0bab7191780681d8f99ca8dc13f371c58f1afd7e8f8fb2563e100dc4da", "extra_info": null, "node_info": {"start": 0, "end": 3550, "_node_type": "1"}, "relationships": {"1": "d18791fe-f37c-4a1e-8772-ca72ca822868", "3": "f7fac754-8196-4312-8501-f304b96c3e22"}}, "__type__": "1"}, "f7fac754-8196-4312-8501-f304b96c3e22": {"__data__": {"text": "expensive in terms of memory. Internally, gawk maintains reference counts to\n> data. For example, when asort() copies the first array to the second one, there is only one copy of the original array elements\u2019\n> data, even though both arrays use the values.\n\nYou may use the same array for both the first and second arguments to asort() and asorti(). Doing so only makes sense if you are\nalso supplying the third argument, since awk doesn\u2019t provide a way to pass that third argument without also passing the first and\nsecond ones.\n\nBecause IGNORECASE affects string comparisons, the value of IGNORECASE also affects sorting for both asort() and asorti(). Note\nalso that the locale\u2019s sorting order does not come into play; comparisons are based on character values only.83\n\nThe following example demonstrates the use of a comparison function with asort(). The comparison function, case_fold_compare(),\nmaps both values to lowercase in order to compare them ignoring case.\n\n# case_fold_compare --- compare as strings, ignoring case\n\nfunction case_fold_compare(i1, v1, i2, v2,    l, r)\n{\n    l = tolower(v1)\n\n\n    r = tolower(v2)\n\n    if (l < r)\n        return -1\n    else if (l == r)\n        return 0\n    else\n        return 1\n}\n\n\nAnd here is the test program for it:\n\n# Test program\n\nBEGIN {\n    Letters = \"abcdefghijklmnopqrstuvwxyz\" \\\n              \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    split(Letters, data, \"\")\n\n    asort(data, result, \"case_fold_compare\")\n\n    j = length(result)\n    for (i = 1; i <= j; i++) {\n        printf(\"%s\", result[i])\n        if (i % (j/2) == 0)\n            printf(\"\\n\")\n        else\n            printf(\" \")\n    }\n}\n\n\nWhen run, we get the following:\n\n$ gawk -f case_fold_compare.awk\n-| A a B b c C D d e E F f g G H h i I J j k K l L M m\n-| n N O o p P Q q r R S s t T u U V v w W X x y Y z Z\n\n\n> NOTE: \u201cUnder the hood,\u201d gawk uses the C library qsort() function to manage the sorting. qsort() can call itself recursively.\n> This means that when you write a comparison function, you should be careful to avoid the use of global variables and arrays; use\n> only local variables and arrays that you declare as additional parameters to the comparison function. Otherwise, you are likely\n> to cause unintentional memory corruption in your global arrays and possibly cause gawk itself to fail.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(83)\n\nThis is true because locale-based comparison occurs only when in POSIX-compatibility mode, and because asort() and asorti() are\ngawk extensions, they are not available in that case.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Controlling Array Traversal [Controlling-Array-Traversal.html], Up: Controlling Array Traversal and Array Sorting\n[Array-Sorting.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f7fac754-8196-4312-8501-f304b96c3e22", "embedding": null, "doc_hash": "0578ee745aa417982d28d45cefedd069ebdd9febd968b6f9d9bff8241a871590", "extra_info": null, "node_info": {"start": 3477, "end": 6454, "_node_type": "1"}, "relationships": {"1": "d18791fe-f37c-4a1e-8772-ca72ca822868", "2": "149a46c5-0b70-4a8d-b42c-b20d486fad13"}}, "__type__": "1"}, "ce30ffd7-7b1c-46f9-ae72-e44dde8a5a42": {"__data__": {"text": "Next: Two-Way Communications with Another Process [Two_002dway-I_002fO.html], Previous: Boolean Typed Values\n[Boolean-Typed-Values.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.3 CONTROLLING ARRAY TRAVERSAL AND ARRAY SORTING\n\ngawk lets you control the order in which a \u2018for (indx in array)\u2019 loop traverses an array.\n\nIn addition, two built-in functions, asort() and asorti(), let you sort arrays based on the array values and indices,\nrespectively. These two functions also provide control over the sorting criteria used to order the elements during sorting.\n\n * Controlling Array Traversal [Controlling-Array-Traversal.html]\n * Sorting Array Values and Indices with gawk [Array-Sorting-Functions.html]", "doc_id": "ce30ffd7-7b1c-46f9-ae72-e44dde8a5a42", "embedding": null, "doc_hash": "a50bb62d1de808f570ffe6891beba50e56e0b9acaf56867e0b7da5c78729c37d", "extra_info": null, "node_info": {"start": 0, "end": 914, "_node_type": "1"}, "relationships": {"1": "09174847-a1fd-454d-8f19-04ae8b653994"}}, "__type__": "1"}, "1020a8f1-572e-42f6-a800-dc7885d38128": {"__data__": {"text": "Previous: Arrays of Arrays [Arrays-of-Arrays.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.7 SUMMARY\n\n * Standard awk provides one-dimensional associative arrays (arrays indexed by string values). All arrays are associative; numeric\n   indices are converted automatically to strings.\n * Array elements are referenced as array[indx]. Referencing an element creates it if it did not exist previously.\n * The proper way to see if an array has an element with a given index is to use the in operator: \u2018indx in array\u2019.\n * Use \u2018for (indx in array) \u2026\u2019 to scan through all the individual elements of an array. In the body of the loop, indx takes on the\n   value of each element\u2019s index in turn.\n * The order in which a \u2018for (indx in array)\u2019 loop traverses an array is undefined in POSIX awk and varies among implementations.\n   gawk lets you control the order by assigning special predefined values to PROCINFO[\"sorted_in\"].\n * Use \u2018delete array[indx]\u2019 to delete an individual element. To delete all of the elements in an array, use \u2018delete array\u2019. This\n   latter feature has been a common extension for many years and is now standard, but may not be supported by all commercial\n   versions of awk.\n * Standard awk simulates multidimensional arrays by separating subscript values with commas. The values are concatenated into a\n   single string, separated by the value of SUBSEP. The fact that such a subscript was created in this way is not retained; thus,\n   changing SUBSEP may have unexpected consequences. You can use \u2018(sub1, sub2, \u2026) in array\u2019 to see if such a multidimensional\n   subscript exists in array.\n * gawk provides true arrays of arrays. You use a separate set of square brackets for each dimension in such an array:\n   data[row][col], for example. Array elements may thus be either scalar values (number or string) or other arrays.\n * Use the isarray() built-in function to determine if an array element is itself a subarray.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Arrays of Arrays [Arrays-of-Arrays.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "1020a8f1-572e-42f6-a800-dc7885d38128", "embedding": null, "doc_hash": "e1201a1cf2c5a259cbf3864213bec5f6060823e89def2a2ed26115532cbb6c65", "extra_info": null, "node_info": {"start": 0, "end": 2398, "_node_type": "1"}, "relationships": {"1": "01cc60fa-eab7-4676-8cb7-43e998861f38"}}, "__type__": "1"}, "273831e1-3d50-4628-9856-09f69a524017": {"__data__": {"text": "Next: Summary [Arrays-Summary.html], Previous: Multidimensional Arrays [Multidimensional.html], Up: Arrays in awk [Arrays.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.6 ARRAYS OF ARRAYS\n\ngawk goes beyond standard awk\u2019s multidimensional array access and provides true arrays of arrays. Elements of a subarray are\nreferred to by their own indices enclosed in square brackets, just like the elements of the main array. For example, the following\ncreates a two-element subarray at index 1 of the main array a:\n\na[1][1] = 1\na[1][2] = 2\n\n\nThis simulates a true two-dimensional array. Each subarray element can contain another subarray as a value, which in turn can hold\nother arrays as well. In this way, you can create arrays of three or more dimensions. The indices can be any awk expressions,\nincluding scalars separated by commas (i.e., a regular awk simulated multidimensional subscript). So the following is valid in\ngawk:\n\na[1][3][1, \"name\"] = \"barney\"\n\n\nEach subarray and the main array can be of different length. In fact, the elements of an array or its subarray do not all have to\nhave the same type. This means that the main array and any of its subarrays can be nonrectangular, or jagged in structure. You can\nassign a scalar value to the index 4 of the main array a, even though a[1] is itself an array and not a scalar:\n\na[4] = \"An element in a jagged array\"\n\n\nThe terms dimension, row, and column are meaningless when applied to such an array, but we will use \u201cdimension\u201d henceforth to\nimply the maximum number of indices needed to refer to an existing element. The type of any element that has already been assigned\ncannot be changed by assigning a value of a different type. You have to first delete the current element, which effectively makes\ngawk forget about the element at that index:\n\ndelete a[4]\na[4][5][6][7] = \"An element in a four-dimensional array\"\n\n\nThis removes the scalar value from index 4 and then inserts a three-level nested subarray containing a scalar. You can also delete\nan entire subarray or subarray of subarrays:\n\ndelete a[4][5]\na[4][5] = \"An element in subarray a[4]\"\n\n\nBut recall that you can not delete the main array a and then use it as a scalar.\n\nThe built-in functions that take array arguments can also be used with subarrays. For example, the following code fragment uses\nlength() (see String-Manipulation Functions [String-Functions.html]) to determine the number of elements in the main array a and\nits subarrays:\n\nprint length(a), length(a[1]), length(a[1][3])\n\n\nThis results in the following output for our main array a:\n\n2, 3, 1\n\n\nThe \u2018subscript in array\u2019 expression (see Referring to an Array Element [Reference-to-Elements.html]) works similarly for both\nregular awk-style arrays and arrays of arrays. For example, the tests \u20181 in a\u2019, \u20183 in a[1]\u2019, and \u2018(1, \"name\") in a[1][3]\u2019 all\nevaluate to one (true) for our array a.\n\nThe \u2018for (item in array)\u2019 statement (see Scanning All Elements of an Array [Scanning-an-Array.html]) can be nested to scan all the\nelements of an array of arrays if it is rectangular in structure. In order to print the contents (scalar values) of a\ntwo-dimensional array of arrays (i.e., in which each first-level element is itself an array, not necessarily of the same length),\nyou could use the following code:\n\nfor (i in array)\n    for (j in array[i])\n        print", "doc_id": "273831e1-3d50-4628-9856-09f69a524017", "embedding": null, "doc_hash": "023ea7ab68a823e9cf9138f40779d54696cc231ba48c9ad270b117bdf4b4b54d", "extra_info": null, "node_info": {"start": 0, "end": 3499, "_node_type": "1"}, "relationships": {"1": "8816326a-17b3-433f-8fb0-160506403cf0", "3": "a53eebd0-f693-4ae7-819f-ee9ca80c55df"}}, "__type__": "1"}, "a53eebd0-f693-4ae7-819f-ee9ca80c55df": {"__data__": {"text": "   for (j in array[i])\n        print array[i][j]\n\n\nThe isarray() function (see Getting Type Information [Type-Functions.html]) lets you test if an array element is itself an array:\n\nfor (i in array) {\n    if (isarray(array[i])) {\n        for (j in array[i]) {\n            print array[i][j]\n        }\n    }\n    else\n        print array[i]\n}\n\n\nIf the structure of a jagged array of arrays is known in advance, you can often devise workarounds using control statements. For\nexample, the following code prints the elements of our main array a:\n\nfor (i in a) {\n    for (j in a[i]) {\n        if (j == 3) {\n            for (k in a[i][j])\n                print a[i][j][k]\n\n\n        } else\n            print a[i][j]\n    }\n}\n\n\nSee Traversing Arrays of Arrays [Walking-Arrays.html] for a user-defined function that \u201cwalks\u201d an arbitrarily dimensioned array of\narrays.\n\nRecall that a reference to an uninitialized array element yields a value of \"\", the null string. This has one important\nimplication when you intend to use a subarray as an argument to a function, as illustrated by the following example:\n\n$ gawk 'BEGIN { split(\"a b c d\", b[1]); print b[1][1] }'\nerror\u2192 gawk: cmd. line:1: fatal: split: second argument is not an array\n\n\nThe way to work around this is to first force b[1] to be an array by creating an arbitrary index:\n\n$ gawk 'BEGIN { b[1][1] = \"\"; split(\"a b c d\", b[1]); print b[1][1] }'\n-| a\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Arrays-Summary.html], Previous: Multidimensional Arrays [Multidimensional.html], Up: Arrays in awk [Arrays.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a53eebd0-f693-4ae7-819f-ee9ca80c55df", "embedding": null, "doc_hash": "626bdeb10d96c6b2a6916ba90bffa5f57a1149b179b716a0a40545fbf31d3895", "extra_info": null, "node_info": {"start": 3463, "end": 5184, "_node_type": "1"}, "relationships": {"1": "8816326a-17b3-433f-8fb0-160506403cf0", "2": "273831e1-3d50-4628-9856-09f69a524017"}}, "__type__": "1"}, "2fcbc527-3641-4fbc-8838-0c31039cb272": {"__data__": {"text": "Next: Functions [Functions.html], Previous: Patterns, Actions, and Variables [Patterns-and-Actions.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8 ARRAYS IN AWK\n\nAn array is a table of values called elements. The elements of an array are distinguished by their indices. Indices may be either\nnumbers or strings.\n\nThis chapter describes how arrays work in awk, how to use array elements, how to scan through every element in an array, and how\nto remove array elements. It also describes how awk simulates multidimensional arrays, as well as some of the less obvious points\nabout array usage. The chapter moves on to discuss gawk\u2019s facility for sorting arrays, and ends with a brief description of gawk\u2019s\nability to support true arrays of arrays.\n\n * The Basics of Arrays [Array-Basics.html]\n * Using Numbers to Subscript Arrays [Numeric-Array-Subscripts.html]\n * Using Uninitialized Variables as Subscripts [Uninitialized-Subscripts.html]\n * The delete Statement [Delete.html]\n * Multidimensional Arrays [Multidimensional.html]\n * Arrays of Arrays [Arrays-of-Arrays.html]\n * Summary [Arrays-Summary.html]", "doc_id": "2fcbc527-3641-4fbc-8838-0c31039cb272", "embedding": null, "doc_hash": "d249ca14dff6d3f1dee92d14a2eaab6987a2ddb4a4057b0db65ae67fffd05827", "extra_info": null, "node_info": {"start": 0, "end": 1295, "_node_type": "1"}, "relationships": {"1": "ce2e6fcd-0576-4df0-b68f-0fa83543aa34"}}, "__type__": "1"}, "968d9ef0-7ae4-4405-ad47-cf49f9f09cfe": {"__data__": {"text": "Next: Reporting Problems with Non-Unix Ports [Maintainers.html], Previous: What To Do If You Think There Is A Performance Issue\n[Performance-bugs.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.4.5 WHERE TO SEND NON-BUG QUESTIONS\n\nIf you have questions related to awk programming, or why gawk behaves a certain way, or any other awk- or gawk-related issue,\nplease do not send it to the bug reporting address.\n\nAs of July, 2021, there is a separate mailing list for this purpose: \u201chelp dash gawk at gnu dot org\u201d. Anything that is not a bug\nreport should be sent to that list.\n\n> NOTE: If you disregard these directions and send non-bug mails to the bug list, you will be told to use the help list. After two\n> such requests you will be silently blacklisted from the bug list.\n\nPlease note: As with the bug list, we ask that you follow the GNU Kind Communication Guidelines\n[https://gnu.org/philosophy/kind-communication.html] in your correspondence on the help list (as well as off of it).\n\nIf you wish to the subscribe to the list, in order to help out others, or to learn from others, here are instructions, courtesy of\nBob Proulx:\n\nSubscribe by email\n\nSend an email message to \u201chelp dash gawk dash request at gnu dot org\u201d with \u201csubscribe\u201d in the body of the message. The subject\ndoes not matter and is not used.\n\nSubscribe by web form\n\nTo use the web interface visit the list information page [https://lists.gnu.org/mailman/listinfo/help-gawk]. Use the subscribe\nform to fill out your email address and submit using the Subscribe button.\n\nReply to the confirmation message\n\nIn both cases then reply to the confirmation message that is sent to your address in reply.\n\nBob mentions that you may also use email for subscribing and unsubscribing. For example:\n\n$ echo help | mailx -s request help-gawk-request@gnu.org\n$ echo subscribe | mailx -s request help-gawk-request@gnu.org\n$ echo unsubscribe | mailx -s request help-gawk-request@gnu.org\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reporting Problems with Non-Unix Ports [Maintainers.html], Previous: What To Do If You Think There Is A Performance Issue\n[Performance-bugs.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "968d9ef0-7ae4-4405-ad47-cf49f9f09cfe", "embedding": null, "doc_hash": "ec70c3295387e1b71c338e2abb17532474bf240c961ccf182dd6b41874b2c863", "extra_info": null, "node_info": {"start": 0, "end": 2528, "_node_type": "1"}, "relationships": {"1": "99e9d8f1-554c-4b27-a9e3-e9d14cdbeaf2"}}, "__type__": "1"}, "a3813c2f-9b60-4c6b-8e01-ab673e93161d": {"__data__": {"text": "Next: Rounding Numbers [Round-Function.html], Previous: Converting Strings to Numbers [Strtonum-Function.html], Up: General\nProgramming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.2 ASSERTIONS\n\nWhen writing large programs, it is often useful to know that a condition or set of conditions is true. Before proceeding with a\nparticular computation, you make a statement about what you believe to be the case. Such a statement is known as an assertion. The\nC language provides an <assert.h> header file and corresponding assert() macro that a programmer can use to make assertions. If an\nassertion fails, the assert() macro arranges to print a diagnostic message describing the condition that should have been true but\nwas not, and then it kills the program. In C, using assert() looks this:\n\n#include <assert.h>\n\nint myfunc(int a, double b)\n{\n     assert(a <= 5 && b >= 17.1);\n     \u2026\n}\n\n\nIf the assertion fails, the program prints a message similar to this:\n\nprog.c:5: assertion failed: a <= 5 && b >= 17.1\n\n\nThe C language makes it possible to turn the condition into a string for use in printing the diagnostic message. This is not\npossible in awk, so this assert() function also requires a string version of the condition that is being tested. Following is the\nfunction:\n\n# assert --- assert that a condition is true. Otherwise, exit.\n\nfunction assert(condition, string)\n{\n    if (! condition) {\n        printf(\"%s:%d: assertion failed: %s\\n\",\n            FILENAME, FNR, string) > \"/dev/stderr\"\n        _assert_exit = 1\n        exit 1\n    }\n}\n\n\n\nEND {\n    if (_assert_exit)\n        exit 1\n}\n\n\nThe assert() function tests the condition parameter. If it is false, it prints a message to standard error, using the string\nparameter to describe the failed condition. It then sets the variable _assert_exit to one and executes the exit statement. The\nexit statement jumps to the END rule. If the END rule finds _assert_exit to be true, it exits immediately.\n\nThe purpose of the test in the END rule is to keep any other END rules from running. When an assertion fails, the program should\nexit immediately. If no assertions fail, then _assert_exit is still false when the END rule is run normally, and the rest of the\nprogram\u2019s END rules execute. For all of this to work correctly, assert.awk must be the first source file read by awk. The function\ncan be used in a program in the following way:\n\nfunction myfunc(a, b)\n{\n     assert(a <= 5 && b >= 17.1, \"a <= 5 && b >= 17.1\")\n     \u2026\n}\n\n\nIf the assertion fails, you see a message similar to the following:\n\nmydata:1357: assertion failed: a <= 5 && b >= 17.1\n\n\nThere is a small problem with this version of assert(). An END rule is automatically added to the program calling assert().\nNormally, if a program consists of just a BEGIN rule, the input files and/or standard input are not read. However, now that the\nprogram has an END rule, awk attempts to read the input data files or standard input (see Startup and Cleanup Actions\n[Using-BEGIN_002fEND.html]), most likely causing the program to hang as it waits for input.\n\nThere is a simple workaround to this: make sure that such a BEGIN rule always ends with an exit statement.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Rounding Numbers [Round-Function.html], Previous: Converting Strings to Numbers [Strtonum-Function.html], Up: General\nProgramming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index", "doc_id": "a3813c2f-9b60-4c6b-8e01-ab673e93161d", "embedding": null, "doc_hash": "f1507c54cf702a8e2ca43038bc875f5486a5298ca94135776bfaaca4bb9acfcf", "extra_info": null, "node_info": {"start": 0, "end": 3689, "_node_type": "1"}, "relationships": {"1": "19e4e299-00f6-4ddf-b55b-49d3c4813143", "3": "fa8fa216-8c84-4754-9a0d-1924575ebe5a"}}, "__type__": "1"}, "fa8fa216-8c84-4754-9a0d-1924575ebe5a": {"__data__": {"text": "\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "fa8fa216-8c84-4754-9a0d-1924575ebe5a", "embedding": null, "doc_hash": "b6a3076ff069d56e788ce6ba29ceb58e88335ad01c38b57cc3815840cbe72c3b", "extra_info": null, "node_info": {"start": 3645, "end": 3703, "_node_type": "1"}, "relationships": {"1": "19e4e299-00f6-4ddf-b55b-49d3c4813143", "2": "a3813c2f-9b60-4c6b-8e01-ab673e93161d"}}, "__type__": "1"}, "8d5fc85b-f697-4571-95ee-51864a44a920": {"__data__": {"text": "Next: Basic Array Example [Array-Example.html], Previous: Referring to an Array Element [Reference-to-Elements.html], Up: The\nBasics of Arrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.1.3 ASSIGNING ARRAY ELEMENTS\n\nArray elements can be assigned values just like awk variables:\n\narray[index-expression] = value\n\n\narray is the name of an array. The expression index-expression is the index of the element of the array that is assigned a value.\nThe expression value is the value to assign to that element of the array.", "doc_id": "8d5fc85b-f697-4571-95ee-51864a44a920", "embedding": null, "doc_hash": "25716a7541bda62d1c162db3a23ae41308bc9670ae9a697f47f10af7519b756a", "extra_info": null, "node_info": {"start": 0, "end": 688, "_node_type": "1"}, "relationships": {"1": "8d0aa7d0-a1ed-4898-b0aa-4dea4ff4dd76"}}, "__type__": "1"}, "2ecc5660-ebce-4aff-9e45-35d257d35653": {"__data__": {"text": "Next: Increment and Decrement Operators [Increment-Ops.html], Previous: String Concatenation [Concatenation.html], Up: Operators:\nDoing Something with Values [All-Operators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.2.3 ASSIGNMENT EXPRESSIONS\n\nAn assignment is an expression that stores a (usually different) value into a variable. For example, let\u2019s assign the value one to\nthe variable z:\n\nz = 1\n\n\nAfter this expression is executed, the variable z has the value one. Whatever old value z had before the assignment is forgotten.\n\nAssignments can also store string values. For example, the following stores the value \"this food is good\" in the variable message:\n\nthing = \"food\"\npredicate = \"good\"\nmessage = \"this \" thing \" is \" predicate\n\n\nThis also illustrates string concatenation. The \u2018=\u2019 sign is called an assignment operator. It is the simplest assignment operator\nbecause the value of the righthand operand is stored unchanged. Most operators (addition, concatenation, and so on) have no effect\nexcept to compute a value. If the value isn\u2019t used, there\u2019s no reason to use the operator. An assignment operator is different; it\ndoes produce a value, but even if you ignore it, the assignment still makes itself felt through the alteration of the variable. We\ncall this a side effect.\n\nThe lefthand operand of an assignment need not be a variable (see Variables [Variables.html]); it can also be a field (see\nChanging the Contents of a Field [Changing-Fields.html]) or an array element (see Arrays in awk [Arrays.html]). These are all\ncalled lvalues, which means they can appear on the lefthand side of an assignment operator. The righthand operand may be any\nexpression; it produces the new value that the assignment stores in the specified variable, field, or array element. (Such values\nare called rvalues.)\n\nIt is important to note that variables do not have permanent types. A variable\u2019s type is simply the type of whatever value was\nlast assigned to it. In the following program fragment, the variable foo has a numeric value at first, and a string value later\non:\n\nfoo = 1\nprint foo\n\n\nfoo = \"bar\"\nprint foo\n\n\nWhen the second assignment gives foo a string value, the fact that it previously had a numeric value is forgotten.\n\nString values that do not begin with a digit have a numeric value of zero. After executing the following code, the value of foo is\nfive:\n\nfoo = \"a string\"\nfoo = foo + 5\n\n\n> NOTE: Using a variable as a number and then later as a string can be confusing and is poor programming style. The previous two\n> examples illustrate how awk works, not how you should write your programs!\n\nAn assignment is an expression, so it has a value\u2014the same value that is assigned. Thus, \u2018z = 1\u2019 is an expression with the value\none. One consequence of this is that you can write multiple assignments together, such as:\n\nx = y = z = 5\n\n\nThis example stores the value five in all three variables (x, y, and z). It does so because the value of \u2018z = 5\u2019, which is five,\nis stored into y and then the value of \u2018y = z = 5\u2019, which is five, is stored into x.\n\nAssignments may be used anywhere an expression is called for. For example, it is valid to write \u2018x != (y = 1)\u2019 to set y to one,\nand then test whether x equals one. But this style tends to make programs hard to read; such nesting of assignments should be\navoided, except perhaps in a one-shot program.\n\nAside from \u2018=\u2019, there are several other assignment operators that do arithmetic with the old value of the variable. For example,\nthe operator \u2018+=\u2019 computes a new value by adding the righthand value to the old value of the variable. Thus, the following\nassignment adds five to the value of", "doc_id": "2ecc5660-ebce-4aff-9e45-35d257d35653", "embedding": null, "doc_hash": "f79f0604d9899511e444967afff22a2973cd9a27e67ca5037465aabcb9f79fb2", "extra_info": null, "node_info": {"start": 0, "end": 3812, "_node_type": "1"}, "relationships": {"1": "5514afae-bac0-40cb-b228-70fcd7cf5416", "3": "42824e57-b69a-4cc8-96f4-26b9ba5cf547"}}, "__type__": "1"}, "42824e57-b69a-4cc8-96f4-26b9ba5cf547": {"__data__": {"text": "value of the variable. Thus, the following\nassignment adds five to the value of foo:\n\nfoo += 5\n\n\nThis is equivalent to the following:\n\nfoo = foo + 5\n\n\nUse whichever makes the meaning of your program clearer.\n\nThere are situations where using \u2018+=\u2019 (or any assignment operator) is not the same as simply repeating the lefthand operand in the\nrighthand expression. For example:\n\n# Thanks to Pat Rankin for this example\nBEGIN  {\n    foo[rand()] += 5\n    for (x in foo)\n       print x, foo[x]\n\n\n\n\n\n\n    bar[rand()] = bar[rand()] + 5\n    for (x in bar)\n       print x, bar[x]\n}\n\n\nThe indices of bar are practically guaranteed to be different, because rand() returns different values each time it is called.\n(Arrays and the rand() function haven\u2019t been covered yet. See Arrays in awk [Arrays.html], and see Numeric Functions\n[Numeric-Functions.html] for more information.) This example illustrates an important fact about assignment operators: the\nlefthand expression is only evaluated once.\n\nIt is up to the implementation as to which expression is evaluated first, the lefthand or the righthand. Consider this example:\n\ni = 1\na[i += 2] = i + 1\n\n\nThe value of a[3] could be either two or four.\n\nTable 6.2 lists the arithmetic assignment operators. In each case, the righthand operand is an expression whose value is converted\nto a number.\n\nOperatorEffect lvalue += incrementAdd increment to the value of lvalue. lvalue -= decrementSubtract decrement from the value of\nlvalue. lvalue *= coefficientMultiply the value of lvalue by coefficient. lvalue /= divisorDivide the value of lvalue by divisor.\nlvalue %= modulusSet lvalue to its remainder by modulus. lvalue ^= powerRaise lvalue to the power power. lvalue **= powerRaise\nlvalue to the power power. (c.e.)\n\nTable 6.2: Arithmetic assignment operators\n\n> NOTE: Only the \u2018^=\u2019 operator is specified by POSIX. For maximum portability, do not use the \u2018**=\u2019 operator.\n\nSyntactic Ambiguities Between \u2018/=\u2019 and Regular Expressions\n\nThere is a syntactic ambiguity between the /= assignment operator and regexp constants whose first character is an \u2018=\u2019. (d.c.)\nThis is most notable in some commercial awk versions. For example:\n\n$ awk /==/ /dev/null\nerror\u2192 awk: syntax error at source line 1\nerror\u2192  context is\nerror\u2192         >>> /= <<<\nerror\u2192 awk: bailing out at source line 1\n\n\nA workaround is:\n\nawk '/[=]=/' /dev/null\n\n\ngawk does not have this problem; BWK awk and mawk also do not.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Increment and Decrement Operators [Increment-Ops.html], Previous: String Concatenation [Concatenation.html], Up: Operators:\nDoing Something with Values [All-Operators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "42824e57-b69a-4cc8-96f4-26b9ba5cf547", "embedding": null, "doc_hash": "7d306833dd1f4984b00a7aeb7d6e97239d1fd3e65cedcd7a342376c5fb90b2bf", "extra_info": null, "node_info": {"start": 3733, "end": 6524, "_node_type": "1"}, "relationships": {"1": "5514afae-bac0-40cb-b228-70fcd7cf5416", "2": "2ecc5660-ebce-4aff-9e45-35d257d35653"}}, "__type__": "1"}, "e0d2c2a9-5c99-43ba-873f-ba7ad0681a5c": {"__data__": {"text": "Previous: Using Variables in a Program [Using-Variables.html], Up: Variables [Variables.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.3.2 ASSIGNING VARIABLES ON THE COMMAND LINE\n\nAny awk variable can be set by including a variable assignment among the arguments on the command line when awk is invoked (see\nOther Command-Line Arguments [Other-Arguments.html]). Such an assignment has the following form:\n\nvariable=text\n\n\nWith it, a variable is set either at the beginning of the awk run or in between input files. When the assignment is preceded with\nthe -v option, as in the following:\n\n-v variable=text\n\n\nthe variable is set at the very beginning, even before the BEGIN rules execute. The -v option and its assignment must precede all\nthe file name arguments, as well as the program text. (See Command-Line Options [Options.html] for more information about the -v\noption.) Otherwise, the variable assignment is performed at a time determined by its position among the input file arguments\u2014after\nthe processing of the preceding input file argument. For example:\n\nawk '{ print $n }' n=4 inventory-shipped n=2 mail-list\n\n\nprints the value of field number n for all input records. Before the first file is read, the command line sets the variable n\nequal to four. This causes the fourth field to be printed in lines from inventory-shipped. After the first file has finished, but\nbefore the second file is started, n is set to two, so that the second field is printed in lines from mail-list:\n\n$ awk '{ print $n }' n=4 inventory-shipped n=2 mail-list\n-| 15\n-| 24\n\u2026\n-| 555-5553\n-| 555-3412\n\u2026\n\n\nCommand-line arguments are made available for explicit examination by the awk program in the ARGV array (see Using ARGC and ARGV\n[ARGC-and-ARGV.html]). awk processes the values of command-line assignments for escape sequences (see Escape Sequences\n[Escape-Sequences.html]). (d.c.)\n\nNormally, variables assigned on the command line (with or without the -v option) are treated as strings. When such variables are\nused as numbers, awk\u2019s normal automatic conversion of strings to numbers takes place, and everything \u201cjust works.\u201d\n\nHowever, gawk supports variables whose types are \u201cregexp\u201d. You can assign variables of this type using the following syntax:\n\ngawk -v 're1=@/foo|bar/' '\u2026' /path/to/file1 're2=@/baz|quux/' /path/to/file2\n\n\nStrongly typed regexps are an advanced feature (see Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]). We mention\nthem here only for completeness.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Using Variables in a Program [Using-Variables.html], Up: Variables [Variables.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "e0d2c2a9-5c99-43ba-873f-ba7ad0681a5c", "embedding": null, "doc_hash": "625d74d8a5da9466ab723fe00477c0c1a503d809d3404609615b036bc6ff60b1", "extra_info": null, "node_info": {"start": 0, "end": 2924, "_node_type": "1"}, "relationships": {"1": "3fee2379-693b-4b3a-984d-3a581bd4038b"}}, "__type__": "1"}, "f4f35fab-630c-45dc-bc24-870d3efe143c": {"__data__": {"text": "Next: Using ARGC and ARGV [ARGC-and-ARGV.html], Previous: Built-in Variables That Control awk [User_002dmodified.html], Up:\nPredefined Variables [Built_002din-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.5.2 BUILT-IN VARIABLES THAT CONVEY INFORMATION\n\nThe following is an alphabetical list of variables that awk sets automatically on certain occasions in order to provide\ninformation to your program.\n\nThe variables that are specific to gawk are marked with a pound sign (\u2018#\u2019). These variables are gawk extensions. In other awk\nimplementations or if gawk is in compatibility mode (see Command-Line Options [Options.html]), they are not special:\n\nARGC, ARGV\n\nThe command-line arguments available to awk programs are stored in an array called ARGV. ARGC is the number of command-line\narguments present. See Other Command-Line Arguments [Other-Arguments.html]. Unlike most awk arrays, ARGV is indexed from 0 to ARGC\n\u2212 1. In the following example:\n\n$ awk 'BEGIN {\n>         for (i = 0; i < ARGC; i++)\n>             print ARGV[i]\n>      }' inventory-shipped mail-list\n-| awk\n-| inventory-shipped\n-| mail-list\n\n\nARGV[0] contains \u2018awk\u2019, ARGV[1] contains \u2018inventory-shipped\u2019, and ARGV[2] contains \u2018mail-list\u2019. The value of ARGC is three, one\nmore than the index of the last element in ARGV, because the elements are numbered from zero.\n\nThe names ARGC and ARGV, as well as the convention of indexing the array from 0 to ARGC \u2212 1, are derived from the C language\u2019s\nmethod of accessing command-line arguments.\n\nThe value of ARGV[0] can vary from system to system. Also, you should note that the program text is not included in ARGV, nor are\nany of awk\u2019s command-line options. See Using ARGC and ARGV [ARGC-and-ARGV.html] for information about how awk uses these\nvariables. (d.c.)\n\nARGIND #\n\nThe index in ARGV of the current file being processed. Every time gawk opens a new data file for processing, it sets ARGIND to the\nindex in ARGV of the file name. When gawk is processing the input files, \u2018FILENAME == ARGV[ARGIND]\u2019 is always true.\n\nThis variable is useful in file processing; it allows you to tell how far along you are in the list of data files as well as to\ndistinguish between successive instances of the same file name on the command line.\n\nWhile you can change the value of ARGIND within your awk program, gawk automatically sets it to a new value when it opens the next\nfile.\n\nENVIRON\n\nAn associative array containing the values of the environment. The array indices are the environment variable names; the elements\nare the values of the particular environment variables. For example, ENVIRON[\"HOME\"] might be /home/arnold.\n\nFor POSIX awk, changing this array does not affect the environment passed on to any programs that awk may spawn via redirection or\nthe system() function.\n\nHowever, beginning with version 4.2, if not in POSIX compatibility mode, gawk does update its own environment when ENVIRON is\nchanged, thus changing the environment seen by programs that it creates. You should therefore be especially careful if you modify\nENVIRON[\"PATH\"], which is the search path for finding executable programs.\n\nThis can also affect the running gawk program, since some of the built-in functions may pay attention to certain environment\nvariables. The most notable instance of this is mktime() (see Time Functions [Time-Functions.html]), which pays attention the\nvalue of the TZ environment variable on many systems.\n\nSome operating systems may not have environment variables. On such systems, the", "doc_id": "f4f35fab-630c-45dc-bc24-870d3efe143c", "embedding": null, "doc_hash": "061d6d14168c7ee1c82e1670c00a41e8ed4629f4a4fbeade7c29ecf8695db7d2", "extra_info": null, "node_info": {"start": 0, "end": 3665, "_node_type": "1"}, "relationships": {"1": "a3b71136-2621-4b3a-ae23-68c55aa7f593", "3": "895da9ca-f653-428c-82ce-b6a13c8050eb"}}, "__type__": "1"}, "895da9ca-f653-428c-82ce-b6a13c8050eb": {"__data__": {"text": "operating systems may not have environment variables. On such systems, the ENVIRON array is empty (except for\nENVIRON[\"AWKPATH\"] and ENVIRON[\"AWKLIBPATH\"]; see The AWKPATH Environment Variable [AWKPATH-Variable.html] and see The AWKLIBPATH\nEnvironment Variable [AWKLIBPATH-Variable.html]).\n\nERRNO #\n\nIf a system error occurs during a redirection for getline, during a read for getline, or during a close() operation, then ERRNO\ncontains a string describing the error.\n\nIn addition, gawk clears ERRNO before opening each command-line input file. This enables checking if the file is readable inside a\nBEGINFILE pattern (see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]).\n\nOtherwise, ERRNO works similarly to the C variable errno. Except for the case just mentioned, gawk never clears it (sets it to\nzero or \"\"). Thus, you should only expect its value to be meaningful when an I/O operation returns a failure value, such as\ngetline returning \u22121. You are, of course, free to clear it yourself before doing an I/O operation.\n\nIf the value of ERRNO corresponds to a system error in the C errno variable, then PROCINFO[\"errno\"] will be set to the value of\nerrno. For non-system errors, PROCINFO[\"errno\"] will be zero.\n\nFILENAME\n\nThe name of the current input file. When no data files are listed on the command line, awk reads from the standard input and\nFILENAME is set to \"-\". FILENAME changes each time a new file is read (see Reading Input Files [Reading-Files.html]). Inside a\nBEGIN rule, the value of FILENAME is \"\", because there are no input files being processed yet.39 (d.c.) Note, though, that using\ngetline (see Explicit Input with getline [Getline.html]) inside a BEGIN rule can give FILENAME a value.\n\nFNR\n\nThe current record number in the current file. awk increments FNR each time it reads a new record (see How Input Is Split into\nRecords [Records.html]). awk resets FNR to zero each time it starts a new input file.\n\nNF\n\nThe number of fields in the current input record. NF is set each time a new record is read, when a new field is created, or when\n$0 changes (see Examining Fields [Fields.html]).\n\nUnlike most of the variables described in this subsection, assigning a value to NF has the potential to affect awk\u2019s internal\nworkings. In particular, assignments to NF can be used to create fields in or remove fields from the current record. See Changing\nthe Contents of a Field [Changing-Fields.html].\n\nFUNCTAB #\n\nAn array whose indices and corresponding values are the names of all the built-in, user-defined, and extension functions in the\nprogram.\n\n> NOTE: Attempting to use the delete statement with the FUNCTAB array causes a fatal error. Any attempt to assign to an element of\n> FUNCTAB also causes a fatal error.\n\nNR\n\nThe number of input records awk has processed since the beginning of the program\u2019s execution (see How Input Is Split into Records\n[Records.html]). awk increments NR each time it reads a new record.\n\nPROCINFO #\n\nThe elements of this array provide access to information about the running awk program. The following elements (listed\nalphabetically) are guaranteed to be available:\n\nPROCINFO[\"argv\"] \u00b6\n\nThe PROCINFO[\"argv\"] array contains all of the command-line arguments (after glob expansion and redirection processing on\nplatforms where that must be done manually by the program) with subscripts ranging from 0 through argc \u2212 1. For example,\nPROCINFO[\"argv\"][0] will contain the name by which gawk was invoked. Here is an example of how this feature may be used:\n\ngawk '\nBEGIN {\n        for (i = 0; i < length(PROCINFO[\"argv\"]); i++)\n              ", "doc_id": "895da9ca-f653-428c-82ce-b6a13c8050eb", "embedding": null, "doc_hash": "b1dce701b8156681942c444a16cb89a54cfae0ebe58af5891497b9db5bf798e1", "extra_info": null, "node_info": {"start": 3602, "end": 7215, "_node_type": "1"}, "relationships": {"1": "a3b71136-2621-4b3a-ae23-68c55aa7f593", "2": "f4f35fab-630c-45dc-bc24-870d3efe143c", "3": "ed8deb87-c04e-4a92-bcab-33ae4657fd33"}}, "__type__": "1"}, "ed8deb87-c04e-4a92-bcab-33ae4657fd33": {"__data__": {"text": "i++)\n                print i, PROCINFO[\"argv\"][i]\n}'\n\n\nPlease note that this differs from the standard ARGV array which does not include command-line arguments that have already been\nprocessed by gawk (see Using ARGC and ARGV [ARGC-and-ARGV.html]).\n\nPROCINFO[\"egid\"]\n\nThe value of the getegid() system call.\n\nPROCINFO[\"errno\"]\n\nThe value of the C errno variable when ERRNO is set to the associated error message.\n\nPROCINFO[\"euid\"] \u00b6\n\nThe value of the geteuid() system call.\n\nPROCINFO[\"FS\"]\n\nThis is \"FS\" if field splitting with FS is in effect, \"FIELDWIDTHS\" if field splitting with FIELDWIDTHS is in effect, \"FPAT\" if\nfield matching with FPAT is in effect, or \"API\" if field splitting is controlled by an API input parser.\n\nPROCINFO[\"gid\"] \u00b6\n\nThe value of the getgid() system call.\n\nPROCINFO[\"identifiers\"] \u00b6\n\nA subarray, indexed by the names of all identifiers used in the text of the awk program. An identifier is simply the name of a\nvariable (be it scalar or array), built-in function, user-defined function, or extension function. For each identifier, the value\nof the element is one of the following:\n\n\"array\"\n\nThe identifier is an array.\n\n\"builtin\"\n\nThe identifier is a built-in function.\n\n\"extension\"\n\nThe identifier is an extension function loaded via @load or -l.\n\n\"scalar\"\n\nThe identifier is a scalar.\n\n\"untyped\"\n\nThe identifier is untyped (could be used as a scalar or an array; gawk doesn\u2019t know yet).\n\n\"user\"\n\nThe identifier is a user-defined function.\n\nThe values indicate what gawk knows about the identifiers after it has finished parsing the program; they are not updated while\nthe program runs.\n\nPROCINFO[\"platform\"] \u00b6\n\nThis element gives a string indicating the platform for which gawk was compiled. The value will be one of the following:\n\n\"mingw\"\n\nMicrosoft Windows, using MinGW.\n\n\"os390\"\n\nOS/390 (also known as z/OS).\n\n\"posix\"\n\nGNU/Linux, Cygwin, macOS, and legacy Unix systems.\n\n\"vms\"\n\nOpenVMS.\n\nPROCINFO[\"pgrpid\"] \u00b6\n\nThe process group ID of the current process.\n\nPROCINFO[\"pid\"] \u00b6\n\nThe process ID of the current process.\n\nPROCINFO[\"pma\"] \u00b6\n\nThe version of the PMA memory allocator compiled into gawk. This element will not be present if the PMA allocator is not available\nfor use. See Preserving Data Between Runs [Persistent-Memory.html].\n\nPROCINFO[\"ppid\"] \u00b6\n\nThe parent process ID of the current process.\n\nPROCINFO[\"strftime\"]\n\nThe default time format string for strftime(). Assigning a new value to this element changes the default. See Time Functions\n[Time-Functions.html].\n\nPROCINFO[\"uid\"]\n\nThe value of the getuid() system call.\n\nPROCINFO[\"version\"] \u00b6\n\nThe version of gawk.\n\nThe following additional elements in the array are available to provide information about the MPFR and GMP libraries if your\nversion of gawk supports arbitrary-precision arithmetic (see Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html]):\n\nPROCINFO[\"gmp_version\"] \u00b6\n\nThe version of the GNU MP library.\n\nPROCINFO[\"mpfr_version\"]\n\nThe version of the GNU MPFR library.\n\nPROCINFO[\"prec_max\"] \u00b6\n\nThe maximum precision supported by MPFR.\n\nPROCINFO[\"prec_min\"] \u00b6\n\nThe minimum precision required by MPFR.\n\nThe following additional elements in the array are available to provide information about the version of the", "doc_id": "ed8deb87-c04e-4a92-bcab-33ae4657fd33", "embedding": null, "doc_hash": "8cc811d425db14f5825341c1e8449ad0bc21e3bb93f1087616bbdc7b23b166f3", "extra_info": null, "node_info": {"start": 7275, "end": 10531, "_node_type": "1"}, "relationships": {"1": "a3b71136-2621-4b3a-ae23-68c55aa7f593", "2": "895da9ca-f653-428c-82ce-b6a13c8050eb", "3": "20b090d9-1f84-43e0-b944-1cc041c163d3"}}, "__type__": "1"}, "20b090d9-1f84-43e0-b944-1cc041c163d3": {"__data__": {"text": "following additional elements in the array are available to provide information about the version of the extension API, if\nyour version of gawk supports dynamic loading of extension functions (see Writing Extensions for gawk [Dynamic-Extensions.html]):\n\nPROCINFO[\"api_major\"] \u00b6\n\nThe major version of the extension API.\n\nPROCINFO[\"api_minor\"]\n\nThe minor version of the extension API.\n\nOn some systems, there may be elements in the array, \"group1\" through \"groupN\" for some N. N is the number of supplementary groups\nthat the process has. Use the in operator to test for these elements (see Referring to an Array Element\n[Reference-to-Elements.html]).\n\nThe following elements allow you to change gawk\u2019s behavior:\n\nPROCINFO[\"NONFATAL\"]\n\nIf this element exists, then I/O errors for all redirections become nonfatal. See Enabling Nonfatal Output [Nonfatal.html].\n\nPROCINFO[\"name\", \"NONFATAL\"]\n\nMake I/O errors for name be nonfatal. See Enabling Nonfatal Output [Nonfatal.html].\n\nPROCINFO[\"command\", \"pty\"]\n\nFor two-way communication to command, use a pseudo-tty instead of setting up a two-way pipe. See Two-Way Communications with\nAnother Process [Two_002dway-I_002fO.html] for more information.\n\nPROCINFO[\"input_name\", \"READ_TIMEOUT\"]\n\nSet a timeout for reading from input redirection input_name. See Reading Input with a Timeout [Read-Timeout.html] for more\ninformation.\n\nPROCINFO[\"input_name\", \"RETRY\"]\n\nIf an I/O error that may be retried occurs when reading data from input_name, and this array entry exists, then getline returns \u22122\ninstead of following the default behavior of returning \u22121 and configuring input_name to return no further data. An I/O error that\nmay be retried is one where errno has the value EAGAIN, EWOULDBLOCK, EINTR, or ETIMEDOUT. This may be useful in conjunction with\nPROCINFO[\"input_name\", \"READ_TIMEOUT\"] or situations where a file descriptor has been configured to behave in a non-blocking\nfashion. See Retrying Reads After Certain Input Errors [Retrying-Input.html] for more information.\n\nPROCINFO[\"sorted_in\"]\n\nIf this element exists in PROCINFO, its value controls the order in which array indices will be processed by \u2018for (indx in array)\u2019\nloops. This is an advanced feature, so we defer the full description until later; see Using Predefined Array Scanning Orders with\ngawk [Controlling-Scanning.html].\n\nRLENGTH\n\nThe length of the substring matched by the match() function (see String-Manipulation Functions [String-Functions.html]). RLENGTH\nis set by invoking the match() function. Its value is the length of the matched string, or \u22121 if no match is found.\n\nRSTART\n\nThe start index in characters of the substring that is matched by the match() function (see String-Manipulation Functions\n[String-Functions.html]). RSTART is set by invoking the match() function. Its value is the position of the string where the\nmatched substring starts, or zero if no match was found.\n\nRT #\n\nThe input text that matched the text denoted by RS, the record separator. It is set every time a record is read.\n\nSYMTAB #\n\nAn array whose indices are the names of all defined global variables and arrays in the program. SYMTAB makes gawk\u2019s symbol table\nvisible to the awk programmer. It is built as gawk parses the program and is complete before the program starts to run.\n\nThe array may be used for indirect access to read or write the value of a variable:\n\nfoo = 5\nSYMTAB[\"foo\"] = 4\nprint foo    # prints 4\n\n\nThe isarray() function (see Getting Type Information [Type-Functions.html]) may be used to test if an element in SYMTAB is an\narray. Also, you may not use", "doc_id": "20b090d9-1f84-43e0-b944-1cc041c163d3", "embedding": null, "doc_hash": "4719eb67895f2277aeff00780b725f0a9b7eb1b4dac3fcd2dcf32f0e53715bf6", "extra_info": null, "node_info": {"start": 10448, "end": 14023, "_node_type": "1"}, "relationships": {"1": "a3b71136-2621-4b3a-ae23-68c55aa7f593", "2": "ed8deb87-c04e-4a92-bcab-33ae4657fd33", "3": "c4486261-f911-449b-b1ec-c21b60850318"}}, "__type__": "1"}, "c4486261-f911-449b-b1ec-c21b60850318": {"__data__": {"text": "test if an element in SYMTAB is an\narray. Also, you may not use the delete statement with the SYMTAB array.\n\nPrior to version 5.0 of gawk, you could use an index for SYMTAB that was not a predefined identifier:\n\nSYMTAB[\"xxx\"] = 5\nprint SYMTAB[\"xxx\"]\n\n\nThis no longer works, instead producing a fatal error, as it led to rampant confusion.\n\nThe SYMTAB array is more interesting than it looks. Andrew Schorr points out that it effectively gives awk data pointers. Consider\nhis example:\n\n# Indirect multiply of any variable by amount, return result\n\nfunction multiply(variable, amount)\n{\n    return SYMTAB[variable] *= amount\n}\n\n\nYou would use it like this:\n\nBEGIN {\n    answer = 10.5\n    multiply(\"answer\", 4)\n    print \"The answer is\", answer\n}\n\n\nWhen run, this produces:\n\n$ gawk -f answer.awk\n-| The answer is 42\n\n\n> NOTE: In order to avoid severe time-travel paradoxes,40 neither FUNCTAB nor SYMTAB is available as an element within the SYMTAB\n> array.\n\nChanging NR and FNR\n\nawk increments NR and FNR each time it reads a record, instead of setting them to the absolute value of the number of records\nread. This means that a program can change these variables and their new values are incremented for each record. (d.c.) The\nfollowing example shows this:\n\n$ echo '1\n> 2\n> 3\n> 4' | awk 'NR == 2 { NR = 17 }\n> { print NR }'\n-| 1\n-| 17\n-| 18\n-| 19\n\n\nBefore FNR was added to the awk language (see Major Changes Between V7 and SVR3.1 [V7_002fSVR3_002e1.html]), many awk programs\nused this feature to track the number of records in a file by resetting NR to zero when FILENAME changed.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(39)\n\nSome early implementations of Unix awk initialized FILENAME to \"-\", even if there were data files to be processed. This behavior\nwas incorrect and should not be relied upon in your programs.\n\n(40)\n\nNot to mention difficult implementation issues.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using ARGC and ARGV [ARGC-and-ARGV.html], Previous: Built-in Variables That Control awk [User_002dmodified.html], Up:\nPredefined Variables [Built_002din-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c4486261-f911-449b-b1ec-c21b60850318", "embedding": null, "doc_hash": "43ff62a18d858405ec4a45f3597424585b82a43424af872476768be117b67595", "extra_info": null, "node_info": {"start": 14049, "end": 16392, "_node_type": "1"}, "relationships": {"1": "a3b71136-2621-4b3a-ae23-68c55aa7f593", "2": "20b090d9-1f84-43e0-b944-1cc041c163d3"}}, "__type__": "1"}, "9d9f3378-a6fc-44bb-b32c-29c1a42371b1": {"__data__": {"text": "Previous: Debugging Concepts [Debugging-Terms.html], Up: Introduction to the gawk Debugger [Debugging.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.1.3 AWK DEBUGGING\n\nDebugging an awk program has some specific aspects that are not shared with programs written in other languages.\n\nFirst of all, the fact that awk programs usually take input line by line from a file or files and operate on those lines using\nspecific rules makes it especially useful to organize viewing the execution of the program in terms of these rules. As we will\nsee, each awk rule is treated almost like a function call, with its own specific block of instructions.\n\nIn addition, because awk is by design a very concise language, it is easy to lose sight of everything that is going on \u201cinside\u201d\neach line of awk code. The debugger provides the opportunity to look at the individual primitive instructions carried out by the\nhigher-level awk commands.95\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(95)\n\nThe \u201cprimitive instructions\u201d are defined by gawk itself; the debugger does not work at the level of machine instructions.", "doc_id": "9d9f3378-a6fc-44bb-b32c-29c1a42371b1", "embedding": null, "doc_hash": "1cff442c88b2f1afbcb2eb1a850bbeac937f3612518fb72f0ee5e629c6479f22", "extra_info": null, "node_info": {"start": 0, "end": 1352, "_node_type": "1"}, "relationships": {"1": "a830f680-5650-4b16-91e8-86ed503b4457"}}, "__type__": "1"}, "75bcdf99-6195-4081-b367-dbea800b182c": {"__data__": {"text": "Next: The Empty Pattern [Empty.html], Previous: The BEGIN and END Special Patterns [BEGIN_002fEND.html], Up: Pattern Elements\n[Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.5 THE BEGINFILE AND ENDFILE SPECIAL PATTERNS\n\nThis section describes a gawk-specific feature.\n\nTwo special kinds of rule, BEGINFILE and ENDFILE, give you \u201chooks\u201d into gawk\u2019s command-line file processing loop. As with the\nBEGIN and END rules (see The BEGIN and END Special Patterns [BEGIN_002fEND.html]), BEGINFILE rules in a program execute in the\norder they are read by gawk. Similarly, all ENDFILE rules also execute in the order they are read.\n\nThe bodies of the BEGINFILE rules execute just before gawk reads the first record from a file. FILENAME is set to the name of the\ncurrent file, and FNR is set to zero.\n\nPrior to version 5.1.1 of gawk, as an accident of the implementation, $0 and the fields retained any previous values they had in\nBEGINFILE rules. Starting with version 5.1.1, $0 and the fields are cleared, since no record has been read yet from the file that\nis about to be processed.\n\nThe BEGINFILE rule provides you the opportunity to accomplish two tasks that would otherwise be difficult or impossible to\nperform:\n\n * You can test if the file is readable. Normally, it is a fatal error if a file named on the command line cannot be opened for\n   reading. However, you can bypass the fatal error and move on to the next file on the command line.\n   \n   You do this by checking if the ERRNO variable is not the empty string; if so, then gawk was not able to open the file. In this\n   case, your program can execute the nextfile statement (see The nextfile Statement [Nextfile-Statement.html]). This causes gawk\n   to skip the file entirely. Otherwise, gawk exits with the usual fatal error.\n\n * If you have written extensions that modify the record handling (by inserting an \u201cinput parser\u201d; see Customized Input Parsers\n   [Input-Parsers.html]), you can invoke them at this point, before gawk has started processing the file. (This is a very advanced\n   feature, currently used only by the gawkextlib project [https://sourceforge.net/projects/gawkextlib].)\n\nThe ENDFILE rule is called when gawk has finished processing the last record in an input file. For the last input file, it will be\ncalled before any END rules. The ENDFILE rule is executed even for empty input files.\n\nNormally, when an error occurs when reading input in the normal input-processing loop, the error is fatal. However, if a BEGINFILE\nrule is present, the error becomes non-fatal, and instead ERRNO is set. This makes it possible to catch and process I/O errors at\nthe level of the awk program.\n\nThe next statement (see The next Statement [Next-Statement.html]) is not allowed inside either a BEGINFILE or an ENDFILE rule. The\nnextfile statement is allowed only inside a BEGINFILE rule, not inside an ENDFILE rule.\n\nThe getline statement (see Explicit Input with getline [Getline.html]) is restricted inside both BEGINFILE and ENDFILE: only\nredirected forms of getline are allowed.\n\nBEGINFILE and ENDFILE are gawk extensions. In most other awk implementations, or if gawk is in compatibility mode (see\nCommand-Line Options [Options.html]), they are not special.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The Empty Pattern [Empty.html], Previous: The BEGIN and END Special Patterns [BEGIN_002fEND.html], Up: Pattern Elements\n[Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "75bcdf99-6195-4081-b367-dbea800b182c", "embedding": null, "doc_hash": "48490fc7bd8e441fb7eab8a1e3704e05e65f39cac06557861ad58428fb72c6c7", "extra_info": null, "node_info": {"start": 0, "end": 3740, "_node_type": "1"}, "relationships": {"1": "ef65b31c-de2e-4e09-a341-30df25e0efbc"}}, "__type__": "1"}, "38be8bd9-5d4d-4f8d-af14-1f00d0f03d1c": {"__data__": {"text": "Next: The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html], Previous: Specifying Record Ranges with Patterns\n[Ranges.html], Up: Pattern Elements [Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.4 THE BEGIN AND END SPECIAL PATTERNS\n\nAll the patterns described so far are for matching input records. The BEGIN and END special patterns are different. They supply\nstartup and cleanup actions for awk programs. BEGIN and END rules must have actions; there is no default action for these rules\nbecause there is no current record when they run. BEGIN and END rules are often referred to as \u201cBEGIN and END blocks\u201d by longtime\nawk programmers.\n\n * Startup and Cleanup Actions [Using-BEGIN_002fEND.html]\n * Input/Output from BEGIN and END Rules [I_002fO-And-BEGIN_002fEND.html]", "doc_id": "38be8bd9-5d4d-4f8d-af14-1f00d0f03d1c", "embedding": null, "doc_hash": "630777430501751ad0fb7fcc415ad54ea0f7660a4e90891cf2d92c4f1ca17c8a", "extra_info": null, "node_info": {"start": 0, "end": 957, "_node_type": "1"}, "relationships": {"1": "2fed5ece-7295-48fe-bffe-44f37282f96c"}}, "__type__": "1"}, "d09d22c6-b901-4304-9977-01d00b4ef557": {"__data__": {"text": "Next: Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html], Previous: Changes Between SVR4 and POSIX awk [POSIX.html], Up: The\nEvolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.4 EXTENSIONS IN BRIAN KERNIGHAN\u2019S AWK\n\nBrian Kernighan has made his version available via his home page (see Other Freely Available awk Implementations\n[Other-Versions.html]).\n\nThis section describes common extensions that originally appeared in his version of awk:\n\n * The \u2018**\u2019 and \u2018**=\u2019 operators (see Arithmetic Operators [Arithmetic-Ops.html] and Assignment Expressions [Assignment-Ops.html])\n * The use of func as an abbreviation for function (see Function Definition Syntax [Definition-Syntax.html])\n * The fflush() built-in function for flushing buffered output (see Input/Output Functions [I_002fO-Functions.html])\n\nSee Common Extensions Summary [Common-Extensions.html] for a full list of the extensions available in his awk.", "doc_id": "d09d22c6-b901-4304-9977-01d00b4ef557", "embedding": null, "doc_hash": "ad6b3b2ff2575c8870ee52814f3fe322e9b6af3e47256d97f0355fb83d25676d", "extra_info": null, "node_info": {"start": 0, "end": 1114, "_node_type": "1"}, "relationships": {"1": "8f035391-6611-4960-ba5e-1f40cb0022a7"}}, "__type__": "1"}, "6e72af55-7377-44c0-a9f0-e408c0ec56b8": {"__data__": {"text": "Next: Glossary [Glossary.html], Previous: Implementation Notes [Notes.html], Up: General Introduction [index.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nAPPENDIX D BASIC PROGRAMMING CONCEPTS\n\nThis appendix attempts to define some of the basic concepts and terms that are used throughout the rest of this Web page. As this\nWeb page is specifically about awk, and not about computer programming in general, the coverage here is by necessity fairly\ncursory and simplistic. (If you need more background, there are many other introductory texts that you should refer to instead.)\n\n * What a Program Does [Basic-High-Level.html]\n * Data Values in a Computer [Basic-Data-Typing.html]", "doc_id": "6e72af55-7377-44c0-a9f0-e408c0ec56b8", "embedding": null, "doc_hash": "ebe74bcf74f5d3c277ac2e8e362441f238f5efb33fd5108d2120c3dbcff633ee", "extra_info": null, "node_info": {"start": 0, "end": 831, "_node_type": "1"}, "relationships": {"1": "8f1abc55-23b6-488f-9275-bd14a327b1cd"}}, "__type__": "1"}, "419035e9-8207-4e24-ac06-47ea936a2196": {"__data__": {"text": "Previous: What a Program Does [Basic-High-Level.html], Up: Basic Programming Concepts [Basic-Concepts.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nD.2 DATA VALUES IN A COMPUTER\n\nIn a program, you keep track of information and values in things called variables. A variable is just a name for a given value,\nsuch as first_name, last_name, address, and so on. awk has several predefined variables, and it has special names to refer to the\ncurrent input record and the fields of the record. You may also group multiple associated values under one name, as an array.\n\nData, particularly in awk, consists of either numeric values, such as 42 or 3.1415927, or string values. String values are\nessentially anything that\u2019s not a number, such as a name. Strings are sometimes referred to as character data, since they store\nthe individual characters that comprise them. Individual variables, as well as numeric and string variables, are referred to as\nscalar values. Groups of values, such as arrays, are not scalars.\n\nA General Description of Computer Arithmetic [Computer-Arithmetic.html], provided a basic introduction to numeric types (integer\nand floating-point) and how they are used in a computer. Please review that information, including a number of caveats that were\npresented.\n\nWhile you are probably used to the idea of a number without a value (i.e., zero), it takes a bit more getting used to the idea of\nzero-length character data. Nevertheless, such a thing exists. It is called the null string. The null string is character data\nthat has no value. In other words, it is empty. It is written in awk programs like this: \"\".\n\nHumans are used to working in decimal; i.e., base 10. In base 10, numbers go from 0 to 9, and then \u201croll over\u201d into the next\ncolumn. (Remember grade school? 42 = 4 x 10 + 2.)\n\nThere are other number bases though. Computers commonly use base 2 or binary, base 8 or octal, and base 16 or hexadecimal. In\nbinary, each column represents two times the value in the column to its right. Each column may contain either a 0 or a 1. Thus,\nbinary 1010 represents (1 x 8) + (0 x 4) + (1 x 2) + (0 x 1), or decimal 10. Octal and hexadecimal are discussed more in Octal and\nHexadecimal Numbers [Nondecimal_002dnumbers.html].\n\nAt the very lowest level, computers store values as groups of binary digits, or bits. Modern computers group bits into groups of\neight, called bytes. Advanced applications sometimes have to manipulate bits directly, and gawk provides functions for doing so.\n\nPrograms are written in programming languages. Hundreds, if not thousands, of programming languages exist. One of the most popular\nis the C programming language. The C language had a very strong influence on the design of the awk language.\n\nThere have been several versions of C. The first is often referred to as \u201cK&R\u201d C, after the initials of Brian Kernighan and Dennis\nRitchie, the authors of the first book on C. (Dennis Ritchie created the language, and Brian Kernighan was one of the creators of\nawk.)\n\nIn the mid-1980s, an effort began to produce an international standard for C. This work culminated in 1989, with the production of\nthe ANSI standard for C. This standard became an ISO standard in 1990. In 1999, a revised ISO C standard was approved and\nreleased. Where it makes sense, POSIX awk is compatible with 1999 ISO C.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: What a Program Does [Basic-High-Level.html], Up: Basic Programming Concepts [Basic-Concepts.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "419035e9-8207-4e24-ac06-47ea936a2196", "embedding": null, "doc_hash": "818a1ff45aae5b5cadad8c05731c510aefc1eaa0cbfe0df5728bfc36b335225e", "extra_info": null, "node_info": {"start": 0, "end": 3790, "_node_type": "1"}, "relationships": {"1": "050a5ab4-8bc6-44f8-bb8e-8c60e1203796"}}, "__type__": "1"}, "b0dcba9d-f6a1-4f3d-a5c2-43e1fd5a3dde": {"__data__": {"text": "Next: Data Values in a Computer [Basic-Data-Typing.html], Up: Basic Programming Concepts [Basic-Concepts.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nD.1 WHAT A PROGRAM DOES\n\nAt the most basic level, the job of a program is to process some input data and produce results. See Figure D.1.\n\nGeneral program flow [gawk_general-program.png]\n\nFigure D.1: General Program Flow\n\nThe \u201cprogram\u201d in the figure can be either a compiled program122 (such as ls), or it may be interpreted. In the latter case, a\nmachine-executable program such as awk reads your program, and then uses the instructions in your program to process the data.\n\nWhen you write a program, it usually consists of the following, very basic set of steps, as shown in Figure D.2:\n\nBasic Program Stages [gawk_process-flow.png]\n\nFigure D.2: Basic Program Steps\n\nInitialization\n\nThese are the things you do before actually starting to process data, such as checking arguments, initializing any data you need\nto work with, and so on. This step corresponds to awk\u2019s BEGIN rule (see The BEGIN and END Special Patterns [BEGIN_002fEND.html]).\n\nIf you were baking a cake, this might consist of laying out all the mixing bowls and the baking pan, and making sure you have all\nthe ingredients that you need.\n\nProcessing\n\nThis is where the actual work is done. Your program reads data, one logical chunk at a time, and processes it as appropriate.\n\nIn most programming languages, you have to manually manage the reading of data, checking to see if there is more each time you\nread a chunk. awk\u2019s pattern-action paradigm (see Getting Started with awk [Getting-Started.html]) handles the mechanics of this\nfor you.\n\nIn baking a cake, the processing corresponds to the actual labor: breaking eggs, mixing the flour, water, and other ingredients,\nand then putting the cake into the oven.\n\nClean Up\n\nOnce you\u2019ve processed all the data, you may have things you need to do before exiting. This step corresponds to awk\u2019s END rule\n(see The BEGIN and END Special Patterns [BEGIN_002fEND.html]).\n\nAfter the cake comes out of the oven, you still have to wrap it in plastic wrap to keep anyone from tasting it, as well as wash\nthe mixing bowls and utensils.\n\nAn algorithm is a detailed set of instructions necessary to accomplish a task, or process data. It is much the same as a recipe\nfor baking a cake. Programs implement algorithms. Often, it is up to you to design the algorithm and implement it, simultaneously.\n\nThe \u201clogical chunks\u201d we talked about previously are called records, similar to the records a company keeps on employees, a school\nkeeps for students, or a doctor keeps for patients. Each record has many component parts, such as first and last names, date of\nbirth, address, and so on. The component parts are referred to as the fields of the record.\n\nThe act of reading data is termed input, and that of generating results, not too surprisingly, is termed output. They are often\nreferred to together as \u201cinput/output,\u201d and even more often, as \u201cI/O\u201d for short. (You will also see \u201cinput\u201d and \u201coutput\u201d used as\nverbs.)\n\nawk manages the reading of data for you, as well as the breaking it up into records and fields. Your program\u2019s job is to tell awk\nwhat to do with the data. You do this by describing patterns in the data to look for, and actions to execute when those patterns\nare seen. This data-driven nature of awk programs usually makes them both easier to write and easier to read.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(122)\n\nCompiled programs are typically written in lower-level languages such as C, C++, or Ada, and then translated, or compiled, into a\nform", "doc_id": "b0dcba9d-f6a1-4f3d-a5c2-43e1fd5a3dde", "embedding": null, "doc_hash": "a52d978488d8329677228cfaf0f45f05c98dc348cff2e479a75c4e4856bd9e6d", "extra_info": null, "node_info": {"start": 0, "end": 3878, "_node_type": "1"}, "relationships": {"1": "af6e9453-95d1-4c3a-bd74-dc7954d48720", "3": "317de460-bdc9-44a2-8b6c-2e86f41c25bc"}}, "__type__": "1"}, "317de460-bdc9-44a2-8b6c-2e86f41c25bc": {"__data__": {"text": "C++, or Ada, and then translated, or compiled, into a\nform that the computer can execute directly.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Data Values in a Computer [Basic-Data-Typing.html], Up: Basic Programming Concepts [Basic-Concepts.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "317de460-bdc9-44a2-8b6c-2e86f41c25bc", "embedding": null, "doc_hash": "a3bd6bc0e61b1275125aad944f21a71f1af76758a28e60a58350705b68f6aea6", "extra_info": null, "node_info": {"start": 3820, "end": 4221, "_node_type": "1"}, "relationships": {"1": "af6e9453-95d1-4c3a-bd74-dc7954d48720", "2": "b0dcba9d-f6a1-4f3d-a5c2-43e1fd5a3dde"}}, "__type__": "1"}, "9777a22c-e388-47f8-b569-2476b42799d5": {"__data__": {"text": "Next: Format-Control Letters [Control-Letters.html], Up: Using printf Statements for Fancier Printing [Printf.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.5.1 INTRODUCTION TO THE PRINTF STATEMENT\n\nA simple printf statement looks like this:\n\nprintf format, item1, item2, \u2026\n\n\nAs for print, the entire list of arguments may optionally be enclosed in parentheses. Here too, the parentheses are necessary if\nany of the item expressions uses the \u2018>\u2019 relational operator; otherwise, it can be confused with an output redirection (see\nRedirecting Output of print and printf [Redirection.html]).\n\nThe difference between printf and print is the format argument. This is an expression whose value is taken as a string; it\nspecifies how to output each of the other arguments. It is called the format string.\n\nThe format string is very similar to that in the ISO C library function printf(). Most of format is text to output verbatim.\nScattered among this text are format specifiers\u2014one per item. Each format specifier says to output the next item in the argument\nlist at that place in the format.\n\nThe printf statement does not automatically append a newline to its output. It outputs only what the format string specifies. So\nif a newline is needed, you must include one in the format string. The output separator variables OFS and ORS have no effect on\nprintf statements. For example:\n\n$ awk 'BEGIN {\n>    ORS = \"\\nOUCH!\\n\"; OFS = \"+\"\n>    msg = \"Don\\47t Panic!\"\n>    printf \"%s\\n\", msg\n> }'\n-| Don't Panic!\n\n\nHere, neither the \u2018+\u2019 nor the \u2018OUCH!\u2019 appears in the output message.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Format-Control Letters [Control-Letters.html], Up: Using printf Statements for Fancier Printing [Printf.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9777a22c-e388-47f8-b569-2476b42799d5", "embedding": null, "doc_hash": "629617b9f89cdd8561481f41f472d0dd15d152c3eb2bf30beecf3a25589a51b3", "extra_info": null, "node_info": {"start": 0, "end": 2031, "_node_type": "1"}, "relationships": {"1": "5878e1b0-ee34-48cf-9495-636d873f6b48"}}, "__type__": "1"}, "191368fe-b562-493d-85a6-fa0a95295ae5": {"__data__": {"text": "Next: Getting Type Information [Type-Functions.html], Previous: Time Functions [Time-Functions.html], Up: Built-in Functions\n[Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.7 BIT-MANIPULATION FUNCTIONS\n\n> I can explain it for you, but I can\u2019t understand it for you.\n\n\u2014 Anonymous\n\nMany languages provide the ability to perform bitwise operations on two integer numbers. In other words, the operation is\nperformed on each successive pair of bits in the operands. Three common operations are bitwise AND, OR, and XOR. The operations\nare described in Table 9.6.\n\n                Bit operator\n          |  AND  |   OR  |  XOR\n          |---+---+---+---+---+---\nOperands  | 0 | 1 | 0 | 1 | 0 | 1\n----------+---+---+---+---+---+---\n    0     | 0   0 | 0   1 | 0   1\n    1     | 0   1 | 1   1 | 1   0\n\n\nTable 9.6: Bitwise operations\n\nAs you can see, the result of an AND operation is 1 only when both bits are 1. The result of an OR operation is 1 if either bit is\n1. The result of an XOR operation is 1 if either bit is 1, but not both. The next operation is the complement; the complement of 1\nis 0 and the complement of 0 is 1. Thus, this operation \u201cflips\u201d all the bits of a given value.\n\nFinally, two other common operations are to shift the bits left or right. For example, if you have a bit string \u201810111001\u2019 and you\nshift it right by three bits, you end up with \u201800010111\u2019.59 If you start over again with \u201810111001\u2019 and shift it left by three\nbits, you end up with \u201811001000\u2019. The following list describes gawk\u2019s built-in functions that implement the bitwise operations.\nOptional parameters are enclosed in square brackets ([ ]):\n\nand(v1, v2 [, \u2026])\n\nReturn the bitwise AND of the arguments. There must be at least two.\n\ncompl(val)\n\nReturn the bitwise complement of val.\n\nlshift(val, count)\n\nReturn the value of val, shifted left by count bits.\n\nor(v1, v2 [, \u2026])\n\nReturn the bitwise OR of the arguments. There must be at least two.\n\nrshift(val, count)\n\nReturn the value of val, shifted right by count bits.\n\nxor(v1, v2 [, \u2026])\n\nReturn the bitwise XOR of the arguments. There must be at least two.\n\n> CAUTION: Beginning with gawk version 4.2, negative operands are not allowed for any of these functions. A negative operand\n> produces a fatal error. See the sidebar \u201cBeware The Smoke and Mirrors!\u201d for more information as to why.\n\nHere is a user-defined function (see User-Defined Functions [User_002ddefined.html]) that illustrates the use of these functions:\n\n# bits2str --- turn an integer into readable ones and zeros\n\nfunction bits2str(bits,        data, mask)\n{\n    if (bits == 0)\n        return \"0\"\n\n    mask = 1\n    for (; bits != 0; bits = rshift(bits, 1))\n        data = (and(bits, mask) ? \"1\" : \"0\") data\n\n    while ((length(data) % 8) != 0)\n        data = \"0\" data\n\n    return data\n}\n\n\n\n\nBEGIN {\n    printf \"123 = %s\\n\", bits2str(123)\n    printf \"0123 = %s\\n\",", "doc_id": "191368fe-b562-493d-85a6-fa0a95295ae5", "embedding": null, "doc_hash": "c9f970c5be3ea7996d177863dfdbc6298d94193358bfd94ace6b008f473d8372", "extra_info": null, "node_info": {"start": 0, "end": 3036, "_node_type": "1"}, "relationships": {"1": "6ef8001b-efbc-42e8-b1f0-542641c8ea6b", "3": "96af74fb-8dfe-49fd-a02e-b9be4d6ecb9a"}}, "__type__": "1"}, "96af74fb-8dfe-49fd-a02e-b9be4d6ecb9a": {"__data__": {"text": "bits2str(123)\n    printf \"0123 = %s\\n\", bits2str(0123)\n    printf \"0x99 = %s\\n\", bits2str(0x99)\n    comp = compl(0x99)\n    printf \"compl(0x99) = %#x = %s\\n\", comp, bits2str(comp)\n    shift = lshift(0x99, 2)\n    printf \"lshift(0x99, 2) = %#x = %s\\n\", shift, bits2str(shift)\n    shift = rshift(0x99, 2)\n    printf \"rshift(0x99, 2) = %#x = %s\\n\", shift, bits2str(shift)\n}\n\n\nThis program produces the following output when run:\n\n$ gawk -f testbits.awk\n-| 123 = 01111011\n-| 0123 = 01010011\n-| 0x99 = 10011001\n-| compl(0x99) = 0x3fffffffffff66 =\n-| 00111111111111111111111111111111111111111111111101100110\n-| lshift(0x99, 2) = 0x264 = 0000001001100100\n-| rshift(0x99, 2) = 0x26 = 00100110\n\n\nThe bits2str() function turns a binary number into a string. Initializing mask to one creates a binary value where the rightmost\nbit is set to one. Using this mask, the function repeatedly checks the rightmost bit. ANDing the mask with the value indicates\nwhether the rightmost bit is one or not. If so, a \"1\" is concatenated onto the front of the string. Otherwise, a \"0\" is added. The\nvalue is then shifted right by one bit and the loop continues until there are no more one bits.\n\nIf the initial value is zero, it returns a simple \"0\". Otherwise, at the end, it pads the value with zeros to represent multiples\nof 8-bit quantities. This is typical in modern computers.\n\nThe main code in the BEGIN rule shows the difference between the decimal and octal values for the same numbers (see Octal and\nHexadecimal Numbers [Nondecimal_002dnumbers.html]), and then demonstrates the results of the compl(), lshift(), and rshift()\nfunctions.\n\nBeware The Smoke and Mirrors!\n\nIt other languages, bitwise operations are performed on integer values, not floating-point values. As a general statement, such\noperations work best when performed on unsigned integers.\n\ngawk attempts to treat the arguments to the bitwise functions as unsigned integers. For this reason, negative arguments produce a\nfatal error.\n\nIn normal operation, for all of these functions, first the double-precision floating-point value is converted to the widest C\nunsigned integer type, then the bitwise operation is performed. If the result cannot be represented exactly as a C double, leading\nnonzero bits are removed one by one until it can be represented exactly. The result is then converted back into a C double.60\n\nHowever, when using arbitrary precision arithmetic with the -M option (see Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html]), the results may differ. This is particularly noticeable with the compl() function:\n\n$ gawk 'BEGIN { print compl(42) }'\n-| 9007199254740949\n$ gawk -M 'BEGIN { print compl(42) }'\n-| -43\n\n\nWhat\u2019s going on becomes clear when printing the results in hexadecimal:\n\n$ gawk 'BEGIN { printf \"%#x\\n\", compl(42) }'\n-| 0x1fffffffffffd5\n$ gawk -M 'BEGIN { printf \"%#x\\n\", compl(42) }'\n-| 0xffffffffffffffd5\n\n\nWhen using the -M option, under the hood, gawk uses GNU MP arbitrary precision integers which have at least 64 bits of precision.\nWhen not using -M, gawk stores integral values in regular double-precision floating point, which only maintain 53 bits of\nprecision. Furthermore, the", "doc_id": "96af74fb-8dfe-49fd-a02e-b9be4d6ecb9a", "embedding": null, "doc_hash": "2f996a9eeffa35974854cdb6ea67b718c46cb5cb7548db3e7b60a129b3dceefc", "extra_info": null, "node_info": {"start": 3005, "end": 6218, "_node_type": "1"}, "relationships": {"1": "6ef8001b-efbc-42e8-b1f0-542641c8ea6b", "2": "191368fe-b562-493d-85a6-fa0a95295ae5", "3": "c431188e-6249-4984-92d2-dd7a757a40b6"}}, "__type__": "1"}, "c431188e-6249-4984-92d2-dd7a757a40b6": {"__data__": {"text": "floating point, which only maintain 53 bits of\nprecision. Furthermore, the GNU MP library treats (or at least seems to treat) the leading bit as a sign bit; thus the result with\n-M in this case is a negative number.\n\nIn short, using gawk for any but the simplest kind of bitwise operations is probably a bad idea; caveat emptor!\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(59)\n\nThis example shows that zeros come in on the left side. For gawk, this is always true, but in some languages, it\u2019s possible to\nhave the left side fill with ones.\n\n(60)\n\nIf you don\u2019t understand this paragraph, the upshot is that gawk can only store a particular range of integer values; numbers\noutside that range are reduced to fit within the range.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Getting Type Information [Type-Functions.html], Previous: Time Functions [Time-Functions.html], Up: Built-in Functions\n[Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c431188e-6249-4984-92d2-dd7a757a40b6", "embedding": null, "doc_hash": "6640069fcb17dfa7bb5a971180d1d555b0abd835a752f8b601c98c8436480522", "extra_info": null, "node_info": {"start": 6176, "end": 7341, "_node_type": "1"}, "relationships": {"1": "6ef8001b-efbc-42e8-b1f0-542641c8ea6b", "2": "96af74fb-8dfe-49fd-a02e-b9be4d6ecb9a"}}, "__type__": "1"}, "62eb39e6-a4ee-4331-9733-638a40dfb8e5": {"__data__": {"text": "Next: Numeric Functions [Numeric-Functions.html], Previous: Calling Built-in Functions [Calling-Built_002din.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.2 GENERATING BOOLEAN VALUES\n\nThis function is specific to gawk. It is not available in compatibility mode (see Command-Line Options [Options.html]):\n\nmkbool(expression) \u00b6\n\nReturn a Boolean-typed value based on the regular Boolean value of expression. Boolean \u201ctrue\u201d values have numeric value one.\nBoolean \u201cfalse\u201d values have numeric zero. This is discussed in more detail in Boolean Typed Values [Boolean-Typed-Values.html].", "doc_id": "62eb39e6-a4ee-4331-9733-638a40dfb8e5", "embedding": null, "doc_hash": "bd29f0e2980e6fc712690004503d2fab332fcb75fbefc4d0d4e41d84c8254a46", "extra_info": null, "node_info": {"start": 0, "end": 779, "_node_type": "1"}, "relationships": {"1": "c302174f-0c08-4786-a76f-ecc13a0340cc"}}, "__type__": "1"}, "aaf9a95a-76be-4876-8100-ee29a29fe231": {"__data__": {"text": "Next: Conditional Expressions [Conditional-Exp.html], Previous: Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html], Up: Truth Values and Conditions [Truth-Values-and-Conditions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.3 BOOLEAN EXPRESSIONS\n\nA Boolean expression is a combination of comparison expressions or matching expressions, using the Boolean operators \u201cor\u201d (\u2018||\u2019),\n\u201cand\u201d (\u2018&&\u2019), and \u201cnot\u201d (\u2018!\u2019), along with parentheses to control nesting. The truth value of the Boolean expression is computed by\ncombining the truth values of the component expressions. Boolean expressions are also referred to as logical expressions. The\nterms are equivalent.\n\nBoolean expressions can be used wherever comparison and matching expressions can be used. They can be used in if, while, do, and\nfor statements (see Control Statements in Actions [Statements.html]). They have numeric values (one if true, zero if false) that\ncome into play if the result of the Boolean expression is stored in a variable or used in arithmetic.\n\nIn addition, every Boolean expression is also a valid pattern, so you can use one as a pattern to control the execution of rules.\nThe Boolean operators are:\n\nboolean1 && boolean2\n\nTrue if both boolean1 and boolean2 are true. For example, the following statement prints the current input record if it contains\nboth \u2018edu\u2019 and \u2018li\u2019:\n\nif ($0 ~ /edu/ && $0 ~ /li/) print\n\n\nThe subexpression boolean2 is evaluated only if boolean1 is true. This can make a difference when boolean2 contains expressions\nthat have side effects. In the case of \u2018$0 ~ /foo/ && ($2 == bar++)\u2019, the variable bar is not incremented if there is no substring\n\u2018foo\u2019 in the record.\n\nboolean1 || boolean2\n\nTrue if at least one of boolean1 or boolean2 is true. For example, the following statement prints all records in the input that\ncontain either \u2018edu\u2019 or \u2018li\u2019:\n\nif ($0 ~ /edu/ || $0 ~ /li/) print\n\n\nThe subexpression boolean2 is evaluated only if boolean1 is false. This can make a difference when boolean2 contains expressions\nthat have side effects. (Thus, this test never really distinguishes records that contain both \u2018edu\u2019 and \u2018li\u2019\u2014as soon as \u2018edu\u2019 is\nmatched, the full test succeeds.)\n\n! boolean\n\nTrue if boolean is false. For example, the following program prints \u2018no home!\u2019 in the unusual event that the HOME environment\nvariable is not defined:\n\nBEGIN { if (! (\"HOME\" in ENVIRON))\n            print \"no home!\" }\n\n\n(The in operator is described in Referring to an Array Element [Reference-to-Elements.html].)\n\nThe \u2018&&\u2019 and \u2018||\u2019 operators are called short-circuit operators because of the way they work. Evaluation of the full expression is\n\u201cshort-circuited\u201d if the result can be determined partway through its evaluation.\n\nStatements that end with \u2018&&\u2019 or \u2018||\u2019 can be continued simply by putting a newline after them. But you cannot put a newline in\nfront of either of these operators without using backslash continuation (see awk Statements Versus Lines\n[Statements_002fLines.html]).\n\nThe actual value of an expression using the \u2018!\u2019 operator is either one or zero, depending upon the truth value of the expression\nit is applied to. The \u2018!\u2019 operator is often useful for changing the sense of a flag variable from false to true and back again.\nFor example, the following program is one way to print lines in between special bracketing lines:\n\n$1 == \"START\"   { interested = ! interested; next }\ninterested      { print", "doc_id": "aaf9a95a-76be-4876-8100-ee29a29fe231", "embedding": null, "doc_hash": "f5fbd63d901f7c9639ba7d7352eb4ddc88c772213edb6f6ff955b7b284c8868f", "extra_info": null, "node_info": {"start": 0, "end": 3587, "_node_type": "1"}, "relationships": {"1": "ee195179-8562-4f6d-91f2-58b5c1b95f25", "3": "1f1f5a4b-feef-4683-8a98-d4ca039a940b"}}, "__type__": "1"}, "1f1f5a4b-feef-4683-8a98-d4ca039a940b": {"__data__": {"text": "  { interested = ! interested; next }\ninterested      { print }\n$1 == \"END\"     { interested = ! interested; next }\n\n\nThe variable interested, as with all awk variables, starts out initialized to zero, which is also false. When a line is seen whose\nfirst field is \u2018START\u2019, the value of interested is toggled to true, using \u2018!\u2019. The next rule prints lines as long as interested is\ntrue. When a line is seen whose first field is \u2018END\u2019, interested is toggled back to false.37\n\nMost commonly, the \u2018!\u2019 operator is used in the conditions of if and while statements, where it often makes more sense to phrase\nthe logic in the negative:\n\nif (! some condition || some other condition) {\n    \u2026 do whatever processing \u2026\n}\n\n\n> NOTE: The next statement is discussed in The next Statement [Next-Statement.html]. next tells awk to skip the rest of the rules,\n> get the next record, and start processing the rules over again at the top. The reason it\u2019s there is to avoid printing the\n> bracketing \u2018START\u2019 and \u2018END\u2019 lines.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(37)\n\nThis program has a bug; it prints lines starting with \u2018END\u2019. How would you fix it?\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Conditional Expressions [Conditional-Exp.html], Previous: Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html], Up: Truth Values and Conditions [Truth-Values-and-Conditions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "1f1f5a4b-feef-4683-8a98-d4ca039a940b", "embedding": null, "doc_hash": "9c9f7421a3d26f83756991d6bad0abcd1a84feba1db6c12e4f5f4ae923697aa2", "extra_info": null, "node_info": {"start": 3526, "end": 5160, "_node_type": "1"}, "relationships": {"1": "ee195179-8562-4f6d-91f2-58b5c1b95f25", "2": "aaf9a95a-76be-4876-8100-ee29a29fe231"}}, "__type__": "1"}, "534abb3d-583a-4929-afd7-a17cb90fcda3": {"__data__": {"text": "Next: Controlling Array Traversal and Array Sorting [Array-Sorting.html], Previous: Allowing Nondecimal Input Data\n[Nondecimal-Data.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.2 BOOLEAN TYPED VALUES\n\nScalar values in awk are either numbers or strings. gawk also supports values of type regexp (see Strongly Typed Regexp Constants\n[Strong-Regexp-Constants.html]).\n\nAs described in True and False in awk [Truth-Values.html], Boolean values in awk don\u2019t have a separate type: a value counts as\n\u201ctrue\u201d if it is nonzero or non-null, and as \u201cfalse\u201d otherwise.\n\nWhen interchanging data with languages that do have a real Boolean type, using a standard format such as JSON or XML, the lack of\na true Boolean type in awk is problematic. (See, for example, the json extension provided by the gawkextlib project\n[https://sourceforge.net/projects/gawkextlib].)\n\nIt\u2019s easy to import Boolean data into awk, but then the fact that it was originally Boolean is lost. Exporting data is even\nharder; there\u2019s no way to indicate that a value is really Boolean.\n\nTo solve this problem, gawk provides a function named mkbool(). It takes one argument, which is any awk expression, and it returns\na value of Boolean type.\n\nThe returned values are normal awk numeric values, with values of either one or zero, depending upon the truth value of the\noriginal expression passed in the call to mkbool().\n\nThe typeof() function (see Getting Type Information [Type-Functions.html]) returns \"number|bool\" for these values.\n\nThus Boolean-typed values are numbers as far as gawk is concerned, except that extension code can treat them as Booleans if\ndesired.\n\nWhile it would have been possible to add two new built-in variables of Boolean type named TRUE and FALSE, doing so would\nundoubtedly have broken many existing awk programs. Instead, having a \u201cgenerator\u201d function that creates Boolean values gives\nflexibility, without breaking as much existing code.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Controlling Array Traversal and Array Sorting [Array-Sorting.html], Previous: Allowing Nondecimal Input Data\n[Nondecimal-Data.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "534abb3d-583a-4929-afd7-a17cb90fcda3", "embedding": null, "doc_hash": "7abec6e73fc2bf6c7c21552eac1309605bb17e084561ed5dbc038a9a255b21b5", "extra_info": null, "node_info": {"start": 0, "end": 2524, "_node_type": "1"}, "relationships": {"1": "919427db-4195-44c5-871c-88d7f6a13989"}}, "__type__": "1"}, "dac57474-b516-46f7-8418-5b80dc406ca3": {"__data__": {"text": "Next: How Much Text Matches? [Leftmost-Longest.html], Previous: Regular Expression Operators [Regexp-Operators.html], Up: Regular\nExpressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.4 USING BRACKET EXPRESSIONS\n\nAs mentioned earlier, a bracket expression matches any character among those listed between the opening and closing square\nbrackets.\n\nWithin a bracket expression, a range expression consists of two characters separated by a hyphen. It matches any single character\nthat sorts between the two characters, based upon the system\u2019s native character set. For example, \u2018[0-9]\u2019 is equivalent to\n\u2018[0123456789]\u2019. (See Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html] for an explanation of how the POSIX\nstandard and gawk have changed over time. This is mainly of historical interest.)\n\nWith the increasing popularity of the Unicode character standard [http://www.unicode.org], there is an additional wrinkle to\nconsider. Octal and hexadecimal escape sequences inside bracket expressions are taken to represent only single-byte characters\n(characters whose values fit within the range 0\u2013256). To match a range of characters where the endpoints of the range are larger\nthan 256, enter the multibyte encodings of the characters directly.\n\nTo include one of the characters \u2018\\\u2019, \u2018]\u2019, \u2018-\u2019, or \u2018^\u2019 in a bracket expression, put a \u2018\\\u2019 in front of it. For example:\n\n[d\\]]\n\n\nmatches either \u2018d\u2019 or \u2018]\u2019. Additionally, if you place \u2018]\u2019 right after the opening \u2018[\u2019, the closing bracket is treated as one of\nthe characters to be matched.\n\nThe treatment of \u2018\\\u2019 in bracket expressions is compatible with other awk implementations and is also mandated by POSIX. The\nregular expressions in awk are a superset of the POSIX specification for Extended Regular Expressions (EREs). POSIX EREs are based\non the regular expressions accepted by the traditional egrep utility.\n\nCharacter classes are a feature introduced in the POSIX standard. A character class is a special notation for describing lists of\ncharacters that have a specific attribute, but the actual characters can vary from country to country and/or from character set to\ncharacter set. For example, the notion of what is an alphabetic character differs between the United States and France.\n\nA character class is only valid in a regexp inside the brackets of a bracket expression. Character classes consist of \u2018[:\u2019, a\nkeyword denoting the class, and \u2018:]\u2019. Table 3.1 lists the character classes defined by the POSIX standard.\n\nClassMeaning [:alnum:]Alphanumeric characters [:alpha:]Alphabetic characters [:blank:]Space and TAB characters [:cntrl:]Control\ncharacters [:digit:]Numeric characters [:graph:]Characters that are both printable and visible (a space is printable but not\nvisible, whereas an \u2018a\u2019 is both) [:lower:]Lowercase alphabetic characters [:print:]Printable characters (characters that are not\ncontrol characters) [:punct:]Punctuation characters (characters that are not letters, digits, control characters, or space\ncharacters) [:space:]Space characters (these are: space, TAB, newline, carriage return, formfeed and vertical tab)\n[:upper:]Uppercase alphabetic characters [:xdigit:]Characters that are hexadecimal digits\n\nTable 3.1: POSIX character classes\n\nFor example, before the POSIX standard, you had to write /[A-Za-z0-9]/ to match alphanumeric characters. If your character set had\nother alphabetic characters in it, this would not match them. With the POSIX character classes, you can write /[[:alnum:]]/ to\nmatch the alphabetic and numeric characters in your character set.\n\nSome utilities that match regular expressions provide a nonstandard", "doc_id": "dac57474-b516-46f7-8418-5b80dc406ca3", "embedding": null, "doc_hash": "38f98e101062fa2dc8feed6f031782e286e48407c680160dac6d361d36c6c403", "extra_info": null, "node_info": {"start": 0, "end": 3796, "_node_type": "1"}, "relationships": {"1": "5426871d-a8f7-40d9-aac5-8a16d057b4fb", "3": "fa6ffb69-d9aa-4389-b3b7-081bb07e1e36"}}, "__type__": "1"}, "fa6ffb69-d9aa-4389-b3b7-081bb07e1e36": {"__data__": {"text": "in your character set.\n\nSome utilities that match regular expressions provide a nonstandard \u2018[:ascii:]\u2019 character class; awk does not. However, you can\nsimulate such a construct using \u2018[\\x00-\\x7F]\u2019. This matches all values numerically between zero and 127, which is the defined\nrange of the ASCII character set. Use a complemented character list (\u2018[^\\x00-\\x7F]\u2019) to match any single-byte characters that are\nnot in the ASCII range.\n\n> NOTE: Some older versions of Unix awk treat [:blank:] like [:space:], incorrectly matching more characters than they should.\n> Caveat Emptor.\n\nTwo additional special sequences can appear in bracket expressions. These apply to non-ASCII character sets, which can have single\nsymbols (called collating elements) that are represented with more than one character. They can also have several characters that\nare equivalent for collating, or sorting, purposes. (For example, in French, a plain \u201ce\u201d and a grave-accented \u201c\u00e8\u201d are equivalent.)\nThese sequences are:\n\nCollating symbols\n\nMulticharacter collating elements enclosed between \u2018[.\u2019 and \u2018.]\u2019. For example, if \u2018ch\u2019 is a collating element, then \u2018[[.ch.]]\u2019 is\na regexp that matches this collating element, whereas \u2018[ch]\u2019 is a regexp that matches either \u2018c\u2019 or \u2018h\u2019.\n\nEquivalence classes\n\nLocale-specific names for a list of characters that are equal. The name is enclosed between \u2018[=\u2019 and \u2018=]\u2019. For example, the name\n\u2018e\u2019 might be used to represent all of \u201ce,\u201d \u201c\u00ea,\u201d \u201c\u00e8,\u201d and \u201c\u00e9.\u201d In this case, \u2018[[=e=]]\u2019 is a regexp that matches any of \u2018e\u2019, \u2018\u00ea\u2019,\n\u2018\u00e9\u2019, or \u2018\u00e8\u2019.\n\nThese features are very valuable in non-English-speaking locales.\n\n> CAUTION: The library functions that gawk uses for regular expression matching currently recognize only POSIX character classes;\n> they do not recognize collating symbols or equivalence classes.\n\nInside a bracket expression, an opening bracket (\u2018[\u2019) that does not start a character class, collating element or equivalence\nclass is taken literally. This is also true of \u2018.\u2019 and \u2018*\u2019.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: How Much Text Matches? [Leftmost-Longest.html], Previous: Regular Expression Operators [Regexp-Operators.html], Up: Regular\nExpressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "fa6ffb69-d9aa-4389-b3b7-081bb07e1e36", "embedding": null, "doc_hash": "a4214636f16c586a5af860fde39d20b2356901d3b31d964af59c928157d589eb", "extra_info": null, "node_info": {"start": 3705, "end": 6041, "_node_type": "1"}, "relationships": {"1": "5426871d-a8f7-40d9-aac5-8a16d057b4fb", "2": "dac57474-b516-46f7-8418-5b80dc406ca3"}}, "__type__": "1"}, "7b434ed9-6785-4dcb-8535-f94106085f72": {"__data__": {"text": "Next: The continue Statement [Continue-Statement.html], Previous: The switch Statement [Switch-Statement.html], Up: Control\nStatements in Actions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.6 THE BREAK STATEMENT\n\nThe break statement jumps out of the innermost for, while, or do loop that encloses it. The following example finds the smallest\ndivisor of any integer, and also identifies prime numbers:\n\n# find smallest divisor of num\n{\n    num = $1\n    for (divisor = 2; divisor * divisor <= num; divisor++) {\n        if (num % divisor == 0)\n            break\n    }\n\n\n    if (num % divisor == 0)\n        printf \"Smallest divisor of %d is %d\\n\", num, divisor\n    else\n        printf \"%d is prime\\n\", num\n}\n\n\nWhen the remainder is zero in the first if statement, awk immediately breaks out of the containing for loop. This means that awk\nproceeds immediately to the statement following the loop and continues processing. (This is very different from the exit\nstatement, which stops the entire awk program. See The exit Statement [Exit-Statement.html].)\n\nThe following program illustrates how the condition of a for or while statement could be replaced with a break inside an if:\n\n# find smallest divisor of num\n{\n    num = $1\n    for (divisor = 2; ; divisor++) {\n        if (num % divisor == 0) {\n            printf \"Smallest divisor of %d is %d\\n\", num, divisor\n            break\n        }\n        if (divisor * divisor > num) {\n            printf \"%d is prime\\n\", num\n            break\n        }\n    }\n}\n\n\nThe break statement is also used to break out of the switch statement. This is discussed in The switch Statement\n[Switch-Statement.html].\n\nThe break statement has no meaning when used outside the body of a loop or switch. However, although it was never documented,\nhistorical implementations of awk treated the break statement outside of a loop as if it were a next statement (see The next\nStatement [Next-Statement.html]). (d.c.) Recent versions of BWK awk no longer allow this usage, nor does gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The continue Statement [Continue-Statement.html], Previous: The switch Statement [Switch-Statement.html], Up: Control\nStatements in Actions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7b434ed9-6785-4dcb-8535-f94106085f72", "embedding": null, "doc_hash": "e7e3e8520865f2daabaf74129bb989bc60bc396c40362e377d74eb54415fac34", "extra_info": null, "node_info": {"start": 0, "end": 2531, "_node_type": "1"}, "relationships": {"1": "7a171734-75d0-4028-bc67-7d8171de8b87"}}, "__type__": "1"}, "d90f37fa-fc73-4f3c-9510-119d2c314542": {"__data__": {"text": "Next: Control of Execution [Debugger-Execution-Control.html], Up: Main Debugger Commands [List-of-Debugger-Commands.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.3.1 CONTROL OF BREAKPOINTS\n\nAs we saw earlier, the first thing you probably want to do in a debugging session is to get your breakpoints set up, because your\nprogram will otherwise just run as if it was not under the debugger. The commands for controlling breakpoints are:\n\nbreak [[filename:]n | function] [\"expression\"] b [[filename:]n | function] [\"expression\"]\n\nWithout any argument, set a breakpoint at the next instruction to be executed in the selected stack frame. Arguments can be one of\nthe following:\n\nn\n\nSet a breakpoint at line number n in the current source file.\n\nfilename:n\n\nSet a breakpoint at line number n in source file filename.\n\nfunction\n\nSet a breakpoint at entry to (the first instruction of) function function.\n\nEach breakpoint is assigned a number that can be used to delete it from the breakpoint list using the delete command.\n\nWith a breakpoint, you may also supply a condition. This is an awk expression (enclosed in double quotes) that the debugger\nevaluates whenever the breakpoint is reached. If the condition is true, then the debugger stops execution and prompts for a\ncommand. Otherwise, it continues executing the program.\n\nclear [[filename:]n | function]\n\nWithout any argument, delete any breakpoint at the next instruction to be executed in the selected stack frame. If the program\nstops at a breakpoint, this deletes that breakpoint so that the program does not stop at that location again. Arguments can be one\nof the following:\n\nn\n\nDelete breakpoint(s) set at line number n in the current source file.\n\nfilename:n\n\nDelete breakpoint(s) set at line number n in source file filename.\n\nfunction\n\nDelete breakpoint(s) set at entry to function function.\n\ncondition n \"expression\"\n\nAdd a condition to existing breakpoint or watchpoint n. The condition is an awk expression enclosed in double quotes that the\ndebugger evaluates whenever the breakpoint or watchpoint is reached. If the condition is true, then the debugger stops execution\nand prompts for a command. Otherwise, the debugger continues executing the program. If the condition expression is not specified,\nany existing condition is removed (i.e., the breakpoint or watchpoint is made unconditional).\n\ndelete [n1 n2 \u2026] [n\u2013m] d [n1 n2 \u2026] [n\u2013m]\n\nDelete specified breakpoints or a range of breakpoints. Delete all defined breakpoints if no argument is supplied.\n\ndisable [n1 n2 \u2026 | n\u2013m]\n\nDisable specified breakpoints or a range of breakpoints. Without any argument, disable all breakpoints.\n\nenable [del | once] [n1 n2 \u2026] [n\u2013m] e [del | once] [n1 n2 \u2026] [n\u2013m]\n\nEnable specified breakpoints or a range of breakpoints. Without any argument, enable all breakpoints. Optionally, you can specify\nhow to enable the breakpoints:\n\ndel\n\nEnable the breakpoints temporarily, then delete each one when the program stops at it.\n\nonce\n\nEnable the breakpoints temporarily, then disable each one when the program stops at it.\n\nignore n count\n\nIgnore breakpoint number n the next count times it is hit.\n\ntbreak [[filename:]n | function] t [[filename:]n | function]\n\nSet a temporary breakpoint (enabled for only one stop). The arguments are the same as for break.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Control of Execution [Debugger-Execution-Control.html], Up: Main Debugger Commands [List-of-Debugger-Commands.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d90f37fa-fc73-4f3c-9510-119d2c314542", "embedding": null, "doc_hash": "6a91dca572337fc0c7e3c0517609a4fde4cb1f8eb341a147d57058401458e647", "extra_info": null, "node_info": {"start": 0, "end": 3768, "_node_type": "1"}, "relationships": {"1": "c5b83618-c9ef-4693-81a8-312cf86ce1b4"}}, "__type__": "1"}, "09c8943a-c02c-4746-8da0-fb3a3efc5693": {"__data__": {"text": "Next: Please Don\u2019t Post Bug Reports to USENET [Usenet.html], Previous: Defining What Is and What Is Not A Bug\n[Bug-definition.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.4.2 SUBMITTING BUG REPORTS\n\nBefore reporting a bug, make sure you have really found a genuine bug.\n\nHere are the steps for submitting a bug report. Following them will make both your life and the lives of the maintainers much\neasier.\n\n 1. Make sure that what you want to report is appropriate. See Defining What Is and What Is Not A Bug [Bug-definition.html]. If\n    it\u2019s not, you are wasting your time and ours.\n 2. Verify that you have the latest version of gawk. Many bugs (usually subtle ones) are fixed at each release, and if yours is\n    out-of-date, the problem may already have been solved.\n 3. Please see if setting the environment variable LC_ALL to LC_ALL=C causes things to behave as you expect. If so, it\u2019s a locale\n    issue, and may or may not really be a bug.\n 4. Carefully reread the documentation and see if it says you can do what you\u2019re trying to do. If it\u2019s not clear whether you\n    should be able to do something or not, report that too; it\u2019s a bug in the documentation!\n 5. Before reporting a bug or trying to fix it yourself, try to isolate it to the smallest possible awk program and input data\n    file that reproduce the problem.\n 6. Use the gawkbug program to submit the bug report. This program sets up a bug report template and opens it in your editor. You\n    then need to edit it appropriately to include:\n    * The program and data file.\n    * The exact results gawk gave you. Also say what you expected to occur; this helps us decide whether the problem is really in\n      the documentation.\n    * A fix if you have one.\n 7. Do not send screenshots. Instead, use copy/paste to send text, or send files.\n 8. Please be sure to send all mail in plain text, not (or not exclusively) in HTML.\n 9. All email must be in English. This is the only language understood in common by all the maintainers.\n\nThe gawkbug program sends email to \u201cbug dash gawk at gnu dot org\u201d.\n\nThe gawk maintainers subscribe to this address, and thus they will receive your bug report. Do not send mail to the maintainers\ndirectly; the bug reporting address is preferred because the email list is archived at the GNU Project.\n\nIf you are using OpenVMS or the MinGW build of gawk, the gawkbug script won\u2019t be available. Please send the previously listed\ninformation directly in an email to the bug list. Please send any test program or data files as attachments, instead of inline in\nthe email, to avoid their being mangled by various mail systems.\n\n> NOTE: Many distributions of GNU/Linux and the various BSD-based operating systems have their own bug reporting systems. If you\n> report a bug using your distribution\u2019s bug reporting system, you should also send a copy to \u201cbug dash gawk at gnu dot org\u201d.\n> \n> This is for two reasons. First, although some distributions forward bug reports \u201cupstream\u201d to the GNU mailing list, many don\u2019t,\n> so there is a good chance that the gawk maintainers won\u2019t even see the bug report! Second, mail to the GNU list is archived, and\n> having everything at the GNU Project keeps things self-contained and not dependent on other organizations.\n\nPlease note: We ask that you follow the GNU Kind Communication Guidelines [https://gnu.org/philosophy/kind-communication.html] in\nyour correspondence on the list (as well as off of it).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Please Don\u2019t Post Bug Reports to USENET [Usenet.html], Previous: Defining What Is", "doc_id": "09c8943a-c02c-4746-8da0-fb3a3efc5693", "embedding": null, "doc_hash": "4290e543fd18562c3fe242a9097f594d776ca63286a9eff8ac75c11bb9f14a0d", "extra_info": null, "node_info": {"start": 0, "end": 3859, "_node_type": "1"}, "relationships": {"1": "092dc66d-977b-4035-b1b9-db64e44125b2", "3": "63e49e4c-5813-4c53-9878-aa0c5b80fdcd"}}, "__type__": "1"}, "63e49e4c-5813-4c53-9878-aa0c5b80fdcd": {"__data__": {"text": "Post Bug Reports to USENET [Usenet.html], Previous: Defining What Is and What Is Not A Bug\n[Bug-definition.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "63e49e4c-5813-4c53-9878-aa0c5b80fdcd", "embedding": null, "doc_hash": "b807594224481aacaefc811dc980396fe34ea51b80ffc1e2a1c3126ff4143c1a", "extra_info": null, "node_info": {"start": 3791, "end": 4007, "_node_type": "1"}, "relationships": {"1": "092dc66d-977b-4035-b1b9-db64e44125b2", "2": "09c8943a-c02c-4746-8da0-fb3a3efc5693"}}, "__type__": "1"}, "15027205-fd03-46af-b4de-dbe28c269e56": {"__data__": {"text": "Next: Submitting Bug Reports [Bug-address.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.4.1 DEFINING WHAT IS AND WHAT IS NOT A BUG\n\nBefore talking about reporting bugs, let\u2019s define what is a bug, and what is not.\n\nA bug is:\n\n * When gawk behaves differently from what\u2019s described in the POSIX standard, and that difference is not mentioned in this Web\n   page as being done on purpose.\n * When gawk behaves differently from what\u2019s described in this Web page.\n * When gawk behaves differently from other awk implementations in particular circumstances, and that behavior cannot be\n   attributed to an additional feature in gawk.\n * Something that is obviously wrong, such as a core dump.\n * When this Web page is unclear or ambiguous about a particular feature\u2019s behavior.\n\nThe following things are not bugs, and should not be reported to the bug mailing list. You can ask about them on the \u201chelp\u201d\nmailing list (see Where To Send Non-bug Questions [Asking-for-help.html]), but don\u2019t be surprised if you get an answer of the form\n\u201cthat\u2019s how gawk behaves and it isn\u2019t going to change.\u201d Here\u2019s the list:\n\n * Missing features, for any definition of feature. For example, additional built-in arithmetic functions, or additional ways to\n   split fields or records, or anything else.\n   \n   The number of features that gawk does not have is by definition infinite. It cannot be all things to all people. In short, just\n   because gawk doesn\u2019t do what you think it should, it\u2019s not necessarily a bug.\n\n * Behaviors that are defined by the POSIX standard and/or for historical compatibility with Unix awk. Even if you happen to\n   dislike those behaviors, they\u2019re not going to change: changing them would break millions of existing awk programs.\n * Behaviors that differ from how it\u2019s done in other languages. awk and gawk stand on their own and do not have to follow the\n   crowd. This is particularly true when the requested behavior change would break backwards compatibility.\n   \n   This applies also to differences in behavior between gawk and other language compilers and interpreters, such as wishes for\n   more detailed descriptions of what the problem is when a syntax error is encountered.\n\n * Documentation issues of the form \u201cthe manual doesn\u2019t tell me how to do XYZ.\u201d The manual is not a cookbook to solve every little\n   problem you may have. Its purpose is to teach you how to solve your problems on your own.\n * General questions and discussion about awk programming or why gawk behaves the way it does. For that use the \u201chelp\u201d mailing\n   list: see Where To Send Non-bug Questions [Asking-for-help.html].\n\nFor more information, see Fork My Code, Please!\u2014An Open Letter To Those of You Who Are Unhappy\n[http://www.skeeve.com/fork-my-code.html], by Arnold Robbins and Chet Ramey.\n\nA Note About Fuzzers\n\nIn recent years, people have been running \u201cfuzzers\u201d to generate invalid awk programs in order to find and report (so-called) bugs\nin gawk.\n\nIn general, such reports are not of much practical use. The programs they create are not realistic and the bugs found are\ngenerally from some kind of memory corruption that is fatal anyway.\n\nSo, if you want to run a fuzzer against gawk and report the results, you may do so, but be aware that such reports don\u2019t carry the\nsame weight as reports of real bugs do.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Submitting Bug Reports [Bug-address.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "15027205-fd03-46af-b4de-dbe28c269e56", "embedding": null, "doc_hash": "dc542cb99b721c16569126d856e9c38ac3274242f6904075231bcc707276d19a", "extra_info": null, "node_info": {"start": 0, "end": 3794, "_node_type": "1"}, "relationships": {"1": "fe58345f-d05a-4bd0-81da-324defa1df84"}}, "__type__": "1"}, "05d11658-5a42-4388-92d3-18c156019ab8": {"__data__": {"text": "Next: Other Freely Available awk Implementations [Other-Versions.html], Previous: Installation on Other Operating Systems\n[Non_002dUnix-Installation.html], Up: Installing gawk [Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nB.4 REPORTING PROBLEMS AND BUGS\n\n> There is nothing more dangerous than a bored archaeologist.\n\n\u2014 Douglas Adams, The Hitchhiker\u2019s Guide to the Galaxy\n\nIf you have problems with gawk or think that you have found a bug, report it to the developers; we cannot promise to do anything,\nbut we might well want to fix it.\n\n * Defining What Is and What Is Not A Bug [Bug-definition.html]\n * Submitting Bug Reports [Bug-address.html]\n * Please Don\u2019t Post Bug Reports to USENET [Usenet.html]\n * What To Do If You Think There Is A Performance Issue [Performance-bugs.html]\n * Where To Send Non-bug Questions [Asking-for-help.html]\n * Reporting Problems with Non-Unix Ports [Maintainers.html]", "doc_id": "05d11658-5a42-4388-92d3-18c156019ab8", "embedding": null, "doc_hash": "b0fcf18ab9be799162f76763f40fce62fc4f5a6025fe9de4126286800ff4c4f6", "extra_info": null, "node_info": {"start": 0, "end": 1069, "_node_type": "1"}, "relationships": {"1": "4d9fbe00-68d9-4197-859d-a8fbaa4e7ae7"}}, "__type__": "1"}, "837247a2-e9a9-4bf3-8a59-5e3b8e43c31a": {"__data__": {"text": "Previous: Compiling from Git [Compiling-from-Git.html], Up: Compiling and Installing gawk on Unix-Like Systems\n[Unix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.6 BUILDING THE DOCUMENTATION\n\nThe generated Info documentation is included in the distribution tar files and in the Git source code repository; you should not\nneed to rebuild it. However, if it needs to be done, simply running make will do it, assuming that you have a recent enough\nversion of makeinfo installed.\n\nIf you wish to build the PDF version of the manuals, you will need to have TeX installed, and possibly additional packages that\nprovide the necessary fonts and tools, such as dvi2pdf and ps2pdf. You will also need GNU Troff (groff) installed in order to\nformat the reference card and the manual page (see Contents of the gawk Distribution [Distribution-contents.html]). Managing this\nprocess is beyond the scope of this Web page.\n\nAssuming you have all you need, then the following commands produce the PDF versions of the documentation:\n\ncd doc\nmake pdf\n\n\nThis creates PDF versions of all three Texinfo documents included in the distribution, as well as of the manual page and the\nreference card.\n\nSimilarly, if you have a recent enough version of makeinfo, you can make the HTML version of the manuals with:\n\ncd doc\nmake html\n\n\nThis creates HTML versions of all three Texinfo documents included in the distribution.", "doc_id": "837247a2-e9a9-4bf3-8a59-5e3b8e43c31a", "embedding": null, "doc_hash": "f1a06fec8e50fd52be733f4371c9303f9d177cf6f186c47ef7af57af301aa80f", "extra_info": null, "node_info": {"start": 0, "end": 1564, "_node_type": "1"}, "relationships": {"1": "8eb8de8a-ca43-451e-9642-e183a5c90edc"}}, "__type__": "1"}, "6a6611b8-0673-4588-9ed7-8ccb014067c9": {"__data__": {"text": "Next: Summary [Pattern-Action-Summary.html], Previous: Control Statements in Actions [Statements.html], Up: Patterns, Actions, and\nVariables [Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7.5 PREDEFINED VARIABLES\n\nMost awk variables are available to use for your own purposes; they never change unless your program assigns values to them, and\nthey never affect anything unless your program examines them. However, a few variables in awk have special built-in meanings. awk\nexamines some of these automatically, so that they enable you to tell awk how to do certain things. Others are set automatically\nby awk, so that they carry information from the internal workings of awk to your program.\n\nThis section documents all of gawk\u2019s predefined variables, most of which are also documented in the chapters describing their\nareas of activity.\n\n * Built-in Variables That Control awk [User_002dmodified.html]\n * Built-in Variables That Convey Information [Auto_002dset.html]\n * Using ARGC and ARGV [ARGC-and-ARGV.html]", "doc_id": "6a6611b8-0673-4588-9ed7-8ccb014067c9", "embedding": null, "doc_hash": "5e3887395082184e14b487a092d8186b0ad731dce1baa949da2178ec444aaf31", "extra_info": null, "node_info": {"start": 0, "end": 1186, "_node_type": "1"}, "relationships": {"1": "3a23ceb8-63db-44bf-83c7-8f5cbf99bc66"}}, "__type__": "1"}, "d82a8c0a-b617-46d8-8895-031c68080902": {"__data__": {"text": "Next: User-Defined Functions [User_002ddefined.html], Up: Functions [Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n9.1 BUILT-IN FUNCTIONS\n\nBuilt-in functions are always available for your awk program to call. This section defines all the built-in functions in awk; some\nof these are mentioned in other sections but are summarized here for your convenience.\n\n * Calling Built-in Functions [Calling-Built_002din.html]\n * Generating Boolean Values [Boolean-Functions.html]\n * Numeric Functions [Numeric-Functions.html]\n * String-Manipulation Functions [String-Functions.html]\n * Input/Output Functions [I_002fO-Functions.html]\n * Time Functions [Time-Functions.html]\n * Bit-Manipulation Functions [Bitwise-Functions.html]\n * Getting Type Information [Type-Functions.html]\n * String-Translation Functions [I18N-Functions.html]", "doc_id": "d82a8c0a-b617-46d8-8895-031c68080902", "embedding": null, "doc_hash": "9f57d4920b0ece13e7a2728097870636e3c2d045d6d529d94d224e9575e02819", "extra_info": null, "node_info": {"start": 0, "end": 985, "_node_type": "1"}, "relationships": {"1": "fde7295f-1dab-441c-b35e-5f8b9dd67c77"}}, "__type__": "1"}, "224f3d72-3d70-45ae-b201-3933caf9fe2f": {"__data__": {"text": "Next: A Brief Introduction To Extensions [Using-extensions.html], Up: Counting Things [Wc-Program.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.7.1 MODERN CHARACTER SETS\n\nIn the early days of computing, single bytes were used for storing characters. The most common character sets were ASCII and\nEBCDIC, which each provided all the English upper- and lowercase letters, the 10 Hindu-Arabic numerals from 0 through 9, and a\nnumber of other standard punctuation and control characters.\n\nToday, the most popular character set in use is Unicode (of which ASCII is a pure subset). Unicode provides tens of thousands of\nunique characters (called code points) to cover most existing human languages (living and dead) and a number of nonhuman ones as\nwell (such as Klingon and J.R.R. Tolkien\u2019s elvish languages).\n\nTo save space in files, Unicode code points are encoded, where each character takes from one to four bytes in the file. UTF-8 is\npossibly the most popular of such multibyte encodings.\n\nThe POSIX standard requires that awk function in terms of characters, not bytes. Thus in gawk, length(), substr(), split(),\nmatch() and the other string functions (see String-Manipulation Functions [String-Functions.html]) all work in terms of characters\nin the local character set, and not in terms of bytes. (Not all awk implementations do so, though).\n\nThere is no standard, built-in way to distinguish characters from bytes in an awk program. For an awk implementation of wc, which\nneeds to make such a distinction, we will have to use an external extension.", "doc_id": "224f3d72-3d70-45ae-b201-3933caf9fe2f", "embedding": null, "doc_hash": "98107d3e5f1dd24cae0682455102b3ada4133ad202270c6ad1b64ce29b2b8f99", "extra_info": null, "node_info": {"start": 0, "end": 1710, "_node_type": "1"}, "relationships": {"1": "fbfe1e1e-a39d-46a0-abe8-cf9d312dfd7f"}}, "__type__": "1"}, "cf2c62a6-27b7-498d-bb0a-cca1ebfe15f9": {"__data__": {"text": "Previous: Variable Access and Update by Cookie [Symbol-table-by-cookie.html], Up: Symbol Table Access [Symbol-Table-Access.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.11.3 CREATING AND USING CACHED VALUES\n\nThe routines in this section allow you to create and release cached values. Like scalar cookies, in theory, cached values are not\nnecessary. You can create numbers and strings using the functions in Constructor Functions [Constructor-Functions.html]. You can\nthen assign those values to variables using sym_update() or sym_update_scalar(), as you like.\n\nHowever, you can understand the point of cached values if you remember that every string value\u2019s storage must come from\ngawk_malloc(), gawk_calloc(), or gawk_realloc(). If you have 20 variables, all of which have the same string value, you must\ncreate 20 identical copies of the string.108\n\nIt is clearly more efficient, if possible, to create a value once, and then tell gawk to reuse the value for multiple variables.\nThat is what the routines in this section let you do. The functions are as follows:\n\nawk_bool_t create_value(awk_value_t *value, awk_value_cookie_t *result);\n\nCreate a cached string or numeric value from value for efficient later assignment. Only values of type AWK_NUMBER, AWK_REGEX,\nAWK_STRNUM, and AWK_STRING are allowed. Any other type is rejected. AWK_UNDEFINED could be allowed, but doing so would result in\ninferior performance.\n\nawk_bool_t release_value(awk_value_cookie_t vc);\n\nRelease the memory associated with a value cookie obtained from create_value().\n\nYou use value cookies in a fashion similar to the way you use scalar cookies. In the extension initialization routine, you create\nthe value cookie:\n\nstatic awk_value_cookie_t answer_cookie;  /* static value cookie */\n\nstatic void\nmy_extension_init()\n{\n    awk_value_t value;\n    char *long_string;\n    size_t long_string_len;\n\n    /* code from earlier */\n    \u2026\n    /* \u2026 fill in long_string and long_string_len \u2026 */\n    make_malloced_string(long_string, long_string_len, & value);\n    create_value(& value, & answer_cookie);    /* create cookie */\n    \u2026\n}\n\n\nOnce the value is created, you can use it as the value of any number of variables:\n\nstatic awk_value_t *\ndo_magic(int nargs, awk_value_t *result)\n{\n    awk_value_t new_value;\n\n    \u2026    /* as earlier */\n\n    value.val_type = AWK_VALUE_COOKIE;\n    value.value_cookie = answer_cookie;\n    sym_update(\"VAR1\", & value);\n    sym_update(\"VAR2\", & value);\n    \u2026\n    sym_update(\"VAR100\", & value);\n    \u2026\n}\n\n\nUsing value cookies in this way saves considerable storage, as all of VAR1 through VAR100 share the same value.\n\nYou might be wondering, \u201cIs this sharing problematic? What happens if awk code assigns a new value to VAR1; are all the others\nchanged too?\u201d\n\nThat\u2019s a great question. The answer is that no, it\u2019s not a problem. Internally, gawk uses reference-counted strings. This means\nthat many variables can share the same string value, and gawk keeps track of the usage. When a variable\u2019s value changes, gawk\nsimply decrements the reference count on the old value and updates the variable to use the new value.\n\nFinally, as part of your cleanup action (see Registering An Exit Callback Function [Exit-Callback-Functions.html]) you should\nrelease any cached values", "doc_id": "cf2c62a6-27b7-498d-bb0a-cca1ebfe15f9", "embedding": null, "doc_hash": "ecc1902cce7d97b1c9293e3ee9a7de8222b467edac0bf94126aa032a1d8ce5a2", "extra_info": null, "node_info": {"start": 0, "end": 3426, "_node_type": "1"}, "relationships": {"1": "c1d9a3e5-3867-4294-a28f-cc8feb9f610c", "3": "4b342e25-3105-4af1-9b0e-e2fc9f1b4cb9"}}, "__type__": "1"}, "4b342e25-3105-4af1-9b0e-e2fc9f1b4cb9": {"__data__": {"text": "Callback Function [Exit-Callback-Functions.html]) you should\nrelease any cached values that you created, using release_value().\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(108)\n\nNumeric values are clearly less problematic, requiring only a C double to store. But of course, GMP and MPFR values do take up\nmore memory.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Variable Access and Update by Cookie [Symbol-table-by-cookie.html], Up: Symbol Table Access [Symbol-Table-Access.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4b342e25-3105-4af1-9b0e-e2fc9f1b4cb9", "embedding": null, "doc_hash": "d7469debb868398067f79b148a6d586aa1c07b79a5c161d0ede9ec63078d6dec", "extra_info": null, "node_info": {"start": 3340, "end": 4079, "_node_type": "1"}, "relationships": {"1": "c1d9a3e5-3867-4294-a28f-cc8feb9f610c", "2": "cf2c62a6-27b7-498d-bb0a-cca1ebfe15f9"}}, "__type__": "1"}, "6bd536f9-06b1-4a58-a6ed-dec3915db86b": {"__data__": {"text": "Next: Controlling Variable Scope [Variable-Scope.html], Up: Calling User-Defined Functions [Function-Calling.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.3.1 WRITING A FUNCTION CALL\n\nA function call consists of the function name followed by the arguments in parentheses. awk expressions are what you write in the\ncall for the arguments. Each time the call is executed, these expressions are evaluated, and the values become the actual\narguments. For example, here is a call to foo() with three arguments (the first being a string concatenation):\n\nfoo(x y, \"lose\", 4 * z)\n\n\n> CAUTION: Whitespace characters (spaces and TABs) are not allowed between the function name and the opening parenthesis of the\n> argument list. If you write whitespace by mistake, awk might think that you mean to concatenate a variable with an expression in\n> parentheses. However, it notices that you used a function name and not a variable name, and reports an error.", "doc_id": "6bd536f9-06b1-4a58-a6ed-dec3915db86b", "embedding": null, "doc_hash": "b7cdb42b23c79fdf133a0c42e12bd8ecc0ed76e905a82bd9dc5eeca498174188", "extra_info": null, "node_info": {"start": 0, "end": 1100, "_node_type": "1"}, "relationships": {"1": "1824a8f9-491e-4516-9baa-6131c0c78c1c"}}, "__type__": "1"}, "b7057106-8942-4f6f-9e5a-cb6d7e31374c": {"__data__": {"text": "Next: Generating Boolean Values [Boolean-Functions.html], Up: Built-in Functions [Built_002din.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.1 CALLING BUILT-IN FUNCTIONS\n\nTo call one of awk\u2019s built-in functions, write the name of the function followed by arguments in parentheses. For example,\n\u2018atan2(y + z, 1)\u2019 is a call to the function atan2() and has two arguments.\n\nWhitespace is ignored between the built-in function name and the opening parenthesis, but nonetheless it is good practice to avoid\nusing whitespace there. User-defined functions do not permit whitespace in this way, and it is easier to avoid mistakes by\nfollowing a simple convention that always works\u2014no whitespace after a function name.\n\nEach built-in function accepts a certain number of arguments. In some cases, arguments can be omitted. The defaults for omitted\narguments vary from function to function and are described under the individual functions. In some awk implementations, extra\narguments given to built-in functions are ignored. However, in gawk, it is a fatal error to give extra arguments to a built-in\nfunction.\n\nWhen a function is called, expressions that create the function\u2019s actual parameters are evaluated completely before the call is\nperformed. For example, in the following code fragment:\n\ni = 4\nj = sqrt(i++)\n\n\nthe variable i is incremented to the value five before sqrt() is called with a value of four for its actual parameter. The order\nof evaluation of the expressions used for the function\u2019s parameters is undefined. Thus, avoid writing programs that assume that\nparameters are evaluated from left to right or from right to left. For example:\n\ni = 5\nj = atan2(++i, i *= 2)\n\n\nIf the order of evaluation is left to right, then i first becomes six, and then 12, and atan2() is called with the two arguments\nsix and 12. But if the order of evaluation is right to left, i first becomes 10, then 11, and atan2() is called with the two\narguments 11 and 10.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Generating Boolean Values [Boolean-Functions.html], Up: Built-in Functions [Built_002din.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b7057106-8942-4f6f-9e5a-cb6d7e31374c", "embedding": null, "doc_hash": "ad7c9200259ed95943f381a7b3455a6aa96047eb34e3141c43dd1ac47e80c3f9", "extra_info": null, "node_info": {"start": 0, "end": 2401, "_node_type": "1"}, "relationships": {"1": "bd3746e7-da54-4c45-99ee-269c1ac11a18"}}, "__type__": "1"}, "5603d457-6462-44a8-a526-e474e9e09c98": {"__data__": {"text": "Next: Summary [Regexp-Summary.html], Previous: gawk-Specific Regexp Operators [GNU-Regexp-Operators.html], Up: Regular Expressions\n[Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.8 CASE SENSITIVITY IN MATCHING\n\nCase is normally significant in regular expressions, both when matching ordinary characters (i.e., not metacharacters) and inside\nbracket expressions. Thus, a \u2018w\u2019 in a regular expression matches only a lowercase \u2018w\u2019 and not an uppercase \u2018W\u2019.\n\nThe simplest way to do a case-independent match is to use a bracket expression\u2014for example, \u2018[Ww]\u2019. However, this can be\ncumbersome if you need to use it often, and it can make the regular expressions harder to read. There are two alternatives that\nyou might prefer.\n\nOne way to perform a case-insensitive match at a particular point in the program is to convert the data to a single case, using\nthe tolower() or toupper() built-in string functions (which we haven\u2019t discussed yet; see String-Manipulation Functions\n[String-Functions.html]). For example:\n\ntolower($1) ~ /foo/  { \u2026 }\n\n\nconverts the first field to lowercase before matching against it. This works in any POSIX-compliant awk.\n\nAnother method, specific to gawk, is to set the variable IGNORECASE to a nonzero value (see Predefined Variables\n[Built_002din-Variables.html]). When IGNORECASE is not zero, all regexp and string operations ignore case.\n\nChanging the value of IGNORECASE dynamically controls the case sensitivity of the program as it runs. Case is significant by\ndefault because IGNORECASE (like most variables) is initialized to zero:\n\nx = \"aB\"\nif (x ~ /ab/) \u2026   # this test will fail\n\nIGNORECASE = 1\nif (x ~ /ab/) \u2026   # now it will succeed\n\n\nIn general, you cannot use IGNORECASE to make certain rules case insensitive and other rules case sensitive, as there is no\nstraightforward way to set IGNORECASE just for the pattern of a particular rule.18 To do this, use either bracket expressions or\ntolower(). However, one thing you can do with IGNORECASE only is dynamically turn case sensitivity on or off for all the rules at\nonce.\n\nIGNORECASE can be set on the command line or in a BEGIN rule (see Other Command-Line Arguments [Other-Arguments.html]; also see\nStartup and Cleanup Actions [Using-BEGIN_002fEND.html]). Setting IGNORECASE from the command line is a way to make a program case\ninsensitive without having to edit it.\n\nIn multibyte locales, the equivalences between upper- and lowercase characters are tested based on the wide-character values of\nthe locale\u2019s character set. Prior to version 5.0, single-byte characters were tested based on the ISO-8859-1 (ISO Latin-1)\ncharacter set. However, as of version 5.0, single-byte characters are also tested based on the values of the locale\u2019s character\nset.19\n\nThe value of IGNORECASE has no effect if gawk is in compatibility mode (see Command-Line Options [Options.html]). Case is always\nsignificant in compatibility mode.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(18)\n\nExperienced C and C++ programmers will note that it is possible, using something like \u2018IGNORECASE = 1 && /foObAr/ { \u2026 }\u2019 and\n\u2018IGNORECASE = 0 || /foobar/ { \u2026 }\u2019. However, this is somewhat obscure and we don\u2019t recommend it.\n\n(19)\n\nIf you don\u2019t understand this, don\u2019t worry about it; it just means that gawk does the right thing.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Regexp-Summary.html], Previous: gawk-Specific Regexp Operators", "doc_id": "5603d457-6462-44a8-a526-e474e9e09c98", "embedding": null, "doc_hash": "9d955542f188aefcc381ba5f2bf6cd59d02a2456e4a36f8976598faae5f4f273", "extra_info": null, "node_info": {"start": 0, "end": 3759, "_node_type": "1"}, "relationships": {"1": "8c8ed0d4-c2ac-4714-8149-fef19e2b0ff4", "3": "eca6b4bd-796d-4c5b-b550-78a855911b10"}}, "__type__": "1"}, "eca6b4bd-796d-4c5b-b550-78a855911b10": {"__data__": {"text": "[Regexp-Summary.html], Previous: gawk-Specific Regexp Operators [GNU-Regexp-Operators.html], Up: Regular Expressions\n[Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "eca6b4bd-796d-4c5b-b550-78a855911b10", "embedding": null, "doc_hash": "10316e816bd7baa7da6ec0e351458a9d7a9739a8e9de034d3aa04493df8b7314", "extra_info": null, "node_info": {"start": 3696, "end": 3885, "_node_type": "1"}, "relationships": {"1": "8c8ed0d4-c2ac-4714-8149-fef19e2b0ff4", "2": "5603d457-6462-44a8-a526-e474e9e09c98"}}, "__type__": "1"}, "9d5010a1-d017-465d-b055-7bb723c90073": {"__data__": {"text": "Previous: Boilerplate Code [Extension-API-Boilerplate.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.16 CHANGES FROM VERSION 1 OF THE API\n\nThe current API is not binary compatible with version 1 of the API. You will have to recompile your extensions in order to use\nthem with the current version of gawk.\n\nFortunately, at the possible expense of some compile-time warnings, the API remains source-code\u2013compatible with the previous API.\nThe major differences are the additional members in the awk_ext_func_t structure, and the addition of the third argument to the C\nimplementation function (see Registering An Extension Function [Extension-Functions.html]).\n\nHere is a list of individual features that changed from version 1 to version 2 of the API:\n\n * Numeric values can now have MPFR/MPZ variants (see General-Purpose Data Types [General-Data-Types.html]).\n * There are new string types: AWK_REGEX and AWK_STRNUM (see General-Purpose Data Types [General-Data-Types.html]).\n * The ezalloc() macro is new (see Memory Allocation Functions and Convenience Macros [Memory-Allocation-Functions.html]).\n * The awk_ext_func_t structure changed. Instead of num_expected_args, it now has max_expected and min_required (see Registering\n   An Extension Function [Extension-Functions.html]).\n * For get_record(), an input parser can now specify field widths (see Customized Input Parsers [Input-Parsers.html]).\n * Extensions can now produce nonfatal error messages (see Printing Messages [Printing-Messages.html]).\n * When flattening an array, you can now specify the index and value types (see Array Functions [Array-Functions.html]).\n * The get_file() API is new (see Accessing and Manipulating Redirections [Redirection-API.html]).", "doc_id": "9d5010a1-d017-465d-b055-7bb723c90073", "embedding": null, "doc_hash": "fbdfa076e91ddf86b8aadae93d9eda4d51339a8962bc5c3fd485690076166ccc", "extra_info": null, "node_info": {"start": 0, "end": 1934, "_node_type": "1"}, "relationships": {"1": "aa9895ea-86cb-4307-bbfb-0c13ec70ef3b"}}, "__type__": "1"}, "391586bf-21bf-46dd-b4b3-d880818213e7": {"__data__": {"text": "Next: Specifying How Fields Are Separated [Field-Separators.html], Previous: Nonconstant Field Numbers [Nonconstant-Fields.html],\nUp: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.4 CHANGING THE CONTENTS OF A FIELD\n\nThe contents of a field, as seen by awk, can be changed within an awk program; this changes what awk perceives as the current\ninput record. (The actual input is untouched; awk never modifies the input file.) Consider the following example and its output:\n\n$ awk '{ nboxes = $3 ; $3 = $3 - 10\n>        print nboxes, $3 }' inventory-shipped\n-| 25 15\n-| 32 22\n-| 24 14\n\u2026\n\n\nThe program first saves the original value of field three in the variable nboxes. The \u2018-\u2019 sign represents subtraction, so this\nprogram reassigns field three, $3, as the original value of field three minus ten: \u2018$3 - 10\u2019. (See Arithmetic Operators\n[Arithmetic-Ops.html].) Then it prints the original and new values for field three. (Someone in the warehouse made a consistent\nmistake while inventorying the red boxes.)\n\nFor this to work, the text in $3 must make sense as a number; the string of characters must be converted to a number for the\ncomputer to do arithmetic on it. The number resulting from the subtraction is converted back to a string of characters that then\nbecomes field three. See Conversion of Strings and Numbers [Conversion.html].\n\nWhen the value of a field is changed (as perceived by awk), the text of the input record is recalculated to contain the new field\nwhere the old one was. In other words, $0 changes to reflect the altered field. Thus, this program prints a copy of the input\nfile, with 10 subtracted from the second field of each line:\n\n$ awk '{ $2 = $2 - 10; print $0 }' inventory-shipped\n-| Jan 3 25 15 115\n-| Feb 5 32 24 226\n-| Mar 5 24 34 228\n\u2026\n\n\nIt is also possible to assign contents to fields that are out of range. For example:\n\n$ awk '{ $6 = ($5 + $4 + $3 + $2)\n>        print $6 }' inventory-shipped\n-| 168\n-| 297\n-| 301\n\u2026\n\n\nWe\u2019ve just created $6, whose value is the sum of fields $2, $3, $4, and $5. The \u2018+\u2019 sign represents addition. For the file\ninventory-shipped, $6 represents the total number of parcels shipped for a particular month.\n\nCreating a new field changes awk\u2019s internal copy of the current input record, which is the value of $0. Thus, if you do \u2018print $0\u2019\nafter adding a field, the record printed includes the new field, with the appropriate number of field separators between it and\nthe previously existing fields.\n\nThis recomputation affects and is affected by NF (the number of fields; see Examining Fields [Fields.html]). For example, the\nvalue of NF is set to the number of the highest field you create. The exact format of $0 is also affected by a feature that has\nnot been discussed yet: the output field separator, OFS, used to separate the fields (see Output Separators\n[Output-Separators.html]).\n\nNote, however, that merely referencing an out-of-range field does not change the value of either $0 or NF. Referencing an\nout-of-range field only produces an empty string. For example:\n\nif ($(NF+1) != \"\")\n    print \"can't happen\"\nelse\n    print \"everything is normal\"\n\n\nshould print \u2018everything is normal\u2019, because NF+1 is certain to be out of range. (See The if-else Statement [If-Statement.html]\nfor more information about awk\u2019s if-else statements. See Variable Typing and Comparison Expressions [Typing-and-Comparison.html]\nfor more information about the \u2018!=\u2019", "doc_id": "391586bf-21bf-46dd-b4b3-d880818213e7", "embedding": null, "doc_hash": "cdc4185a2a8de0308e4702e38189bc235c7ee93d5ccfde4fa4f8d681efa79df3", "extra_info": null, "node_info": {"start": 0, "end": 3605, "_node_type": "1"}, "relationships": {"1": "8b8a59fe-6504-401f-9508-76241c41c8ed", "3": "7a9dc37a-1c17-4b9b-88fa-cf8e7025b9df"}}, "__type__": "1"}, "7a9dc37a-1c17-4b9b-88fa-cf8e7025b9df": {"__data__": {"text": "more information about the \u2018!=\u2019 operator.)\n\nIt is important to note that making an assignment to an existing field changes the value of $0 but does not change the value of\nNF, even when you assign the empty string to a field. For example:\n\n$ echo a b c d | awk '{ OFS = \":\"; $2 = \"\"\n>                       print $0; print NF }'\n-| a::c:d\n-| 4\n\n\nThe field is still there; it just has an empty value, delimited by the two colons between \u2018a\u2019 and \u2018c\u2019. This example shows what\nhappens if you create a new field:\n\n$ echo a b c d | awk '{ OFS = \":\"; $2 = \"\"; $6 = \"new\"\n>                       print $0; print NF }'\n-| a::c:d::new\n-| 6\n\n\nThe intervening field, $5, is created with an empty value (indicated by the second pair of adjacent colons), and NF is updated\nwith the value six.\n\nDecrementing NF throws away the values of the fields after the new value of NF and recomputes $0. (d.c.) Here is an example:\n\n$ echo a b c d e f | awk '{ print \"NF =\", NF;\n>                           NF = 3; print $0 }'\n-| NF = 6\n-| a b c\n\n\n> CAUTION: Some versions of awk don\u2019t rebuild $0 when NF is decremented. Until August, 2018, this included BWK awk; fortunately\n> his version now handles this correctly.\n\nFinally, there are times when it is convenient to force awk to rebuild the entire record, using the current values of the fields\nand OFS. To do this, use the seemingly innocuous assignment:\n\n$1 = $1   # force record to be reconstituted\nprint $0  # or whatever else with $0\n\n\nThis forces awk to rebuild the record. It does help to add a comment, as we\u2019ve shown here.\n\nThere is a flip side to the relationship between $0 and the fields. Any assignment to $0 causes the record to be reparsed into\nfields using the current value of FS. This also applies to any built-in function that updates $0, such as sub() and gsub() (see\nString-Manipulation Functions [String-Functions.html]).\n\nUnderstanding $0\n\nIt is important to remember that $0 is the full record, exactly as it was read from the input. This includes any leading or\ntrailing whitespace, and the exact whitespace (or other characters) that separates the fields.\n\nIt is a common error to try to change the field separators in a record simply by setting FS and OFS, and then expecting a plain\n\u2018print\u2019 or \u2018print $0\u2019 to print the modified record.\n\nBut this does not work, because nothing was done to change the record itself. Instead, you must force the record to be rebuilt,\ntypically with a statement such as \u2018$1 = $1\u2019, as described earlier.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Specifying How Fields Are Separated [Field-Separators.html], Previous: Nonconstant Field Numbers [Nonconstant-Fields.html],\nUp: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7a9dc37a-1c17-4b9b-88fa-cf8e7025b9df", "embedding": null, "doc_hash": "3b52ea4b09b3c3fa3e3fcf50f8057a39ddf940bf5df4fb078ec727b0af330719", "extra_info": null, "node_info": {"start": 3574, "end": 6426, "_node_type": "1"}, "relationships": {"1": "8b8a59fe-6504-401f-9508-76241c41c8ed", "2": "391586bf-21bf-46dd-b4b3-d880818213e7"}}, "__type__": "1"}, "9b529c0f-a5b1-416d-be9a-454a4eb160b8": {"__data__": {"text": "Next: Namespace and Component Naming Rules [Naming-Rules.html], Previous: The Default Namespace [Default-Namespace.html], Up:\nNamespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.4 CHANGING THE NAMESPACE\n\nIn order to set the current namespace, use an @namespace directive at the top level of your program:\n\n@namespace \"passwd\"\n\nBEGIN { \u2026 }\n\u2026\n\n\nAfter this directive, all simple non-completely-uppercase identifiers are placed into the passwd namespace.\n\nYou can change the namespace multiple times within a single source file, although this is likely to become confusing if you do it\ntoo much.\n\n> NOTE: Association of unqualified identifiers to a namespace is handled while gawk parses your program, before it starts to run.\n> There is no concept of a \u201ccurrent\u201d namespace once your program starts executing. Be sure you understand this.\n\nEach source file for -i and -f starts out with an implicit \u2018@namespace \"awk\"\u2019. Similarly, each chunk of command-line code supplied\nwith -e has such an implicit initial statement (see Command-Line Options [Options.html]).\n\nFiles included with @include (see Including Other Files into Your Program [Include-Files.html]) \u201cpush\u201d and \u201cpop\u201d the current\nnamespace. That is, each @include saves the current namespace and starts over with an implicit \u2018@namespace \"awk\"\u2019 which remains in\neffect until an explicit @namespace directive is seen. When gawk finishes processing the included file, the saved namespace is\nrestored and processing continues where it left off in the original file.\n\nThe use of @namespace has no influence upon the order of execution of BEGIN, BEGINFILE, END, and ENDFILE rules.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Namespace and Component Naming Rules [Naming-Rules.html], Previous: The Default Namespace [Default-Namespace.html], Up:\nNamespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9b529c0f-a5b1-416d-be9a-454a4eb160b8", "embedding": null, "doc_hash": "3cead16fbf9366b5bd6d33ec08209c9e67afd24e8ae4ec3aa66339d8481c06b5", "extra_info": null, "node_info": {"start": 0, "end": 2163, "_node_type": "1"}, "relationships": {"1": "3a24fbe8-1de7-46c8-8d2e-4af623df4e61"}}, "__type__": "1"}, "91638b40-0ac4-476c-a324-5c3d550460d6": {"__data__": {"text": "Next: Standards Versus Existing Practice [POSIX-Floating-Point-Problems.html], Previous: Arbitrary-Precision Integer Arithmetic\nwith gawk [Arbitrary-Precision-Integers.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.6 HOW TO CHECK IF MPFR IS AVAILABLE\n\nOccasionally, you might like to be able to check if gawk was invoked with the -M option, enabling arbitrary-precision arithmetic.\nYou can do so with the following function, contributed by Andrew Schorr:\n\n# adequate_math_precision --- return true if we have enough bits\n\nfunction adequate_math_precision(n)\n{\n    return (1 != (1+(1/(2^(n-1)))))\n}\n\n\nHere is code that invokes the function in order to check if arbitrary-precision arithmetic is available:\n\nBEGIN {\n    # How many bits of mantissa precision are required\n    # for this program to function properly?\n    fpbits = 123\n\n    # We hope that we were invoked with MPFR enabled. If so, the\n    # following statement should configure calculations to our desired\n    # precision.\n    PREC = fpbits\n\n    if (! adequate_math_precision(fpbits)) {\n        print(\"Error: insufficient computation precision available.\\n\" \\\n              \"Try again with the -M argument?\") > \"/dev/stderr\"\n        # Note: you may need to set a flag here to bail out of END rules\n        exit 1\n    }\n}\n\n\nPlease be aware that exit will jump to the END rules, if present (see The exit Statement [Exit-Statement.html]).", "doc_id": "91638b40-0ac4-476c-a324-5c3d550460d6", "embedding": null, "doc_hash": "58b679fcbf290142856a720475a9f57586c37d66ff661459f8ab3b7b3ec11aa5", "extra_info": null, "node_info": {"start": 0, "end": 1651, "_node_type": "1"}, "relationships": {"1": "521736eb-acca-42f3-8193-e027002c7f6b"}}, "__type__": "1"}, "be44db68-6034-4857-b81e-0e88daa4ab6b": {"__data__": {"text": "Next: Translating Between Characters and Numbers [Ordinal-Functions.html], Previous: Rounding Numbers [Round-Function.html], Up:\nGeneral Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.4 THE CLIFF RANDOM NUMBER GENERATOR\n\nThe Cliff random number generator [http://mathworld.wolfram.com/CliffRandomNumberGenerator.html] is a very simple random number\ngenerator that \u201cpasses the noise sphere test for randomness by showing no structure.\u201d It is easily programmed, in less than 10\nlines of awk code:\n\n# cliff_rand.awk --- generate Cliff random numbers\n\nBEGIN { _cliff_seed = 0.1 }\n\nfunction cliff_rand()\n{\n    _cliff_seed = (100 * log(_cliff_seed)) % 1\n    if (_cliff_seed < 0)\n        _cliff_seed = - _cliff_seed\n    return _cliff_seed\n}\n\n\nThis algorithm requires an initial \u201cseed\u201d of 0.1. Each new value uses the current seed as input for the calculation. If the\nbuilt-in rand() function (see Numeric Functions [Numeric-Functions.html]) isn\u2019t random enough, you might try using this function\ninstead.", "doc_id": "be44db68-6034-4857-b81e-0e88daa4ab6b", "embedding": null, "doc_hash": "94f4a9780dcca3acb318c9bcee129323aff3e3bb8dc189fad5a1070cc6016822", "extra_info": null, "node_info": {"start": 0, "end": 1184, "_node_type": "1"}, "relationships": {"1": "7483b2aa-2315-4e35-84d3-058941830d1b"}}, "__type__": "1"}, "acf75009-97e0-40f5-a220-2b6c7487d8ec": {"__data__": {"text": "Next: A Grab Bag of awk Programs [Miscellaneous-Programs.html], Previous: Running the Example Programs [Running-Examples.html],\nUp: Practical awk Programs [Sample-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n11.2 REINVENTING WHEELS FOR FUN AND PROFIT\n\nThis section presents a number of POSIX utilities implemented in awk. Reinventing these programs in awk is often enjoyable,\nbecause the algorithms can be very clearly expressed, and the code is usually very concise and simple. This is true because awk\ndoes so much for you.\n\nIt should be noted that these programs are not necessarily intended to replace the installed versions on your system. Nor may all\nof these programs be fully compliant with the most recent POSIX standard. This is not a problem; their purpose is to illustrate\nawk language programming for \u201creal-world\u201d tasks.\n\nThe programs are presented in alphabetical order.\n\n * Cutting Out Fields and Columns [Cut-Program.html]\n * Searching for Regular Expressions in Files [Egrep-Program.html]\n * Printing Out User Information [Id-Program.html]\n * Splitting a Large File into Pieces [Split-Program.html]\n * Duplicating Output into Multiple Files [Tee-Program.html]\n * Printing Nonduplicated Lines of Text [Uniq-Program.html]\n * Counting Things [Wc-Program.html]", "doc_id": "acf75009-97e0-40f5-a220-2b6c7487d8ec", "embedding": null, "doc_hash": "c969afdd579e9f8f4d4d7f70896a08a32ca080b75c4a20113dbd39b0807d4051", "extra_info": null, "node_info": {"start": 0, "end": 1436, "_node_type": "1"}, "relationships": {"1": "fd870fe2-0a27-4f3d-8929-d8b427e518d3"}}, "__type__": "1"}, "53c5aa70-7a38-4f98-b854-de913f009119": {"__data__": {"text": "Next: Enabling Nonfatal Output [Nonfatal.html], Previous: Special File names in gawk [Special-Files.html], Up: Printing Output\n[Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.9 CLOSING INPUT AND OUTPUT REDIRECTIONS\n\nIf the same file name or the same shell command is used with getline more than once during the execution of an awk program (see\nExplicit Input with getline [Getline.html]), the file is opened (or the command is executed) the first time only. At that time,\nthe first record of input is read from that file or command. The next time the same file or command is used with getline, another\nrecord is read from it, and so on.\n\nSimilarly, when a file or pipe is opened for output, awk remembers the file name or command associated with it, and subsequent\nwrites to the same file or command are appended to the previous writes. The file or pipe stays open until awk exits.\n\nThis implies that special steps are necessary in order to read the same file again from the beginning, or to rerun a shell command\n(rather than reading more output from the same command). The close() function makes these things possible:\n\nclose(filename)\n\n\nor:\n\nclose(command)\n\n\nThe argument filename or command can be any expression. Its value must exactly match the string that was used to open the file or\nstart the command (spaces and other \u201cirrelevant\u201d characters included). For example, if you open a pipe with this:\n\n\"sort -r names\" | getline foo\n\n\nthen you must close it with this:\n\nclose(\"sort -r names\")\n\n\nOnce this function call is executed, the next getline from that file or command, or the next print or printf to that file or\ncommand, reopens the file or reruns the command. Because the expression that you use to close a file or pipeline must exactly\nmatch the expression used to open the file or run the command, it is good practice to use a variable to store the file name or\ncommand. The previous example becomes the following:\n\nsortcom = \"sort -r names\"\nsortcom | getline foo\n\n\n\u2026\nclose(sortcom)\n\n\nThis helps avoid hard-to-find typographical errors in your awk programs. Here are some of the reasons for closing an output file:\n\n * To write a file and read it back later on in the same awk program. Close the file after writing it, then begin reading it with\n   getline.\n * To write numerous files, successively, in the same awk program. If the files aren\u2019t closed, eventually awk may exceed a system\n   limit on the number of open files in one process. It is best to close each one when the program has finished writing it.\n * To make a command finish. When output is redirected through a pipe, the command reading the pipe normally continues to try to\n   read input as long as the pipe is open. Often this means the command cannot really do its work until the pipe is closed. For\n   example, if output is redirected to the mail program, the message is not actually sent until the pipe is closed.\n * To run the same program a second time, with the same arguments. This is not the same thing as giving more input to the first\n   run!\n   \n   For example, suppose a program pipes output to the mail program. If it outputs several lines redirected to this pipe without\n   closing it, they make a single message of several lines. By contrast, if the program closes the pipe after each line of output,\n   then each line makes a separate message.\n\nIf you use more files than the system allows you to have open, gawk attempts to multiplex the available open files among your data\nfiles. gawk\u2019s ability to do this depends upon the facilities of your operating system, so it may not always work. It is therefore\nboth good practice and good portability advice to always use close() on your files when you are done with them. In fact, if you\nare using a lot of pipes, it is essential that you close commands when done. For example, consider something like this:\n\n{\n    \u2026\n    command = (\"grep \" $1 \" /some/file |", "doc_id": "53c5aa70-7a38-4f98-b854-de913f009119", "embedding": null, "doc_hash": "47ed478e9782e36896cbb0294bf580a1fddd1656b83ffac17cfbeacdfae425aa", "extra_info": null, "node_info": {"start": 0, "end": 4065, "_node_type": "1"}, "relationships": {"1": "a5ef87d6-8101-443a-b2b6-f01a4c214d26", "3": "ffe7e3a3-0187-4e8d-8813-3f625d2183ee"}}, "__type__": "1"}, "ffe7e3a3-0187-4e8d-8813-3f625d2183ee": {"__data__": {"text": " \u2026\n    command = (\"grep \" $1 \" /some/file | my_prog -q \" $3)\n    while ((command | getline) > 0) {\n        process output of command\n    }\n    # need close(command) here\n}\n\n\nThis example creates a new pipeline based on data in each record. Without the call to close() indicated in the comment, awk\ncreates child processes to run the commands, until it eventually runs out of file descriptors for more pipelines.\n\nEven though each command has finished (as indicated by the end-of-file return status from getline), the child process is not\nterminated;28 more importantly, the file descriptor for the pipe is not closed and released until close() is called or awk exits.\n\nclose() silently does nothing if given an argument that does not represent a file, pipe, or coprocess that was opened with a\nredirection. In such a case, it returns a negative value, indicating an error. In addition, gawk sets ERRNO to a string indicating\nthe error.\n\nNote also that \u2018close(FILENAME)\u2019 has no \u201cmagic\u201d effects on the implicit loop that reads through the files named on the command\nline. It is, more likely, a close of a file that was never opened with a redirection, so awk silently does nothing, except return\na negative value.\n\nWhen using the \u2018|&\u2019 operator to communicate with a coprocess, it is occasionally useful to be able to close one end of the two-way\npipe without closing the other. This is done by supplying a second argument to close(). As in any other call to close(), the first\nargument is the name of the command or special file used to start the coprocess. The second argument should be a string, with\neither of the values \"to\" or \"from\". Case does not matter. As this is an advanced feature, discussion is delayed until Two-Way\nCommunications with Another Process [Two_002dway-I_002fO.html], which describes it in more detail and gives an example.\n\n * Using close()\u2019s Return Value [Close-Return-Value.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(28)\n\nThe technical terminology is rather morbid. The finished child is called a \u201czombie,\u201d and cleaning up after it is referred to as\n\u201creaping.\u201d\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Enabling Nonfatal Output [Nonfatal.html], Previous: Special File names in gawk [Special-Files.html], Up: Printing Output\n[Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ffe7e3a3-0187-4e8d-8813-3f625d2183ee", "embedding": null, "doc_hash": "eb327f4252a62fdfb38c10711f6c750d39f5e6f027813880ff08e12be4055ac8", "extra_info": null, "node_info": {"start": 4022, "end": 6552, "_node_type": "1"}, "relationships": {"1": "a5ef87d6-8101-443a-b2b6-f01a4c214d26", "2": "53c5aa70-7a38-4f98-b854-de913f009119"}}, "__type__": "1"}, "6f1d5ba8-823b-482f-861c-83e51d5225f8": {"__data__": {"text": "Up: Closing Input and Output Redirections [Close-Files-And-Pipes.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.9.1 USING CLOSE()\u2019S RETURN VALUE\n\nIn many older versions of Unix awk, the close() function is actually a statement. (d.c.) It is a syntax error to try and use the\nreturn value from close():\n\ncommand = \"\u2026\"\ncommand | getline info\nretval = close(command)  # syntax error in many Unix awks\n\n\ngawk treats close() as a function. The return value is \u22121 if the argument names something that was never opened with a\nredirection, or if there is a system problem closing the file or process. In these cases, gawk sets the predefined variable ERRNO\nto a string describing the problem.\n\nIn gawk, starting with version 4.2, when closing a pipe or coprocess (input or output), the return value is the exit status of the\ncommand, as described in Table 5.1.29 Otherwise, it is the return value from the system\u2019s close() or fclose() C functions when\nclosing input or output files, respectively. This value is zero if the close succeeds, or \u22121 if it fails. Recent versions of BWK\nawk also return the same values from close().\n\nSituationReturn value from close() Normal exit of commandCommand\u2019s exit status Death by signal of command256 + number of murderous\nsignal Death by signal of command with core dump512 + number of murderous signal Some kind of error\u22121\n\nTable 5.1: Return values from close() of a pipe\n\nThe POSIX standard is very vague; it says that close() returns zero on success and a nonzero value otherwise. In general,\ndifferent implementations vary in what they report when closing pipes; thus, the return value cannot be used portably. (d.c.) In\nPOSIX mode (see Command-Line Options [Options.html]), gawk just returns zero when closing a pipe.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(29)\n\nPrior to version 4.2, the return value from closing a pipe or co-process was the full 16-bit exit value as defined by the wait()\nsystem call.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nUp: Closing Input and Output Redirections [Close-Files-And-Pipes.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6f1d5ba8-823b-482f-861c-83e51d5225f8", "embedding": null, "doc_hash": "8867e95c4f81d6d8d6de9bd19735bba2fd5fada781ad21317c2fcbb53e617c7d", "extra_info": null, "node_info": {"start": 0, "end": 2459, "_node_type": "1"}, "relationships": {"1": "0c7bc33f-3200-4760-a9c0-2bb6ea435a13"}}, "__type__": "1"}, "40876cbf-fa8d-4440-b087-065b81ed3f9b": {"__data__": {"text": "Next: Making the Full Line Be a Single Field [Full-Line-Fields.html], Previous: Making Each Character a Separate Field\n[Single-Character-Fields.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.5.4 SETTING FS FROM THE COMMAND LINE\n\nFS can be set on the command line. Use the -F option to do so. For example:\n\nawk -F, 'program' input-files\n\n\nsets FS to the \u2018,\u2019 character. Notice that the option uses an uppercase \u2018F\u2019 instead of a lowercase \u2018f\u2019. The latter option (-f)\nspecifies a file containing an awk program.\n\nThe value used for the argument to -F is processed in exactly the same way as assignments to the predefined variable FS. Any\nspecial characters in the field separator must be escaped appropriately. For example, to use a \u2018\\\u2019 as the field separator on the\ncommand line, you would have to type:\n\n# same as FS = \"\\\\\"\nawk -F\\\\\\\\ '\u2026' files \u2026\n\n\nBecause \u2018\\\u2019 is used for quoting in the shell, awk sees \u2018-F\\\\\u2019. Then awk processes the \u2018\\\\\u2019 for escape characters (see Escape\nSequences [Escape-Sequences.html]), finally yielding a single \u2018\\\u2019 to use for the field separator.\n\nAs a special case, in compatibility mode (see Command-Line Options [Options.html]), if the argument to -F is \u2018t\u2019, then FS is set\nto the TAB character. If you type \u2018-F\\t\u2019 at the shell, without any quotes, the \u2018\\\u2019 gets deleted, so awk figures that you really\nwant your fields to be separated with TABs and not \u2018t\u2019s. Use \u2018-v FS=\"t\"\u2019 or \u2018-F\"[t]\"\u2019 on the command line if you really do want to\nseparate your fields with \u2018t\u2019s. Use \u2018-F '\\t'\u2019 when not in compatibility mode to specify that TABs separate fields.\n\nAs an example, let\u2019s use an awk program file called edu.awk that contains the pattern /edu/ and the action \u2018print $1\u2019:\n\n/edu/   { print $1 }\n\n\nLet\u2019s also set FS to be the \u2018-\u2019 character and run the program on the file mail-list. The following command prints a list of the\nnames of the people that work at or attend a university, and the first three digits of their phone numbers:\n\n$ awk -F- -f edu.awk mail-list\n-| Fabius       555\n-| Samuel       555\n-| Jean\n\n\nNote the third line of output. The third line in the original file looked like this:\n\nJean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R\n\n\nThe \u2018-\u2019 as part of the person\u2019s name was used as the field separator, instead of the \u2018-\u2019 in the phone number that was originally\nintended. This demonstrates why you have to be careful in choosing your field and record separators.\n\nPerhaps the most common use of a single character as the field separator occurs when processing the Unix system password file. On\nmany Unix systems, each user has a separate entry in the system password file, with one line per user. The information in these\nlines is separated by colons. The first field is the user\u2019s login name and the second is the user\u2019s encrypted or shadow password.\n(A shadow password is indicated by the presence of a single \u2018x\u2019 in the second field.) A password file entry might look like this:\n\narnold:x:2076:10:Arnold Robbins:/home/arnold:/bin/bash\n\n\nThe following program searches the system password file and prints the entries for users whose full name is not indicated:\n\nawk -F: '$5 == \"\"' /etc/passwd\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Making the Full Line Be", "doc_id": "40876cbf-fa8d-4440-b087-065b81ed3f9b", "embedding": null, "doc_hash": "a481899b6ebcc2a517134a1843fbc9f187cacf1849a382dbbbd696787e620786", "extra_info": null, "node_info": {"start": 0, "end": 3527, "_node_type": "1"}, "relationships": {"1": "be0f5c84-0755-4356-9ae8-9c21e44efcb1", "3": "a7b7665c-4365-4ebd-8b58-34917e88e2e8"}}, "__type__": "1"}, "a7b7665c-4365-4ebd-8b58-34917e88e2e8": {"__data__": {"text": "/etc/passwd\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Making the Full Line Be a Single Field [Full-Line-Fields.html], Previous: Making Each Character a Separate Field\n[Single-Character-Fields.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a7b7665c-4365-4ebd-8b58-34917e88e2e8", "embedding": null, "doc_hash": "74d715492aee9b029b0ffbaa622bf9568cf8996c29b6893fcdaaffb151b3e25e", "extra_info": null, "node_info": {"start": 3352, "end": 3771, "_node_type": "1"}, "relationships": {"1": "be0f5c84-0755-4356-9ae8-9c21e44efcb1", "2": "40876cbf-fa8d-4440-b087-065b81ed3f9b"}}, "__type__": "1"}, "df2acc49-b550-45e9-8c6e-a970888f0ec0": {"__data__": {"text": "Next: Command-Line Options [Options.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.1 INVOKING AWK\n\nThere are two ways to run awk\u2014with an explicit program or with one or more program files. Here are templates for both of them;\nitems enclosed in [\u2026] in these templates are optional:\n\nawk [options] -f progfile [--] file \u2026\nawk [options] [--] 'program' file \u2026\n\n\nIn addition to traditional one-letter POSIX-style options, gawk also supports GNU long options.\n\nIt is possible to invoke awk with an empty program:\n\nawk '' datafile1 datafile2\n\n\nDoing so makes little sense, though; awk exits silently when given an empty program. (d.c.) If --lint has been specified on the\ncommand line, gawk issues a warning that the program is empty.", "doc_id": "df2acc49-b550-45e9-8c6e-a970888f0ec0", "embedding": null, "doc_hash": "1187080638bbe51699bea6c92a240851f02c1258143285cb6e4b9c215d463840", "extra_info": null, "node_info": {"start": 0, "end": 928, "_node_type": "1"}, "relationships": {"1": "e3fd6050-26a2-4166-a498-4d48631a0f69"}}, "__type__": "1"}, "d676d47d-ef17-4b19-87dd-ca4708bb423f": {"__data__": {"text": "Next: Summary [Input-Summary.html], Previous: Retrying Reads After Certain Input Errors [Retrying-Input.html], Up: Reading Input\nFiles [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.13 DIRECTORIES ON THE COMMAND LINE\n\nAccording to the POSIX standard, files named on the awk command line must be text files; it is a fatal error if they are not. Most\nversions of awk treat a directory on the command line as a fatal error.\n\nBy default, gawk produces a warning for a directory on the command line, but otherwise ignores it. This makes it easier to use\nshell wildcards with your awk program:\n\n$ gawk -f whizprog.awk *        Directories could kill this program\n\n\nIf either of the --posix or --traditional options is given, then gawk reverts to treating a directory on the command line as a\nfatal error.\n\nSee Reading Directories [Extension-Sample-Readdir.html] for a way to treat directories as usable data from an awk program.", "doc_id": "d676d47d-ef17-4b19-87dd-ca4708bb423f", "embedding": null, "doc_hash": "2a54361d967078406081731093c9504ffb7450ba94c7d7225092a2bdf1db8c3d", "extra_info": null, "node_info": {"start": 0, "end": 1091, "_node_type": "1"}, "relationships": {"1": "be2d8d25-2ab8-4f31-8c29-0855305c8b29"}}, "__type__": "1"}, "ed1d61d5-1512-427a-83c7-cb23cffd7658": {"__data__": {"text": "Next: Shell Quoting Issues [Quoting.html], Previous: Executable awk Programs [Executable-Scripts.html], Up: How to Run awk\nPrograms [Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.5 COMMENTS IN AWK PROGRAMS\n\nA comment is some text that is included in a program for the sake of human readers; it is not really an executable part of the\nprogram. Comments can explain what the program does and how it works. Nearly all programming languages have provisions for\ncomments, as programs are typically hard to understand without them.\n\nIn the awk language, a comment starts with the number sign character (\u2018#\u2019) and continues to the end of the line. The \u2018#\u2019 does not\nhave to be the first character on the line. The awk language ignores the rest of a line following a number sign. For example, we\ncould have put the following into advice:\n\n# This program prints a nice, friendly message.  It helps\n# keep novice users from being afraid of the computer.\nBEGIN    { print \"Don't Panic!\" }\n\n\nYou can put comment lines into keyboard-composed throwaway awk programs, but this usually isn\u2019t very useful; the purpose of a\ncomment is to help you or another person understand the program when reading it at a later time.\n\n> CAUTION: As mentioned in One-Shot Throwaway awk Programs [One_002dshot.html], you can enclose short to medium-sized programs in\n> single quotes, in order to keep your shell scripts self-contained. When doing so, don\u2019t put an apostrophe (i.e., a single quote)\n> into a comment (or anywhere else in your program). The shell interprets the quote as the closing quote for the entire program.\n> As a result, usually the shell prints a message about mismatched quotes, and if awk actually runs, it will probably print\n> strange messages about syntax errors. For example, look at the following:\n> \n> $ awk 'BEGIN { print \"hello\" } # let's be cute'\n> >\n> \n> \n> The shell sees that the first two quotes match, and that a new quoted object begins at the end of the command line. It therefore\n> prompts with the secondary prompt, waiting for more input. With Unix awk, closing the quoted string produces this result:\n> \n> $ awk '{ print \"hello\" } # let's be cute'\n> > '\n> error\u2192 awk: can't open file be\n> error\u2192  source line number 1\n> \n> \n> Putting a backslash before the single quote in \u2018let's\u2019 wouldn\u2019t help, because backslashes are not special inside single quotes.\n> The next subsection describes the shell\u2019s quoting rules.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Shell Quoting Issues [Quoting.html], Previous: Executable awk Programs [Executable-Scripts.html], Up: How to Run awk\nPrograms [Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ed1d61d5-1512-427a-83c7-cb23cffd7658", "embedding": null, "doc_hash": "c80c688d39c28c081e35ef0a353c85c3e6d1dd52a0f03e859732268f4e8dea01", "extra_info": null, "node_info": {"start": 0, "end": 2934, "_node_type": "1"}, "relationships": {"1": "7b5e3d52-8ef4-466a-a529-58ed09640aa9"}}, "__type__": "1"}, "6be96f21-d6bd-498d-9263-97817e856ecd": {"__data__": {"text": "Next: Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html], Previous: History of gawk Features\n[Feature-History.html], Up: The Evolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.7 COMMON EXTENSIONS SUMMARY\n\nThe following table summarizes the common extensions supported by gawk, Brian Kernighan\u2019s awk, and mawk, the three most widely\nused freely available versions of awk (see Other Freely Available awk Implementations [Other-Versions.html]).\n\nFeatureBWK awkmawkgawkNow standard ** and **= operatorsXX \u2018\\x\u2019 escape sequenceXXX /dev/stdin special fileXXX /dev/stdout special\nfileXXX /dev/stderr special fileXXX BINMODE variableXX FS as null stringXXX delete without subscriptXXXX fflush() functionXXXX\nfunc keywordXX length() of an arrayXXX nextfile statementXXXX RS as regexpXXX Time-related functionsXX", "doc_id": "6be96f21-d6bd-498d-9263-97817e856ecd", "embedding": null, "doc_hash": "7f3844e450a076a182459a5bf48f8e0874d02f06457b4dedb125b5b66efc9227", "extra_info": null, "node_info": {"start": 0, "end": 1018, "_node_type": "1"}, "relationships": {"1": "e076b117-0d72-43c5-96d4-64693b85886d"}}, "__type__": "1"}, "7fad9ba3-0068-4dc4-9e3b-9eb9e02ea1fc": {"__data__": {"text": "Next: Errors Accumulate [Errors-accumulate.html], Previous: Many Numbers Cannot Be Represented Exactly\n[Inexact-representation.html], Up: Floating-Point Arithmetic Is Not Exact [Inexactness-of-computations.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.1.2 BE CAREFUL COMPARING VALUES\n\nBecause the underlying representation can be a little bit off from the exact value, comparing floating-point values to see if they\nare exactly equal is generally a bad idea. Here is an example where it does not work like you would expect:\n\n$ gawk 'BEGIN { print (0.1 + 12.2 == 12.3) }'\n-| 0\n\n\nThe general wisdom when comparing floating-point values is to see if they are within some small range of each other (called a\ndelta, or tolerance). You have to decide how small a delta is important to you. Code to do this looks something like the\nfollowing:\n\ndelta = 0.00001                 # for example\ndifference = abs(a - b)         # subtract the two values\nif (difference < delta)\n    # all ok\nelse\n    # not ok\n\n\n(We assume that you have a simple absolute value function named abs() defined elsewhere in your program.) If you write a function\nto compare values with a delta, you should be sure to use \u2018difference < abs(delta)\u2019 in case someone passes in a negative delta\nvalue.", "doc_id": "7fad9ba3-0068-4dc4-9e3b-9eb9e02ea1fc", "embedding": null, "doc_hash": "105b2007aae291c4ce4b2cfc2174d5844fb422dbf42d4e03e5f72aa046652d78", "extra_info": null, "node_info": {"start": 0, "end": 1418, "_node_type": "1"}, "relationships": {"1": "e9048fce-b353-4059-a3db-15675f2596e3"}}, "__type__": "1"}, "00b114e4-f5b6-4787-8c2f-e4a983089ee7": {"__data__": {"text": "Next: String Comparison Based on Locale Collating Order [POSIX-String-Comparison.html], Previous: String Type versus Numeric Type\n[Variable-Typing.html], Up: Variable Typing and Comparison Expressions [Typing-and-Comparison.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.2.2 COMPARISON OPERATORS\n\nComparison expressions compare strings or numbers for relationships such as equality. They are written using relational operators,\nwhich are a superset of those in C. Table 6.3 describes them.\n\nExpressionResult x < yTrue if x is less than y x <= yTrue if x is less than or equal to y x > yTrue if x is greater than y x >=\nyTrue if x is greater than or equal to y x == yTrue if x is equal to y x != yTrue if x is not equal to y x ~ yTrue if the string x\nmatches the regexp denoted by y x !~ yTrue if the string x does not match the regexp denoted by y subscript in arrayTrue if the\narray array has an element with the subscript subscript\n\nTable 6.3: Relational operators\n\nComparison expressions have the value one if true and zero if false. When comparing operands of mixed types, numeric operands are\nconverted to strings using the value of CONVFMT (see Conversion of Strings and Numbers [Conversion.html]).\n\nStrings are compared by comparing the first character of each, then the second character of each, and so on. Thus, \"10\" is less\nthan \"9\". If there are two strings where one is a prefix of the other, the shorter string is less than the longer one. Thus, \"abc\"\nis less than \"abcd\".\n\nIt is very easy to accidentally mistype the \u2018==\u2019 operator and leave off one of the \u2018=\u2019 characters. The result is still valid awk\ncode, but the program does not do what is intended:\n\nif (a = b)   # oops! should be a == b\n   \u2026\nelse\n   \u2026\n\n\nUnless b happens to be zero or the null string, the if part of the test always succeeds. Because the operators are so similar,\nthis kind of error is very difficult to spot when scanning the source code.\n\nThe following list of expressions illustrates the kinds of comparisons awk performs, as well as what the result of each comparison\nis:\n\n1.5 <= 2.0\n\nNumeric comparison (true)\n\n\"abc\" >= \"xyz\"\n\nString comparison (false)\n\n1.5 != \" +2\"\n\nString comparison (true)\n\n\"1e2\" < \"3\"\n\nString comparison (true)\n\na = 2; b = \"2\" a == b\n\nString comparison (true)\n\na = 2; b = \" +2\" a == b\n\nString comparison (false)\n\nIn this example:\n\n$ echo 1e2 3 | awk '{ print ($1 < $2) ? \"true\" : \"false\" }'\n-| false\n\n\nthe result is \u2018false\u2019 because both $1 and $2 are user input. They are numeric strings\u2014therefore both have the strnum attribute,\ndictating a numeric comparison. The purpose of the comparison rules and the use of numeric strings is to attempt to produce the\nbehavior that is \u201cleast surprising,\u201d while still \u201cdoing the right thing.\u201d\n\nString comparisons and regular expression comparisons are very different. For example:\n\nx == \"foo\"\n\n\nhas the value one, or is true if the variable x is precisely \u2018foo\u2019. By contrast:\n\nx ~ /foo/\n\n\nhas the value one if x contains \u2018foo\u2019, such as \"Oh, what a fool am I!\".\n\nThe righthand operand of the \u2018~\u2019 and \u2018!~\u2019 operators may be either a regexp constant (/\u2026/) or an ordinary expression. In the latter\ncase, the value of the expression as a string is used as a dynamic regexp (see How to Use Regular", "doc_id": "00b114e4-f5b6-4787-8c2f-e4a983089ee7", "embedding": null, "doc_hash": "0b1248e32e3e7daf1b2287acee2222d52e5086a8d20bd353f24605354e7ecd49", "extra_info": null, "node_info": {"start": 0, "end": 3397, "_node_type": "1"}, "relationships": {"1": "039eb23c-0653-417c-b5a8-f371c35ad956", "3": "f42ff8b3-0b3d-45fa-84f9-c48b56399739"}}, "__type__": "1"}, "f42ff8b3-0b3d-45fa-84f9-c48b56399739": {"__data__": {"text": "the expression as a string is used as a dynamic regexp (see How to Use Regular Expressions [Regexp-Usage.html];\nalso see Using Dynamic Regexps [Computed-Regexps.html]).\n\nA constant regular expression in slashes by itself is also an expression. /regexp/ is an abbreviation for the following comparison\nexpression:\n\n$0 ~ /regexp/\n\n\nOne special place where /foo/ is not an abbreviation for \u2018$0 ~ /foo/\u2019 is when it is the righthand operand of \u2018~\u2019 or \u2018!~\u2019. See\nUsing Regular Expression Constants [Using-Constant-Regexps.html], where this is discussed in more detail.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: String Comparison Based on Locale Collating Order [POSIX-String-Comparison.html], Previous: String Type versus Numeric Type\n[Variable-Typing.html], Up: Variable Typing and Comparison Expressions [Typing-and-Comparison.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f42ff8b3-0b3d-45fa-84f9-c48b56399739", "embedding": null, "doc_hash": "e00a63dd2f68cc18b0d7055ac93fae1a420f1ba5a64f7ba95a8a4f9e01462ff1", "extra_info": null, "node_info": {"start": 3319, "end": 4302, "_node_type": "1"}, "relationships": {"1": "039eb23c-0653-417c-b5a8-f371c35ad956", "2": "00b114e4-f5b6-4787-8c2f-e4a983089ee7"}}, "__type__": "1"}, "bc036322-9cf3-4661-9631-997a5c2735b1": {"__data__": {"text": "Next: Making Additions to gawk [Additions.html], Up: Implementation Notes [Notes.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nC.1 DOWNWARD COMPATIBILITY AND DEBUGGING\n\nSee Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html], for a summary of the GNU extensions to the awk language and program.\nAll of these features can be turned off by invoking gawk with the --traditional option or with the --posix option.\n\nIf gawk is compiled for debugging with \u2018-DDEBUG\u2019, then there is one more option available on the command line:\n\n-Y --parsedebug\n\nPrint out the parse stack information as the program is being parsed.\n\nThis option is intended only for serious gawk developers and not for the casual user. It probably has not even been compiled into\nyour version of gawk, since it slows down execution.", "doc_id": "bc036322-9cf3-4661-9631-997a5c2735b1", "embedding": null, "doc_hash": "5fba2f23602ed67f8964839d283111bba1fd23f361af57f81dc29da192533fa6", "extra_info": null, "node_info": {"start": 0, "end": 951, "_node_type": "1"}, "relationships": {"1": "f6c853d8-6da3-4177-899e-deed22667ed0"}}, "__type__": "1"}, "32bc3270-eb5e-4d2d-b68b-e793000aac2e": {"__data__": {"text": "Next: Building the Documentation [Building-the-Documentation.html], Previous: The Configuration Process\n[Configuration-Philosophy.html], Up: Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.5 COMPILING FROM GIT\n\nBuilding gawk directly from the development source control repository is possible, but not recommended for everyday users, as the\ncode may not be as stable as released versions are. If you really do want to do that, here are the steps:\n\ngit clone https://git.savannah.gnu.org/r/gawk.git\ncd gawk\n./bootstrap.sh && ./configure && make && make check\n", "doc_id": "32bc3270-eb5e-4d2d-b68b-e793000aac2e", "embedding": null, "doc_hash": "1ce9fe7867677a693d9670fb7da409d7f629942a226d0486b2fa4e516535e559", "extra_info": null, "node_info": {"start": 0, "end": 782, "_node_type": "1"}, "relationships": {"1": "d172a959-b2ae-40aa-8170-96f018dc1e3e"}}, "__type__": "1"}, "98b80ca9-c90d-4fe8-a8b2-787c0ca3d276": {"__data__": {"text": "Up: Compiling gawk for Unix-Like Systems [Quick-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.1.1 BUILDING WITH MPFR\n\nUse of the MPFR library with gawk is an optional feature: if you have the MPFR and GMP libraries already installed when you\nconfigure and build gawk, gawk automatically will be able to use them.\n\nYou can install these libraries from source code by fetching them from the GNU distribution site at ftp.gnu.org.\n\nMost modern systems provide package managers which save you the trouble of building from source. They fetch and install the\nlibrary header files and binaries for you. You will need to research how to do this for your particular system.", "doc_id": "98b80ca9-c90d-4fe8-a8b2-787c0ca3d276", "embedding": null, "doc_hash": "389a3457f5e80020e839db81e67945805200458bf1efd1040c91ddb11f6c9999", "extra_info": null, "node_info": {"start": 0, "end": 832, "_node_type": "1"}, "relationships": {"1": "efbe03d1-bc3f-471c-a275-ef79d526ed0d"}}, "__type__": "1"}, "a8bd793e-40c2-49b0-adac-ad00b7dd76f0": {"__data__": {"text": "Next: gawk-Specific Regexp Operators [GNU-Regexp-Operators.html], Previous: How Much Text Matches? [Leftmost-Longest.html], Up:\nRegular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.6 USING DYNAMIC REGEXPS\n\nThe righthand side of a \u2018~\u2019 or \u2018!~\u2019 operator need not be a regexp constant (i.e., a string of characters between slashes). It may\nbe any expression. The expression is evaluated and converted to a string if necessary; the contents of the string are then used as\nthe regexp. A regexp computed in this way is called a dynamic regexp or a computed regexp:\n\nBEGIN { digits_regexp = \"[[:digit:]]+\" }\n$0 ~ digits_regexp    { print }\n\n\nThis sets digits_regexp to a regexp that describes one or more digits, and tests whether the input record matches this regexp.\n\n> NOTE: When using the \u2018~\u2019 and \u2018!~\u2019 operators, be aware that there is a difference between a regexp constant enclosed in slashes\n> and a string constant enclosed in double quotes. If you are going to use a string constant, you have to understand that the\n> string is, in essence, scanned twice: the first time when awk reads your program, and the second time when it goes to match the\n> string on the lefthand side of the operator with the pattern on the right. This is true of any string-valued expression (such as\n> digits_regexp, shown in the previous example), not just string constants.\n\nWhat difference does it make if the string is scanned twice? The answer has to do with escape sequences, and particularly with\nbackslashes. To get a backslash into a regular expression inside a string, you have to type two backslashes.\n\nFor example, /\\*/ is a regexp constant for a literal \u2018*\u2019. Only one backslash is needed. To do the same thing with a string, you\nhave to type \"\\\\*\". The first backslash escapes the second one so that the string actually contains the two characters \u2018\\\u2019 and\n\u2018*\u2019.\n\nGiven that you can use both regexp and string constants to describe regular expressions, which should you use? The answer is\n\u201cregexp constants,\u201d for several reasons:\n\n * String constants are more complicated to write and more difficult to read. Using regexp constants makes your programs less\n   error-prone. Not understanding the difference between the two kinds of constants is a common source of errors.\n * It is more efficient to use regexp constants. awk can note that you have supplied a regexp and store it internally in a form\n   that makes pattern matching more efficient. When using a string constant, awk must first convert the string into this internal\n   form and then perform the pattern matching.\n * Using regexp constants is better form; it shows clearly that you intend a regexp match.\n\nUsing \\n in Bracket Expressions of Dynamic Regexps\n\nSome older versions of awk do not allow the newline character to be used inside a bracket expression for a dynamic regexp:\n\n$ awk '$0 ~ \"[ \\t\\n]\"'\nerror\u2192 awk: newline in character class [\nerror\u2192 ]...\nerror\u2192  source line number 1\nerror\u2192  context is\nerror\u2192        $0 ~ \"[ >>>  \\t\\n]\" <<<\n\n\nBut a newline in a regexp constant works with no problem:\n\n$ awk '$0 ~ /[ \\t\\n]/'\nhere is a sample line\n-| here is a sample line\nCtrl-d\n\n\ngawk does not have this problem, and it isn\u2019t likely to occur often in practice, but it\u2019s worth noting for future reference.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: gawk-Specific Regexp Operators [GNU-Regexp-Operators.html], Previous: How Much Text Matches?", "doc_id": "a8bd793e-40c2-49b0-adac-ad00b7dd76f0", "embedding": null, "doc_hash": "09ecee6017ca681944f2516409edc770b9e7b3cb0c2ff88e43b16fd7aee60e3e", "extra_info": null, "node_info": {"start": 0, "end": 3667, "_node_type": "1"}, "relationships": {"1": "dea75562-ec08-475d-a825-2ecf25b58aed", "3": "ba1d04f4-43e5-4119-8be0-d1ac4cc6f7a5"}}, "__type__": "1"}, "ba1d04f4-43e5-4119-8be0-d1ac4cc6f7a5": {"__data__": {"text": "Previous: How Much Text Matches? [Leftmost-Longest.html], Up:\nRegular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ba1d04f4-43e5-4119-8be0-d1ac4cc6f7a5", "embedding": null, "doc_hash": "58e3c92838a380024632e823adf1052872d0209664f755cf9a7725f025f5d92a", "extra_info": null, "node_info": {"start": 3635, "end": 3789, "_node_type": "1"}, "relationships": {"1": "dea75562-ec08-475d-a825-2ecf25b58aed", "2": "a8bd793e-40c2-49b0-adac-ad00b7dd76f0"}}, "__type__": "1"}, "7d00dede-a4a5-4f63-8bfc-3c6ec2394b7e": {"__data__": {"text": "Next: Other Stuff to Know [Math-Definitions.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.1 A GENERAL DESCRIPTION OF COMPUTER ARITHMETIC\n\nUntil now, we have worked with data as either numbers or strings. Ultimately, however, computers represent everything in terms of\nbinary digits, or bits. A decimal digit can take on any of 10 values: zero through nine. A binary digit can take on any of two\nvalues, zero or one. Using binary, computers (and computer software) can represent and manipulate numerical and character data. In\ngeneral, the more bits you can use to represent a particular thing, the greater the range of possible values it can take on.\n\nModern computers support at least two, and often more, ways to do arithmetic. Each kind of arithmetic uses a different\nrepresentation (organization of the bits) for the numbers. The kinds of arithmetic that interest us are:\n\nDecimal arithmetic\n\nThis is the kind of arithmetic you learned in elementary school, using paper and pencil (and/or a calculator). In theory, numbers\ncan have an arbitrary number of digits on either side (or both sides) of the decimal point, and the results of a computation are\nalways exact.\n\nSome modern systems can do decimal arithmetic in hardware, but usually you need a special software library to provide access to\nthese instructions. There are also libraries that do decimal arithmetic entirely in software.\n\nDespite the fact that some users expect gawk to be performing decimal arithmetic,96 it does not do so.\n\nInteger arithmetic\n\nIn school, integer values were referred to as \u201cwhole\u201d numbers\u2014that is, numbers without any fractional part, such as 1, 42, or \u221217.\nThe advantage to integer numbers is that they represent values exactly. The disadvantage is that their range is limited.\n\nIn computers, integer values come in two flavors: signed and unsigned. Signed values may be negative or positive, whereas unsigned\nvalues are always greater than or equal to zero.\n\nIn computer systems, integer arithmetic is exact, but the possible range of values is limited. Integer arithmetic is generally\nfaster than floating-point arithmetic.\n\nFloating-point arithmetic\n\nFloating-point numbers represent what were called in school \u201creal\u201d numbers (i.e., those that have a fractional part, such as\n3.1415927). The advantage to floating-point numbers is that they can represent a much larger range of values than can integers.\nThe disadvantage is that there are numbers that they cannot represent exactly.\n\nModern systems support floating-point arithmetic in hardware, with a limited range of values. There are software libraries that\nallow the use of arbitrary-precision floating-point calculations.\n\nPOSIX awk uses double-precision floating-point numbers, which can hold more digits than single-precision floating-point numbers.\ngawk has facilities for performing arbitrary-precision floating-point arithmetic, which we describe in more detail shortly.\n\nComputers work with integer and floating-point values of different ranges. Integer values are usually either 32 or 64 bits in\nsize. Single-precision floating-point values occupy 32 bits, whereas double-precision floating-point values occupy 64 bits.\n(Quadruple-precision floating point values also exist. They occupy 128 bits, but such numbers are not available in awk.)\nFloating-point values are always signed. The possible ranges of values are shown in Table 16.1 and Table 16.2.\n\nRepresentationMinimum valueMaximum value 32-bit signed integer\u22122,147,483,6482,147,483,647 32-bit unsigned integer04,294,967,295\n64-bit signed integer\u22129,223,372,036,854,775,8089,223,372,036,854,775,807 64-bit unsigned integer018,446,744,073,709,551,615\n\nTable 16.1:", "doc_id": "7d00dede-a4a5-4f63-8bfc-3c6ec2394b7e", "embedding": null, "doc_hash": "12fc10673b9ebcb14a26727b56fc2763bd29de1b58c307fd6446aac3b8bf2ed7", "extra_info": null, "node_info": {"start": 0, "end": 3930, "_node_type": "1"}, "relationships": {"1": "68eff820-5cc9-4310-80c8-da499c8835b1", "3": "10383505-6df5-48f8-87d3-b5ded692f430"}}, "__type__": "1"}, "10383505-6df5-48f8-87d3-b5ded692f430": {"__data__": {"text": "16.1: Value ranges for integer representations\n\nRepresentationMinimum positive nonzero valueMinimum finite valueMaximum finite value Single-precision\nfloating-point1.175494*10-38-3.402823*10383.402823*1038 Double-precision\nfloating-point2.225074*10-308-1.797693*103081.797693*10308 Quadruple-precision\nfloating-point3.362103*10-4932-1.189731*1049321.189731*104932\n\nTable 16.2: Approximate value ranges for floating-point number representations\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(96)\n\nWe don\u2019t know why they expect this, but they do.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Other Stuff to Know [Math-Definitions.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "10383505-6df5-48f8-87d3-b5ded692f430", "embedding": null, "doc_hash": "24bd4ef1982c6e1d2bfcc0f20afd7525ebf1a9ef71d8eb194e0f58fb98054e22", "extra_info": null, "node_info": {"start": 3925, "end": 4908, "_node_type": "1"}, "relationships": {"1": "68eff820-5cc9-4310-80c8-da499c8835b1", "2": "7d00dede-a4a5-4f63-8bfc-3c6ec2394b7e"}}, "__type__": "1"}, "3a8a32f2-cef0-4039-a955-e01736532671": {"__data__": {"text": "Next: Assignment Expressions [Assignment-Ops.html], Previous: Arithmetic Operators [Arithmetic-Ops.html], Up: Operators: Doing\nSomething with Values [All-Operators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.2.2 STRING CONCATENATION\n\n> It seemed like a good idea at the time.\n\n\u2014 Brian Kernighan\n\nThere is only one string operation: concatenation. It does not have a specific operator to represent it. Instead, concatenation is\nperformed by writing expressions next to one another, with no operator. For example:\n\n$ awk '{ print \"Field number one: \" $1 }' mail-list\n-| Field number one: Amelia\n-| Field number one: Anthony\n\u2026\n\n\nWithout the space in the string constant after the \u2018:\u2019, the line runs together. For example:\n\n$ awk '{ print \"Field number one:\" $1 }' mail-list\n-| Field number one:Amelia\n-| Field number one:Anthony\n\u2026\n\n\nBecause string concatenation does not have an explicit operator, it is often necessary to ensure that it happens at the right time\nby using parentheses to enclose the items to concatenate. For example, you might expect that the following code fragment\nconcatenates file and name:\n\nfile = \"file\"\nname = \"name\"\nprint \"something meaningful\" > file name\n\n\nThis produces a syntax error with some versions of Unix awk.32 It is necessary to use the following:\n\nprint \"something meaningful\" > (file name)\n\n\nParentheses should be used around concatenation in all but the most common contexts, such as on the righthand side of \u2018=\u2019. Be\ncareful about the kinds of expressions used in string concatenation. In particular, the order of evaluation of expressions used\nfor concatenation is undefined in the awk language. Consider this example:\n\nBEGIN {\n    a = \"don't\"\n    print (a \" \" (a = \"panic\"))\n}\n\n\nIt is not defined whether the second assignment to a happens before or after the value of a is retrieved for producing the\nconcatenated value. The result could be either \u2018don't panic\u2019, or \u2018panic panic\u2019.\n\nThe precedence of concatenation, when mixed with other operators, is often counter-intuitive. Consider this example:\n\n$ awk 'BEGIN { print -12 \" \" -24 }'\n-| -12-24\n\n\nThis \u201cobviously\u201d is concatenating \u221212, a space, and \u221224. But where did the space disappear to? The answer lies in the combination\nof operator precedences and awk\u2019s automatic conversion rules. To get the desired result, write the program this way:\n\n$ awk 'BEGIN { print -12 \" \" (-24) }'\n-| -12 -24\n\n\nThis forces awk to treat the \u2018-\u2019 on the \u2018-24\u2019 as unary. Otherwise, it\u2019s parsed as follows:\n\n    \u221212 (\"\u00a0\" \u2212 24)\n\u21d2 \u221212 (0 \u2212 24)\n\u21d2 \u221212 (\u221224)\n\u21d2 \u221212\u221224\n\n\nAs mentioned earlier, when mixing concatenation with other operators, parenthesize. Otherwise, you\u2019re never quite sure what you\u2019ll\nget.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(32)\n\nIt happens that BWK awk, gawk, and mawk all \u201cget it right,\u201d but you should not rely on this.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Assignment Expressions [Assignment-Ops.html], Previous: Arithmetic Operators [Arithmetic-Ops.html], Up: Operators: Doing\nSomething with Values [All-Operators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3a8a32f2-cef0-4039-a955-e01736532671", "embedding": null, "doc_hash": "5809d1fe807d1c574ab7a228b66757399aaa3058bdf1c964620ac52dc36572ec", "extra_info": null, "node_info": {"start": 0, "end": 3433, "_node_type": "1"}, "relationships": {"1": "017db932-59b4-407f-97cf-b65f2e71dbe5"}}, "__type__": "1"}, "987c44f3-a474-470c-be38-d07facc02fdf": {"__data__": {"text": "Previous: Boolean Expressions [Boolean-Ops.html], Up: Truth Values and Conditions [Truth-Values-and-Conditions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.4 CONDITIONAL EXPRESSIONS\n\nA conditional expression is a special kind of expression that has three operands. It allows you to use one expression\u2019s value to\nselect one of two other expressions. The conditional expression in awk is the same as in the C language, as shown here:\n\nselector ? if-true-exp : if-false-exp\n\n\nThere are three subexpressions. The first, selector, is always computed first. If it is \u201ctrue\u201d (not zero or not null), then\nif-true-exp is computed next, and its value becomes the value of the whole expression. Otherwise, if-false-exp is computed next,\nand its value becomes the value of the whole expression. For example, the following expression produces the absolute value of x:\n\nx >= 0 ? x : -x\n\n\nEach time the conditional expression is computed, only one of if-true-exp and if-false-exp is used; the other is ignored. This is\nimportant when the expressions have side effects. For example, this conditional expression examines element i of either array a or\narray b, and increments i:\n\nx == y ? a[i++] : b[i++]\n\n\nThis is guaranteed to increment i exactly once, because each time only one of the two increment expressions is executed and the\nother is not. See Arrays in awk [Arrays.html], for more information about arrays.\n\nAs a minor gawk extension, a statement that uses \u2018?:\u2019 can be continued simply by putting a newline after either character.\nHowever, putting a newline in front of either character does not work without using backslash continuation (see awk Statements\nVersus Lines [Statements_002fLines.html]). If --posix is specified (see Command-Line Options [Options.html]), this extension is\ndisabled.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Boolean Expressions [Boolean-Ops.html], Up: Truth Values and Conditions [Truth-Values-and-Conditions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "987c44f3-a474-470c-be38-d07facc02fdf", "embedding": null, "doc_hash": "b6760e158593a3e323d06b60c68aa06a3fb69812ceff5732fefc2a68deaee199", "extra_info": null, "node_info": {"start": 0, "end": 2254, "_node_type": "1"}, "relationships": {"1": "862a067e-ed8d-46e2-b0fe-28933c4eef7f"}}, "__type__": "1"}, "78fa2dfd-fda3-4137-9923-a94f8430f61d": {"__data__": {"text": "Next: Compiling from Git [Compiling-from-Git.html], Previous: Additional Configuration Options\n[Additional-Configuration-Options.html], Up: Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.4 THE CONFIGURATION PROCESS\n\nThis section is of interest only if you know something about using the C language and Unix-like operating systems.\n\nThe source code for gawk generally attempts to adhere to formal standards wherever possible. This means that gawk uses library\nroutines that are specified by the ISO C standard and by the POSIX operating system interface standard. The gawk source code\nrequires using an ISO C compiler (the 1999 standard).\n\nMany Unix systems do not support all of either the ISO or the POSIX standards. The missing_d subdirectory in the gawk distribution\ncontains replacement versions of those functions that are most likely to be missing.\n\nThe config.h file that configure creates contains definitions that describe features of the particular operating system where you\nare attempting to compile gawk. The three things described by this file are: what header files are available, so that they can be\ncorrectly included, what (supposedly) standard functions are actually available in your C libraries, and various miscellaneous\nfacts about your operating system. For example, there may not be an st_blksize element in the stat structure. In this case,\n\u2018HAVE_STRUCT_STAT_ST_BLKSIZE\u2019 is undefined.\n\nIt is possible for your C compiler to lie to configure. It may do so by not exiting with an error when a library function is not\navailable. To get around this, edit the custom.h file. Use an \u2018#ifdef\u2019 that is appropriate for your system, and either #define any\nconstants that configure should have defined but didn\u2019t, or #undef any constants that configure defined and should not have. The\ncustom.h file is automatically included by the config.h file.\n\nIt is also possible that the configure program generated by Autoconf will not work on your system in some other fashion. If you do\nhave a problem, the configure.ac file is the input for Autoconf. You may be able to change this file and generate a new version of\nconfigure that works on your system (see Reporting Problems and Bugs [Bugs.html] for information on how to report problems in\nconfiguring gawk). The same mechanism may be used to send in updates to configure.ac and/or custom.h.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Compiling from Git [Compiling-from-Git.html], Previous: Additional Configuration Options\n[Additional-Configuration-Options.html], Up: Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "78fa2dfd-fda3-4137-9923-a94f8430f61d", "embedding": null, "doc_hash": "80c261379fa13d5b4e9fb1993411a342fa704127381cdf14693edbc18f7f33f3", "extra_info": null, "node_info": {"start": 0, "end": 2986, "_node_type": "1"}, "relationships": {"1": "dbeed5b2-056c-4c6e-ad34-79e7922deace"}}, "__type__": "1"}, "5ca786c1-211c-40a5-8f61-8e6e16c7c3e1": {"__data__": {"text": "Next: Defining Fields by Content [Splitting-By-Content.html], Previous: Specifying How Fields Are Separated\n[Field-Separators.html], Up: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.6 READING FIXED-WIDTH DATA\n\nThis section discusses an advanced feature of gawk. If you are a novice awk user, you might want to skip it on the first reading.\n\ngawk provides a facility for dealing with fixed-width fields with no distinctive field separator. We discuss this feature in the\nfollowing subsections.\n\n * Processing Fixed-Width Data [Fixed-width-data.html]\n * Skipping Intervening Fields [Skipping-intervening.html]\n * Capturing Optional Trailing Data [Allowing-trailing-data.html]\n * Field Values With Fixed-Width Data [Fields-with-fixed-data.html]", "doc_id": "5ca786c1-211c-40a5-8f61-8e6e16c7c3e1", "embedding": null, "doc_hash": "769cb53152f8194f0bbd86989d36d99e7035420c2f394008321cd46fff41594b", "extra_info": null, "node_info": {"start": 0, "end": 932, "_node_type": "1"}, "relationships": {"1": "3d525d1a-886d-4dc9-9a4d-6ec76037022b"}}, "__type__": "1"}, "8c717067-da72-44a7-b404-ced3b7e1a260": {"__data__": {"text": "Next: Using Regular Expression Constants [Using-Constant-Regexps.html], Up: Constants, Variables, and Conversions [Values.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.1 CONSTANT EXPRESSIONS\n\nThe simplest type of expression is the constant, which always has the same value. There are three types of constants: numeric,\nstring, and regular expression.\n\nEach is used in the appropriate context when you need a data value that isn\u2019t going to change. Numeric constants can have\ndifferent forms, but are internally stored in an identical manner.\n\n * Numeric and String Constants [Scalar-Constants.html]\n * Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html]\n * Regular Expression Constants [Regexp-Constants.html]", "doc_id": "8c717067-da72-44a7-b404-ced3b7e1a260", "embedding": null, "doc_hash": "37403c73058987ee2114d71cd3ba0fc529c5d5cb255e802e4280d425bd33d867", "extra_info": null, "node_info": {"start": 0, "end": 872, "_node_type": "1"}, "relationships": {"1": "bbf0ee24-fcdd-4d29-80cd-fea7d9aff353"}}, "__type__": "1"}, "22a48e6f-e991-4b09-a028-9035ca78b528": {"__data__": {"text": "Next: Managing MPFR and GMP Values [API-Ownership-of-MPFR-and-GMP-Values.html], Previous: Memory Allocation Functions and\nConvenience Macros [Memory-Allocation-Functions.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.4 CONSTRUCTOR FUNCTIONS\n\nThe API provides a number of constructor functions for creating string and numeric values, as well as a number of convenience\nmacros. This subsection presents them all as function prototypes, in the way that extension code would use them:\n\nstatic inline awk_value_t * make_const_string(const char *string, size_t length, awk_value_t *result);\n\nThis function creates a string value in the awk_value_t variable pointed to by result. It expects string to be a C string constant\n(or other string data), and automatically creates a copy of the data for storage in result. It returns result.\n\nstatic inline awk_value_t * make_malloced_string(const char *string, size_t length, awk_value_t *result);\n\nThis function creates a string value in the awk_value_t variable pointed to by result. It expects string to be a \u2018char *\u2019 value\npointing to data previously obtained from gawk_malloc(), gawk_calloc(), or gawk_realloc(). The idea here is that the data is\npassed directly to gawk, which assumes responsibility for it. It returns result.\n\nstatic inline awk_value_t * make_null_string(awk_value_t *result);\n\nThis specialized function creates a null string (the \u201cundefined\u201d value) in the awk_value_t variable pointed to by result. It\nreturns result.\n\nstatic inline awk_value_t * make_number(double num, awk_value_t *result);\n\nThis function simply creates a numeric value in the awk_value_t variable pointed to by result.\n\nstatic inline awk_value_t * make_number_mpz(void *mpz, awk_value_t *result);\n\nThis function creates a GMP number value in result. The mpz must be from a call to get_mpz_ptr() (and thus be of real underlying\ntype mpz_ptr).\n\nstatic inline awk_value_t * make_number_mpfr(void *mpfr, awk_value_t *result);\n\nThis function creates an MPFR number value in result. The mpfr must be from a call to get_mpfr_ptr().\n\nstatic inline awk_value_t * make_const_user_input(const char *string, size_t length, awk_value_t *result);\n\nThis function is identical to make_const_string(), but the string is flagged as user input that should be treated as a strnum\nvalue if the contents of the string are numeric.\n\nstatic inline awk_value_t * make_malloced_user_input(const char *string, size_t length, awk_value_t *result);\n\nThis function is identical to make_malloced_string(), but the string is flagged as user input that should be treated as a strnum\nvalue if the contents of the string are numeric.\n\nstatic inline awk_value_t * make_const_regex(const char *string, size_t length, awk_value_t *result);\n\nThis function creates a strongly typed regexp value by allocating a copy of the string. string is the regular expression of length\nlen.\n\nstatic inline awk_value_t * make_malloced_regex(const char *string, size_t length, awk_value_t *result);\n\nThis function creates a strongly typed regexp value. string is the regular expression of length len. It expects string to be a\n\u2018char *\u2019 value pointing to data previously obtained from gawk_malloc(), gawk_calloc(), or gawk_realloc().\n\nstatic inline awk_value_t * make_bool(awk_bool_t boolval, awk_value_t *result);\n\nThis function creates a boolean value in", "doc_id": "22a48e6f-e991-4b09-a028-9035ca78b528", "embedding": null, "doc_hash": "ec68a6d66eaa590223b7fc8a742fbb4c50b9c250c1921110847205f0a7f9781e", "extra_info": null, "node_info": {"start": 0, "end": 3543, "_node_type": "1"}, "relationships": {"1": "0ad223bd-3727-4850-8b7b-bc5f297e4a33", "3": "a6c01898-9ee1-446d-8bc5-9994f96945f5"}}, "__type__": "1"}, "a6c01898-9ee1-446d-8bc5-9994f96945f5": {"__data__": {"text": "awk_value_t *result);\n\nThis function creates a boolean value in the awk_value_t variable pointed to by result.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Managing MPFR and GMP Values [API-Ownership-of-MPFR-and-GMP-Values.html], Previous: Memory Allocation Functions and\nConvenience Macros [Memory-Allocation-Functions.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a6c01898-9ee1-446d-8bc5-9994f96945f5", "embedding": null, "doc_hash": "344636540ecec5bf0f96bbd2681b2a01d6ee3b7d0f8b4b8462a604948bee7c1b", "extra_info": null, "node_info": {"start": 3480, "end": 4012, "_node_type": "1"}, "relationships": {"1": "0ad223bd-3727-4850-8b7b-bc5f297e4a33", "2": "22a48e6f-e991-4b09-a028-9035ca78b528"}}, "__type__": "1"}, "561bf132-26fa-453f-870b-797e8806dc79": {"__data__": {"text": "Next: The next Statement [Next-Statement.html], Previous: The break Statement [Break-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.7 THE CONTINUE STATEMENT\n\nSimilar to break, the continue statement is used only inside for, while, and do loops. It skips over the rest of the loop body,\ncausing the next cycle around the loop to begin immediately. Contrast this with break, which jumps out of the loop altogether.\n\nThe continue statement in a for loop directs awk to skip the rest of the body of the loop and resume execution with the\nincrement-expression of the for statement. The following program illustrates this fact:\n\nBEGIN {\n     for (x = 0; x <= 20; x++) {\n         if (x == 5)\n             continue\n         printf \"%d \", x\n     }\n     print \"\"\n}\n\n\nThis program prints all the numbers from 0 to 20\u2014except for 5, for which the printf is skipped. Because the increment \u2018x++\u2019 is not\nskipped, x does not remain stuck at 5. Contrast the for loop from the previous example with the following while loop:\n\nBEGIN {\n     x = 0\n     while (x <= 20) {\n         if (x == 5)\n             continue\n         printf \"%d \", x\n         x++\n     }\n     print \"\"\n}\n\n\nThis program loops forever once x reaches 5, because the increment (\u2018x++\u2019) is never reached.\n\nThe continue statement has no special meaning with respect to the switch statement, nor does it have any meaning when used outside\nthe body of a loop. Historical versions of awk treated a continue statement outside a loop the same way they treated a break\nstatement outside a loop: as if it were a next statement (see The next Statement [Next-Statement.html]). (d.c.) Recent versions of\nBWK awk no longer work this way, nor does gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The next Statement [Next-Statement.html], Previous: The break Statement [Break-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "561bf132-26fa-453f-870b-797e8806dc79", "embedding": null, "doc_hash": "958f86cecf125b644539d23a0a2d725e899ccac8d4fd2a05acd2f99dd9f7fa95", "extra_info": null, "node_info": {"start": 0, "end": 2247, "_node_type": "1"}, "relationships": {"1": "673fb36b-60a5-4c40-8152-eb689ce78af1"}}, "__type__": "1"}, "93b06f1f-1274-47d8-8043-6836eb97f58e": {"__data__": {"text": "Next: Summary [History-summary.html], Previous: Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html], Up: The\nEvolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.9 MAJOR CONTRIBUTORS TO GAWK\n\n> Always give credit where credit is due.\n\n\u2014 Anonymous\n\nThis section names the major contributors to gawk and/or this Web page, in approximate chronological order:\n\n * Dr. Alfred V. Aho, Dr. Peter J. Weinberger, and Dr. Brian W. Kernighan, all of Bell Laboratories, designed and implemented Unix\n   awk, from which gawk gets the majority of its feature set.\n * Paul Rubin did the initial design and implementation in 1986, and wrote the first draft (around 40 pages) of this Web page.\n * Jay Fenlason finished the initial implementation.\n * Diane Close revised the first draft of this Web page, bringing it to around 90 pages.\n * Richard Stallman helped finish the implementation and the initial draft of this Web page. He is also the founder of the FSF and\n   the GNU Project.\n * John Woods contributed parts of the code (mostly fixes) in the initial version of gawk.\n * In 1988, David Trueman took over primary maintenance of gawk, making it compatible with \u201cnew\u201d awk, and greatly improving its\n   performance.\n * Conrad Kwok, Scott Garfinkle, and Kent Williams did the initial ports to MS-DOS with various versions of MSC.\n * Pat Rankin provided the VMS port and its documentation.\n * Hal Peterson provided help in porting gawk to Cray systems. (This is no longer supported.)\n * Kai Uwe Rommel provided the initial port to OS/2 and its documentation.\n * Michal Jaegermann provided the port to Atari systems and its documentation. (This port is no longer supported.) He continues to\n   provide portability checking, and has done a lot of work to make sure gawk works on non-32-bit systems.\n * Fred Fish provided the port to Amiga systems and its documentation. (With Fred\u2019s sad passing, this is no longer supported.)\n * Scott Deifik formerly maintained the MS-DOS port using DJGPP.\n * Eli Zaretskii currently maintains the MS-Windows port using MinGW.\n * Juan Grigera provided a port to Windows32 systems. (This is no longer supported.)\n * For many years, Dr. Darrel Hankerson acted as coordinator for the various ports to different PC platforms and created binary\n   distributions for various PC operating systems. He was also instrumental in keeping the documentation up to date for the\n   various PC platforms.\n * Christos Zoulas provided the extension() built-in function for dynamically adding new functions. (This was obsoleted at gawk\n   4.1.)\n * J\u00fcrgen Kahrs contributed the initial version of the TCP/IP networking code and documentation, and motivated the inclusion of\n   the \u2018|&\u2019 operator.\n * Stephen Davies provided the initial port to Tandem systems and its documentation. (However, this is no longer supported.) He\n   was also instrumental in the initial work to integrate the byte-code internals into the gawk code base. Additionally, he did\n   most of the work enabling the pretty-printer to preserve and output comments.\n * Matthew Woehlke provided improvements for Tandem\u2019s POSIX-compliant systems.\n * Martin Brown provided the port to BeOS and its documentation. (This is no longer supported.)\n * Arno Peters did the initial work to convert gawk to use GNU Automake and GNU gettext.\n * Alan J. Broder provided the initial version of the asort() function as well as the code for the optional third argument to the\n   match() function.\n * Andreas Buening updated the gawk port for OS/2.\n * Isamu Hasegawa, of IBM in Japan, contributed support for multibyte characters.\n * Michael Benzinger", "doc_id": "93b06f1f-1274-47d8-8043-6836eb97f58e", "embedding": null, "doc_hash": "60214fffd4166cba4b6f9206944d9ff1c0f98d71d2c745170f45e13ffb6744d1", "extra_info": null, "node_info": {"start": 0, "end": 3814, "_node_type": "1"}, "relationships": {"1": "9c9d0bdd-015d-46ae-93b7-334d31dd2f0c", "3": "52eeecd8-d684-48a4-8bcf-c517b0df1f23"}}, "__type__": "1"}, "52eeecd8-d684-48a4-8bcf-c517b0df1f23": {"__data__": {"text": "in Japan, contributed support for multibyte characters.\n * Michael Benzinger contributed the initial code for switch statements.\n * Patrick T.J. McPhee contributed the code for dynamic loading in Windows32 environments. (This is no longer supported.)\n * Anders Wallin helped keep the VMS port going for several years.\n * Assaf Gordon contributed the initial code to implement the --sandbox option.\n * John Haque made the following contributions:\n   * The modifications to convert gawk into a byte-code interpreter, including the debugger\n   * The addition of true arrays of arrays\n   * The additional modifications for support of arbitrary-precision arithmetic\n   * The initial text of Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html]\n   * The work to merge the three versions of gawk into one, for the 4.1 release\n   * Improved array internals for arrays indexed by integers\n   * The improved array sorting features were also driven by John, together with Pat Rankin\n * Panos Papadopoulos contributed the original text for Including Other Files into Your Program [Include-Files.html].\n * Efraim Yawitz contributed the original text for Debugging awk Programs [Debugger.html].\n * The development of the extension API first released with gawk 4.1 was driven primarily by Arnold Robbins and Andrew Schorr,\n   with notable contributions from the rest of the development team.\n * John Malmberg contributed significant improvements to the OpenVMS port and the related documentation.\n * Antonio Giovanni Colombo rewrote a number of examples in the early chapters that were severely dated, for which I am incredibly\n   grateful. He also provided and maintains the Italian translation.\n * Marco Curreli, together with Antonio Colombo, translated this Web page into Italian. It is included in the gawk distribution.\n * Juan Manuel Guerrero took over maintenance of the DJGPP port.\n * \u201cJannick\u201d provided support for MSYS2.\n * Arnold Robbins has been working on gawk since 1988, at first helping David Trueman, and as the primary maintainer since around\n   1994.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [History-summary.html], Previous: Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html], Up: The\nEvolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "52eeecd8-d684-48a4-8bcf-c517b0df1f23", "embedding": null, "doc_hash": "69bf607b236aaa36d261cd6ae625f76f5189fd15eef33d0d3a683753bbbfcae4", "extra_info": null, "node_info": {"start": 3738, "end": 6207, "_node_type": "1"}, "relationships": {"1": "9c9d0bdd-015d-46ae-93b7-334d31dd2f0c", "2": "93b06f1f-1274-47d8-8043-6836eb97f58e"}}, "__type__": "1"}, "e90529fe-4586-4d42-9731-b818d4d2d229": {"__data__": {"text": "Next: Modifiers for printf Formats [Format-Modifiers.html], Previous: Introduction to the printf Statement [Basic-Printf.html],\nUp: Using printf Statements for Fancier Printing [Printf.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.5.2 FORMAT-CONTROL LETTERS\n\nA format specifier starts with the character \u2018%\u2019 and ends with a format-control letter\u2014it tells the printf statement how to output\none item. The format-control letter specifies what kind of value to print. The rest of the format specifier is made up of optional\nmodifiers that control how to print the value, such as the field width. Here is a list of the format-control letters:\n\n%a, %A\n\nA floating point number of the form [-]0xh.hhhhp+-dd (C99 hexadecimal floating point format). For %A, uppercase letters are used\ninstead of lowercase ones.\n\n> NOTE: The current POSIX standard requires support for %a and %A in awk. As far as we know, besides gawk, the only other version\n> of awk that actually implements it is BWK awk. It\u2019s use is thus highly nonportable!\n> \n> Furthermore, these formats are not available on any system where the underlying C library printf() function does not support\n> them. As of this writing, among current systems, only OpenVMS is known to not support them.\n\n%c\n\nPrint a number as a character; thus, \u2018printf \"%c\", 65\u2019 outputs the letter \u2018A\u2019. The output for a string value is the first\ncharacter of the string.\n\n> NOTE: The POSIX standard says the first character of a string is printed. In locales with multibyte characters, gawk attempts to\n> convert the leading bytes of the string into a valid wide character and then to print the multibyte encoding of that character.\n> Similarly, when printing a numeric value, gawk allows the value to be within the numeric range of values that can be held in a\n> wide character. If the conversion to multibyte encoding fails, gawk uses the low eight bits of the value as the character to\n> print.\n> \n> Other awk versions generally restrict themselves to printing the first byte of a string or to numeric values within the range of\n> a single byte (0\u2013255). (d.c.)\n\n%d, %i\n\nPrint a decimal integer. The two control letters are equivalent. (The \u2018%i\u2019 specification is for compatibility with ISO C.)\n\n%e, %E\n\nPrint a number in scientific (exponential) notation. For example:\n\nprintf \"%4.3e\\n\", 1950\n\n\nprints \u20181.950e+03\u2019, with a total of four significant figures, three of which follow the decimal point. (The \u20184.3\u2019 represents two\nmodifiers, discussed in the next subsection.) \u2018%E\u2019 uses \u2018E\u2019 instead of \u2018e\u2019 in the output.\n\n%f\n\nPrint a number in floating-point notation. For example:\n\nprintf \"%4.3f\", 1950\n\n\nprints \u20181950.000\u2019, with a minimum of four significant figures, three of which follow the decimal point. (The \u20184.3\u2019 represents two\nmodifiers, discussed in the next subsection.)\n\nOn systems supporting IEEE 754 floating-point format, values representing negative infinity are formatted as \u2018-inf\u2019 or\n\u2018-infinity\u2019, and positive infinity as \u2018inf\u2019 or \u2018infinity\u2019. The special \u201cnot a number\u201d value formats as \u2018-nan\u2019 or \u2018nan\u2019 (see\nFloating Point Values They Didn\u2019t Talk About In School [Strange-values.html]).\n\n%F\n\nLike \u2018%f\u2019, but the infinity and \u201cnot a number\u201d values are spelled using uppercase letters.\n\nThe \u2018%F\u2019 format is a POSIX extension to ISO C; not all systems support it. On those that don\u2019t, gawk uses \u2018%f\u2019 instead.\n\n%g,", "doc_id": "e90529fe-4586-4d42-9731-b818d4d2d229", "embedding": null, "doc_hash": "f5455c2dfc0235184d0c6098928481b15c80f2067cc6fe055cff2ab33b7d4507", "extra_info": null, "node_info": {"start": 0, "end": 3501, "_node_type": "1"}, "relationships": {"1": "4c0606bc-0d2b-4c50-b562-12fabde55d06", "3": "d5305b49-b753-408c-9877-fa6511afbd7e"}}, "__type__": "1"}, "d5305b49-b753-408c-9877-fa6511afbd7e": {"__data__": {"text": "gawk uses \u2018%f\u2019 instead.\n\n%g, %G\n\nPrint a number in either scientific notation or in floating-point notation, whichever uses fewer characters; if the result is\nprinted in scientific notation, \u2018%G\u2019 uses \u2018E\u2019 instead of \u2018e\u2019.\n\n%o\n\nPrint an unsigned octal integer (see Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html]).\n\n%s\n\nPrint a string.\n\n%u\n\nPrint an unsigned decimal integer. (This format is of marginal use, because all numbers in awk are floating point; it is provided\nprimarily for compatibility with C.)\n\n%x, %X\n\nPrint an unsigned hexadecimal integer; \u2018%X\u2019 uses the letters \u2018A\u2019 through \u2018F\u2019 instead of \u2018a\u2019 through \u2018f\u2019 (see Octal and Hexadecimal\nNumbers [Nondecimal_002dnumbers.html]).\n\n%%\n\nPrint a single \u2018%\u2019. This does not consume an argument and it ignores any modifiers.\n\n> NOTE: When using the integer format-control letters for values that are outside the range of the widest C integer type, gawk\n> switches to the \u2018%g\u2019 format specifier. If --lint is provided on the command line (see Command-Line Options [Options.html]), gawk\n> warns about this. Other versions of awk may print invalid values or do something else entirely. (d.c.)\n\n> NOTE: The IEEE 754 standard for floating-point arithmetic allows for special values that represent \u201cinfinity\u201d (positive and\n> negative) and values that are \u201cnot a number\u201d (NaN).\n> \n> Input and output of these values occurs as text strings. This is somewhat problematic for the awk language, which predates the\n> IEEE standard. Further details are provided in Standards Versus Existing Practice [POSIX-Floating-Point-Problems.html]; please\n> see there.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Modifiers for printf Formats [Format-Modifiers.html], Previous: Introduction to the printf Statement [Basic-Printf.html],\nUp: Using printf Statements for Fancier Printing [Printf.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d5305b49-b753-408c-9877-fa6511afbd7e", "embedding": null, "doc_hash": "7aafcac1b34e4b426d2f84e973cd63c85c37a33eb5e9a4296576ed584e6c0207", "extra_info": null, "node_info": {"start": 3473, "end": 5461, "_node_type": "1"}, "relationships": {"1": "4c0606bc-0d2b-4c50-b562-12fabde55d06", "2": "e90529fe-4586-4d42-9731-b818d4d2d229"}}, "__type__": "1"}, "2917c38c-4692-4470-800c-7c3027a2ace2": {"__data__": {"text": "Next: Sorting Array Values and Indices with gawk [Array-Sorting-Functions.html], Up: Controlling Array Traversal and Array Sorting\n[Array-Sorting.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n12.3.1 CONTROLLING ARRAY TRAVERSAL\n\nBy default, the order in which a \u2018for (indx in array)\u2019 loop scans an array is not defined; it is generally based upon the internal\nimplementation of arrays inside awk.\n\nOften, though, it is desirable to be able to loop over the elements in a particular order that you, the programmer, choose. gawk\nlets you do this.\n\nUsing Predefined Array Scanning Orders with gawk [Controlling-Scanning.html] describes how you can assign special, predefined\nvalues to PROCINFO[\"sorted_in\"] in order to control the order in which gawk traverses an array during a for loop.\n\nIn addition, the value of PROCINFO[\"sorted_in\"] can be a function name.82 This lets you traverse an array based on any custom\ncriterion. The array elements are ordered according to the return value of this function. The comparison function should be\ndefined with at least four arguments:\n\nfunction comp_func(i1, v1, i2, v2)\n{\n    compare elements 1 and 2 in some fashion\n    return < 0; 0; or > 0\n}\n\n\nHere, i1 and i2 are the indices, and v1 and v2 are the corresponding values of the two elements being compared. Either v1 or v2,\nor both, can be arrays if the array being traversed contains subarrays as values. (See Arrays of Arrays [Arrays-of-Arrays.html]\nfor more information about subarrays.) The three possible return values are interpreted as follows:\n\ncomp_func(i1, v1, i2, v2) < 0\n\nIndex i1 comes before index i2 during loop traversal.\n\ncomp_func(i1, v1, i2, v2) == 0\n\nIndices i1 and i2 come together, but the relative order with respect to each other is undefined.\n\ncomp_func(i1, v1, i2, v2) > 0\n\nIndex i1 comes after index i2 during loop traversal.\n\nOur first comparison function can be used to scan an array in numerical order of the indices:\n\nfunction cmp_num_idx(i1, v1, i2, v2)\n{\n     # numerical index comparison, ascending order\n     return (i1 - i2)\n}\n\n\nOur second function traverses an array based on the string order of the element values rather than by indices:\n\nfunction cmp_str_val(i1, v1, i2, v2)\n{\n    # string value comparison, ascending order\n    v1 = v1 \"\"\n    v2 = v2 \"\"\n    if (v1 < v2)\n        return -1\n    return (v1 != v2)\n}\n\n\nThe third comparison function makes all numbers, and numeric strings without any leading or trailing spaces, come out first during\nloop traversal:\n\nfunction cmp_num_str_val(i1, v1, i2, v2,   n1, n2)\n{\n     # numbers before string value comparison, ascending order\n     n1 = v1 + 0\n     n2 = v2 + 0\n     if (n1 == v1)\n         return (n2 == v2) ? (n1 - n2) : -1\n     else if (n2 == v2)\n         return 1\n     return (v1 < v2) ? -1 : (v1 != v2)\n}\n\n\nHere is a main program to demonstrate how gawk behaves using each of the previous functions:\n\nBEGIN {\n   ", "doc_id": "2917c38c-4692-4470-800c-7c3027a2ace2", "embedding": null, "doc_hash": "b9ee8520a7e761f49070ed87597477b024501a8ffb98d734992a848e49815108", "extra_info": null, "node_info": {"start": 0, "end": 3050, "_node_type": "1"}, "relationships": {"1": "6bbb132d-5515-4a54-9327-bb19bf8247c2", "3": "00150e60-39fe-42f4-9972-31c9e177a573"}}, "__type__": "1"}, "00150e60-39fe-42f4-9972-31c9e177a573": {"__data__": {"text": "behaves using each of the previous functions:\n\nBEGIN {\n    data[\"one\"] = 10\n    data[\"two\"] = 20\n    data[10] = \"one\"\n    data[100] = 100\n    data[20] = \"two\"\n\n    f[1] = \"cmp_num_idx\"\n    f[2] = \"cmp_str_val\"\n    f[3] = \"cmp_num_str_val\"\n    for (i = 1; i <= 3; i++) {\n        printf(\"Sort function: %s\\n\", f[i])\n        PROCINFO[\"sorted_in\"] = f[i]\n        for (j in data)\n            printf(\"\\tdata[%s] = %s\\n\", j, data[j])\n        print \"\"\n    }\n}\n\n\nHere are the results when the program is run:\n\n$ gawk -f compdemo.awk\n-| Sort function: cmp_num_idx      Sort by numeric index\n-|     data[two] = 20\n-|     data[one] = 10              Both strings are numerically zero\n-|     data[10] = one\n-|     data[20] = two\n-|     data[100] = 100\n-|\n-| Sort function: cmp_str_val      Sort by element values as strings\n-|     data[one] = 10\n-|     data[100] = 100             String 100 is less than string 20\n-|     data[two] = 20\n-|     data[10] = one\n-|     data[20] = two\n-|\n-| Sort function: cmp_num_str_val  Sort all numeric values before all strings\n-|     data[one] = 10\n-|     data[two] = 20\n-|     data[100] = 100\n-|     data[10] = one\n-|     data[20] = two\n\n\nConsider sorting the entries of a GNU/Linux system password file according to login name. The following program sorts records by a\nspecific field position and can be used for this purpose:\n\n# passwd-sort.awk --- simple program to sort by field position\n# field position is specified by the global variable POS\n\nfunction cmp_field(i1, v1, i2, v2)\n{\n    # comparison by value, as string, and ascending order\n    return v1[POS] < v2[POS] ? -1 : (v1[POS] != v2[POS])\n}\n\n{\n    for (i = 1; i <= NF; i++)\n        a[NR][i] = $i\n}\n\n\n\nEND {\n    PROCINFO[\"sorted_in\"] = \"cmp_field\"\n\n\n    if (POS < 1 || POS > NF)\n        POS = 1\n\n    for (i in a) {\n        for (j = 1; j <= NF; j++)\n            printf(\"%s%c\", a[i][j], j < NF ? \":\" : \"\")\n        print \"\"\n    }\n}\n\n\nThe first field in each entry of the password file is the user\u2019s login name, and the fields are separated by colons. Each record\ndefines a subarray, with each field as an element in the subarray. Running the program produces the following output:\n\n$ gawk -v POS=1 -F: -f sort.awk /etc/passwd\n-| adm:x:3:4:adm:/var/adm:/sbin/nologin\n-| apache:x:48:48:Apache:/var/www:/sbin/nologin\n-| avahi:x:70:70:Avahi", "doc_id": "00150e60-39fe-42f4-9972-31c9e177a573", "embedding": null, "doc_hash": "9c8353e8c9c4894b2392ed49e3b6ba73504984da246d587801a474e8bcb361be", "extra_info": null, "node_info": {"start": 3003, "end": 5321, "_node_type": "1"}, "relationships": {"1": "6bbb132d-5515-4a54-9327-bb19bf8247c2", "2": "2917c38c-4692-4470-800c-7c3027a2ace2", "3": "2028b1da-53b9-485b-801e-091c456f4a41"}}, "__type__": "1"}, "2028b1da-53b9-485b-801e-091c456f4a41": {"__data__": {"text": "avahi:x:70:70:Avahi daemon:/:/sbin/nologin\n\u2026\n\n\nThe comparison should normally always return the same value when given a specific pair of array elements as its arguments. If\ninconsistent results are returned, then the order is undefined. This behavior can be exploited to introduce random order into\notherwise seemingly ordered data:\n\nfunction cmp_randomize(i1, v1, i2, v2)\n{\n    # random order (caution: this may never terminate!)\n    return (2 - 4 * rand())\n}\n\n\nAs already mentioned, the order of the indices is arbitrary if two elements compare equal. This is usually not a problem, but\nletting the tied elements come out in arbitrary order can be an issue, especially when comparing item values. The partial ordering\nof the equal elements may change the next time the array is traversed, if other elements are added to or removed from the array.\nOne way to resolve ties when comparing elements with otherwise equal values is to include the indices in the comparison rules.\nNote that doing this may make the loop traversal less efficient, so consider it only if necessary. The following comparison\nfunctions force a deterministic order, and are based on the fact that the (string) indices of two elements are never equal:\n\nfunction cmp_numeric(i1, v1, i2, v2)\n{\n    # numerical value (and index) comparison, descending order\n    return (v1 != v2) ? (v2 - v1) : (i2 - i1)\n}\n\n\n\nfunction cmp_string(i1, v1, i2, v2)\n{\n    # string value (and index) comparison, descending order\n    v1 = v1 i1\n    v2 = v2 i2\n    return (v1 > v2) ? -1 : (v1 != v2)\n}\n\n\nA custom comparison function can often simplify ordered loop traversal, and the sky is really the limit when it comes to designing\nsuch a function.\n\nWhen string comparisons are made during a sort, either for element values where one or both aren\u2019t numbers, or for element indices\nhandled as strings, the value of IGNORECASE (see Predefined Variables [Built_002din-Variables.html]) controls whether the\ncomparisons treat corresponding upper- and lowercase letters as equivalent or distinct.\n\nAnother point to keep in mind is that in the case of subarrays, the element values can themselves be arrays; a production\ncomparison function should use the isarray() function (see Getting Type Information [Type-Functions.html]) to check for this, and\nchoose a defined sorting order for subarrays.\n\nAll sorting based on PROCINFO[\"sorted_in\"] is disabled in POSIX mode, because the PROCINFO array is not special in that case.\n\nAs a side note, sorting the array indices before traversing the array has been reported to add a 15% to 20% overhead to the\nexecution time of awk programs. For this reason, sorted array traversal is not the default.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(82)\n\nThis is why the predefined sorting orders start with an \u2018@\u2019 character, which cannot be part of an identifier.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Sorting Array Values and Indices with gawk [Array-Sorting-Functions.html], Up: Controlling Array Traversal and Array Sorting\n[Array-Sorting.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2028b1da-53b9-485b-801e-091c456f4a41", "embedding": null, "doc_hash": "b59ac08dbd3ba32e2456514ae7d5fe8206fbf9abf25e2f60852a17e33f7f2971", "extra_info": null, "node_info": {"start": 5350, "end": 8635, "_node_type": "1"}, "relationships": {"1": "6bbb132d-5515-4a54-9327-bb19bf8247c2", "2": "00150e60-39fe-42f4-9972-31c9e177a573"}}, "__type__": "1"}, "d91b78d0-2b01-47b8-bcd9-08246b49e731": {"__data__": {"text": "Previous: Scanning All Elements of an Array [Scanning-an-Array.html], Up: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.1.6 USING PREDEFINED ARRAY SCANNING ORDERS WITH GAWK\n\nThis subsection describes a feature that is specific to gawk.\n\nBy default, when a for loop traverses an array, the order is undefined, meaning that the awk implementation determines the order\nin which the array is traversed. This order is usually based on the internal implementation of arrays and will vary from one\nversion of awk to the next.\n\nOften, though, you may wish to do something simple, such as \u201ctraverse the array by comparing the indices in ascending order,\u201d or\n\u201ctraverse the array by comparing the values in descending order.\u201d gawk provides two mechanisms that give you this control:\n\n * Set PROCINFO[\"sorted_in\"] to one of a set of predefined values. We describe this now.\n * Set PROCINFO[\"sorted_in\"] to the name of a user-defined function to use for comparison of array elements. This advanced feature\n   is described later in Controlling Array Traversal and Array Sorting [Array-Sorting.html].\n\nThe following special values for PROCINFO[\"sorted_in\"] are available:\n\n\"@unsorted\"\n\nArray elements are processed in arbitrary order, which is the default awk behavior.\n\n\"@ind_str_asc\"\n\nOrder by indices in ascending order compared as strings; this is the most basic sort. (Internally, array indices are always\nstrings, so with \u2018a[2*5] = 1\u2019 the index is \"10\" rather than numeric 10.)\n\n\"@ind_num_asc\"\n\nOrder by indices in ascending order but force them to be treated as numbers in the process. Any index with a non-numeric value\nwill end up positioned as if it were zero.\n\n\"@val_type_asc\"\n\nOrder by element values in ascending order (rather than by indices). Ordering is by the type assigned to the element (see Variable\nTyping and Comparison Expressions [Typing-and-Comparison.html]). All numeric values come before all string values, which in turn\ncome before all subarrays. (Subarrays have not been described yet; see Arrays of Arrays [Arrays-of-Arrays.html].)\n\nIf you choose to use this feature in traversing FUNCTAB (see Built-in Variables That Convey Information [Auto_002dset.html]), then\nthe order is built-in functions first (see Built-in Functions [Built_002din.html]), then user-defined functions (see User-Defined\nFunctions [User_002ddefined.html]) next, and finally functions loaded from an extension (see Writing Extensions for gawk\n[Dynamic-Extensions.html]).\n\n\"@val_str_asc\"\n\nOrder by element values in ascending order (rather than by indices). Scalar values are compared as strings. If the string values\nare identical, the index string values are compared instead. When comparing non-scalar values, \"@val_type_asc\" sort ordering is\nused, so subarrays, if present, come out last.\n\n\"@val_num_asc\"\n\nOrder by element values in ascending order (rather than by indices). Scalar values are compared as numbers. Non-scalar values are\ncompared using \"@val_type_asc\" sort ordering, so subarrays, if present, come out last. When numeric values are equal, the string\nvalues are used to provide an ordering: this guarantees consistent results across different versions of the C qsort() function,42\nwhich gawk uses internally to perform the sorting. If the string values are also identical, the index string values are compared\ninstead.\n\n\"@ind_str_desc\"\n\nLike \"@ind_str_asc\", but the string indices are ordered from high to low.\n\n\"@ind_num_desc\"\n\nLike \"@ind_num_asc\", but the numeric indices are", "doc_id": "d91b78d0-2b01-47b8-bcd9-08246b49e731", "embedding": null, "doc_hash": "0face583a98cb2862d077a432837918af3a2c52b1663e9127eca932e39a17eeb", "extra_info": null, "node_info": {"start": 0, "end": 3671, "_node_type": "1"}, "relationships": {"1": "89ec3e24-4800-4711-9db5-2d43547026d8", "3": "55ae615a-8549-42c3-ac66-8c2a13d9485e"}}, "__type__": "1"}, "55ae615a-8549-42c3-ac66-8c2a13d9485e": {"__data__": {"text": "\"@ind_num_asc\", but the numeric indices are ordered from high to low.\n\n\"@val_type_desc\"\n\nLike \"@val_type_asc\", but the element values, based on type, are ordered from high to low. Subarrays, if present, come out first.\n\n\"@val_str_desc\"\n\nLike \"@val_str_asc\", but the element values, treated as strings, are ordered from high to low. If the string values are identical,\nthe index string values are compared instead. When comparing non-scalar values, \"@val_type_desc\" sort ordering is used, so\nsubarrays, if present, come out first.\n\n\"@val_num_desc\"\n\nLike \"@val_num_asc\", but the element values, treated as numbers, are ordered from high to low. If the numeric values are equal,\nthe string values are compared instead. If they are also identical, the index string values are compared instead. Non-scalar\nvalues are compared using \"@val_type_desc\" sort ordering, so subarrays, if present, come out first.\n\nThe array traversal order is determined before the for loop starts to run. Changing PROCINFO[\"sorted_in\"] in the loop body does\nnot affect the loop. For example:\n\n$ gawk '\n> BEGIN {\n>    a[4] = 4\n>    a[3] = 3\n>    for (i in a)\n>        print i, a[i]\n> }'\n-| 4 4\n-| 3 3\n$ gawk '\n> BEGIN {\n>    PROCINFO[\"sorted_in\"] = \"@ind_str_asc\"\n>    a[4] = 4\n>    a[3] = 3\n>    for (i in a)\n>        print i, a[i]\n> }'\n-| 3 3\n-| 4 4\n\n\nWhen sorting an array by element values, if a value happens to be a subarray then it is considered to be greater than any string\nor numeric value, regardless of what the subarray itself contains, and all subarrays are treated as being equal to each other.\nTheir order relative to each other is determined by their index strings.\n\nHere are some additional things to bear in mind about sorted array traversal:\n\n * The value of PROCINFO[\"sorted_in\"] is global. That is, it affects all array traversal for loops. If you need to change it\n   within your own code, you should see if it\u2019s defined and save and restore the value:\n   \n   \u2026\n   if (\"sorted_in\" in PROCINFO)\n       save_sorted = PROCINFO[\"sorted_in\"]\n   \n   PROCINFO[\"sorted_in\"] = \"@val_str_desc\" # or whatever\n   \u2026\n   if (save_sorted)\n       PROCINFO[\"sorted_in\"] = save_sorted\n   \n\n * As already mentioned, the default array traversal order is represented by \"@unsorted\". You can also get the default behavior by\n   assigning the null string to PROCINFO[\"sorted_in\"] or by just deleting the \"sorted_in\" element from the PROCINFO array with the\n   delete statement. (The delete statement hasn\u2019t been described yet; see The delete Statement [Delete.html].)\n\nIn addition, gawk provides built-in functions for sorting arrays; see Sorting Array Values and Indices with gawk\n[Array-Sorting-Functions.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(42)\n\nWhen two elements compare as equal, the C qsort() function does not guarantee that they will maintain their original relative\norder after sorting. Using the string value to provide a unique ordering when the numeric values are equal ensures that gawk\nbehaves consistently across different environments.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Scanning All Elements of an Array [Scanning-an-Array.html], Up: The Basics of Arrays [Array-Basics.html] \u00a0", "doc_id": "55ae615a-8549-42c3-ac66-8c2a13d9485e", "embedding": null, "doc_hash": "2eacedd043ceb4566cc3f0219f24be360eb825c6bfc74412d592a90f31c0d51a", "extra_info": null, "node_info": {"start": 3634, "end": 7020, "_node_type": "1"}, "relationships": {"1": "89ec3e24-4800-4711-9db5-2d43547026d8", "2": "d91b78d0-2b01-47b8-bcd9-08246b49e731", "3": "09348b39-ba96-49c8-b1d4-680cab185707"}}, "__type__": "1"}, "09348b39-ba96-49c8-b1d4-680cab185707": {"__data__": {"text": "Up: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "09348b39-ba96-49c8-b1d4-680cab185707", "embedding": null, "doc_hash": "7f32a482cbc56d85175f0683aac1476b4e65c728c7aa517fd3397aeb7a97ad7e", "extra_info": null, "node_info": {"start": 7012, "end": 7115, "_node_type": "1"}, "relationships": {"1": "89ec3e24-4800-4711-9db5-2d43547026d8", "2": "55ae615a-8549-42c3-ac66-8c2a13d9485e"}}, "__type__": "1"}, "32e7d9e3-1cf2-4ec9-b477-d1b56eb5c330": {"__data__": {"text": "Next: The GNU Project and This Book [Manual-History.html], Previous: Using This Book [This-Manual.html], Up: Preface\n[Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nTYPOGRAPHICAL CONVENTIONS\n\nThis Web page is written in Texinfo [https://www.gnu.org/software/texinfo/], the GNU documentation formatting language. A single\nTexinfo source file is used to produce both the printed and online versions of the documentation. Because of this, the\ntypographical conventions are slightly different than in other books you may have read.\n\nExamples you would type at the command line are preceded by the common shell primary and secondary prompts, \u2018$\u2019 and \u2018>\u2019,\nrespectively. Input that you type is shown like this. Output from the command is preceded by the glyph \u201c-|\u201d. This typically\nrepresents the command\u2019s standard output. Error messages and other output on the command\u2019s standard error are preceded by the\nglyph \u201cerror\u2192\u201d. For example:\n\n$ echo hi on stdout\n-| hi on stdout\n$ echo hello on stderr 1>&2\nerror\u2192 hello on stderr\n\n\nIn the text, almost anything related to programming, such as command names, variable and function names, and string, numeric and\nregexp constants appear in this font. Code fragments appear in the same font and quoted, \u2018like this\u2019. Things that are replaced by\nthe user or programmer appear in this font. Options look like this: -f. File names are indicated like this: /path/to/ourfile. Some\nthings are emphasized like this, and if a point needs to be made strongly, it is done like this. The first occurrence of a new\nterm is usually its definition and appears in the same font as the previous occurrence of \u201cdefinition\u201d in this sentence.\n\nCharacters that you type at the keyboard look like this. In particular, there are special characters called \u201ccontrol characters.\u201d\nThese are characters that you type by holding down both the CONTROL key and another key, at the same time. For example, a Ctrl-d\nis typed by first pressing and holding the CONTROL key, next pressing the d key, and finally releasing both keys.\n\nFor the sake of brevity, throughout this Web page, we refer to Brian Kernighan\u2019s version of awk as \u201cBWK awk.\u201d (See Other Freely\nAvailable awk Implementations [Other-Versions.html] for information on his and other versions.)\n\n * Dark Corners\n\nDARK CORNERS\n\n> Dark corners are basically fractal\u2014no matter how much you illuminate, there\u2019s always a smaller but darker one.\n\n\u2014 Brian Kernighan\n\nUntil the POSIX standard (and GAWK: Effective AWK Programming), many features of awk were either poorly documented or not\ndocumented at all. Descriptions of such features (often called \u201cdark corners\u201d) are noted in this Web page with \u201c(d.c.).\u201d They also\nappear in the index under the heading \u201cdark corner.\u201d\n\nBut, as noted by the opening quote, any coverage of dark corners is by definition incomplete.\n\nExtensions to the standard awk language that are supported by more than one awk implementation are marked \u201c(c.e.),\u201d and listed in\nthe index under \u201ccommon extensions\u201d and \u201cextensions, common.\u201d\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The GNU Project and This Book [Manual-History.html], Previous: Using This Book [This-Manual.html], Up: Preface\n[Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "32e7d9e3-1cf2-4ec9-b477-d1b56eb5c330", "embedding": null, "doc_hash": "55e81d0845707f812e4e685b69f4019ac43eea71f246cabc5de56233c3f76674", "extra_info": null, "node_info": {"start": 0, "end": 3498, "_node_type": "1"}, "relationships": {"1": "52d70004-1e1b-4512-88f4-bc56af39ea67"}}, "__type__": "1"}, "73900e0c-45a6-4d8f-abed-d85f22c1c98b": {"__data__": {"text": "Previous: Variables [Variables.html], Up: Constants, Variables, and Conversions [Values.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.4 CONVERSION OF STRINGS AND NUMBERS\n\nNumber-to-string and string-to-number conversion are generally straightforward. There can be subtleties to be aware of; this\nsection discusses this important facet of awk.\n\n * How awk Converts Between Strings and Numbers [Strings-And-Numbers.html]\n * Locales Can Influence Conversion [Locale-influences-conversions.html]", "doc_id": "73900e0c-45a6-4d8f-abed-d85f22c1c98b", "embedding": null, "doc_hash": "d1f0f27036f91320ebc40b1d0d4d14f827ae240791273e260230b71448a71144", "extra_info": null, "node_info": {"start": 0, "end": 647, "_node_type": "1"}, "relationships": {"1": "5865ea89-0a6b-487f-9e07-22fbf696cb6e"}}, "__type__": "1"}, "2280cac8-7338-4b05-9cfa-7ed57fbf59a3": {"__data__": {"text": "Next: GNU Free Documentation License [GNU-Free-Documentation-License.html], Previous: Glossary [Glossary.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nGNU GENERAL PUBLIC LICENSE\n\nVersion 3, 29 June 2007\n\nCopyright \u00a9 2007 Free Software Foundation, Inc. https://fsf.org/https://fsf.org/\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\n\nPREAMBLE\n\nThe GNU General Public License is a free, copyleft license for software and other kinds of works.\n\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By\ncontrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program\u2014to\nmake sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for\nmost of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\n\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can\nget it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do\nthese things.\n\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore,\nyou have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the\nfreedom of others.\n\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these\nterms so they know their rights.\n\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this\nLicense giving you legal permission to copy, distribute and/or modify it.\n\nFor the developers\u2019 and authors\u2019 protection, the GPL clearly explains that there is no warranty for this free software. For both\nusers\u2019 and authors\u2019 sake, the GPL requires that modified versions be marked as changed, so that their problems will not be\nattributed erroneously to authors of previous versions.\n\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the\nmanufacturer can do so. This is fundamentally incompatible with the aim of protecting users\u2019 freedom to change the software. The\nsystematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most\nunacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems\narise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as\nneeded to protect the freedom of users.\n\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and\nuse of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a\nfree program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the\nprogram non-free.\n\nThe precise terms and conditions for copying, distribution and modification follow.\n\n\nTERMS AND CONDITIONS\n\n 0.  Definitions.\n     \n     \u201cThis License\u201d refers to version 3 of the GNU General Public License.\n     \n     \u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n     \n ", "doc_id": "2280cac8-7338-4b05-9cfa-7ed57fbf59a3", "embedding": null, "doc_hash": "e606dd422d2f959b1a9f54ba0e3afa1035aa62a7cece1be15fdad808b5ad352b", "extra_info": null, "node_info": {"start": 0, "end": 4126, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "3": "2152a185-6a71-4ee2-bbd2-99a73ddd5b4a"}}, "__type__": "1"}, "2152a185-6a71-4ee2-bbd2-99a73ddd5b4a": {"__data__": {"text": "kinds of works, such as semiconductor masks.\n     \n     \u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d\n     and \u201crecipients\u201d may be individuals or organizations.\n     \n     To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other\n     than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d\n     the earlier work.\n     \n     A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.\n     \n     To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable\n     for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation\n     includes copying, distribution (with or without modification), making available to the public, and in some countries other\n     activities as well.\n     \n     To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with\n     a user through a computer network, with no transfer of a copy, is not conveying.\n     \n     An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and\n     prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no\n     warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this\n     License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a\n     menu, a prominent item in the list meets this criterion.\n\n 1.  Source Code.\n     \n     The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any\n     non-source form of a work.\n     \n     A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in\n     the case of interfaces specified for a particular programming language, one that is widely used among developers working in\n     that language.\n     \n     The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the\n     normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use\n     of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the\n     public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system,\n     and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the\n     work, or an object code interpreter used to run it.\n     \n     The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an\n     executable work) run the object code and to modify the work, including scripts to control those activities. However, it does\n     not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used\n     unmodified in performing those activities but which are not part of the work. For example,", "doc_id": "2152a185-6a71-4ee2-bbd2-99a73ddd5b4a", "embedding": null, "doc_hash": "0355267dba0d3ce58c54938377459458dbaeaf6ee31732a1e1e56069badf5cc7", "extra_info": null, "node_info": {"start": 4087, "end": 7570, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "2280cac8-7338-4b05-9cfa-7ed57fbf59a3", "3": "38bb1b76-bac9-4783-8c92-5139ad93ceae"}}, "__type__": "1"}, "38bb1b76-bac9-4783-8c92-5139ad93ceae": {"__data__": {"text": " unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes\n     interface definition files associated with source files for the work, and the source code for shared libraries and\n     dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or\n     control flow between those subprograms and other parts of the work.\n     \n     The Corresponding Source need not include anything that users can regenerate automatically from other parts of the\n     Corresponding Source.\n     \n     The Corresponding Source for a work in source code form is that same work.\n\n 2.  Basic Permissions.\n     \n     All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the\n     stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The\n     output from running a covered work is covered by this License only if the output, given its content, constitutes a covered\n     work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\n     \n     You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise\n     remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively\n     for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in\n     conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do\n     so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your\n     copyrighted material outside their relationship with you.\n     \n     Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed;\n     section 10 makes it unnecessary.\n\n 3.  Protecting Users\u2019 Legal Rights From Anti-Circumvention Law.\n     \n     No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations\n     under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting\n     circumvention of such measures.\n     \n     When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent\n     such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any\n     intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third\n     parties\u2019 legal rights to forbid circumvention of technological measures.\n\n 4.  Conveying Verbatim Copies.\n     \n     You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously\n     and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and\n     any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any\n     warranty; and give all recipients a copy of this License along with the Program.\n     \n     You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a\n     fee.\n\n 5.  Conveying Modified Source Versions.\n     \n     You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code\n     under the terms of section 4, provided that you also meet all", "doc_id": "38bb1b76-bac9-4783-8c92-5139ad93ceae", "embedding": null, "doc_hash": "3f98d31a29128156066f14d65eaf44f01d64cc59b2961cef25e9484ba3611108", "extra_info": null, "node_info": {"start": 7535, "end": 11361, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "2152a185-6a71-4ee2-bbd2-99a73ddd5b4a", "3": "4e28de87-c680-4ac3-9933-27fdc4e991ab"}}, "__type__": "1"}, "4e28de87-c680-4ac3-9933-27fdc4e991ab": {"__data__": {"text": "source code\n     under the terms of section 4, provided that you also meet all of these conditions:\n     \n     a. The work must carry prominent notices stating that you modified it, and giving a relevant date.\n     b. The work must carry prominent notices stating that it is released under this License and any conditions added under\n        section 7. This requirement modifies the requirement in section 4 to \u201ckeep intact all notices\u201d.\n     c. You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This\n        License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its\n        parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it\n        does not invalidate such permission if you have separately received it.\n     d. If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has\n        interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.\n     \n     A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the\n     covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or\n     distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access\n     or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an\n     aggregate does not cause this License to apply to the other parts of the aggregate.\n\n 6.  Conveying Non-Source Forms.\n     \n     You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the\n     machine-readable Corresponding Source under the terms of this License, in one of these ways:\n     \n     a. Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by\n        the Corresponding Source fixed on a durable physical medium customarily used for software interchange.\n     b. Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a\n        written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that\n        product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the\n        software in the product that is covered by this License, on a durable physical medium customarily used for software\n        interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2)\n        access to copy the Corresponding Source from a network server at no charge.\n     c. Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This\n        alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer,\n        in accord with subsection 6b.\n     d. Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to\n        the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to\n        copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the\n        Corresponding Source may be on a different server (operated", "doc_id": "4e28de87-c680-4ac3-9933-27fdc4e991ab", "embedding": null, "doc_hash": "84688287f458a3866fabbd153775fc526e4f3dc2cd4c20fd0a4a79d8c87f8843", "extra_info": null, "node_info": {"start": 11377, "end": 15100, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "38bb1b76-bac9-4783-8c92-5139ad93ceae", "3": "93efb03a-5e3f-4ed4-9263-9291fa3b79f7"}}, "__type__": "1"}, "93efb03a-5e3f-4ed4-9263-9291fa3b79f7": {"__data__": {"text": "       Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying\n        facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source.\n        Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long\n        as needed to satisfy these requirements.\n     e. Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and\n        Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.\n     \n     A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need\n     not be included in conveying the object code work.\n     \n     A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for\n     personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining\n     whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product\n     received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the\n     status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the\n     product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or\n     non-consumer uses, unless such uses represent the only significant mode of use of the product.\n     \n     \u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information\n     required to install and execute modified versions of a covered work in that User Product from a modified version of its\n     Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in\n     no case prevented or interfered with solely because modification has been made.\n     \n     If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the\n     conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the\n     recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source\n     conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if\n     neither you nor any third party retains the ability to install modified object code on the User Product (for example, the\n     work has been installed in ROM).\n     \n     The requirement to provide Installation Information does not include a requirement to continue to provide support service,\n     warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has\n     been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects\n     the operation of the network or violates the rules and protocols for communication across the network.\n     \n     Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is\n     publicly documented (and with an implementation available to the public in source code form), and must require no special\n     password or key for unpacking, reading or copying.\n\n 7.  Additional Terms.\n     \n     \u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its\n ", "doc_id": "93efb03a-5e3f-4ed4-9263-9291fa3b79f7", "embedding": null, "doc_hash": "7a84d8eb96092237de43c417b0a8a76ff8cfb8067a0b2a518ffb77475bea881c", "extra_info": null, "node_info": {"start": 15111, "end": 18974, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "4e28de87-c680-4ac3-9933-27fdc4e991ab", "3": "b3e3c50e-37d1-428e-a7a1-f25a02eabca7"}}, "__type__": "1"}, "b3e3c50e-37d1-428e-a7a1-f25a02eabca7": {"__data__": {"text": "that supplement the terms of this License by making exceptions from one or more of its\n     conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in\n     this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the\n     Program, that part may be used separately under those permissions, but the entire Program remains governed by this License\n     without regard to the additional permissions.\n     \n     When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from\n     any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the\n     work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give\n     appropriate copyright permission.\n     \n     Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the\n     copyright holders of that material) supplement the terms of this License with terms:\n     \n     a. Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or\n     b. Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate\n        Legal Notices displayed by works containing it; or\n     c. Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be\n        marked in reasonable ways as different from the original version; or\n     d. Limiting the use for publicity purposes of names of licensors or authors of the material; or\n     e. Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or\n     f. Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified\n        versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual\n        assumptions directly impose on those licensors and authors.\n     \n     All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the\n     Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a\n     term that is a further restriction, you may remove that term. If a license document contains a further restriction but\n     permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that\n     license document, provided that the further restriction does not survive such relicensing or conveying.\n     \n     If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of\n     the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\n     \n     Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as\n     exceptions; the above requirements apply either way.\n\n 8.  Termination.\n     \n     You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to\n     propagate or modify it is void, and will automatically terminate your rights under this License (including any patent\n     licenses granted under the third paragraph of section 11).\n     \n     However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a)\n     provisionally, unless and until the copyright holder", "doc_id": "b3e3c50e-37d1-428e-a7a1-f25a02eabca7", "embedding": null, "doc_hash": "a90cd5c5e8f2581f4f39768f8d442863390b8f1b09e864ced42a3ec8d52a01fd", "extra_info": null, "node_info": {"start": 18954, "end": 22765, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "93efb03a-5e3f-4ed4-9263-9291fa3b79f7", "3": "766ba1ce-19e8-4fd4-8606-62e1791cbc0c"}}, "__type__": "1"}, "766ba1ce-19e8-4fd4-8606-62e1791cbc0c": {"__data__": {"text": "(a)\n     provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if\n     the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\n     \n     Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of\n     the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any\n     work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\n     \n     Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights\n     from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to\n     receive new licenses for the same material under section 10.\n\n 9.  Acceptance Not Required for Having Copies.\n     \n     You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a\n     covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require\n     acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These\n     actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you\n     indicate your acceptance of this License to do so.\n\n 10. Automatic Licensing of Downstream Recipients.\n     \n     Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run,\n     modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties\n     with this License.\n     \n     An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or\n     subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction,\n     each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s\n     predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding\n     Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\n     \n     You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For\n     example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and\n     you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is\n     infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.\n\n 11. Patents.\n     \n     A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is\n     based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d.\n     \n     A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already\n     acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or\n     selling its contributor version, but do not include claims that would be infringed only as a consequence of further\n  ", "doc_id": "766ba1ce-19e8-4fd4-8606-62e1791cbc0c", "embedding": null, "doc_hash": "3cae689986e5523c8ec4ae4eaf94a5ee3e3653dfa76ae0389d9775bd463760d4", "extra_info": null, "node_info": {"start": 22788, "end": 26453, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "b3e3c50e-37d1-428e-a7a1-f25a02eabca7", "3": "ba1ad904-77cb-48dd-97d2-f47d89a2667d"}}, "__type__": "1"}, "ba1ad904-77cb-48dd-97d2-f47d89a2667d": {"__data__": {"text": "include claims that would be infringed only as a consequence of further\n     modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent\n     sublicenses in a manner consistent with the requirements of this License.\n     \n     Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent\n     claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor\n     version.\n     \n     In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to\n     enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To\n     \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the\n     party.\n     \n     If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not\n     available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server\n     or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange\n     to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent\n     with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you\n     have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use\n     of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to\n     believe are valid.\n     \n     If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance\n     of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use,\n     propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended\n     to all recipients of the covered work and works based on it.\n     \n     A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or\n     is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not\n     convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing\n     software, under which you make payment to the third party based on the extent of your activity of conveying the work, and\n     under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory\n     patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b)\n     primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into\n     that arrangement, or that patent license was granted, prior to 28 March 2007.\n     \n     Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement\n     that may otherwise be available to you under applicable patent law.\n\n 12. No Surrender of Others\u2019 Freedom.\n     \n ", "doc_id": "ba1ad904-77cb-48dd-97d2-f47d89a2667d", "embedding": null, "doc_hash": "11ff2a1f70c4c3ed951980affced35dc0fcf85f54b8b2f00e60d30098746ce69", "extra_info": null, "node_info": {"start": 26443, "end": 30017, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "766ba1ce-19e8-4fd4-8606-62e1791cbc0c", "3": "75f06133-9e57-46f2-adf9-ca8182f548ef"}}, "__type__": "1"}, "75f06133-9e57-46f2-adf9-ca8182f548ef": {"__data__": {"text": "12. No Surrender of Others\u2019 Freedom.\n     \n     If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this\n     License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy\n     simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not\n     convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those\n     to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely\n     from conveying the Program.\n\n 13. Use with the GNU Affero General Public License.\n     \n     Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work\n     licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting\n     work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of\n     the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as\n     such.\n\n 14. Revised Versions of this License.\n     \n     The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time.\n     Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or\n     concerns.\n     \n     Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU\n     General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either\n     of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a\n     version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\n     \n     If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that\n     proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\n     \n     Later license versions may give you additional or different permissions. However, no additional obligations are imposed on\n     any author or copyright holder as a result of your choosing to follow a later version.\n\n 15. Disclaimer of Warranty.\n     \n     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE\n     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE\n     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\n     ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n 16. Limitation of Liability.\n     \n     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO\n     MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL,", "doc_id": "75f06133-9e57-46f2-adf9-ca8182f548ef", "embedding": null, "doc_hash": "364d268b91e8683cbf9e08255af28339bc5a67ba9fff5a18e00d19199a714515", "extra_info": null, "node_info": {"start": 30046, "end": 33554, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "ba1ad904-77cb-48dd-97d2-f47d89a2667d", "3": "b06896f8-9e7f-4ba7-99e5-17b94ab45d68"}}, "__type__": "1"}, "b06896f8-9e7f-4ba7-99e5-17b94ab45d68": {"__data__": {"text": "BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,\n     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS\n     OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE\n     WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n 17. Interpretation of Sections 15 and 16.\n     \n     If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to\n     their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability\n     in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for\n     a fee.\n\n\nEND OF TERMS AND CONDITIONS\n\n\nHOW TO APPLY THESE TERMS TO YOUR NEW PROGRAMS\n\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to\nmake it free software which everyone can redistribute and change under these terms.\n\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most\neffectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the\nfull notice is found.\n\none line to give the program's name and a brief idea of what it does.\nCopyright (C) year name of author\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or (at\nyour option) any later version.\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see https://www.gnu.org/licenses/https://www.gnu.org/licenses/.\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:\n\nprogram Copyright (C) year name of author\nThis program comes with ABSOLUTELY NO WARRANTY; for details type \u2018show w\u2019.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type \u2018show c\u2019 for details.\n\n\nThe hypothetical commands \u2018show w\u2019 and \u2018show c\u2019 should show the appropriate parts of the General Public License. Of course, your\nprogram\u2019s commands might be different; for a GUI interface, you would use an \u201cabout box\u201d.\n\nYou should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the\nprogram, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/\n[https://www.gnu.org/licenses/].\n\nThe GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a\nsubroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what\nyou want to do, use the GNU Lesser General Public License instead of this License. But first, please read\nhttps://www.gnu.org/philosophy/why-not-lgpl.html", "doc_id": "b06896f8-9e7f-4ba7-99e5-17b94ab45d68", "embedding": null, "doc_hash": "7a5586c89c6a4ebc257969186e528b485b293b0801d08992138867d7a423bd35", "extra_info": null, "node_info": {"start": 33544, "end": 37092, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "75f06133-9e57-46f2-adf9-ca8182f548ef", "3": "59499569-33f4-4308-9501-2e65a2cebc78"}}, "__type__": "1"}, "59499569-33f4-4308-9501-2e65a2cebc78": {"__data__": {"text": "[https://www.gnu.org/philosophy/why-not-lgpl.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: GNU Free Documentation License [GNU-Free-Documentation-License.html], Previous: Glossary [Glossary.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "59499569-33f4-4308-9501-2e65a2cebc78", "embedding": null, "doc_hash": "9cc933191ff26acc60336b051ea4e60d3e2ad7b2f47d53c07a760ccaa2b164dd", "extra_info": null, "node_info": {"start": 37137, "end": 37530, "_node_type": "1"}, "relationships": {"1": "b0da131e-0e61-4213-a1fc-637c523cbd38", "2": "b06896f8-9e7f-4ba7-99e5-17b94ab45d68"}}, "__type__": "1"}, "bce5f297-f6f3-41d8-a98c-24a3744172ac": {"__data__": {"text": "Previous: Working With All The Elements of an Array [Flattening-Arrays.html], Up: Array Manipulation [Array-Manipulation.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.12.4 HOW TO CREATE AND POPULATE ARRAYS\n\nBesides working with arrays created by awk code, you can create arrays and populate them as you see fit, and then awk code can\naccess them and manipulate them.\n\nThere are two important points about creating arrays from extension code:\n\n * You must install a new array into gawk\u2019s symbol table immediately upon creating it. Once you have done so, you can then\n   populate the array.\n   \n   Similarly, if installing a new array as a subarray of an existing array, you must add the new array to its parent before adding\n   any elements to it.\n   \n   Thus, the correct way to build an array is to work \u201ctop down.\u201d Create the array, and immediately install it in gawk\u2019s symbol\n   table using sym_update(), or install it as an element in a previously existing array using set_array_element(). We show example\n   code shortly.\n\n * Due to gawk internals, after using sym_update() to install an array into gawk, you have to retrieve the array cookie from the\n   value passed in to sym_update() before doing anything else with it, like so:\n   \n   awk_value_t val;\n   awk_array_t new_array;\n   \n   new_array = create_array();\n   val.val_type = AWK_ARRAY;\n   val.array_cookie = new_array;\n   \n   /* install array in the symbol table */\n   sym_update(\"array\", & val);\n   \n   new_array = val.array_cookie;    /* YOU MUST DO THIS */\n   \n   \n   If installing an array as a subarray, you must also retrieve the value of the array cookie after the call to set_element().\n\nThe following C code is a simple test extension to create an array with two regular elements and with a subarray. The leading\n#include directives and boilerplate variable declarations (see Boilerplate Code [Extension-API-Boilerplate.html]) are omitted for\nbrevity. The first step is to create a new array and then install it in the symbol table:\n\n/* create_new_array --- create a named array */\n\nstatic void\ncreate_new_array()\n{\n    awk_array_t a_cookie;\n    awk_array_t subarray;\n    awk_value_t index, value;\n\n    a_cookie = create_array();\n    value.val_type = AWK_ARRAY;\n    value.array_cookie = a_cookie;\n\n    if (! sym_update(\"new_array\", & value))\n        printf(\"create_new_array: sym_update(\\\"new_array\\\") failed!\\n\");\n    a_cookie = value.array_cookie;\n\n\nNote how a_cookie is reset from the array_cookie field in the value structure.\n\nThe second step is to install two regular values into new_array:\n\n    (void) make_const_string(\"hello\", 5, & index);\n    (void) make_const_string(\"world\", 5, & value);\n    if (! set_array_element(a_cookie, & index, & value)) {\n        printf(\"fill_in_array: set_array_element failed\\n\");\n        return;\n    }\n\n    (void) make_const_string(\"answer\", 6, & index);\n    (void) make_number(42.0, & value);\n    if (! set_array_element(a_cookie, & index, & value)) {\n        printf(\"fill_in_array: set_array_element failed\\n\");\n        return;\n    }\n\n\nThe third step is to create", "doc_id": "bce5f297-f6f3-41d8-a98c-24a3744172ac", "embedding": null, "doc_hash": "ff5f939f3033d59c33705cbb99e5b853eae52d4dafc594e64e4b6e3a9128696b", "extra_info": null, "node_info": {"start": 0, "end": 3236, "_node_type": "1"}, "relationships": {"1": "735bf168-9126-4174-ac1b-438970d94674", "3": "d8d5e533-9eaf-4872-a54f-6001a561c5ec"}}, "__type__": "1"}, "d8d5e533-9eaf-4872-a54f-6001a561c5ec": {"__data__": {"text": "     return;\n    }\n\n\nThe third step is to create the subarray and install it:\n\n    (void) make_const_string(\"subarray\", 8, & index);\n    subarray = create_array();\n    value.val_type = AWK_ARRAY;\n    value.array_cookie = subarray;\n    if (! set_array_element(a_cookie, & index, & value)) {\n        printf(\"fill_in_array: set_array_element failed\\n\");\n        return;\n    }\n    subarray = value.array_cookie;\n\n\nThe final step is to populate the subarray with its own element:\n\n    (void) make_const_string(\"foo\", 3, & index);\n    (void) make_const_string(\"bar\", 3, & value);\n    if (! set_array_element(subarray, & index, & value)) {\n        printf(\"fill_in_array: set_array_element failed\\n\");\n        return;\n    }\n}\n\n\nHere is a sample script that loads the extension and then dumps the array:\n\n@load \"subarray\"\n\nfunction dumparray(name, array,     i)\n{\n    for (i in array)\n        if (isarray(array[i]))\n            dumparray(name \"[\\\"\" i \"\\\"]\", array[i])\n        else\n            printf(\"%s[\\\"%s\\\"] = %s\\n\", name, i, array[i])\n}\n\nBEGIN {\n    dumparray(\"new_array\", new_array);\n}\n\n\nHere is the result of running the script:\n\n$ AWKLIBPATH=$PWD gawk -f subarray.awk\n-| new_array[\"subarray\"][\"foo\"] = bar\n-| new_array[\"hello\"] = world\n-| new_array[\"answer\"] = 42\n\n\n(See How gawk Finds Extensions [Finding-Extensions.html] for more information on the AWKLIBPATH environment variable.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Working With All The Elements of an Array [Flattening-Arrays.html], Up: Array Manipulation [Array-Manipulation.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d8d5e533-9eaf-4872-a54f-6001a561c5ec", "embedding": null, "doc_hash": "d7dd77f83a5abb955432698c492c755e822116b136f32a04b6696e9029ad7da1", "extra_info": null, "node_info": {"start": 3188, "end": 4890, "_node_type": "1"}, "relationships": {"1": "735bf168-9126-4174-ac1b-438970d94674", "2": "bce5f297-f6f3-41d8-a98c-24a3744172ac"}}, "__type__": "1"}, "5083c770-1566-4e37-8913-72dab29e1f11": {"__data__": {"text": "Next: Searching for Regular Expressions in Files [Egrep-Program.html], Up: Reinventing Wheels for Fun and Profit [Clones.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.1 CUTTING OUT FIELDS AND COLUMNS\n\nThe cut utility selects, or \u201ccuts,\u201d characters or fields from its standard input and sends them to its standard output. Fields are\nseparated by TABs by default, but you may supply a command-line option to change the field delimiter (i.e., the field-separator\ncharacter). cut\u2019s definition of fields is less general than awk\u2019s.\n\nA common use of cut might be to pull out just the login names of logged-on users from the output of who. For example, the\nfollowing pipeline generates a sorted, unique list of the logged-on users:\n\nwho | cut -c1-8 | sort | uniq\n\n\nThe options for cut are:\n\n-c list\n\nUse list as the list of characters to cut out. Items within the list may be separated by commas, and ranges of characters can be\nseparated with dashes. The list \u20181-8,15,22-35\u2019 specifies characters 1 through 8, 15, and 22 through 35.\n\n-d delim\n\nUse delim as the field-separator character instead of the TAB character.\n\n-f list\n\nUse list as the list of fields to cut out.\n\n-s\n\nSuppress printing of lines that do not contain the field delimiter.\n\nThe awk implementation of cut uses the getopt() library function (see Processing Command-Line Options [Getopt-Function.html]) and\nthe join() library function (see Merging an Array into a String [Join-Function.html]).\n\nThe current POSIX version of cut has options to cut fields based on both bytes and characters. This version does not attempt to\nimplement those options, as awk works exclusively in terms of characters.\n\nThe program begins with a comment describing the options, the library functions needed, and a usage() function that prints out a\nusage message and exits. usage() is called if invalid arguments are supplied:\n\n# cut.awk --- implement cut in awk\n\n# Options:\n#    -c list     Cut characters\n#    -f list     Cut fields\n#    -d c        Field delimiter character\n#\n#    -s          Suppress lines without the delimiter\n#\n# Requires getopt() and join() library functions\n\n\n\nfunction usage()\n{\n    print(\"usage: cut [-f list] [-d c] [-s] [files...]\") > \"/dev/stderr\"\n    print(\"       cut [-c list] [files...]\") > \"/dev/stderr\"\n    exit 1\n}\n\n\nNext comes a BEGIN rule that parses the command-line options. It sets FS to a single TAB character, because that is cut\u2019s default\nfield separator. The rule then sets the output field separator to be the same as the input field separator. A loop using getopt()\nsteps through the command-line options. Exactly one of the variables by_fields or by_chars is set to true, to indicate that\nprocessing should be done by fields or by characters, respectively. When cutting by characters, the output field separator is set\nto the null string:\n\nBEGIN {\n    FS = \"\\t\"    # default\n    OFS = FS\n    while ((c = getopt(ARGC, ARGV, \"sf:c:d:\")) != -1) {\n        if (c == \"f\") {\n            by_fields = 1\n            fieldlist = Optarg\n        } else if (c == \"c\") {\n            by_chars = 1\n            fieldlist =", "doc_id": "5083c770-1566-4e37-8913-72dab29e1f11", "embedding": null, "doc_hash": "75ad9570137e5a0bf5b8067a491d3891e3b2aa1026eb60addf472f06368976b1", "extra_info": null, "node_info": {"start": 0, "end": 3250, "_node_type": "1"}, "relationships": {"1": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe", "3": "61966595-32a0-4425-bea6-6801c89f7759"}}, "__type__": "1"}, "61966595-32a0-4425-bea6-6801c89f7759": {"__data__": {"text": "= 1\n            fieldlist = Optarg\n            OFS = \"\"\n        } else if (c == \"d\") {\n            if (length(Optarg) > 1) {\n                printf(\"cut: using first character of %s\" \\\n                       \" for delimiter\\n\", Optarg) > \"/dev/stderr\"\n                Optarg = substr(Optarg, 1, 1)\n            }\n            fs = FS = Optarg\n            OFS = FS\n            if (FS == \" \")    # defeat awk semantics\n                FS = \"[ ]\"\n        } else if (c == \"s\")\n            suppress = 1\n        else\n            usage()\n    }\n\n    # Clear out options\n    for (i = 1; i < Optind; i++)\n        ARGV[i] = \"\"\n\n\nThe code must take special care when the field delimiter is a space. Using a single space (\"\u00a0\") for the value of FS is\nincorrect\u2014awk would separate fields with runs of spaces, TABs, and/or newlines, and we want them to be separated with individual\nspaces. To this end, we save the original space character in the variable fs for later use; after setting FS to \"[\u00a0]\" we can\u2019t use\nit directly to see if the field delimiter character is in the string.\n\nAlso remember that after getopt() is through (as described in Processing Command-Line Options [Getopt-Function.html]), we have to\nclear out all the elements of ARGV from 1 to Optind, so that awk does not try to process the command-line options as file names.\n\nAfter dealing with the command-line options, the program verifies that the options make sense. Only one or the other of -c and -f\nshould be used, and both require a field list. Then the program calls either set_fieldlist() or set_charlist() to pull apart the\nlist of fields or characters:\n\n    if (by_fields && by_chars)\n        usage()\n\n    if (by_fields == 0 && by_chars == 0)\n        by_fields = 1    # default\n\n\n\n    if (fieldlist == \"\") {\n        print \"cut: needs list for -c or -f\" > \"/dev/stderr\"\n        exit 1\n    }\n\n\n\n\n    if (by_fields)\n        set_fieldlist()\n    else\n        set_charlist()\n}\n\n\nset_fieldlist() splits the field list apart at the commas into an array. Then, for each element of the array, it looks to see if\nthe element is actually a range, and if so, splits it apart. The function checks the range to make sure that the first number is\nsmaller than the second. Each number in the list is added to the flist array, which simply lists the fields that will be printed.\nNormal field splitting is used. The program lets awk handle the job of doing the field splitting:\n\nfunction set_fieldlist(        n, m, i, j, k, f, g)\n{\n    n = split(fieldlist, f, \",\")\n    j = 1    # index in flist\n    for (i = 1; i <= n; i++) {\n        if (index(f[i], \"-\") != 0) { # a range\n   ", "doc_id": "61966595-32a0-4425-bea6-6801c89f7759", "embedding": null, "doc_hash": "29e5b385f4db0bc48cad16a81adda38d55d3652aa90fc904041d021fbc91f54c", "extra_info": null, "node_info": {"start": 3238, "end": 5858, "_node_type": "1"}, "relationships": {"1": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe", "2": "5083c770-1566-4e37-8913-72dab29e1f11", "3": "ed3c91a0-7997-4102-bf5d-e31a1ecf1b60"}}, "__type__": "1"}, "ed3c91a0-7997-4102-bf5d-e31a1ecf1b60": {"__data__": {"text": "\"-\") != 0) { # a range\n            m = split(f[i], g, \"-\")\n\n\n            if (m != 2 || g[1] >= g[2]) {\n                printf(\"cut: bad field list: %s\\n\",\n                                  f[i]) > \"/dev/stderr\"\n                exit 1\n            }\n\n\n            for (k = g[1]; k <= g[2]; k++)\n                flist[j++] = k\n        } else\n            flist[j++] = f[i]\n    }\n    nfields = j - 1\n}\n\n\nThe set_charlist() function is more complicated than set_fieldlist(). The idea here is to use gawk\u2019s FIELDWIDTHS variable (see\nReading Fixed-Width Data [Constant-Size.html]), which describes constant-width input. When using a character list, that is exactly\nwhat we have.\n\nSetting up FIELDWIDTHS is more complicated than simply listing the fields that need to be printed. We have to keep track of the\nfields to print and also the intervening characters that have to be skipped. For example, suppose you wanted characters 1 through\n8, 15, and 22 through 35. You would use \u2018-c 1-8,15,22-35\u2019. The necessary value for FIELDWIDTHS is \"8\u00a06\u00a01\u00a06\u00a014\". This yields five\nfields, and the fields to print are $1, $3, and $5. The intermediate fields are filler, which is stuff in between the desired\ndata. flist lists the fields to print, and t tracks the complete field list, including filler fields:\n\nfunction set_charlist(    field, i, j, f, g, n, m, t,\n                          filler, last, len)\n{\n    field = 1   # count total fields\n    n = split(fieldlist, f, \",\")\n    j = 1       # index in flist\n    for (i = 1; i <= n; i++) {\n        if (index(f[i], \"-\") != 0) { # range\n            m = split(f[i], g, \"-\")\n            if (m != 2 || g[1] >= g[2]) {\n                printf(\"cut: bad character list: %s\\n\",\n                               f[i]) > \"/dev/stderr\"\n                exit 1\n            }\n            len = g[2] - g[1] + 1\n            if (g[1] > 1)  # compute length of filler\n                filler = g[1] - last - 1\n            else\n                filler = 0\n\n\n            if (filler)\n                t[field++] = filler\n\n\n            t[field++] = len  # length of field\n  ", "doc_id": "ed3c91a0-7997-4102-bf5d-e31a1ecf1b60", "embedding": null, "doc_hash": "aee66a0e978e44398756a986c1671e7e49ae548072925b84bd5fe7dad069f1a7", "extra_info": null, "node_info": {"start": 5855, "end": 7934, "_node_type": "1"}, "relationships": {"1": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe", "2": "61966595-32a0-4425-bea6-6801c89f7759", "3": "34c214bc-397f-441e-b963-7880ce2814d7"}}, "__type__": "1"}, "34c214bc-397f-441e-b963-7880ce2814d7": {"__data__": {"text": "     t[field++] = len  # length of field\n            last = g[2]\n            flist[j++] = field - 1\n        } else {\n            if (f[i] > 1)\n                filler = f[i] - last - 1\n            else\n                filler = 0\n            if (filler)\n                t[field++] = filler\n            t[field++] = 1\n            last = f[i]\n            flist[j++] = field - 1\n        }\n    }\n    FIELDWIDTHS = join(t, 1, field - 1)\n    nfields = j - 1\n}\n\n\nNext is the rule that processes the data. If the -s option is given, then suppress is true. The first if statement makes sure that\nthe input record does have the field separator. If cut is processing fields, suppress is true, and the field separator character\nis not in the record, then the record is skipped.\n\nIf the record is valid, then gawk has split the data into fields, either using the character in FS or using fixed-length fields\nand FIELDWIDTHS. The loop goes through the list of fields that should be printed. The corresponding field is printed if it\ncontains data. If the next field also has data, then the separator character is written out between the fields:\n\n{\n    if (by_fields && suppress && index($0, fs) == 0)\n        next\n\n    for (i = 1; i <= nfields; i++) {\n        if ($flist[i] != \"\") {\n            printf \"%s\", $flist[i]\n            if (i < nfields && $flist[i+1] != \"\")\n                printf \"%s\", OFS\n        }\n    }\n    print \"\"\n}\n\n\nThis version of cut relies on gawk\u2019s FIELDWIDTHS variable to do the character-based cutting. It is possible in other awk\nimplementations to use substr() (see String-Manipulation Functions [String-Functions.html]), but it is also extremely painful. The\nFIELDWIDTHS variable supplies an elegant solution to the problem of picking the input line apart by characters.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Searching for Regular Expressions in Files [Egrep-Program.html], Up: Reinventing Wheels for Fun and Profit [Clones.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "34c214bc-397f-441e-b963-7880ce2814d7", "embedding": null, "doc_hash": "c385af4ae4c06c69b178fe4a6865f07c8e9d075be665480d3988e725bd2c5ca8", "extra_info": null, "node_info": {"start": 7908, "end": 10007, "_node_type": "1"}, "relationships": {"1": "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe", "2": "ed3c91a0-7997-4102-bf5d-e31a1ecf1b60"}}, "__type__": "1"}, "df737f92-774b-4164-9424-99c25187258f": {"__data__": {"text": "Next: Using gawk In The MSYS Environment [MSYS.html], Previous: Using gawk on PC Operating Systems [PC-Using.html], Up:\nInstallation on MS-Windows [PC-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.1.4 USING GAWK IN THE CYGWIN ENVIRONMENT\n\ngawk can be built and used \u201cout of the box\u201d under MS-Windows if you are using the Cygwin environment [http://www.cygwin.com]. This\nenvironment provides an excellent simulation of GNU/Linux, using Bash, GCC, GNU Make, and other GNU programs. Compilation and\ninstallation for Cygwin is the same as for a Unix system:\n\ntar -xvpzf gawk-5.2.2.tar.gz\ncd gawk-5.2.2\n./configure\nmake && make check\n\n\nWhen compared to GNU/Linux on the same system, the \u2018configure\u2019 step on Cygwin takes considerably longer. However, it does finish,\nand then the \u2018make\u2019 proceeds as usual.\n\nYou may also install gawk using the regular Cygwin installer. In general Cygwin supplies the latest released version.\n\nRecent versions of Cygwin open all files in binary mode. This means that you should use \u2018RS = \"\\r?\\n\"\u2019 in order to be able to\nhandle standard MS-Windows text files with carriage-return plus line-feed line endings.\n\nThe Cygwin environment supports both the \u2018|&\u2019 operator and TCP/IP networking (see Using gawk for Network Programming\n[TCP_002fIP-Networking.html]).", "doc_id": "df737f92-774b-4164-9424-99c25187258f", "embedding": null, "doc_hash": "b06b7fa8637508a772b5f95787313ea822d4345776fbe0519f1675cc66f2dcab", "extra_info": null, "node_info": {"start": 0, "end": 1451, "_node_type": "1"}, "relationships": {"1": "07802023-2755-4197-9f0e-97253661fb27"}}, "__type__": "1"}, "398985d9-ed0c-4b48-ac5f-87dd636301d9": {"__data__": {"text": "Up: Shell Quoting Issues [Quoting.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.6.1 QUOTING IN MS-WINDOWS BATCH FILES\n\nAlthough this Web page generally only worries about POSIX systems and the POSIX shell, the following issue arises often enough for\nmany users that it is worth addressing.\n\nThe \u201cshells\u201d on Microsoft Windows systems use the double-quote character for quoting, and make it difficult or impossible to\ninclude an escaped double-quote character in a command-line script. The following example, courtesy of Jeroen Brink, shows how to\nescape the double quotes from this one liner script that prints all lines in a file surrounded by double quotes:\n\n{ print \"\\\"\" $0 \"\\\"\" }\n\n\nIn an MS-Windows command-line the one-liner script above may be passed as follows:\n\ngawk \"{ print \\\"\\042\\\" $0 \\\"\\042\\\" }\" file\n\n\nIn this example the \u2018\\042\u2019 is the octal code for a double-quote; gawk converts it into a real double-quote for output by the print\nstatement.\n\nIn MS-Windows escaping double-quotes is a little tricky because you use backslashes to escape double-quotes, but backslashes\nthemselves are not escaped in the usual way; indeed they are either duplicated or not, depending upon whether there is a\nsubsequent double-quote. The MS-Windows rule for double-quoting a string is the following:\n\n 1. For each double quote in the original string, let N be the number of backslash(es) before it, N might be zero. Replace these N\n    backslash(es) by 2*N+1 backslash(es)\n 2. Let N be the number of backslash(es) tailing the original string, N might be zero. Replace these N backslash(es) by 2*N\n    backslash(es)\n 3. Surround the resulting string by double-quotes.\n\nSo to double-quote the one-liner script \u2018{ print \"\\\"\" $0 \"\\\"\" }\u2019 from the previous example you would do it this way:\n\ngawk \"{ print \\\"\\\\\\\"\\\" $0 \\\"\\\\\\\"\\\" }\" file\n\n\nHowever, the use of \u2018\\042\u2019 instead of \u2018\\\\\\\"\u2019 is also possible and easier to read, because backslashes that are not followed by a\ndouble-quote don\u2019t need duplication.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nUp: Shell Quoting Issues [Quoting.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "398985d9-ed0c-4b48-ac5f-87dd636301d9", "embedding": null, "doc_hash": "f9a42d8f3282f8dfc8be2e3e1c2a2517c79969e2d7ad83b19aad07044c910e21", "extra_info": null, "node_info": {"start": 0, "end": 2378, "_node_type": "1"}, "relationships": {"1": "8ca3ad30-f63f-4fd9-ba96-4c8320e9b8f7"}}, "__type__": "1"}, "5cf91c47-636e-4984-9d97-d444e6b3fc1d": {"__data__": {"text": "Next: Processing Command-Line Options [Getopt-Function.html], Previous: General Programming [General-Functions.html], Up: A\nLibrary of awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.3 DATA FILE MANAGEMENT\n\nThis section presents functions that are useful for managing command-line data files.\n\n * Noting Data file Boundaries [Filetrans-Function.html]\n * Rereading the Current File [Rewind-Function.html]\n * Checking for Readable Data files [File-Checking.html]\n * Checking for Zero-Length Files [Empty-Files.html]\n * Treating Assignments as File names [Ignoring-Assigns.html]", "doc_id": "5cf91c47-636e-4984-9d97-d444e6b3fc1d", "embedding": null, "doc_hash": "9dfecea074671663d80eb2381520abd946ae7d0056c9b87641b3eb5f5a4d42ef", "extra_info": null, "node_info": {"start": 0, "end": 762, "_node_type": "1"}, "relationships": {"1": "122f93c7-4a3a-43c8-b7a8-833521da0acd"}}, "__type__": "1"}, "1f2e304f-f408-4828-a560-34fde8c210e5": {"__data__": {"text": "Next: Viewing and Changing Data [Viewing-And-Changing-Data.html], Previous: Control of Breakpoints [Breakpoint-Control.html], Up:\nMain Debugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.3.2 CONTROL OF EXECUTION\n\nNow that your breakpoints are ready, you can start running the program and observing its behavior. There are more commands for\ncontrolling execution of the program than we saw in our earlier example:\n\ncommands [n] silent \u2026 end\n\nSet a list of commands to be executed upon stopping at a breakpoint or watchpoint. n is the breakpoint or watchpoint number.\nWithout a number, the last one set is used. The actual commands follow, starting on the next line, and terminated by the end\ncommand. If the command silent is in the list, the usual messages about stopping at a breakpoint and the source line are not\nprinted. Any command in the list that resumes execution (e.g., continue) terminates the list (an implicit end), and subsequent\ncommands are ignored. For example:\n\ngawk> commands\n> silent\n> printf \"A silent breakpoint; i = %d\\n\", i\n> info locals\n> set i = 10\n> continue\n> end\ngawk>\n\n\ncontinue [count] c [count]\n\nResume program execution. If continued from a breakpoint and count is specified, ignore the breakpoint at that location the next\ncount times before stopping.\n\nfinish\n\nExecute until the selected stack frame returns. Print the returned value.\n\nnext [count] n [count]\n\nContinue execution to the next source line, stepping over function calls. The argument count controls how many times to repeat the\naction, as in step.\n\nnexti [count] ni [count]\n\nExecute one (or count) instruction(s), stepping over function calls.\n\nreturn [value]\n\nCancel execution of a function call. If value (either a string or a number) is specified, it is used as the function\u2019s return\nvalue. If used in a frame other than the innermost one (the currently executing function; i.e., frame number 0), discard all inner\nframes in addition to the selected one, and the caller of that frame becomes the innermost frame.\n\nrun r\n\nStart/restart execution of the program. When restarting, the debugger retains the current breakpoints, watchpoints, command\nhistory, automatic display variables, and debugger options.\n\nstep [count] s [count]\n\nContinue execution until control reaches a different source line in the current stack frame, stepping inside any function called\nwithin the line. If the argument count is supplied, steps that many times before stopping, unless it encounters a breakpoint or\nwatchpoint.\n\nstepi [count] si [count]\n\nExecute one (or count) instruction(s), stepping inside function calls. (For illustration of what is meant by an \u201cinstruction\u201d in\ngawk, see the output shown under dump in Miscellaneous Commands [Miscellaneous-Debugger-Commands.html].)\n\nuntil [[filename:]n | function] u [[filename:]n | function]\n\nWithout any argument, continue execution until a line past the current line in the current stack frame is reached. With an\nargument, continue execution until the specified location is reached, or the current stack frame returns.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Viewing and Changing Data [Viewing-And-Changing-Data.html], Previous: Control of Breakpoints [Breakpoint-Control.html], Up:\nMain Debugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "1f2e304f-f408-4828-a560-34fde8c210e5", "embedding": null, "doc_hash": "fd73c829290970d3addd5f5be7deed0a01a4016b250321c312dd20252d11a48f", "extra_info": null, "node_info": {"start": 0, "end": 3621, "_node_type": "1"}, "relationships": {"1": "4e83a925-55aa-4378-a95d-40ca8144e809"}}, "__type__": "1"}, "880ce47a-2f35-4a6b-9249-a2d9a0f21d9e": {"__data__": {"text": "Next: Miscellaneous Commands [Miscellaneous-Debugger-Commands.html], Previous: Working with the Stack [Execution-Stack.html], Up:\nMain Debugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.3.5 OBTAINING INFORMATION ABOUT THE PROGRAM AND THE DEBUGGER STATE\n\nBesides looking at the values of variables, there is often a need to get other sorts of information about the state of your\nprogram and of the debugging environment itself. The gawk debugger has one command that provides this information, appropriately\ncalled info. info is used with one of a number of arguments that tell it exactly what you want to know:\n\ninfo what i what\n\nThe value for what should be one of the following:\n\nargs \u00b6\n\nList arguments of the selected frame.\n\nbreak \u00b6\n\nList all currently set breakpoints.\n\ndisplay \u00b6\n\nList all items in the automatic display list.\n\nframe \u00b6\n\nGive a description of the selected stack frame.\n\nfunctions \u00b6\n\nList all function definitions including source file names and line numbers.\n\nlocals \u00b6\n\nList local variables of the selected frame.\n\nsource \u00b6\n\nPrint the name of the current source file. Each time the program stops, the current source file is the file containing the current\ninstruction. When the debugger first starts, the current source file is the first file included via the -f option. The \u2018list\nfilename:lineno\u2019 command can be used at any time to change the current source.\n\nsources \u00b6\n\nList all program sources.\n\nvariables \u00b6\n\nList all global variables.\n\nwatch \u00b6\n\nList all items in the watch list.\n\nAdditional commands give you control over the debugger, the ability to save the debugger\u2019s state, and the ability to run debugger\ncommands from a file. The commands are:\n\noption [name[=value]] o [name[=value]]\n\nWithout an argument, display the available debugger options and their current values. \u2018option name\u2019 shows the current value of the\nnamed option. \u2018option name=value\u2019 assigns a new value to the named option. The available options are:\n\nhistory_size \u00b6\n\nSet the maximum number of lines to keep in the history file ./.gawk_history. The default is 100.\n\nlistsize \u00b6\n\nSpecify the number of lines that list prints. The default is 15.\n\noutfile \u00b6\n\nSend gawk output to a file; debugger output still goes to standard output. An empty string (\"\") resets output to standard output.\n\nprompt \u00b6\n\nChange the debugger prompt. The default is \u2018gawk>\u00a0\u2019.\n\nsave_history [on | off] \u00b6\n\nSave command history to file ./.gawk_history. The default is on.\n\nsave_options [on | off] \u00b6\n\nSave current options to file ./.gawkrc upon exit. The default is on. Options are read back into the next session upon startup.\n\ntrace [on | off] \u00b6\n\nTurn instruction tracing on or off. The default is off.\n\nsave filename\n\nSave the commands from the current session to the given file name, so that they can be replayed using the source command.\n\nsource filename \u00b6\n\nRun command(s) from a file; an error in any command does not terminate execution of subsequent commands. Comments (lines starting\nwith \u2018#\u2019) are allowed in a command file. Empty lines are ignored; they do not repeat the last command. You can\u2019t restart the\nprogram by having more than one run command in the file. Also, the list of commands may include additional source commands;\nhowever, the gawk debugger will not source the same file more than once in order to avoid infinite recursion.\n\nIn addition to, or instead of, the source command, you can use the -D file or --debug=file command-line options to execute\ncommands from a file non-interactively (see Command-Line Options [Options.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Miscellaneous Commands [Miscellaneous-Debugger-Commands.html], Previous: Working with the Stack [Execution-Stack.html], Up:\nMain Debugger Commands", "doc_id": "880ce47a-2f35-4a6b-9249-a2d9a0f21d9e", "embedding": null, "doc_hash": "5337e5a5c9b6670872879ad33cf1ff76d557f478a2b34528c950f24bd19cf3a2", "extra_info": null, "node_info": {"start": 0, "end": 4005, "_node_type": "1"}, "relationships": {"1": "02446440-8c8b-41dc-b35f-09f994b57351", "3": "acd29a91-ebc8-4b37-af5d-6d5fc32e3146"}}, "__type__": "1"}, "acd29a91-ebc8-4b37-af5d-6d5fc32e3146": {"__data__": {"text": "Working with the Stack [Execution-Stack.html], Up:\nMain Debugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "acd29a91-ebc8-4b37-af5d-6d5fc32e3146", "embedding": null, "doc_hash": "c0cba999a92e5ddabb58c94ade717bcd43e4c133d19d2cd82c65fb76b69bf969", "extra_info": null, "node_info": {"start": 3932, "end": 4097, "_node_type": "1"}, "relationships": {"1": "02446440-8c8b-41dc-b35f-09f994b57351", "2": "880ce47a-2f35-4a6b-9249-a2d9a0f21d9e"}}, "__type__": "1"}, "16c5e2c0-ea79-427a-97f5-b245756d5626": {"__data__": {"text": "Next: Finding the Bug [Finding-The-Bug.html], Up: Sample gawk Debugging Session [Sample-Debugging-Session.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.2.1 HOW TO START THE DEBUGGER\n\nStarting the debugger is almost exactly like running gawk normally, except you have to pass an additional option, --debug, or the\ncorresponding short option, -D. The file(s) containing the program and any supporting code are given on the command line as\narguments to one or more -f options. (gawk is not designed to debug command-line programs, only programs contained in files.) In\nour case, we invoke the debugger like this:\n\n$ gawk -D -f getopt.awk -f join.awk -f uniq.awk -- -1 inputfile\n\n\nwhere both getopt.awk and uniq.awk are in $AWKPATH. (Experienced users of GDB or similar debuggers should note that this syntax is\nslightly different from what you are used to. With the gawk debugger, you give the arguments for running the program in the\ncommand line to the debugger rather than as part of the run command at the debugger prompt.) The -- ends gawk\u2019s command line\noptions. It\u2019s not strictly necessary here, but it is needed if an option to the awk program conflicts with a gawk option. The -1\nis an option to uniq.awk.\n\nInstead of immediately running the program on inputfile, as gawk would ordinarily do, the debugger merely loads all the program\nsource files, compiles them internally, and then gives us a prompt:\n\ngawk>\n\n\nfrom which we can issue commands to the debugger. At this point, no code has been executed.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Finding the Bug [Finding-The-Bug.html], Up: Sample gawk Debugging Session [Sample-Debugging-Session.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "16c5e2c0-ea79-427a-97f5-b245756d5626", "embedding": null, "doc_hash": "a02d34f4edfeabb31ae587f4533664019246e4942c5f5a24e890e88592ad5cdf", "extra_info": null, "node_info": {"start": 0, "end": 1968, "_node_type": "1"}, "relationships": {"1": "76edec7a-92b8-4b70-a75e-7ea892a48e3b"}}, "__type__": "1"}, "55dc4cd9-aaa3-4256-9990-9430b7003a46": {"__data__": {"text": "Next: Namespaces in gawk [Namespaces.html], Previous: Internationalization with gawk [Internationalization.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14 DEBUGGING AWK PROGRAMS\n\nIt would be nice if computer programs worked perfectly the first time they were run, but in real life, this rarely happens for\nprograms of any complexity. Thus, most programming languages have facilities available for \u201cdebugging\u201d programs, and awk is no\nexception.\n\nThe gawk debugger is purposely modeled after the GNU Debugger (GDB) [https://www.gnu.org/software/gdb/] command-line debugger. If\nyou are familiar with GDB, learning how to use gawk for debugging your programs is easy.\n\n * Introduction to the gawk Debugger [Debugging.html]\n * Sample gawk Debugging Session [Sample-Debugging-Session.html]\n * Main Debugger Commands [List-of-Debugger-Commands.html]\n * Readline Support [Readline-Support.html]\n * Limitations [Limitations.html]\n * Summary [Debugging-Summary.html]", "doc_id": "55dc4cd9-aaa3-4256-9990-9430b7003a46", "embedding": null, "doc_hash": "8fd54fa2eea10a51ece419220efa1817a15509d671bec801946e219995beb0cd", "extra_info": null, "node_info": {"start": 0, "end": 1149, "_node_type": "1"}, "relationships": {"1": "2eb6f3b2-feb9-4485-adf7-c2be88b42afa"}}, "__type__": "1"}, "513c1963-63ae-4822-94a2-59158ae58326": {"__data__": {"text": "Next: Debugging Concepts [Debugging-Terms.html], Up: Introduction to the gawk Debugger [Debugging.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.1.1 DEBUGGING IN GENERAL\n\n(If you have used debuggers in other languages, you may want to skip ahead to awk Debugging [Awk-Debugging.html].)\n\nOf course, a debugging program cannot remove bugs for you, because it has no way of knowing what you or your users consider a\n\u201cbug\u201d versus a \u201cfeature.\u201d (Sometimes, we humans have a hard time with this ourselves.) In that case, what can you expect from such\na tool? The answer to that depends on the language being debugged, but in general, you can expect at least the following:\n\n * The ability to watch a program execute its instructions one by one, giving you, the programmer, the opportunity to think about\n   what is happening on a time scale of seconds, minutes, or hours, rather than the nanosecond time scale at which the code\n   usually runs.\n * The opportunity to not only passively observe the operation of your program, but to control it and try different paths of\n   execution, without having to change your source files.\n * The chance to see the values of data in the program at any point in execution, and also to change that data on the fly, to see\n   how that affects what happens afterward. (This often includes the ability to look at internal data structures besides the\n   variables you actually defined in your code.)\n * The ability to obtain additional information about your program\u2019s state or even its internal structure.\n\nAll of these tools provide a great amount of help in using your own skills and understanding of the goals of your program to find\nwhere it is going wrong (or, for that matter, to better comprehend a perfectly functional program that you or someone else wrote).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Debugging Concepts [Debugging-Terms.html], Up: Introduction to the gawk Debugger [Debugging.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "513c1963-63ae-4822-94a2-59158ae58326", "embedding": null, "doc_hash": "27db665bf62e91af95f32e4bb820ca1c0528be5a0d08e87c5bd3adfaa50984fb", "extra_info": null, "node_info": {"start": 0, "end": 2243, "_node_type": "1"}, "relationships": {"1": "dcb76755-3f2c-4c48-8eb8-6b6102a7740a"}}, "__type__": "1"}, "3eaaa76c-9103-4e98-b4a3-0c12c315f70f": {"__data__": {"text": "Previous: Limitations [Limitations.html], Up: Debugging awk Programs [Debugger.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14.6 SUMMARY\n\n * Programs rarely work correctly the first time. Finding bugs is called debugging, and a program that helps you find bugs is a\n   debugger. gawk has a built-in debugger that works very similarly to the GNU Debugger, GDB.\n * Debuggers let you step through your program one statement at a time, examine and change variable and array values, and do a\n   number of other things that let you understand what your program is actually doing (as opposed to what it is supposed to do).\n * Like most debuggers, the gawk debugger works in terms of stack frames, and lets you set both breakpoints (stop at a point in\n   the code) and watchpoints (stop when a data value changes).\n * The debugger command set is fairly complete, providing control over breakpoints, execution, viewing and changing data, working\n   with the stack, getting information, and other tasks.\n * If the GNU Readline library is available when gawk is compiled, it is used by the debugger to provide command-line history and\n   editing.\n * Usually, the debugger does not not affect the program being debugged, but occasionally it can.", "doc_id": "3eaaa76c-9103-4e98-b4a3-0c12c315f70f", "embedding": null, "doc_hash": "cbda875a4dafd68a8928895e185e471753bd358160bac23a59ceccfcc360e424", "extra_info": null, "node_info": {"start": 0, "end": 1387, "_node_type": "1"}, "relationships": {"1": "7f1c46d8-c596-4848-a35c-fca2ee50b974"}}, "__type__": "1"}, "a4ccfc6e-496a-4f16-9f07-bb8625b2dbee": {"__data__": {"text": "Next: awk Debugging [Awk-Debugging.html], Previous: Debugging in General [Debugging-Concepts.html], Up: Introduction to the gawk\nDebugger [Debugging.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.1.2 DEBUGGING CONCEPTS\n\nBefore diving in to the details, we need to introduce several important concepts that apply to just about all debuggers. The\nfollowing list defines terms used throughout the rest of this chapter:\n\nStack frame\n\nPrograms generally call functions during the course of their execution. One function can call another, or a function can call\nitself (recursion). You can view the chain of called functions (main program calls A, which calls B, which calls C), as a stack of\nexecuting functions: the currently running function is the topmost one on the stack, and when it finishes (returns), the next one\ndown then becomes the active function. Such a stack is termed a call stack.\n\nFor each function on the call stack, the system maintains a data area that contains the function\u2019s parameters, local variables,\nand return value, as well as any other \u201cbookkeeping\u201d information needed to manage the call stack. This data area is termed a stack\nframe.\n\ngawk also follows this model, and gives you access to the call stack and to each stack frame. You can see the call stack, as well\nas from where each function on the stack was invoked. Commands that print the call stack print information about each stack frame\n(as detailed later on).\n\nBreakpoint \u00b6\n\nDuring debugging, you often wish to let the program run until it reaches a certain point, and then continue execution from there\none statement (or instruction) at a time. The way to do this is to set a breakpoint within the program. A breakpoint is where the\nexecution of the program should break off (stop), so that you can take over control of the program\u2019s execution. You can add and\nremove as many breakpoints as you like.\n\nWatchpoint \u00b6\n\nA watchpoint is similar to a breakpoint. The difference is that breakpoints are oriented around the code: stop when a certain\npoint in the code is reached. A watchpoint, however, specifies that program execution should stop when a data value is changed.\nThis is useful, as sometimes it happens that a variable receives an erroneous value, and it\u2019s hard to track down where this\nhappens just by looking at the code. By using a watchpoint, you can stop whenever a variable is assigned to, and usually find the\nerrant code quite quickly.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: awk Debugging [Awk-Debugging.html], Previous: Debugging in General [Debugging-Concepts.html], Up: Introduction to the gawk\nDebugger [Debugging.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a4ccfc6e-496a-4f16-9f07-bb8625b2dbee", "embedding": null, "doc_hash": "ad732bdd88013ce5d00244be3df530d6eb978cc5e78802f09da9f720f0e3ee95", "extra_info": null, "node_info": {"start": 0, "end": 2937, "_node_type": "1"}, "relationships": {"1": "a94e02c9-b05b-4ba4-9051-5088d414ba55"}}, "__type__": "1"}, "9e2dbc1b-30d2-4d87-a363-f963a6c0f183": {"__data__": {"text": "Next: Sample gawk Debugging Session [Sample-Debugging-Session.html], Up: Debugging awk Programs [Debugger.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14.1 INTRODUCTION TO THE GAWK DEBUGGER\n\nThis section introduces debugging in general and begins the discussion of debugging in gawk.\n\n * Debugging in General [Debugging-Concepts.html]\n * Debugging Concepts [Debugging-Terms.html]\n * awk Debugging [Awk-Debugging.html]", "doc_id": "9e2dbc1b-30d2-4d87-a363-f963a6c0f183", "embedding": null, "doc_hash": "0361d0cb2bce407a8a728f368158704b97dda87efd1b5c41e91988f09fa35422", "extra_info": null, "node_info": {"start": 0, "end": 571, "_node_type": "1"}, "relationships": {"1": "35925b98-f7e7-4d87-b562-b7e0105731a8"}}, "__type__": "1"}, "35871a58-acb5-4fee-86c4-98b4b45a75a4": {"__data__": {"text": "Next: Using Regular Expressions to Separate Fields [Regexp-Field-Splitting.html], Up: Specifying How Fields Are Separated\n[Field-Separators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.5.1 WHITESPACE NORMALLY SEPARATES FIELDS\n\nFields are normally separated by whitespace sequences (spaces, TABs, and newlines), not by single spaces. Two spaces in a row do\nnot delimit an empty field. The default value of the field separator FS is a string containing a single space, \"\u00a0\". If awk\ninterpreted this value in the usual way, each space character would separate fields, so two spaces in a row would make an empty\nfield between them. The reason this does not happen is that a single space as the value of FS is a special case\u2014it is taken to\nspecify the default manner of delimiting fields.\n\nIf FS is any other single character, such as \",\", then each occurrence of that character separates two fields. Two consecutive\noccurrences delimit an empty field. If the character occurs at the beginning or the end of the line, that too delimits an empty\nfield. The space character is the only single character that does not follow these rules.", "doc_id": "35871a58-acb5-4fee-86c4-98b4b45a75a4", "embedding": null, "doc_hash": "3effcea00a8cd1f65605dd9437d74b2f476d9b5a297306392e7ee749c42ec9b3", "extra_info": null, "node_info": {"start": 0, "end": 1283, "_node_type": "1"}, "relationships": {"1": "c4c26dee-fc40-4fe0-87d4-038c28465546"}}, "__type__": "1"}, "15a95d56-ac7e-40fa-b29d-3ec3b71a0b48": {"__data__": {"text": "Next: Changing The Namespace [Changing-The-Namespace.html], Previous: Qualified Names [Qualified-Names.html], Up: Namespaces in\ngawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.3 THE DEFAULT NAMESPACE\n\nThe default namespace, not surprisingly, is awk. All of the predefined awk and gawk variables are in this namespace, and thus have\nqualified names like awk::ARGC, awk::NF, and so on.\n\nFurthermore, even when you have changed the namespace for your current source file (see Changing The Namespace\n[Changing-The-Namespace.html]), gawk forces unqualified identifiers whose names are all uppercase letters to be in the awk\nnamespace. This makes it possible for you to easily reference gawk\u2019s global variables from different namespaces. It also keeps\nyour code looking natural.", "doc_id": "15a95d56-ac7e-40fa-b29d-3ec3b71a0b48", "embedding": null, "doc_hash": "a7112d62590d756825d43e7074b290fca65c309b84cff0251458aea795199f84", "extra_info": null, "node_info": {"start": 0, "end": 943, "_node_type": "1"}, "relationships": {"1": "16069126-531d-471c-a0e0-f418797427b4"}}, "__type__": "1"}, "ead86ba9-5480-460b-ab61-e7066c03c5d9": {"__data__": {"text": "Next: Function Definition Examples [Function-Example.html], Up: User-Defined Functions [User_002ddefined.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.1 FUNCTION DEFINITION SYNTAX\n\n> It\u2019s entirely fair to say that the awk syntax for local variable definitions is appallingly awful.\n\n\u2014 Brian Kernighan\n\nDefinitions of functions can appear anywhere between the rules of an awk program. Thus, the general form of an awk program is\nextended to include sequences of rules and user-defined function definitions. There is no need to put the definition of a function\nbefore all uses of the function. This is because awk reads the entire program before starting to execute any of it.\n\nThe definition of a function named name looks like this:\n\nfunction name([parameter-list])\n{\n     body-of-function\n}\n\n\nHere, name is the name of the function to define. A valid function name is like a valid variable name: a sequence of letters,\ndigits, and underscores that doesn\u2019t start with a digit. Here too, only the 52 upper- and lowercase English letters may be used in\na function name. Within a single awk program, any particular name can only be used as a variable, array, or function.\n\nparameter-list is an optional list of the function\u2019s arguments and local variable names, separated by commas. When the function is\ncalled, the argument names are used to hold the argument values given in the call.\n\nA function cannot have two parameters with the same name, nor may it have a parameter with the same name as the function itself.\n\n> CAUTION: According to the POSIX standard, function parameters cannot have the same name as one of the special predefined\n> variables (see Predefined Variables [Built_002din-Variables.html]), nor may a function parameter have the same name as another\n> function.\n> \n> Not all versions of awk enforce these restrictions. (d.c.) gawk always enforces the first restriction. With --posix (see\n> Command-Line Options [Options.html]), it also enforces the second restriction.\n\nLocal variables act like the empty string if referenced where a string value is required, and like zero if referenced where a\nnumeric value is required. This is the same as the behavior of regular variables that have never been assigned a value. (There is\nmore to understand about local variables; see Functions and Their Effects on Variable Typing [Dynamic-Typing.html].)\n\nThe body-of-function consists of awk statements. It is the most important part of the definition, because it says what the\nfunction should actually do. The argument names exist to give the body a way to talk about the arguments; local variables exist to\ngive the body places to keep temporary values.\n\nArgument names are not distinguished syntactically from local variable names. Instead, the number of arguments supplied when the\nfunction is called determines how many argument variables there are. Thus, if three argument values are given, the first three\nnames in parameter-list are arguments and the rest are local variables.\n\nIt follows that if the number of arguments is not the same in all calls to the function, some of the names in parameter-list may\nbe arguments on some occasions and local variables on others. Another way to think of this is that omitted arguments default to\nthe null string.\n\nUsually when you write a function, you know how many names you intend to use for arguments and how many you intend to use as local\nvariables. It is conventional to place some extra space between the arguments and the local variables, in order to document how\nyour function is supposed to be used.\n\nDuring execution of the function body, the arguments and local variable values hide, or shadow, any variables of the same names\nused in the rest of the program. The shadowed variables are not accessible in the function definition, because there is no way to\nname them while their names have been taken away for the arguments and local variables. All other variables used in the awk\nprogram can be referenced or set normally in the function\u2019s body.\n\nThe arguments and local variables last only as long as the function body is executing.", "doc_id": "ead86ba9-5480-460b-ab61-e7066c03c5d9", "embedding": null, "doc_hash": "0f42c3525795e7da2fa7832c1e4c314bc2b2dc19094c5e5aaba6fd24f0c2e4fa", "extra_info": null, "node_info": {"start": 0, "end": 4256, "_node_type": "1"}, "relationships": {"1": "66d0f3cf-5ff9-4b1a-a3a5-9e506653dba9", "3": "2d1c4bac-3b98-43d7-beb0-e95b26a4df87"}}, "__type__": "1"}, "2d1c4bac-3b98-43d7-beb0-e95b26a4df87": {"__data__": {"text": "arguments and local variables last only as long as the function body is executing. Once the body finishes, you can once again\naccess the variables that were shadowed while the function was running.\n\nThe function body can contain expressions that call functions. They can even call this function, either directly or by way of\nanother function. When this happens, we say the function is recursive. The act of a function calling itself is called recursion.\n\nAll the built-in functions return a value to their caller. User-defined functions can do so also, using the return statement,\nwhich is described in detail in The return Statement [Return-Statement.html]. Many of the subsequent examples in this section use\nthe return statement.\n\nIn many awk implementations, including gawk, the keyword function may be abbreviated func. (c.e.) However, POSIX only specifies\nthe use of the keyword function. This actually has some practical implications. If gawk is in POSIX-compatibility mode (see\nCommand-Line Options [Options.html]), then the following statement does not define a function:\n\nfunc foo() { a = sqrt($1) ; print a }\n\n\nInstead, it defines a rule that, for each record, concatenates the value of the variable \u2018func\u2019 with the return value of the\nfunction \u2018foo\u2019. If the resulting string is non-null, the action is executed. This is probably not what is desired. (awk accepts\nthis input as syntactically valid, because functions may be used before they are defined in awk programs.61)\n\nTo ensure that your awk programs are portable, always use the keyword function when defining a function.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(61)\n\nThis program won\u2019t actually run, because foo() is undefined.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Function Definition Examples [Function-Example.html], Up: User-Defined Functions [User_002ddefined.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2d1c4bac-3b98-43d7-beb0-e95b26a4df87", "embedding": null, "doc_hash": "68d58837e4b2886169026108a79543cde4dee4456910e053708cd13a48770269", "extra_info": null, "node_info": {"start": 4174, "end": 6277, "_node_type": "1"}, "relationships": {"1": "66d0f3cf-5ff9-4b1a-a3a5-9e506653dba9", "2": "ead86ba9-5480-460b-ab61-e7066c03c5d9"}}, "__type__": "1"}, "b976a669-8292-44a4-9fa7-31423ada0779": {"__data__": {"text": "Next: Multidimensional Arrays [Multidimensional.html], Previous: Using Uninitialized Variables as Subscripts\n[Uninitialized-Subscripts.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.4 THE DELETE STATEMENT\n\nTo remove an individual element of an array, use the delete statement:\n\ndelete array[index-expression]\n\n\nOnce an array element has been deleted, any value the element once had is no longer available. It is as if the element had never\nbeen referred to or been given a value. The following is an example of deleting elements in an array:\n\nfor (i in frequencies)\n    delete frequencies[i]\n\n\nThis example removes all the elements from the array frequencies. Once an element is deleted, a subsequent for statement to scan\nthe array does not report that element and using the in operator to check for the presence of that element returns zero (i.e.,\nfalse):\n\ndelete foo[4]\nif (4 in foo)\n    print \"This will never be printed\"\n\n\nIt is important to note that deleting an element is not the same as assigning it a null value (the empty string, \"\"). For example:\n\nfoo[4] = \"\"\nif (4 in foo)\n  print \"This is printed, even though foo[4] is empty\"\n\n\nIt is not an error to delete an element that does not exist. However, if --lint is provided on the command line (see Command-Line\nOptions [Options.html]), gawk issues a warning message when an element that is not in the array is deleted.\n\nAll the elements of an array may be deleted with a single statement by leaving off the subscript in the delete statement, as\nfollows:\n\ndelete array\n\n\nUsing this version of the delete statement is about three times more efficient than the equivalent loop that deletes each element\none at a time.\n\nThis form of the delete statement is also supported by BWK awk and mawk, as well as by a number of other implementations.\n\n> NOTE: For many years, using delete without a subscript was a common extension. In September 2012, it was accepted for inclusion\n> into the POSIX standard. See the Austin Group website [http://austingroupbugs.net/view.php?id=544].\n\nThe following statement provides a portable but nonobvious way to clear out an array:43\n\nsplit(\"\", array)\n\n\nThe split() function (see String-Manipulation Functions [String-Functions.html]) clears out the target array first. This call asks\nit to split apart the null string. Because there is no data to split out, the function simply clears the array and then returns.\n\n> CAUTION: Deleting all the elements from an array does not change its type; you cannot clear an array and then use the array\u2019s\n> name as a scalar (i.e., a regular variable). For example, the following does not work:\n> \n> a[1] = 3\n> delete a\n> a = 3\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(43)\n\nThanks to Michael Brennan for pointing this out.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Multidimensional Arrays [Multidimensional.html], Previous: Using Uninitialized Variables as Subscripts\n[Uninitialized-Subscripts.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b976a669-8292-44a4-9fa7-31423ada0779", "embedding": null, "doc_hash": "e6d57fd97176c40f5b5fccbac825ed899f5701ac83c4d1c7b286f6aa54c70d5f", "extra_info": null, "node_info": {"start": 0, "end": 3404, "_node_type": "1"}, "relationships": {"1": "2d5b4c52-5e4f-4d8e-8362-53128ac2eaae"}}, "__type__": "1"}, "0ae502ac-65d8-450e-81a8-dbc0509d7b5c": {"__data__": {"text": "Previous: Porting gawk to a New Operating System [New-Ports.html], Up: Making Additions to gawk [Additions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.2.4 WHY GENERATED FILES ARE KEPT IN GIT\n\nIf you look at the gawk source in the Git repository, you will notice that it includes files that are automatically generated by\nGNU infrastructure tools, such as Makefile.in from Automake and even configure from Autoconf.\n\nThis is different from many Free Software projects that do not store the derived files, because that keeps the repository less\ncluttered, and it is easier to see the substantive changes when comparing versions and trying to understand what changed between\ncommits.\n\nHowever, there are several reasons why the gawk maintainer likes to have everything in the repository.\n\nFirst, because it is then easy to reproduce any given version completely, without relying upon the availability of (older, likely\nobsolete, and maybe even impossible to find) other tools.\n\nAs an extreme example, if you ever even think about trying to compile, oh, say, the V7 awk, you will discover that not only do you\nhave to bootstrap the V7 yacc to do so, but you also need the V7 lex. And the latter is pretty much impossible to bring up on a\nmodern GNU/Linux system.117\n\n(Or, let\u2019s say gawk 1.2 required bison whatever-it-was in 1989 and that there was no awkgram.c file in the repository. Is there a\nguarantee that we could find that bison version? Or that it would build?)\n\nIf the repository has all the generated files, then it\u2019s easy to just check them out and build. (Or easier, depending upon how far\nback we go.)\n\nAnd that brings us to the second (and stronger) reason why all the files really need to be in Git. It boils down to who do you\ncater to\u2014the gawk developer(s), or the user who just wants to check out a version and try it out?\n\nThe gawk maintainer wants it to be possible for any interested awk user in the world to just clone the repository, check out the\nbranch of interest and build it, without their having to have the correct version(s) of the autotools.118 That is the point of the\nbootstrap.sh file. It touches the various other files in the right order such that\n\n# The canonical incantation for building GNU software:\n./bootstrap.sh && ./configure && make\n\n\nwill just work.\n\nThis is extremely important for the master and gawk-X.Y-stable branches.\n\nFurther, the gawk maintainer would argue that it\u2019s also important for the gawk developers. When he tried to check out the xgawk\nbranch119 to build it, he couldn\u2019t. (No ltmain.sh file, and he had no idea how to create it, and that was not the only problem.)\n\nHe felt extremely frustrated. With respect to that branch, the maintainer is no different than Jane User who wants to try to build\ngawk-4.1-stable or master from the repository.\n\nThus, the maintainer thinks that it\u2019s not just important, but critical, that for any given branch, the above incantation just\nworks.\n\nA third reason to have all the files is that without them, using \u2018git bisect\u2019 to try to find the commit that introduced a bug is\nexceedingly difficult. The maintainer tried to do that on another project that requires running bootstrapping scripts just to\ncreate configure and so on; it was really painful. When the repository is self-contained, using git bisect in it is very easy.\n\nWhat are some of the consequences and/or actions to take?\n\n 1. We don\u2019t mind that there are differing files in the different branches as a result of different versions of the autotools.\n    A. It\u2019s the maintainer\u2019s job to merge them and he will deal with it.\n    B. He is really good at \u2018git diff x y", "doc_id": "0ae502ac-65d8-450e-81a8-dbc0509d7b5c", "embedding": null, "doc_hash": "10eb4ecc277f9ec8831c969b64e23b40514f1aafb3cf5bad568fa1de62d57bf5", "extra_info": null, "node_info": {"start": 0, "end": 3779, "_node_type": "1"}, "relationships": {"1": "d6d249b1-bca0-4808-9b7c-f22bd731d348", "3": "2fe6d08c-4383-409a-82e3-040b2579afe4"}}, "__type__": "1"}, "2fe6d08c-4383-409a-82e3-040b2579afe4": {"__data__": {"text": "with it.\n    B. He is really good at \u2018git diff x y > /tmp/diff1 ; gvim /tmp/diff1\u2019 to remove the diffs that aren\u2019t of interest in order to\n       review code.\n 2. It would certainly help if everyone used the same versions of the GNU tools as he does, which in general are the latest\n    released versions of Automake, Autoconf, bison, GNU gettext, and Libtool.\n    \n    Installing from source is quite easy. It\u2019s how the maintainer worked for years (and still works). He had /usr/local/bin at the\n    front of his PATH and just did:\n    \n    wget https://ftp.gnu.org/gnu/package/package-x.y.z.tar.gz\n    tar -xpzvf package-x.y.z.tar.gz\n    cd package-x.y.z\n    ./configure && make && make check\n    make install    # as root\n    \n    \n    > NOTE: Because of the \u2018https://\u2019 URL, you may have to supply the --no-check-certificate option to wget to download the file.\n\nMost of the above was originally written by the maintainer to other gawk developers. It raised the objection from one of the\ndevelopers \u201c\u2026 that anybody pulling down the source from Git is not an end user.\u201d\n\nHowever, this is not true. There are \u201cpower awk users\u201d who can build gawk (using the magic incantation shown previously) but who\ncan\u2019t program in C. Thus, the major branches should be kept buildable all the time.\n\nIt was then suggested that there be a cron job to create nightly tarballs of \u201cthe source.\u201d Here, the problem is that there are\nsource trees, corresponding to the various branches! So, nightly tarballs aren\u2019t the answer, especially as the repository can go\nfor weeks without significant change being introduced.\n\nFortunately, the Git server can meet this need. For any given branch named branchname, use:\n\nwget https://git.savannah.gnu.org/cgit/gawk.git/snapshot/gawk-branchname.tar.gz\n\n\nto retrieve a snapshot of the given branch.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(117)\n\nWe tried. It was painful.\n\n(118)\n\nThere is one GNU program that is (in our opinion) severely difficult to bootstrap from the Git repository. For example, on the\nauthor\u2019s old (but still working) PowerPC Macintosh with macOS 10.5, it was necessary to bootstrap a ton of software, starting with\nGit itself, in order to try to work with the latest code. It\u2019s not pleasant, and especially on older systems, it\u2019s a big waste of\ntime.\n\nStarting with the latest tarball was no picnic either. The maintainers had dropped .gz and .bz2 files and only distribute .tar.xz\nfiles. It was necessary to bootstrap xz first!\n\n(119)\n\nA branch (since removed) created by one of the other developers that did not include the generated files.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Porting gawk to a New Operating System [New-Ports.html], Up: Making Additions to gawk [Additions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2fe6d08c-4383-409a-82e3-040b2579afe4", "embedding": null, "doc_hash": "e4037c94bc6993326de8c8279fbeb0b1dd578b000b353a06f551be01c954000f", "extra_info": null, "node_info": {"start": 3729, "end": 6722, "_node_type": "1"}, "relationships": {"1": "d6d249b1-bca0-4808-9b7c-f22bd731d348", "2": "0ae502ac-65d8-450e-81a8-dbc0509d7b5c"}}, "__type__": "1"}, "bbb46434-6fb9-4272-b9f5-e6e61b82ad90": {"__data__": {"text": "Previous: Extracting the Distribution [Extracting.html], Up: The gawk Distribution [Gawk-Distribution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.1.3 CONTENTS OF THE GAWK DISTRIBUTION\n\nThe gawk distribution has a number of C source files, documentation files, subdirectories, and files related to the configuration\nprocess (see Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html]), as well as several subdirectories\nrelated to different non-Unix operating systems:\n\nVarious \u2018.c\u2019, \u2018.y\u2019, and \u2018.h\u2019 files\n\nThese files contain the actual gawk source code.\n\nsupport/*\n\nC header and source files for routines that gawk uses, but that are not part of its core functionality. For example, argument\nparsing, regular expression matching, and random number generating routines are all kept here.\n\nABOUT-NLS\n\nA file containing information about GNU gettext and translations.\n\nAUTHORS\n\nA file with some information about the authorship of gawk. It exists only to satisfy the pedants at the Free Software Foundation.\n\nREADME README_d/README.*\n\nDescriptive files: README for gawk under Unix and the rest for the various hardware and software combinations.\n\nINSTALL\n\nA file providing an overview of the configuration and installation process.\n\nChangeLog\n\nA detailed list of source code changes as bugs are fixed or improvements made. There are similar files in all of the\nsubdirectories.\n\nChangeLog.0 ChangeLog.1\n\nOlder lists of source code changes. There are similar files in all of the subdirectories.\n\nNEWS\n\nA list of changes to gawk since the last release or patch. There may be similar files in other subdirectories.\n\nNEWS.0 NEWS.1\n\nOlder lists of changes to gawk. There may be similar files in other subdirectories.\n\nCOPYING\n\nThe GNU General Public License.\n\nPOSIX.STD\n\nA description of behaviors in the POSIX standard for awk that are left undefined, or where gawk may not comply fully, as well as a\nlist of things that the POSIX standard should describe but does not.\n\ndoc/awkforai.txt\n\nPointers to the original draft of a short article describing why gawk is a good language for artificial intelligence (AI)\nprogramming.\n\ndoc/bc_notes\n\nA brief description of gawk\u2019s \u201cbyte code\u201d internals.\n\ndoc/README.card doc/ad.block doc/awkcard.in doc/cardfonts doc/colors doc/macros doc/no.colors doc/setter.outline\n\nThe troff source for a five-color awk reference card. A modern version of troff such as GNU troff (groff) is needed to produce the\ncolor version. See the file README.card for instructions if you have an older troff.\n\ndoc/gawk.1\n\nThe troff source for a manual page describing gawk. This is distributed for the convenience of Unix users.\n\ndoc/gawktexi.in doc/sidebar.awk\n\nThe Texinfo source file for this Web page. It should be processed by doc/sidebar.awk before processing with texi2dvi or texi2pdf\nto produce a printed document, and with makeinfo to produce an Info or HTML file. The Makefile takes care of this processing and\nproduces printable output via texi2dvi or texi2pdf.\n\ndoc/gawk.texi\n\nThe file produced after processing gawktexi.in with sidebar.awk.\n\ndoc/gawk.info\n\nThe generated Info file for this Web page.\n\ndoc/gawkinet.texi\n\nThe Texinfo source file for TCP/IP Internetworking with gawk. It should be processed with TeX (via texi2dvi or texi2pdf) to\nproduce a printed document and with makeinfo to produce an Info or HTML file.\n\ndoc/gawkinet.info\n\nThe generated Info file for TCP/IP Internetworking with", "doc_id": "bbb46434-6fb9-4272-b9f5-e6e61b82ad90", "embedding": null, "doc_hash": "952a015c3b58e3535193a3b042f90d3e4663416de4077f5d0b3729e797365b81", "extra_info": null, "node_info": {"start": 0, "end": 3593, "_node_type": "1"}, "relationships": {"1": "66e61355-0d9d-485e-9b64-23103ad364ee", "3": "bac0c78c-4d56-4424-bd39-0248eb070d82"}}, "__type__": "1"}, "bac0c78c-4d56-4424-bd39-0248eb070d82": {"__data__": {"text": "generated Info file for TCP/IP Internetworking with gawk.\n\ndoc/gawkworkflow.texi\n\nThe Texinfo source file for Participating in gawk Development. It should be processed with TeX (via texi2dvi or texi2pdf) to\nproduce a printed document and with makeinfo to produce an Info or HTML file.\n\ndoc/gawkworkflow.info\n\nThe generated Info file for Participating in gawk Development.\n\ndoc/pm-gawk.texi\n\nThe Texinfo source file for Persistent-Memory gawk User Manual. It should be processed with TeX (via texi2dvi or texi2pdf) to\nproduce a printed document and with makeinfo to produce an Info or HTML file.\n\ndoc/pm-gawk.info\n\nThe generated Info file for Persistent-Memory gawk User Manual.\n\ndoc/pm-gawk.1\n\nThe troff source for a manual page describing the persistent memory features presented in Preserving Data Between Runs\n[Persistent-Memory.html].\n\ndoc/igawk.1\n\nThe troff source for a manual page describing the igawk program presented in An Easy Way to Use Library Functions\n[Igawk-Program.html]. (Since gawk can do its own @include processing, neither igawk nor igawk.1 are installed.)\n\ndoc/it/*\n\nFiles for the Italian translation of this Web page, produced and contributed by Antonio Colombo and Marco Curreli.\n\ndoc/Makefile.in\n\nThe input file used during the configuration process to generate the actual Makefile for creating the documentation.\n\nMakefile.am */Makefile.am\n\nFiles used by the GNU Automake software for generating the Makefile.in files used by Autoconf and configure.\n\nMakefile.in aclocal.m4 build-aux/* configh.in configure.ac configure custom.h missing_d/* m4/*\n\nThese files and subdirectories are used when configuring and compiling gawk for various Unix systems. Most of them are explained\nin Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html]. The rest are there to support the main\ninfrastructure.\n\npo/*\n\nThe po library contains message translations.\n\nawklib/extract.awk awklib/Makefile.am awklib/Makefile.in awklib/eg/*\n\nThe awklib directory contains a copy of extract.awk (see Extracting Programs from Texinfo Source Files [Extract-Program.html]),\nwhich can be used to extract the sample programs from the Texinfo source file for this Web page. It also contains a Makefile.in\nfile, which configure uses to generate a Makefile. Makefile.am is used by GNU Automake to create Makefile.in. The library\nfunctions from A Library of awk Functions [Library-Functions.html], are included as ready-to-use files in the gawk distribution.\nThey are installed as part of the installation process. The rest of the programs in this Web page are available in appropriate\nsubdirectories of awklib/eg.\n\nextension/*\n\nThe source code, manual pages, and infrastructure files for the sample extensions included with gawk. See Writing Extensions for\ngawk [Dynamic-Extensions.html], for more information.\n\nextras/*\n\nAdditional non-essential files. Currently, this directory contains some shell startup files to be installed in /etc/profile.d to\naid in manipulating the AWKPATH and AWKLIBPATH environment variables. See Shell Startup Files [Shell-Startup-Files.html], for more\ninformation.\n\nposix/*\n\nFiles needed for building gawk on POSIX-compliant systems.\n\npc/*\n\nFiles needed for building gawk under MS-Windows (see Installation on MS-Windows [PC-Installation.html] for details).\n\nvms/*\n\nFiles needed for building gawk under OpenVMS (see Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html] for\ndetails).\n\ntest/*\n\nA test suite for gawk. You can use \u2018make check\u2019 from the top-level gawk directory to run your version of gawk against the test\nsuite. If gawk successfully passes \u2018make check\u2019, then you can be confident", "doc_id": "bac0c78c-4d56-4424-bd39-0248eb070d82", "embedding": null, "doc_hash": "44b5881a7554d9fd38793d0aebf63c50b5e452a3fbb51da7a7e5ae4e3bee157b", "extra_info": null, "node_info": {"start": 3549, "end": 7199, "_node_type": "1"}, "relationships": {"1": "66e61355-0d9d-485e-9b64-23103ad364ee", "2": "bbb46434-6fb9-4272-b9f5-e6e61b82ad90", "3": "f3fac04b-d639-4512-8379-b252313729ed"}}, "__type__": "1"}, "f3fac04b-d639-4512-8379-b252313729ed": {"__data__": {"text": "If gawk successfully passes \u2018make check\u2019, then you can be confident of a successful port.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Extracting the Distribution [Extracting.html], Up: The gawk Distribution [Gawk-Distribution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f3fac04b-d639-4512-8379-b252313729ed", "embedding": null, "doc_hash": "e8fe11ad8a44a0086193b957aaeb112485db5396a644af5e51f8ae0dcd34e4c6", "extra_info": null, "node_info": {"start": 7177, "end": 7566, "_node_type": "1"}, "relationships": {"1": "66e61355-0d9d-485e-9b64-23103ad364ee", "2": "bac0c78c-4d56-4424-bd39-0248eb070d82"}}, "__type__": "1"}, "4591559e-d4b8-4690-9e2c-b05f44527013": {"__data__": {"text": "Next: The for Statement [For-Statement.html], Previous: The while Statement [While-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.3 THE DO-WHILE STATEMENT\n\nThe do loop is a variation of the while looping statement. The do loop executes the body once and then repeats the body as long as\nthe condition is true. It looks like this:\n\ndo\n  body\nwhile (condition)\n\n\nEven if the condition is false at the start, the body executes at least once (and only once, unless executing body makes condition\ntrue). Contrast this with the corresponding while statement:\n\nwhile (condition)\n    body\n\n\nThis statement does not execute the body even once if the condition is false to begin with. The following is an example of a do\nstatement:\n\n{\n    i = 1\n    do {\n        print $0\n        i++\n    } while (i <= 10)\n}\n\n\nThis program prints each input record 10 times. However, it isn\u2019t a very realistic example, because in this case an ordinary while\nwould do just as well. This situation reflects actual experience; only occasionally is there a real use for a do statement.", "doc_id": "4591559e-d4b8-4690-9e2c-b05f44527013", "embedding": null, "doc_hash": "56d34720a4a9f7479514b24d1ef37c47fa47b9bfb857ae429786f4c5abae8f0b", "extra_info": null, "node_info": {"start": 0, "end": 1271, "_node_type": "1"}, "relationships": {"1": "be1cb307-408b-41ed-bbf1-5ec07174114e"}}, "__type__": "1"}, "283f6095-94e3-40a4-bbf9-e2f5c472cae0": {"__data__": {"text": "Next: An Alarm Clock Program [Alarm-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.1 FINDING DUPLICATED WORDS IN A DOCUMENT\n\nA common error when writing large amounts of prose is to accidentally duplicate words. Typically you will see this in text as\nsomething like \u201cthe the program does the following\u2026\u201d When the text is online, often the duplicated words occur at the end of one\nline and at the beginning of another, making them very difficult to spot.\n\nThis program, dupword.awk, scans through a file one line at a time and looks for adjacent occurrences of the same word. It also\nsaves the last word on a line (in the variable prev) for comparison with the first word on the next line.\n\nThe first two statements make sure that the line is all lowercase, so that, for example, \u201cThe\u201d and \u201cthe\u201d compare equal to each\nother. The next statement replaces nonalphanumeric and nonwhitespace characters with spaces, so that punctuation does not affect\nthe comparison either. The characters are replaced with spaces so that formatting controls don\u2019t create nonsense words (e.g., the\nTexinfo \u2018@code{NF}\u2019 becomes \u2018codeNF\u2019 if punctuation is simply deleted). The record is then resplit into fields, yielding just the\nactual words on the line, and ensuring that there are no empty fields.\n\nIf there are no fields left after removing all the punctuation, the current record is skipped. Otherwise, the program loops\nthrough each word, comparing it to the previous one:\n\n# dupword.awk --- find duplicate words in text\n{\n    $0 = tolower($0)\n    gsub(/[^[:alnum:][:blank:]]/, \" \");\n    $0 = $0         # re-split\n    if (NF == 0)\n        next\n    if ($1 == prev)\n        printf(\"%s:%d: duplicate %s\\n\",\n            FILENAME, FNR, $1)\n    for (i = 2; i <= NF; i++)\n        if ($i == $(i-1))\n            printf(\"%s:%d: duplicate %s\\n\",\n                FILENAME, FNR, $i)\n    prev = $NF\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: An Alarm Clock Program [Alarm-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "283f6095-94e3-40a4-bbf9-e2f5c472cae0", "embedding": null, "doc_hash": "a60934969a9460a0e55bcf90e0c661b0653de66f225ead8af266c430b9e7461a", "extra_info": null, "node_info": {"start": 0, "end": 2400, "_node_type": "1"}, "relationships": {"1": "608d9f0c-8330-4c34-bb2a-678cc9ef5491"}}, "__type__": "1"}, "cd299b46-2d37-4e6f-bf7f-55df66528c88": {"__data__": {"text": "Next: The Evolution of the awk Language [Language-History.html], Previous: Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html], Up: General Introduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17 WRITING EXTENSIONS FOR GAWK\n\nIt is possible to add new functions written in C or C++ to gawk using dynamically loaded libraries. This facility is available on\nsystems that support the C dlopen() and dlsym() functions. This chapter describes how to create extensions using code written in C\nor C++.\n\nIf you don\u2019t know anything about C programming, you can safely skip this chapter, although you may wish to review the\ndocumentation on the extensions that come with gawk (see The Sample Extensions in the gawk Distribution [Extension-Samples.html]),\nand the information on the gawkextlib project (see The gawkextlib Project [gawkextlib.html]). The sample extensions are\nautomatically built and installed when gawk is.\n\n> NOTE: When --sandbox is specified, extensions are disabled (see Command-Line Options [Options.html]).\n\n * Introduction [Extension-Intro.html]\n * Extension Licensing [Plugin-License.html]\n * How It Works at a High Level [Extension-Mechanism-Outline.html]\n * API Description [Extension-API-Description.html]\n * How gawk Finds Extensions [Finding-Extensions.html]\n * Example: Some File Functions [Extension-Example.html]\n * The Sample Extensions in the gawk Distribution [Extension-Samples.html]\n * The gawkextlib Project [gawkextlib.html]\n * Summary [Extension-summary.html]\n * Exercises [Extension-Exercises.html]", "doc_id": "cd299b46-2d37-4e6f-bf7f-55df66528c88", "embedding": null, "doc_hash": "cd1437a2b7c25d5a26553468dac950d8eab3315a9d4a2ab4e6b499a6d81048b5", "extra_info": null, "node_info": {"start": 0, "end": 1735, "_node_type": "1"}, "relationships": {"1": "d1f11c12-232d-4d11-92c5-ff3f8b69aecb"}}, "__type__": "1"}, "b47ca0ce-c409-4770-9a0e-74a458ab4b0e": {"__data__": {"text": "Previous: The return Statement [Return-Statement.html], Up: User-Defined Functions [User_002ddefined.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.5 FUNCTIONS AND THEIR EFFECTS ON VARIABLE TYPING\n\n> It\u2019s a desert topping!\n> It\u2019s a floor wax!\n\n\u2014 Saturday Night Live (back when it used to be funny)\n\nawk is a very fluid language. It is possible that awk can\u2019t tell if an identifier represents a scalar variable or an array until\nruntime. Here is an annotated sample program:\n\nfunction foo(a)\n{\n    a[1] = 1   # parameter is an array\n}\n\nBEGIN {\n    b = 1\n    foo(b)  # invalid: fatal type mismatch\n\n    foo(x)  # x uninitialized, becomes an array dynamically\n    x = 1   # now not allowed, runtime error\n}\n\n\nIn this example, the first call to foo() generates a fatal error, so awk will not report the second error. If you comment out that\ncall, though, then awk does report the second error.\n\nHere is a more extreme example:\n\nBEGIN {\n    funky(a)\n    if (A == 0)\n        print \"<\" a \">\"\n    else\n        print a[1]\n}\n\nfunction funky(arr)\n{\n    if (A == 0)\n        arr = 1\n    else\n        arr[1] = 1\n}\n\n\nHere, the function uses its parameter differently depending upon the value of the global variable A. If A is zero, the parameter\narr is treated as a scalar. Otherwise it\u2019s treated as an array.\n\nThere are two ways this program might behave. awk could notice that in the main program, a is subscripted, and so mark it as an\narray before the program even begins to run. BWK awk, mawk, and possibly others do this:\n\n$ nawk -v A=0 -f funky.awk\nerror\u2192 nawk: can't assign to a; it's an array name.\nerror\u2192  source line number 11\n$ nawk -v A=1 -f funky.awk\n-| 1\n\n\nOr awk could wait until runtime to set the type of a. In this case, since a was never assigned used before being passed to the\nfunction, how the function uses it forces the type to be resolved to either scalar or array. gawk and the MKS awk do this:\n\n$ gawk -v A=0 -f funky.awk\n-| <>\n$ gawk -v A=1 -f funky.awk \n-| 1\n\n\nPOSIX does not specify the correct behavior, so be aware that different implementations work differently.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: The return Statement [Return-Statement.html], Up: User-Defined Functions [User_002ddefined.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b47ca0ce-c409-4770-9a0e-74a458ab4b0e", "embedding": null, "doc_hash": "cdb6c4eca63a1945d3988bbdf666472553fe1bac540f9996b064c9d60c5eaccc", "extra_info": null, "node_info": {"start": 0, "end": 2535, "_node_type": "1"}, "relationships": {"1": "42998b3a-0e07-49b9-9c3b-7e92fd3737fc"}}, "__type__": "1"}, "d400acbb-951d-4669-93ea-6e1d9caf022b": {"__data__": {"text": "Next: Printing Out User Information [Id-Program.html], Previous: Cutting Out Fields and Columns [Cut-Program.html], Up:\nReinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.2 SEARCHING FOR REGULAR EXPRESSIONS IN FILES\n\nThe grep family of programs searches files for patterns. These programs have an unusual history. Initially there was grep (Global\nRegular Expression Print), which used what are now called Basic Regular Expressions (BREs). Later there was egrep (Extended grep)\nwhich used what are now called Extended Regular Expressions (EREs). (These are almost identical to those available in awk; see\nRegular Expressions [Regexp.html]). There was also fgrep (Fast grep), which searched for matches of one more fixed strings.\n\nPOSIX chose to combine these three programs into one, simply named grep. On a POSIX system, grep\u2019s default behavior is to search\nusing BREs. You use -E to specify the use of EREs, and -F to specify searching for fixed strings.\n\nIn practice, systems continue to come with separate egrep and fgrep utilities, for backwards compatibility. This section provides\nan awk implementation of egrep, which supports all of the POSIX-mandated options. You invoke it as follows:\n\negrep [options] 'pattern' files \u2026\n\n\nThe pattern is a regular expression. In typical usage, the regular expression is quoted to prevent the shell from expanding any of\nthe special characters as file name wildcards. Normally, egrep prints the lines that matched. If multiple file names are provided\non the command line, each output line is preceded by the name of the file and a colon.\n\nThe options to egrep are as follows:\n\n-c\n\nPrint a count of the lines that matched the pattern, instead of the lines themselves.\n\n-e pattern\n\nUse pattern as the regexp to match. The purpose of the -e option is to allow patterns that start with a \u2018-\u2019.\n\n-i\n\nIgnore case distinctions in both the pattern and the input data.\n\n-l\n\nOnly print (list) the names of the files that matched, not the lines that matched.\n\n-q\n\nBe quiet. No output is produced and the exit value indicates whether the pattern was matched.\n\n-s\n\nBe silent. Do not print error messages for files that could not be opened.\n\n-v\n\nInvert the sense of the test. egrep prints the lines that do not match the pattern and exits successfully if the pattern is not\nmatched.\n\n-x\n\nMatch the entire input line in order to consider the match as having succeeded.\n\nThis version uses the getopt() library function (see Processing Command-Line Options [Getopt-Function.html]) and gawk\u2019s BEGINFILE\nand ENDFILE special patterns (see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]).\n\nThe program begins with descriptive comments and then a BEGIN rule that processes the command-line arguments with getopt(). The -i\n(ignore case) option is particularly easy with gawk; we just use the IGNORECASE predefined variable (see Predefined Variables\n[Built_002din-Variables.html]):\n\n# egrep.awk --- simulate egrep in awk\n#\n# Options:\n#    -c    count of lines\n#    -e    argument is pattern\n#    -i    ignore case\n#    -l    print filenames only\n#    -n    add line number to output\n#    -q    quiet - use exit value\n#    -s    silent - don't print errors\n#    -v    invert test, success if no match\n#    -x    the entire line must match\n#\n# Requires getopt library function\n# Uses IGNORECASE, BEGINFILE and ENDFILE\n# Invoke using gawk -f egrep.awk -- options ...\n\nBEGIN {\n    while", "doc_id": "d400acbb-951d-4669-93ea-6e1d9caf022b", "embedding": null, "doc_hash": "efec56a6d3cf866e1e0fed790621d5819fb9aa72b2d863ae2f69d47e0a88cfd7", "extra_info": null, "node_info": {"start": 0, "end": 3622, "_node_type": "1"}, "relationships": {"1": "f42db065-56ff-4ed5-9bc6-afafc1b95217", "3": "63cc5008-689a-4cf3-8022-34c9144c2f7d"}}, "__type__": "1"}, "63cc5008-689a-4cf3-8022-34c9144c2f7d": {"__data__": {"text": "-f egrep.awk -- options ...\n\nBEGIN {\n    while ((c = getopt(ARGC, ARGV, \"ce:ilnqsvx\")) != -1) {\n        if (c == \"c\")\n            count_only++\n        else if (c == \"e\")\n            pattern = Optarg\n        else if (c == \"i\")\n            IGNORECASE = 1\n        else if (c == \"l\")\n            filenames_only++\n        else if (c == \"n\")\n            line_numbers++\n        else if (c == \"q\")\n            no_print++\n        else if (c == \"s\")\n            no_errors++\n        else if (c == \"v\")\n            invert++\n        else if (c == \"x\")\n            full_line++\n        else\n            usage()\n    }\n\n\nNote the comment about invocation: Because several of the options overlap with gawk\u2019s, a -- is needed to tell gawk to stop looking\nfor options.\n\nNext comes the code that handles the egrep-specific behavior. egrep uses the first nonoption on the command line if no pattern is\nsupplied with -e. If the pattern is empty, that means no pattern was supplied, so it\u2019s necessary to print an error message and\nexit. The awk command-line arguments up to ARGV[Optind] are cleared, so that awk won\u2019t try to process them as files. If no files\nare specified, the standard input is used, and if multiple files are specified, we make sure to note this so that the file names\ncan precede the matched lines in the output:\n\n    if (pattern == \"\")\n        pattern = ARGV[Optind++]\n\n    if (pattern == \"\")\n      usage()\n\n    for (i = 1; i < Optind; i++)\n        ARGV[i] = \"\"\n\n    if (Optind >= ARGC) {\n        ARGV[1] = \"-\"\n        ARGC = 2\n    } else if (ARGC - Optind > 1)\n        do_filenames++\n}\n\n\nThe BEGINFILE rule executes when each new file is processed. In this case, it is fairly simple; it initializes a variable fcount\nto zero. fcount tracks how many lines in the current file matched the pattern.\n\nHere also is where we implement the -s option. We check if ERRNO has been set, and if -s was supplied. In that case, it\u2019s\nnecessary to move on to the next file. Otherwise gawk would exit with an error:\n\nBEGINFILE {\n    fcount = 0\n    if (ERRNO && no_errors)\n        nextfile\n}\n\n\nThe ENDFILE rule executes after each file has been processed. It affects the output only when the user wants a count of the number\nof lines that matched. no_print is true only if the exit status is desired. count_only is true if line counts are desired. egrep\ntherefore only prints line counts if printing and counting are enabled. The output format must be adjusted depending upon the\nnumber of files to process. Finally, fcount is added to total, so that we know the total number of lines that matched the pattern:\n\nENDFILE {\n    if (! no_print && count_only) {\n        if (do_filenames)\n          ", "doc_id": "63cc5008-689a-4cf3-8022-34c9144c2f7d", "embedding": null, "doc_hash": "fbce068658aafe9ee8d6be0cc49b27fd5efe2bc0ccab62616851c4d7e0bf77d2", "extra_info": null, "node_info": {"start": 3586, "end": 6260, "_node_type": "1"}, "relationships": {"1": "f42db065-56ff-4ed5-9bc6-afafc1b95217", "2": "d400acbb-951d-4669-93ea-6e1d9caf022b", "3": "bdd4a900-2c00-4174-840c-0352831d5f9f"}}, "__type__": "1"}, "bdd4a900-2c00-4174-840c-0352831d5f9f": {"__data__": {"text": " if (do_filenames)\n            print file \":\" fcount\n        else\n            print fcount\n    }\n\n\n\n    total += fcount\n}\n\n\nThe following rule does most of the work of matching lines. The variable matches is true (non-zero) if the line matched the\npattern. If the user specified that the entire line must match (with -x), the code checks this condition by looking at the values\nof RSTART and RLENGTH. If those indicate that the match is not over the full line, matches is set to zero (false).\n\nIf the user wants lines that did not match, we invert the sense of matches using the \u2018!\u2019 operator. We then increment fcount with\nthe value of matches, which is either one or zero, depending upon a successful or unsuccessful match. If the line does not match,\nthe next statement just moves on to the next input line.\n\nWe make a number of additional tests, but only if we are not counting lines. First, if the user only wants the exit status\n(no_print is true), then it is enough to know that one line in this file matched, and we can skip on to the next file with\nnextfile. Similarly, if we are only printing file names, we can print the file name, and then skip to the next file with nextfile.\nFinally, each line is printed, with a leading file name, optional colon and line number, and the final colon if necessary:\n\n{\n    matches = match($0, pattern)\n    if (matches && full_line && (RSTART != 1 || RLENGTH != length()))\n         matches = 0\n\n    if (invert)\n        matches = ! matches\n\n    fcount += matches    # 1 or 0\n\n    if (! matches)\n        next\n\n    if (! count_only) {\n        if (no_print)\n            nextfile\n\n        if (filenames_only) {\n            print FILENAME\n            nextfile\n        }\n\n        if (do_filenames)\n            if (line_numbers)\n               print FILENAME \":\" FNR \":\" $0\n            else\n               print FILENAME \":\" $0\n        else\n            print\n    }\n}\n\n\nThe END rule takes care of producing the correct exit status. If there are no matches, the exit status is one; otherwise, it is\nzero:\n\nEND {\n    exit (total == 0)\n}\n\n\nThe usage() function prints a usage message in case of invalid options, and then exits:\n\nfunction usage()\n{\n    print(\"Usage:\\tegrep [-cilnqsvx] [-e pat] [files ...]\") > \"/dev/stderr\"\n    print(\"\\tegrep [-cilnqsvx] pat [files ...]\") > \"/dev/stderr\"\n    exit 1\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Printing Out User Information [Id-Program.html], Previous: Cutting Out Fields and Columns [Cut-Program.html], Up:\nReinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "bdd4a900-2c00-4174-840c-0352831d5f9f", "embedding": null, "doc_hash": "6ba946f8e4e54824e525d3361dc0aab42894c0d0342614b6e623ada42009c107", "extra_info": null, "node_info": {"start": 6268, "end": 8966, "_node_type": "1"}, "relationships": {"1": "f42db065-56ff-4ed5-9bc6-afafc1b95217", "2": "63cc5008-689a-4cf3-8022-34c9144c2f7d"}}, "__type__": "1"}, "ef3ad34a-889c-49c8-9f56-ea02ff411fd6": {"__data__": {"text": "Next: Treating Assignments as File names [Ignoring-Assigns.html], Previous: Checking for Readable Data files [File-Checking.html],\nUp: Data file Management [Data-File-Management.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.3.4 CHECKING FOR ZERO-LENGTH FILES\n\nAll known awk implementations silently skip over zero-length files. This is a by-product of awk\u2019s implicit\nread-a-record-and-match-against-the-rules loop: when awk tries to read a record from an empty file, it immediately receives an\nend-of-file indication, closes the file, and proceeds on to the next command-line data file, without executing any user-level awk\nprogram code.\n\nUsing gawk\u2019s ARGIND variable (see Predefined Variables [Built_002din-Variables.html]), it is possible to detect when an empty data\nfile has been skipped. Similar to the library file presented in Noting Data file Boundaries [Filetrans-Function.html], the\nfollowing library file calls a function named zerofile() that the user must provide. The arguments passed are the file name and\nthe position in ARGV where it was found:\n\n# zerofile.awk --- library file to process empty input files\n\nBEGIN { Argind = 0 }\n\nARGIND > Argind + 1 {\n    for (Argind++; Argind < ARGIND; Argind++)\n        zerofile(ARGV[Argind], Argind)\n}\n\nARGIND != Argind { Argind = ARGIND }\n\nEND {\n    if (ARGIND > Argind)\n        for (Argind++; Argind <= ARGIND; Argind++)\n            zerofile(ARGV[Argind], Argind)\n}\n\n\nThe user-level variable Argind allows the awk program to track its progress through ARGV. Whenever the program detects that ARGIND\nis greater than \u2018Argind + 1\u2019, it means that one or more empty files were skipped. The action then calls zerofile() for each such\nfile, incrementing Argind along the way.\n\nThe \u2018Argind != ARGIND\u2019 rule simply keeps Argind up to date in the normal case.\n\nFinally, the END rule catches the case of any empty files at the end of the command-line arguments. Note that the test in the\ncondition of the for loop uses the \u2018<=\u2019 operator, not \u2018<\u2019.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Treating Assignments as File names [Ignoring-Assigns.html], Previous: Checking for Readable Data files [File-Checking.html],\nUp: Data file Management [Data-File-Management.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ef3ad34a-889c-49c8-9f56-ea02ff411fd6", "embedding": null, "doc_hash": "66fa0f31b3959eddf0c5fa05a8d8bc788ac0a8241c47e3340694934994f94c7c", "extra_info": null, "node_info": {"start": 0, "end": 2521, "_node_type": "1"}, "relationships": {"1": "7b23acd7-e33a-4c5e-8dbf-504c94849de8"}}, "__type__": "1"}, "44686243-92a9-481f-833d-521bd78d6322": {"__data__": {"text": "Previous: The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html], Up: Pattern Elements [Pattern-Overview.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.6 THE EMPTY PATTERN\n\nAn empty (i.e., nonexistent) pattern is considered to match every input record. For example, the program:\n\nawk '{ print $1 }' mail-list\n\n\nprints the first field of every record.", "doc_id": "44686243-92a9-481f-833d-521bd78d6322", "embedding": null, "doc_hash": "2c9db9e970afa3f14bd4d57f79fa317d290714902da650fd6651a5244dee32ac", "extra_info": null, "node_info": {"start": 0, "end": 522, "_node_type": "1"}, "relationships": {"1": "35180dc8-95e1-44f3-8043-e97f652eed45"}}, "__type__": "1"}, "e4f4dd0d-24a7-4a48-831d-6e761584e57b": {"__data__": {"text": "Next: gawk\u2019s Exit Status [Exit-Status.html], Previous: Naming Standard Input [Naming-Standard-Input.html], Up: Running awk and\ngawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.5 THE ENVIRONMENT VARIABLES GAWK USES\n\nA number of environment variables influence how gawk behaves.\n\n * The AWKPATH Environment Variable [AWKPATH-Variable.html]\n * The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html]\n * Other Environment Variables [Other-Environment-Variables.html]", "doc_id": "e4f4dd0d-24a7-4a48-831d-6e761584e57b", "embedding": null, "doc_hash": "ba486aab96c6ae609b06fea8bc1a1db344d85bb9315a42907db8aa0219de49c9", "extra_info": null, "node_info": {"start": 0, "end": 641, "_node_type": "1"}, "relationships": {"1": "b8eed6e0-8a2f-4afc-8671-7b81b4bad4bf"}}, "__type__": "1"}, "cee3c258-874c-4b17-9a1c-781361f024c0": {"__data__": {"text": "Next: Floating Point Values They Didn\u2019t Talk About In School [Strange-values.html], Previous: Be Careful Comparing Values\n[Comparing-FP-Values.html], Up: Floating-Point Arithmetic Is Not Exact [Inexactness-of-computations.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.1.3 ERRORS ACCUMULATE\n\nThe loss of accuracy during a single computation with floating-point numbers usually isn\u2019t enough to worry about. However, if you\ncompute a value that is the result of a sequence of floating-point operations, the error can accumulate and greatly affect the\ncomputation itself. Here is an attempt to compute the value of pi using one of its many series representations:\n\nBEGIN {\n    x = 1.0 / sqrt(3.0)\n    n = 6\n    for (i = 1; i < 30; i++) {\n        n = n * 2.0\n        x = (sqrt(x * x + 1) - 1) / x\n        printf(\"%.15f\\n\", n * x)\n    }\n}\n\n\nWhen run, the early errors propagate through later computations, causing the loop to terminate prematurely after attempting to\ndivide by zero:\n\n$ gawk -f pi.awk\n-| 3.215390309173475\n-| 3.159659942097510\n-| 3.146086215131467\n-| 3.142714599645573\n\u2026\n-| 3.224515243534819\n-| 2.791117213058638\n-| 0.000000000000000\nerror\u2192 gawk: pi.awk:6: fatal: division by zero attempted\n\n\nHere is an additional example where the inaccuracies in internal representations yield an unexpected result:\n\n$ gawk 'BEGIN {\n>   for (d = 1.1; d <= 1.5; d += 0.1)    # loop five times (?)\n>       i++\n>   print i\n> }'\n-| 4\n", "doc_id": "cee3c258-874c-4b17-9a1c-781361f024c0", "embedding": null, "doc_hash": "6902359dc97c6ad1cb2e50fcfbf81c37db53cfe496e155c225d84e1c9ebbad5a", "extra_info": null, "node_info": {"start": 0, "end": 1584, "_node_type": "1"}, "relationships": {"1": "0d2564e3-5ac2-4d48-9c50-858540423f89"}}, "__type__": "1"}, "f20cd66b-9f52-487e-8b46-6d330004b8d9": {"__data__": {"text": "Next: Regular Expression Operators [Regexp-Operators.html], Previous: How to Use Regular Expressions [Regexp-Usage.html], Up:\nRegular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.2 ESCAPE SEQUENCES\n\nSome characters cannot be included literally in string constants (\"foo\") or regexp constants (/foo/). Instead, they should be\nrepresented with escape sequences, which are character sequences beginning with a backslash (\u2018\\\u2019). One use of an escape sequence\nis to include a double-quote character in a string constant. Because a plain double quote ends the string, you must use \u2018\\\"\u2019 to\nrepresent an actual double-quote character as a part of the string. For example:\n\n$ awk 'BEGIN { print \"He said \\\"hi!\\\" to her.\" }'\n-| He said \"hi!\" to her.\n\n\nThe backslash character itself is another character that cannot be included normally; you must write \u2018\\\\\u2019 to put one backslash in\nthe string or regexp. Thus, the string whose contents are the two characters \u2018\"\u2019 and \u2018\\\u2019 must be written \"\\\"\\\\\".\n\nOther escape sequences represent unprintable characters such as TAB or newline. There is nothing to stop you from entering most\nunprintable characters directly in a string constant or regexp constant, but they may look ugly.\n\nThe following list presents all the escape sequences used in awk and what they represent. Unless noted otherwise, all these escape\nsequences apply to both string constants and regexp constants:\n\n\\\\\n\nA literal backslash, \u2018\\\u2019.\n\n\\a\n\nThe \u201calert\u201d character, Ctrl-g, ASCII code 7 (BEL). (This often makes some sort of audible noise.)\n\n\\b\n\nBackspace, Ctrl-h, ASCII code 8 (BS).\n\n\\f\n\nFormfeed, Ctrl-l, ASCII code 12 (FF).\n\n\\n\n\nNewline, Ctrl-j, ASCII code 10 (LF).\n\n\\r\n\nCarriage return, Ctrl-m, ASCII code 13 (CR).\n\n\\t\n\nHorizontal TAB, Ctrl-i, ASCII code 9 (HT).\n\n\\v\n\nVertical TAB, Ctrl-k, ASCII code 11 (VT).\n\n\\nnn\n\nThe octal value nnn, where nnn stands for 1 to 3 digits between \u20180\u2019 and \u20187\u2019. For example, the code for the ASCII ESC (escape)\ncharacter is \u2018\\033\u2019.\n\n\\xhh\u2026\n\nThe hexadecimal value hh, where hh stands for a sequence of hexadecimal digits (\u20180\u2019\u2013\u20189\u2019, and either \u2018A\u2019\u2013\u2018F\u2019 or \u2018a\u2019\u2013\u2018f\u2019). A maximum\nof two digits are allowed after the \u2018\\x\u2019. Any further hexadecimal digits are treated as simple letters or numbers. (c.e.) (The\n\u2018\\x\u2019 escape sequence is not allowed in POSIX awk.)\n\n> CAUTION: In ISO C, the escape sequence continues until the first nonhexadecimal digit is seen. For many years, gawk would\n> continue incorporating hexadecimal digits into the value until a non-hexadecimal digit or the end of the string was encountered.\n> However, using more than two hexadecimal digits produced undefined results. As of version 4.2, only two digits are processed.\n\n\\/\n\nA literal slash (should be used for regexp constants only). This sequence is used when you want to write a regexp constant that\ncontains a slash (such as /.*:\\/home\\/[[:alnum:]]+:.*/; the \u2018[[:alnum:]]\u2019 notation is discussed in Using Bracket Expressions\n[Bracket-Expressions.html]). Because the regexp is delimited by slashes, you need to escape any slash that is part of the pattern,\nin order to tell awk to keep processing the rest of the", "doc_id": "f20cd66b-9f52-487e-8b46-6d330004b8d9", "embedding": null, "doc_hash": "cb9a944d4ce40825ddc77f4cd795944d14aa0221a42486ebde1b22e7fcf96e84", "extra_info": null, "node_info": {"start": 0, "end": 3287, "_node_type": "1"}, "relationships": {"1": "56adac30-e1fb-4005-aca4-db130f88615b", "3": "9f01a8d5-aaee-4b6d-8186-168c9bdc7047"}}, "__type__": "1"}, "9f01a8d5-aaee-4b6d-8186-168c9bdc7047": {"__data__": {"text": "that is part of the pattern,\nin order to tell awk to keep processing the rest of the regexp.\n\n\\\"\n\nA literal double quote (should be used for string constants only). This sequence is used when you want to write a string constant\nthat contains a double quote (such as \"He said \\\"hi!\\\" to her.\"). Because the string is delimited by double quotes, you need to\nescape any quote that is part of the string, in order to tell awk to keep processing the rest of the string.\n\nIn gawk, a number of additional two-character sequences that begin with a backslash have special meaning in regexps. See\ngawk-Specific Regexp Operators [GNU-Regexp-Operators.html].\n\nIn a regexp, a backslash before any character that is not in the previous list and not listed in gawk-Specific Regexp Operators\n[GNU-Regexp-Operators.html] means that the next character should be taken literally, even if it would normally be a regexp\noperator. For example, /a\\+b/ matches the three characters \u2018a+b\u2019.\n\nFor complete portability, do not use a backslash before any character not shown in the previous list or that is not an operator.\n\nBackslash Before Regular Characters\n\nIf you place a backslash in a string constant before something that is not one of the characters previously listed, POSIX awk\npurposely leaves what happens as undefined. There are two choices:\n\nStrip the backslash out\n\nThis is what BWK awk and gawk both do. For example, \"a\\qc\" is the same as \"aqc\". (Because this is such an easy bug both to\nintroduce and to miss, gawk warns you about it.) Consider \u2018FS = \"[\u00a0\\t]+\\|[\u00a0\\t]+\"\u2019 to use vertical bars surrounded by whitespace as\nthe field separator. There should be two backslashes in the string: \u2018FS = \"[\u00a0\\t]+\\\\|[\u00a0\\t]+\"\u2019.)\n\nLeave the backslash alone\n\nSome other awk implementations do this. In such implementations, typing \"a\\qc\" is the same as typing \"a\\\\qc\".\n\nTo summarize:\n\n * The escape sequences in the preceding list are always processed first, for both string constants and regexp constants. This\n   happens very early, as soon as awk reads your program.\n * gawk processes both regexp constants and dynamic regexps (see Using Dynamic Regexps [Computed-Regexps.html]), for the special\n   operators listed in gawk-Specific Regexp Operators [GNU-Regexp-Operators.html].\n * A backslash before any other character means to treat that character literally.\n\nEscape Sequences for Metacharacters\n\nSuppose you use an octal or hexadecimal escape to represent a regexp metacharacter. (See Regular Expression Operators\n[Regexp-Operators.html].) Does awk treat the character as a literal character or as a regexp operator?\n\nHistorically, such characters were taken literally. (d.c.) However, the POSIX standard indicates that they should be treated as\nreal metacharacters, which is what gawk does. In compatibility mode (see Command-Line Options [Options.html]), gawk treats the\ncharacters represented by octal and hexadecimal escape sequences literally when used in regexp constants. Thus, /a\\52b/ is\nequivalent to /a\\*b/.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Regular Expression Operators [Regexp-Operators.html], Previous: How to Use Regular Expressions [Regexp-Usage.html], Up:\nRegular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9f01a8d5-aaee-4b6d-8186-168c9bdc7047", "embedding": null, "doc_hash": "b731a93cd854d7f614644cbcee2d5a182288392d776b5e06a3f44c68833be750", "extra_info": null, "node_info": {"start": 3203, "end": 6549, "_node_type": "1"}, "relationships": {"1": "56adac30-e1fb-4005-aca4-db130f88615b", "2": "f20cd66b-9f52-487e-8b46-6d330004b8d9"}}, "__type__": "1"}, "7e1e0ead-92b2-4bf8-a196-24c16c673c82": {"__data__": {"text": "Next: Comments in awk Programs [Comments.html], Previous: Running Long Programs [Long.html], Up: How to Run awk Programs\n[Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.4 EXECUTABLE AWK PROGRAMS\n\nOnce you have learned awk, you may want to write self-contained awk scripts, using the \u2018#!\u2019 script mechanism. You can do this on\nmany systems.8 For example, you could update the file advice to look like this:\n\n#! /bin/awk -f\n\nBEGIN { print \"Don't Panic!\" }\n\n\nAfter making this file executable (with the chmod utility), simply type \u2018advice\u2019 at the shell and the system arranges to run awk\nas if you had typed \u2018awk -f advice\u2019:\n\n$ chmod +x advice\n$ ./advice\n-| Don't Panic!\n\n\nSelf-contained awk scripts are useful when you want to write a program that users can invoke without their having to know that the\nprogram is written in awk.\n\nUnderstanding \u2018#!\u2019\n\nawk is an interpreted language. This means that the awk utility reads your program and then processes your data according to the\ninstructions in your program. (This is different from a compiled language such as C, where your program is first compiled into\nmachine code that is executed directly by your system\u2019s processor.) The awk utility is thus termed an interpreter. Many modern\nlanguages are interpreted.\n\nThe line beginning with \u2018#!\u2019 lists the full file name of an interpreter to run and a single optional initial command-line argument\nto pass to that interpreter. The operating system then runs the interpreter with the given argument and the full argument list of\nthe executed program. The first argument in the list is the full file name of the awk program. The rest of the argument list\ncontains either options to awk, or data files, or both. (Note that on many systems awk is found in /usr/bin instead of in /bin.)\n\nSome systems limit the length of the interpreter name to 32 characters. Often, this can be dealt with by using a symbolic link.\n\nYou should not put more than one argument on the \u2018#!\u2019 line after the path to awk. It does not work. The operating system treats\nthe rest of the line as a single argument and passes it to awk. Doing this leads to confusing behavior\u2014most likely a usage\ndiagnostic of some sort from awk.\n\nFinally, the value of ARGV[0] (see Predefined Variables [Built_002din-Variables.html]) varies depending upon your operating\nsystem. Some systems put \u2018awk\u2019 there, some put the full pathname of awk (such as /bin/awk), and some put the name of your script\n(\u2018advice\u2019). (d.c.) Don\u2019t rely on the value of ARGV[0] to provide your script name.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(8)\n\nThe \u2018#!\u2019 mechanism works on GNU/Linux systems, BSD-based systems, and commercial Unix systems.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Comments in awk Programs [Comments.html], Previous: Running Long Programs [Long.html], Up: How to Run awk Programs\n[Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7e1e0ead-92b2-4bf8-a196-24c16c673c82", "embedding": null, "doc_hash": "c4469c4c65d5bb63526ad650559f01313127b9e5f3cb56f374757e0cf7332d23", "extra_info": null, "node_info": {"start": 0, "end": 3270, "_node_type": "1"}, "relationships": {"1": "50e5c828-fee8-4c12-a4d2-f09b297889a1"}}, "__type__": "1"}, "007c8ee9-b90c-42e1-9fc6-3808d6c9b41f": {"__data__": {"text": "Next: Obtaining Information About the Program and the Debugger State [Debugger-Info.html], Previous: Viewing and Changing Data\n[Viewing-And-Changing-Data.html], Up: Main Debugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.3.4 WORKING WITH THE STACK\n\nWhenever you run a program that contains any function calls, gawk maintains a stack of all of the function calls leading up to\nwhere the program is right now. You can see how you got to where you are, and also move around in the stack to see what the state\nof things was in the functions that called the one you are in. The commands for doing this are:\n\nbacktrace [count] bt [count] where [count]\n\nPrint a backtrace of all function calls (stack frames), or innermost count frames if count > 0. Print the outermost count frames\nif count < 0. The backtrace displays the name and arguments to each function, the source file name, and the line number. The alias\nwhere for backtrace is provided for longtime GDB users who may be used to that command.\n\ndown [count]\n\nMove count (default 1) frames down the stack toward the innermost frame. Then select and print the frame.\n\nframe [n] f [n]\n\nSelect and print stack frame n. Frame 0 is the currently executing, or innermost, frame (function call); frame 1 is the frame that\ncalled the innermost one. The highest-numbered frame is the one for the main program. The printed information consists of the\nframe number, function and argument names, source file, and the source line.\n\nup [count]\n\nMove count (default 1) frames up the stack toward the outermost frame. Then select and print the frame.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Obtaining Information About the Program and the Debugger State [Debugger-Info.html], Previous: Viewing and Changing Data\n[Viewing-And-Changing-Data.html], Up: Main Debugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "007c8ee9-b90c-42e1-9fc6-3808d6c9b41f", "embedding": null, "doc_hash": "9049ffba680d30ef9211cc2f6ae7ecaf5106e4bd449ff3b07e2a9b17206978b9", "extra_info": null, "node_info": {"start": 0, "end": 2192, "_node_type": "1"}, "relationships": {"1": "e54c1fbf-6589-4b29-9e6a-1e0512be5890"}}, "__type__": "1"}, "36308075-d9b7-4383-bec9-abbf2960df42": {"__data__": {"text": "Next: Registering An Extension Version String [Extension-Version-String.html], Previous: Registering An Extension Function\n[Extension-Functions.html], Up: Registration Functions [Registration-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6.2 REGISTERING AN EXIT CALLBACK FUNCTION\n\nAn exit callback function is a function that gawk calls before it exits. Such functions are useful if you have general \u201ccleanup\u201d\ntasks that should be performed in your extension (such as closing database connections or other resource deallocations). You can\nregister such a function with gawk using the following function:\n\nvoid awk_atexit(void (*funcp)(void *data, int exit_status), \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0void *arg0);\n\nThe parameters are:\n\nfuncp\n\nA pointer to the function to be called before gawk exits. The data parameter will be the original value of arg0. The exit_status\nparameter is the exit status value that gawk intends to pass to the exit() system call.\n\narg0\n\nA pointer to private data that gawk saves in order to pass to the function pointed to by funcp.\n\nExit callback functions are called in last-in, first-out (LIFO) order\u2014that is, in the reverse order in which they are registered\nwith gawk.", "doc_id": "36308075-d9b7-4383-bec9-abbf2960df42", "embedding": null, "doc_hash": "3f14c6f2f1bc506f3822f973d2e3baba0af6ef9aa32876bc76e8ec5a8b266d6c", "extra_info": null, "node_info": {"start": 0, "end": 1350, "_node_type": "1"}, "relationships": {"1": "0881c52d-ac30-486d-b81b-ccc63a26eadd"}}, "__type__": "1"}, "97f86b0c-2a26-4f14-8bec-72970b3d470d": {"__data__": {"text": "Previous: The nextfile Statement [Nextfile-Statement.html], Up: Control Statements in Actions [Statements.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.10 THE EXIT STATEMENT\n\nThe exit statement causes awk to immediately stop executing the current rule and to stop processing input; any remaining input is\nignored. The exit statement is written as follows:\n\nexit [return code]\n\n\nWhen an exit statement is executed from a BEGIN rule, the program stops processing everything immediately. No input records are\nread. However, if an END rule is present, as part of executing the exit statement, the END rule is executed (see The BEGIN and END\nSpecial Patterns [BEGIN_002fEND.html]). If exit is used in the body of an END rule, it causes the program to stop immediately.\n\nAn exit statement that is not part of a BEGIN or END rule stops the execution of any further automatic rules for the current\nrecord, skips reading any remaining input records, and executes the END rule if there is one. gawk also skips any ENDFILE rules;\nthey do not execute.\n\nIn such a case, if you don\u2019t want the END rule to do its job, set a variable to a nonzero value before the exit statement and\ncheck that variable in the END rule. See Assertions [Assert-Function.html] for an example that does this.\n\nIf an argument is supplied to exit, its value is used as the exit status code for the awk process. If no argument is supplied,\nexit causes awk to return a \u201csuccess\u201d status. In the case where an argument is supplied to a first exit statement, and then exit\nis called a second time from an END rule with no argument, awk uses the previously supplied exit value. (d.c.) See gawk\u2019s Exit\nStatus [Exit-Status.html] for more information.\n\nFor example, suppose an error condition occurs that is difficult or impossible to handle. Conventionally, programs report this by\nexiting with a nonzero status. An awk program can do this using an exit statement with a nonzero argument, as shown in the\nfollowing example:\n\nBEGIN {\n    if ((\"date\" | getline date_now) <= 0) {\n        print \"Can't get system date\" > \"/dev/stderr\"\n        exit 1\n    }\n\n\n    print \"current date is\", date_now\n    close(\"date\")\n}\n\n\n> NOTE: For full portability, exit values should be between zero and 126, inclusive. Negative values, and values of 127 or\n> greater, may not produce consistent results across different operating systems.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: The nextfile Statement [Nextfile-Statement.html], Up: Control Statements in Actions [Statements.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "97f86b0c-2a26-4f14-8bec-72970b3d470d", "embedding": null, "doc_hash": "017d29ee02d2eeeffdae1d2b2921a3b59e45ae744e1235370f9f20079b8ba109", "extra_info": null, "node_info": {"start": 0, "end": 2832, "_node_type": "1"}, "relationships": {"1": "328dde78-be5a-422c-8700-31a230c24203"}}, "__type__": "1"}, "9f4627e2-fa2f-4e1b-b0cf-dc5db7f3297d": {"__data__": {"text": "Next: Including Other Files into Your Program [Include-Files.html], Previous: The Environment Variables gawk Uses\n[Environment-Variables.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.6 GAWK\u2019S EXIT STATUS\n\nIf the exit statement is used with a value (see The exit Statement [Exit-Statement.html]), then gawk exits with the numeric value\ngiven to it.\n\nOtherwise, if there were no problems during execution, gawk exits with the value of the C constant EXIT_SUCCESS. This is usually\nzero.\n\nIf an error occurs, gawk exits with the value of the C constant EXIT_FAILURE. This is usually one.\n\nIf gawk exits because of a fatal error, the exit status is two. On non-POSIX systems, this value may be mapped to EXIT_FAILURE.", "doc_id": "9f4627e2-fa2f-4e1b-b0cf-dc5db7f3297d", "embedding": null, "doc_hash": "c2374a7e5de16654b3364215fcd550d1d4c9aae90c2f16cb86efe6422cd63dba", "extra_info": null, "node_info": {"start": 0, "end": 914, "_node_type": "1"}, "relationships": {"1": "6af5b53a-d0e6-4e2d-9270-944522990bfc"}}, "__type__": "1"}, "8f16a91d-0a2a-4741-9682-a0531dfa9d38": {"__data__": {"text": "Next: Internationalizing awk Programs [Programmer-i18n.html], Previous: Internationalization and Localization\n[I18N-and-L10N.html], Up: Internationalization with gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.2 GNU GETTEXT\n\ngawk uses GNU gettext to provide its internationalization features. The facilities in GNU gettext focus on messages: strings\nprinted by a program, either directly or via formatting with printf or sprintf().87\n\nWhen using GNU gettext, each application has its own text domain. This is a unique name, such as \u2018kpilot\u2019 or \u2018gawk\u2019, that\nidentifies the application. A complete application may have multiple components\u2014programs written in C or C++, as well as scripts\nwritten in sh or awk. All of the components use the same text domain.\n\nTo make the discussion concrete, assume we\u2019re writing an application named guide. Internationalization consists of the following\nsteps, in this order:\n\n 1. The programmer reviews the source for all of guide\u2019s components and marks each string that is a candidate for translation. For\n    example, \"`-F': option required\" is a good candidate for translation. A table with strings of option names is not (e.g.,\n    gawk\u2019s --profile option should remain the same, no matter what the local language).\n 2. The programmer indicates the application\u2019s text domain (\"guide\") to the gettext library, by calling the textdomain() function.\n 3. Messages from the application are extracted from the source code and collected into a portable object template file\n    (guide.pot), which lists the strings and their translations. The translations are initially empty. The original (usually\n    English) messages serve as the key for lookup of the translations.\n 4. For each language with a translator, guide.pot is copied to a portable object file (.po) and translations are created and\n    shipped with the application. For example, there might be a fr.po for a French translation.\n 5. Each language\u2019s .po file is converted into a binary message object (.gmo) file. A message object file contains the original\n    messages and their translations in a binary format that allows fast lookup of translations at runtime.\n 6. When guide is built and installed, the binary translation files are installed in a standard place.\n 7. For testing and development, it is possible to tell gettext to use .gmo files in a different directory than the standard one\n    by using the bindtextdomain() function.\n 8. At runtime, guide looks up each string via a call to gettext(). The returned string is the translated string if available, or\n    the original string if not.\n 9. If necessary, it is possible to access messages from a different text domain than the one belonging to the application,\n    without having to switch the application\u2019s default text domain back and forth.\n\nIn C (or C++), the string marking and dynamic translation lookup are accomplished by wrapping each string in a call to gettext():\n\nprintf(\"%s\", gettext(\"Don't Panic!\\n\"));\n\n\nThe tools that extract messages from source code pull out all strings enclosed in calls to gettext().\n\nThe GNU gettext developers, recognizing that typing \u2018gettext(\u2026)\u2019 over and over again is both painful and ugly to look at, use the\nmacro \u2018_\u2019 (an underscore) to make things easier:\n\n/* In the standard header file: */\n#define _(str) gettext(str)\n\n/* In the program text: */\nprintf(\"%s\", _(\"Don't Panic!\\n\"));\n\n\nThis reduces the typing overhead to just three extra characters per string and is considerably easier to read as well.\n\nThere are locale categories for different types of locale-related information. The defined locale categories that gettext knows\nabout are:\n\nLC_MESSAGES\n\nText messages. This is the default category for gettext operations, but it is possible to supply a different one explicitly, if\nnecessary.", "doc_id": "8f16a91d-0a2a-4741-9682-a0531dfa9d38", "embedding": null, "doc_hash": "8eaf568d2ac8ccf31c5146cb9cc33980b838281cc8d1d408f3ba54c9d34290cf", "extra_info": null, "node_info": {"start": 0, "end": 3980, "_node_type": "1"}, "relationships": {"1": "51d8b98f-e792-482a-86ba-03c99a2fcd8c", "3": "ad9ae60c-fcf4-4fd2-b02f-a49f0d65ef8e"}}, "__type__": "1"}, "ad9ae60c-fcf4-4fd2-b02f-a49f0d65ef8e": {"__data__": {"text": "but it is possible to supply a different one explicitly, if\nnecessary. (It is almost never necessary to supply a different category.)\n\nLC_COLLATE\n\nText-collation information (i.e., how different characters and/or groups of characters sort in a given language).\n\nLC_CTYPE\n\nCharacter-type information (alphabetic, digit, upper- or lowercase, and so on) as well as character encoding. This information is\naccessed via the POSIX character classes in regular expressions, such as /[[:alnum:]]/ (see Using Bracket Expressions\n[Bracket-Expressions.html]).\n\nLC_MONETARY\n\nMonetary information, such as the currency symbol, and whether the symbol goes before or after a number.\n\nLC_NUMERIC\n\nNumeric information, such as which characters to use for the decimal point and the thousands separator.88\n\nLC_TIME\n\nTime- and date-related information, such as 12- or 24-hour clock, month printed before or after the day in a date, local month\nabbreviations, and so on.\n\nLC_ALL\n\nAll of the above. (Not too useful in the context of gettext.)\n\n> NOTE: As described in Where You Are Makes a Difference [Locales.html], environment variables with the same name as the locale\n> categories (LC_CTYPE, LC_ALL, etc.) influence gawk\u2019s behavior (and that of other utilities).\n> \n> Normally, these variables also affect how the gettext library finds translations. However, the LANGUAGE environment variable\n> overrides the LC_xxx variables. Many GNU/Linux systems may define this variable without your knowledge, causing gawk to not find\n> the correct translations. If this happens to you, look to see if LANGUAGE is defined, and if so, use the shell\u2019s unset command\n> to remove it.\n\nFor testing translations of gawk itself, you can set the GAWK_LOCALE_DIR environment variable. See the documentation for the C\nbindtextdomain() function and also see Other Environment Variables [Other-Environment-Variables.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(87)\n\nFor some operating systems, the gawk port doesn\u2019t support GNU gettext. Therefore, these features are not available if you are\nusing one of those operating systems. Sorry.\n\n(88)\n\nAmericans use a comma every three decimal places and a period for the decimal point, while many Europeans do exactly the opposite:\n1,234.56 versus 1.234,56.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Internationalizing awk Programs [Programmer-i18n.html], Previous: Internationalization and Localization\n[I18N-and-L10N.html], Up: Internationalization with gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "ad9ae60c-fcf4-4fd2-b02f-a49f0d65ef8e", "embedding": null, "doc_hash": "e7b027022577fea3c168b7ca16e0d34f5b4b7c536a90742e01e377e521f2884f", "extra_info": null, "node_info": {"start": 3910, "end": 6663, "_node_type": "1"}, "relationships": {"1": "51d8b98f-e792-482a-86ba-03c99a2fcd8c", "2": "8f16a91d-0a2a-4741-9682-a0531dfa9d38"}}, "__type__": "1"}, "8eb90ee4-7f49-4798-a60c-730945f61c0a": {"__data__": {"text": "Next: Specifying Record Ranges with Patterns [Ranges.html], Previous: Regular Expressions as Patterns [Regexp-Patterns.html], Up:\nPattern Elements [Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.2 EXPRESSIONS AS PATTERNS\n\nAny awk expression is valid as an awk pattern. The pattern matches if the expression\u2019s value is nonzero (if a number) or non-null\n(if a string). The expression is reevaluated each time the rule is tested against a new input record. If the expression uses\nfields such as $1, the value depends directly on the new input record\u2019s text; otherwise, it depends on only what has happened so\nfar in the execution of the awk program.\n\nComparison expressions, using the comparison operators described in Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html], are a very common kind of pattern. Regexp matching and nonmatching are also very common expressions.\nThe left operand of the \u2018~\u2019 and \u2018!~\u2019 operators is a string. The right operand is either a constant regular expression enclosed in\nslashes (/regexp/), or any expression whose string value is used as a dynamic regular expression (see Using Dynamic Regexps\n[Computed-Regexps.html]). The following example prints the second field of each input record whose first field is precisely \u2018li\u2019:\n\n$ awk '$1 == \"li\" { print $2 }' mail-list\n\n\n(There is no output, because there is no person with the exact name \u2018li\u2019.) Contrast this with the following regular expression\nmatch, which accepts any record with a first field that contains \u2018li\u2019:\n\n$ awk '$1 ~ /li/ { print $2 }' mail-list\n-| 555-5553\n-| 555-6699\n\n\nA regexp constant as a pattern is also a special case of an expression pattern. The expression /li/ has the value one if \u2018li\u2019\nappears in the current input record. Thus, as a pattern, /li/ matches any record containing \u2018li\u2019.\n\nBoolean expressions are also commonly used as patterns. Whether the pattern matches an input record depends on whether its\nsubexpressions match. For example, the following command prints all the records in mail-list that contain both \u2018edu\u2019 and \u2018li\u2019:\n\n$ awk '/edu/ && /li/' mail-list\n-| Samuel       555-3430     samuel.lanceolis@shu.edu        A\n\n\nThe following command prints all records in mail-list that contain either \u2018edu\u2019 or \u2018li\u2019 (or both, of course):\n\n$ awk '/edu/ || /li/' mail-list\n-| Amelia       555-5553     amelia.zodiacusque@gmail.com    F\n-| Broderick    555-0542     broderick.aliquotiens@yahoo.com R\n-| Fabius       555-1234     fabius.undevicesimus@ucb.edu    F\n-| Julie        555-6699     julie.perscrutabor@skeeve.com   F\n-| Samuel       555-3430     samuel.lanceolis@shu.edu        A\n-| Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R\n\n\nThe following command prints all records in mail-list that do not contain the string \u2018li\u2019:\n\n$ awk '! /li/' mail-list\n-| Anthony      555-3412     anthony.asserturo@hotmail.com   A\n-| Becky        555-7685     becky.algebrarum@gmail.com      A\n-| Bill        ", "doc_id": "8eb90ee4-7f49-4798-a60c-730945f61c0a", "embedding": null, "doc_hash": "fe91b04a7e60e10b01c4a9097251802e29ca1d125ec4271488f33a635e0a9e26", "extra_info": null, "node_info": {"start": 0, "end": 3111, "_node_type": "1"}, "relationships": {"1": "b32529a5-5c1a-486f-bd7a-dd00eb11475f", "3": "6c0336b2-032c-40fb-b110-5dd9ed7e3c4c"}}, "__type__": "1"}, "6c0336b2-032c-40fb-b110-5dd9ed7e3c4c": {"__data__": {"text": "     A\n-| Bill         555-1675     bill.drowning@hotmail.com       A\n-| Camilla      555-2912     camilla.infusarum@skynet.be     R\n-| Fabius       555-1234     fabius.undevicesimus@ucb.edu    F\n\n\n-| Martin       555-6480     martin.codicibus@hotmail.com    A\n-| Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R\n\n\nThe subexpressions of a Boolean operator in a pattern can be constant regular expressions, comparisons, or any other awk\nexpressions. Range patterns are not expressions, so they cannot appear inside Boolean patterns. Likewise, the special patterns\nBEGIN, END, BEGINFILE, and ENDFILE, which never match any input record, are not expressions and cannot appear inside Boolean\npatterns.\n\nThe precedence of the different operators that can appear in patterns is described in Operator Precedence (How Operators Nest)\n[Precedence.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Specifying Record Ranges with Patterns [Ranges.html], Previous: Regular Expressions as Patterns [Regexp-Patterns.html], Up:\nPattern Elements [Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6c0336b2-032c-40fb-b110-5dd9ed7e3c4c", "embedding": null, "doc_hash": "5e6e36c50635d8a5aae63a81249a4c65a75f79a6d92ca49f646ea0f7700f31a9", "extra_info": null, "node_info": {"start": 3089, "end": 4307, "_node_type": "1"}, "relationships": {"1": "b32529a5-5c1a-486f-bd7a-dd00eb11475f", "2": "8eb90ee4-7f49-4798-a60c-730945f61c0a"}}, "__type__": "1"}, "b3607e79-5c0c-4d19-800d-790103bda024": {"__data__": {"text": "Previous: Where You Are Makes a Difference [Locales.html], Up: Expressions [Expressions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.7 SUMMARY\n\n * Expressions are the basic elements of computation in programs. They are built from constants, variables, function calls, and\n   combinations of the various kinds of values with operators.\n * awk supplies three kinds of constants: numeric, string, and regexp. gawk lets you specify numeric constants in octal and\n   hexadecimal (bases 8 and 16) as well as decimal (base 10). In certain contexts, a standalone regexp constant such as /foo/ has\n   the same meaning as \u2018$0 ~ /foo/\u2019.\n * Variables hold values between uses in computations. A number of built-in variables provide information to your awk program, and\n   a number of others let you control how awk behaves.\n * Numbers are automatically converted to strings, and strings to numbers, as needed by awk. Numeric values are converted as if\n   they were formatted with sprintf() using the format in CONVFMT. Locales can influence the conversions.\n * awk provides the usual arithmetic operators (addition, subtraction, multiplication, division, modulus), and unary plus and\n   minus. It also provides comparison operators, Boolean operators, an array membership testing operator, and regexp matching\n   operators. String concatenation is accomplished by placing two expressions next to each other; there is no explicit operator.\n   The three-operand \u2018?:\u2019 operator provides an \u201cif-else\u201d test within expressions.\n * Assignment operators provide convenient shorthands for common arithmetic operations.\n * In awk, a value is considered to be true if it is nonzero or non-null. Otherwise, the value is false.\n * A variable\u2019s type is set upon each assignment and may change over its lifetime. The type determines how it behaves in\n   comparisons (string or numeric).\n * Function calls return a value that may be used as part of a larger expression. Expressions used to pass parameter values are\n   fully evaluated before the function is called. awk provides built-in and user-defined functions; this is described in Functions\n   [Functions.html].\n * Operator precedence specifies the order in which operations are performed, unless explicitly overridden by parentheses. awk\u2019s\n   operator precedence is compatible with that of C.\n * Locales can affect the format of data as output by an awk program, and occasionally the format for data read as input.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Where You Are Makes a Difference [Locales.html], Up: Expressions [Expressions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b3607e79-5c0c-4d19-800d-790103bda024", "embedding": null, "doc_hash": "477cfb8e09880ac2e976507cefa8b08def6225047c6a4e215701910d5e6bbd3a", "extra_info": null, "node_info": {"start": 0, "end": 2884, "_node_type": "1"}, "relationships": {"1": "ca42a91d-8d2b-4ba8-adc2-7e775423b2c7"}}, "__type__": "1"}, "71b03761-89ee-40a5-aa05-f28b8516b765": {"__data__": {"text": "Next: Patterns, Actions, and Variables [Patterns-and-Actions.html], Previous: Printing Output [Printing.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6 EXPRESSIONS\n\nExpressions are the basic building blocks of awk patterns and actions. An expression evaluates to a value that you can print,\ntest, or pass to a function. Additionally, an expression can assign a new value to a variable or a field by using an assignment\noperator.\n\nAn expression can serve as a pattern or action statement on its own. Most other kinds of statements contain one or more\nexpressions that specify the data on which to operate. As in other languages, expressions in awk can include variables, array\nreferences, constants, and function calls, as well as combinations of these with various operators.\n\n * Constants, Variables, and Conversions [Values.html]\n * Operators: Doing Something with Values [All-Operators.html]\n * Truth Values and Conditions [Truth-Values-and-Conditions.html]\n * Function Calls [Function-Calls.html]\n * Operator Precedence (How Operators Nest) [Precedence.html]\n * Where You Are Makes a Difference [Locales.html]\n * Summary [Expressions-Summary.html]", "doc_id": "71b03761-89ee-40a5-aa05-f28b8516b765", "embedding": null, "doc_hash": "e9c000075f77c4a3ddc715f820893ac5f70ee84d24cc683bfb903a52aa38c5fd", "extra_info": null, "node_info": {"start": 0, "end": 1343, "_node_type": "1"}, "relationships": {"1": "8e645981-817a-4859-8849-20f8ea3bf958"}}, "__type__": "1"}, "09d32dac-5624-4c8c-bb07-c49e3f0a5b34": {"__data__": {"text": "Next: Changes From Version 1 of the API [Changes-from-API-V1.html], Previous: API Variables [Extension-API-Variables.html], Up:\nAPI Description [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.15 BOILERPLATE CODE\n\nAs mentioned earlier (see How It Works at a High Level [Extension-Mechanism-Outline.html]), the function definitions as presented\nare really macros. To use these macros, your extension must provide a small amount of boilerplate code (variables and functions)\ntoward the top of your source file, using predefined names as described here. The boilerplate needed is also provided in comments\nin the gawkapi.h header file:\n\n/* Boilerplate code: */\nint plugin_is_GPL_compatible;\n\nstatic gawk_api_t *const api;\n\n\nstatic awk_ext_id_t ext_id;\nstatic const char *ext_version = NULL; /* or \u2026 = \"some string\" */\n\nstatic awk_ext_func_t func_table[] = {\n    { \"name\", do_name, 1, 0, awk_false, NULL },\n    /* \u2026 */\n};\n\n/* EITHER: */\n\nstatic awk_bool_t (*init_func)(void) = NULL;\n\n/* OR: */\n\nstatic awk_bool_t\ninit_my_extension(void)\n{\n    \u2026\n}\n\nstatic awk_bool_t (*init_func)(void) = init_my_extension;\n\ndl_load_func(func_table, some_name, \"name_space_in_quotes\")\n\n\nThese variables and functions are as follows:\n\nint plugin_is_GPL_compatible;\n\nThis asserts that the extension is compatible with the GNU GPL (see GNU General Public License [Copying.html]). If your extension\ndoes not have this, gawk will not load it (see Extension Licensing [Plugin-License.html]).\n\nstatic gawk_api_t *const api;\n\nThis global static variable should be set to point to the gawk_api_t pointer that gawk passes to your dl_load() function. This\nvariable is used by all of the macros.\n\nstatic awk_ext_id_t ext_id;\n\nThis global static variable should be set to the awk_ext_id_t value that gawk passes to your dl_load() function. This variable is\nused by all of the macros.\n\nstatic const char *ext_version = NULL; /* or \u2026 = \"some string\" */\n\nThis global static variable should be set either to NULL, or to point to a string giving the name and version of your extension.\n\nstatic awk_ext_func_t func_table[] = { \u2026 };\n\nThis is an array of one or more awk_ext_func_t structures, as described earlier (see Registering An Extension Function\n[Extension-Functions.html]). It can then be looped over for multiple calls to add_ext_func().\n\nstatic awk_bool_t (*init_func)(void) = NULL; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OR static awk_bool_t init_my_extension(void) { \u2026 } static\nawk_bool_t (*init_func)(void) = init_my_extension;\n\nIf you need to do some initialization work, you should define a function that does it (creates variables, opens files, etc.) and\nthen define the init_func pointer to point to your function. The function should return awk_false upon failure, or awk_true if\neverything goes well.\n\nIf you don\u2019t need to do any initialization, define the pointer and initialize it to NULL.\n\ndl_load_func(func_table, some_name, \"name_space_in_quotes\")\n\nThis macro expands to a dl_load() function that performs all the necessary initializations.\n\nThe point of all the variables and arrays is to let the dl_load() function (from the dl_load_func() macro) do all the standard\nwork. It does the following:\n\n 1. Check the API versions. If the extension major version does not match gawk\u2019s, or if the extension", "doc_id": "09d32dac-5624-4c8c-bb07-c49e3f0a5b34", "embedding": null, "doc_hash": "e94b694c2b9fb6f30427e318c5649d1b7b18b630d556d9cba8b45d046a4cc621", "extra_info": null, "node_info": {"start": 0, "end": 3443, "_node_type": "1"}, "relationships": {"1": "9718fd86-7058-4bdf-99e3-09bfcd26e1a2", "3": "9593c827-ae40-40d9-9ab8-d8cdeea3d28a"}}, "__type__": "1"}, "9593c827-ae40-40d9-9ab8-d8cdeea3d28a": {"__data__": {"text": "If the extension major version does not match gawk\u2019s, or if the extension minor version is greater\n    than gawk\u2019s, it prints a fatal error message and exits.\n 2. Check the MPFR and GMP versions. If there is a mismatch, it prints a fatal error message and exits.\n 3. Load the functions defined in func_table. If any of them fails to load, it prints a warning message but continues on.\n 4. If the init_func pointer is not NULL, call the function it points to. If it returns awk_false, print a warning message.\n 5. If ext_version is not NULL, register the version string with gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Changes From Version 1 of the API [Changes-from-API-V1.html], Previous: API Variables [Extension-API-Variables.html], Up:\nAPI Description [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9593c827-ae40-40d9-9ab8-d8cdeea3d28a", "embedding": null, "doc_hash": "95f3d3d2c43da8dd1f566a1c95329b2e73fefcdc3643ef65da774fa22d7c7cbd", "extra_info": null, "node_info": {"start": 3370, "end": 4318, "_node_type": "1"}, "relationships": {"1": "9718fd86-7058-4bdf-99e3-09bfcd26e1a2", "2": "09d32dac-5624-4c8c-bb07-c49e3f0a5b34"}}, "__type__": "1"}, "2395ae92-7848-429d-8f93-87b509415b06": {"__data__": {"text": "Next: How gawk Finds Extensions [Finding-Extensions.html], Previous: How It Works at a High Level\n[Extension-Mechanism-Outline.html], Up: Writing Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.4 API DESCRIPTION\n\nC or C++ code for an extension must include the header file gawkapi.h, which declares the functions and defines the data types\nused to communicate with gawk. This (rather large) section describes the API in detail.\n\n * Introduction [Extension-API-Functions-Introduction.html]\n * General-Purpose Data Types [General-Data-Types.html]\n * Memory Allocation Functions and Convenience Macros [Memory-Allocation-Functions.html]\n * Constructor Functions [Constructor-Functions.html]\n * Managing MPFR and GMP Values [API-Ownership-of-MPFR-and-GMP-Values.html]\n * Registration Functions [Registration-Functions.html]\n * Printing Messages [Printing-Messages.html]\n * Updating ERRNO [Updating-ERRNO.html]\n * Requesting Values [Requesting-Values.html]\n * Accessing and Updating Parameters [Accessing-Parameters.html]\n * Symbol Table Access [Symbol-Table-Access.html]\n * Array Manipulation [Array-Manipulation.html]\n * Accessing and Manipulating Redirections [Redirection-API.html]\n * API Variables [Extension-API-Variables.html]\n * Boilerplate Code [Extension-API-Boilerplate.html]\n * Changes From Version 1 of the API [Changes-from-API-V1.html]", "doc_id": "2395ae92-7848-429d-8f93-87b509415b06", "embedding": null, "doc_hash": "596fcb88632eb8ebed6094be295bd19e86fd9a8153f1da57d27069c450ec89ba", "extra_info": null, "node_info": {"start": 0, "end": 1539, "_node_type": "1"}, "relationships": {"1": "6e4f9a52-6011-4ca4-92b7-43af1a7b754b"}}, "__type__": "1"}, "3f6017f3-156a-4815-869c-1c295abb5f08": {"__data__": {"text": "Next: General-Purpose Data Types [General-Data-Types.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.1 INTRODUCTION\n\nAccess to facilities within gawk is achieved by calling through function pointers passed into your extension.\n\nAPI function pointers are provided for the following kinds of operations:\n\n * Allocating, reallocating, and releasing memory.\n * Registration functions. You may register:\n   * Extension functions\n   * Exit callbacks\n   * A version string\n   * Input parsers\n   * Output wrappers\n   * Two-way processors\n   \n   All of these are discussed in detail later in this chapter.\n\n * Printing fatal, warning, and \u201clint\u201d warning messages.\n * Updating ERRNO, or unsetting it.\n * Accessing parameters, including converting an undefined parameter into an array.\n * Symbol table access: retrieving a global variable, creating one, or changing one.\n * Creating and releasing cached values; this provides an efficient way to use values for multiple variables and can be a big\n   performance win.\n * Manipulating arrays:\n   * Retrieving, adding, deleting, and modifying elements\n   * Getting the count of elements in an array\n   * Creating a new array\n   * Clearing an array\n   * Flattening an array for easy C-style looping over all its indices and elements\n * Accessing and manipulating redirections.\n\nSome points about using the API:\n\n * The following types, macros, and/or functions are referenced in gawkapi.h. For correct use, you must therefore include the\n   corresponding standard header file before including gawkapi.h. The list of macros and related header files is shown in Table\n   17.1.\n   \n   C entityHeader file EOF<stdio.h> Values for errno<errno.h> FILE<stdio.h> NULL<stddef.h> memcpy()<string.h> memset()<string.h>\n   size_t<sys/types.h> struct stat<sys/stat.h>\n   \n   Table 17.1: Standard header files needed by API\n   \n   Due to portability concerns, especially to systems that are not fully standards-compliant, it is your responsibility to include\n   the correct files in the correct way. This requirement is necessary in order to keep gawkapi.h clean, instead of becoming a\n   portability hodge-podge as can be seen in some parts of the gawk source code.\n\n * If your extension uses MPFR facilities, and you wish to receive such values from gawk and/or pass such values to it, you must\n   include the <mpfr.h> header before including <gawkapi.h>.\n * The gawkapi.h file may be included more than once without ill effect. Doing so, however, is poor coding practice.\n * Although the API only uses ISO C 90 features, there is an exception; the \u201cconstructor\u201d functions use the inline keyword. If\n   your compiler does not support this keyword, you should either place \u2018-Dinline=''\u2019 on your command line or use the GNU\n   Autotools and include a config.h file in your extensions.\n * All pointers filled in by gawk point to memory managed by gawk and should be treated by the extension as read-only.\n   \n   Memory for all strings passed into gawk from the extension must come from calling one of gawk_malloc(), gawk_calloc(), or\n   gawk_realloc(), and is managed by gawk from then on.\n   \n   Memory for MPFR/GMP values that come from gawk should also be treated as read-only. However, unlike strings, memory for\n   MPFR/GMP values allocated by an extension and passed into gawk is copied by gawk; the extension should then free the values\n   itself to avoid memory leaks. This is discussed further in API Ownership of", "doc_id": "3f6017f3-156a-4815-869c-1c295abb5f08", "embedding": null, "doc_hash": "69b9f304facfa184148fdfaaa2580cba0b7307f89001ee199a24891e20b1a365", "extra_info": null, "node_info": {"start": 0, "end": 3651, "_node_type": "1"}, "relationships": {"1": "d829dba7-f334-4fde-beb2-bf5de44e4a87", "3": "40dfb3eb-ac61-4f72-a3a3-644d34d12e0e"}}, "__type__": "1"}, "40dfb3eb-ac61-4f72-a3a3-644d34d12e0e": {"__data__": {"text": " itself to avoid memory leaks. This is discussed further in API Ownership of MPFR and GMP Values.\n\n * The API defines several simple structs that map values as seen from awk. A value can be a double, a string, or an array (as in\n   multidimensional arrays, or when creating a new array).\n   \n   String values maintain both pointer and length, because embedded NUL characters are allowed.\n   \n   > NOTE: By intent, gawk maintains strings using the current multibyte encoding (as defined by LC_xxx environment variables) and\n   > not using wide characters. This matches how gawk stores strings internally and also how characters are likely to be input\n   > into and output from files.\n   \n   > NOTE: String values passed to an extension by gawk are always NUL-terminated. Thus it is safe to pass such string values to\n   > standard library and system routines. However, because gawk allows embedded NUL characters in string data, before using the\n   > data as a regular C string, you should check that the length for that string passed to the extension matches the return value\n   > of strlen() for it.\n\n * When retrieving a value (such as a parameter or that of a global variable or array element), the extension requests a specific\n   type (number, string, scalar, value cookie, array, or \u201cundefined\u201d). When the request is \u201cundefined,\u201d the returned value will\n   have the real underlying type.\n   \n   However, if the request and actual type don\u2019t match, the access function returns \u201cfalse\u201d and fills in the type of the actual\n   value that is there, so that the extension can, e.g., print an error message (such as \u201cscalar passed where array expected\u201d).\n\nYou may call the API functions by using the function pointers directly, but the interface is not so pretty. To make extension code\nlook more like regular code, the gawkapi.h header file defines several macros that you should use in your code. This section\npresents the macros as if they were functions.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: General-Purpose Data Types [General-Data-Types.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "40dfb3eb-ac61-4f72-a3a3-644d34d12e0e", "embedding": null, "doc_hash": "3dd0c7845b6e30fcd43e691bf8f44a84ba0ed98c336ff944fc1aee773c4fcdb5", "extra_info": null, "node_info": {"start": 3575, "end": 5837, "_node_type": "1"}, "relationships": {"1": "d829dba7-f334-4fde-beb2-bf5de44e4a87", "2": "3f6017f3-156a-4815-869c-1c295abb5f08"}}, "__type__": "1"}, "3c0971a6-6312-4bf2-b6cc-43b432594c0b": {"__data__": {"text": "Previous: GMP and MPFR Version Information [Extension-GMP_002fMPFR-Versioning.html], Up: API Variables\n[Extension-API-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.14.3 INFORMATIONAL VARIABLES\n\nThe API provides access to several variables that describe whether the corresponding command-line options were enabled when gawk\nwas invoked. The variables are:\n\ndo_debug\n\nThis variable is true if gawk was invoked with --debug option.\n\ndo_lint\n\nThis variable is true if gawk was invoked with --lint option.\n\ndo_mpfr\n\nThis variable is true if gawk was invoked with --bignum option.\n\ndo_profile\n\nThis variable is true if gawk was invoked with --profile option.\n\ndo_sandbox\n\nThis variable is true if gawk was invoked with --sandbox option.\n\ndo_traditional\n\nThis variable is true if gawk was invoked with --traditional option.\n\nThe value of do_lint can change if awk code modifies the LINT predefined variable (see Predefined Variables\n[Built_002din-Variables.html]). The others should not change during execution.", "doc_id": "3c0971a6-6312-4bf2-b6cc-43b432594c0b", "embedding": null, "doc_hash": "9a2379cf0f58f00a638a977ddd59c9d6f5e39db7400b268ff99324899a0eb7b2", "extra_info": null, "node_info": {"start": 0, "end": 1171, "_node_type": "1"}, "relationships": {"1": "9b6a7482-083b-4906-b57f-dc881a39b8eb"}}, "__type__": "1"}, "0499af6a-be85-4661-9db9-3bf7cd698241": {"__data__": {"text": "Next: Boilerplate Code [Extension-API-Boilerplate.html], Previous: Accessing and Manipulating Redirections [Redirection-API.html],\nUp: API Description [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.14 API VARIABLES\n\nThe API provides two sets of variables. The first provides information about the version of the API (both with which the extension\nwas compiled, and with which gawk was compiled). The second provides information about how gawk was invoked.\n\n * API Version Constants and Variables [Extension-Versioning.html]\n * GMP and MPFR Version Information [Extension-GMP_002fMPFR-Versioning.html]\n * Informational Variables [Extension-API-Informational-Variables.html]", "doc_id": "0499af6a-be85-4661-9db9-3bf7cd698241", "embedding": null, "doc_hash": "278e3960cc48a2b022904dc82b62474ecc0ff28eecaa4644fb0fd28bd824a2b8", "extra_info": null, "node_info": {"start": 0, "end": 855, "_node_type": "1"}, "relationships": {"1": "d4c65170-e9bc-4019-a6ec-21b87efd2e44"}}, "__type__": "1"}, "d7af722a-d0dc-49fa-9622-651e4fb9903e": {"__data__": {"text": "Next: Summary [Notes-summary.html], Previous: Some Limitations of the Implementation [Implementation-Limitations.html], Up:\nImplementation Notes [Notes.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nC.5 EXTENSION API DESIGN\n\nThis section documents the design of the extension API, including a discussion of some of the history and problems that needed to\nbe solved.\n\nThe first version of extensions for gawk was developed in the mid-1990s and released with gawk 3.1 in the late 1990s. The basic\nmechanisms and design remained unchanged for close to 15 years, until 2012.\n\nThe old extension mechanism used data types and functions from gawk itself, with a \u201cclever hack\u201d to install extension functions.\n\ngawk included some sample extensions, of which a few were really useful. However, it was clear from the outset that the extension\nmechanism was bolted onto the side and was not really well thought out.\n\n * Problems With The Old Mechanism [Old-Extension-Problems.html]\n * Goals For A New Mechanism [Extension-New-Mechanism-Goals.html]\n * Other Design Decisions [Extension-Other-Design-Decisions.html]\n * Room For Future Growth [Extension-Future-Growth.html]", "doc_id": "d7af722a-d0dc-49fa-9622-651e4fb9903e", "embedding": null, "doc_hash": "b2ccb44d9cac3354edde872d580eb6293279fef86060099c10dd8acc557234b6", "extra_info": null, "node_info": {"start": 0, "end": 1310, "_node_type": "1"}, "relationships": {"1": "e81d697f-11e3-4d9a-b266-1349dbb12fbd"}}, "__type__": "1"}, "89224f74-877a-4267-81f1-2e28e1a1122a": {"__data__": {"text": "Next: The Sample Extensions in the gawk Distribution [Extension-Samples.html], Previous: How gawk Finds Extensions\n[Finding-Extensions.html], Up: Writing Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.6 EXAMPLE: SOME FILE FUNCTIONS\n\n> No matter where you go, there you are.\n\n\u2014 Buckaroo Banzai\n\nTwo useful functions that are not in awk are chdir() (so that an awk program can change its directory) and stat() (so that an awk\nprogram can gather information about a file). In order to illustrate the API in action, this section implements these functions\nfor gawk in an extension.\n\n * Using chdir() and stat() [Internal-File-Description.html]\n * C Code for chdir() and stat() [Internal-File-Ops.html]\n * Integrating the Extensions [Using-Internal-File-Ops.html]", "doc_id": "89224f74-877a-4267-81f1-2e28e1a1122a", "embedding": null, "doc_hash": "53285e8d5721d9b1f28cc25f7f7e4d9344c36d2e9c51bedeb5aee3e38322f613", "extra_info": null, "node_info": {"start": 0, "end": 953, "_node_type": "1"}, "relationships": {"1": "f0a675c1-1e19-4b33-a4e2-2b4981d09b70"}}, "__type__": "1"}, "d14190c0-d698-4641-a587-0fe4c46b3222": {"__data__": {"text": "Previous: Summary [Extension-summary.html], Up: Writing Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.10 EXERCISES\n\n 1. Add functions to implement system calls such as chown(), chmod(), and umask() to the file operations extension presented in C\n    Code for chdir() and stat() [Internal-File-Ops.html].\n 2. Write an input parser that prints a prompt if the input is a from a \u201cterminal\u201d device. You can use the isatty() function to\n    tell if the input file is a terminal. (Hint: this function is usually expensive to call; try to call it just once.) The\n    content of the prompt should come from a variable settable by awk-level code. You can write the prompt to standard error.\n    However, for best results, open a new file descriptor (or file pointer) on /dev/tty and print the prompt there, in case\n    standard error has been redirected.\n    \n    Why is standard error a better choice than standard output for writing the prompt? Which reading mechanism should you replace,\n    the one to get a record, or the one to read raw bytes?\n\n 3. Write a wrapper script that provides an interface similar to \u2018sed -i\u2019 for the \u201cinplace\u201d extension presented in Enabling\n    In-Place File Editing [Extension-Sample-Inplace.html].", "doc_id": "d14190c0-d698-4641-a587-0fe4c46b3222", "embedding": null, "doc_hash": "bd1c227e61e62e9c9f39b6699aca3983f37ad6883902bf4b700d3005336a4a55", "extra_info": null, "node_info": {"start": 0, "end": 1420, "_node_type": "1"}, "relationships": {"1": "498256a8-a679-4d3b-9487-0b94401fce41"}}, "__type__": "1"}, "92a134ad-857b-476a-9201-275cecdb8993": {"__data__": {"text": "Next: Registering An Exit Callback Function [Exit-Callback-Functions.html], Up: Registration Functions\n[Registration-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6.1 REGISTERING AN EXTENSION FUNCTION\n\nExtension functions are described by the following record:\n\ntypedef struct awk_ext_func {\n\u00a0\u00a0\u00a0\u00a0const char *name;\n\u00a0\u00a0\u00a0\u00a0awk_value_t *(*const function)(int num_actual_args,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct awk_ext_func *finfo);\n\u00a0\u00a0\u00a0\u00a0const size_t max_expected_args;\n\u00a0\u00a0\u00a0\u00a0const size_t min_required_args;\n\u00a0\u00a0\u00a0\u00a0awk_bool_t suppress_lint;\n\u00a0\u00a0\u00a0\u00a0void *data;        /* opaque pointer to any extra state */\n} awk_ext_func_t;\n\n\nThe fields are:\n\nconst char *name;\n\nThe name of the new function. awk-level code calls the function by this name. This is a regular C string.\n\nFunction names must obey the rules for awk identifiers. That is, they must begin with either an English letter or an underscore,\nwhich may be followed by any number of letters, digits, and underscores. Letter case in function names is significant.\n\nawk_value_t *(*const function)(int num_actual_args, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct awk_ext_func *finfo);\n\nThis is a pointer to the C function that provides the extension\u2019s functionality. The function must fill in *result with either a\nnumber, a string, or a regexp. gawk takes ownership of any string memory. As mentioned earlier, string memory must come from one\nof gawk_malloc(), gawk_calloc(), or gawk_realloc().\n\nThe num_actual_args argument tells the C function how many actual parameters were passed from the calling awk code.\n\nThe finfo parameter is a pointer to the awk_ext_func_t for this function. The called function may access data within it as\ndesired, or not.\n\nThe function must return the value of result. This is for the convenience of the calling code inside gawk.\n\nconst size_t max_expected_args;\n\nThis is the maximum number of arguments the function expects to receive. If called with more arguments than this, and if lint\nchecking has been enabled, then gawk prints a warning message. For more information, see the entry for suppress_lint, later in\nthis list.\n\nconst size_t min_required_args;\n\nThis is the minimum number of arguments the function expects to receive. If called with fewer arguments, gawk prints a fatal error\nmessage and exits.\n\nawk_bool_t suppress_lint;\n\nThis flag tells gawk not to print a lint message if lint checking has been enabled and if more arguments were supplied in the call\nthan expected. An extension function can tell if gawk already printed at least one such message by checking if \u2018num_actual_args >\nfinfo->max_expected_args\u2019. If so, and the function does not want more lint messages to be printed, it should set\nfinfo->suppress_lint to awk_true.\n\nvoid *data;\n\nThis is an opaque pointer to any data that an extension function may wish to have available when called. Passing the\nawk_ext_func_t structure to the extension function, and having this pointer available in it enable writing a single C or C++\nfunction that implements multiple awk-level extension functions.\n\nOnce you have a record representing your extension function, you register it with gawk using this API function:\n\nawk_bool_t add_ext_func(const char *name_space, awk_ext_func_t *func);\n\nThis function returns true upon success, false otherwise. The name_space parameter is the namespace in which to place the function\n(see Namespaces in gawk [Namespaces.html]). Use an empty string (\"\") or \"awk\" to place the function in the default awk namespace.\nThe func pointer is the address of a struct representing your", "doc_id": "92a134ad-857b-476a-9201-275cecdb8993", "embedding": null, "doc_hash": "13be37750dcdb395056ac5c0964c2ded29a4410cafd1b3ab84faf81a11c58a57", "extra_info": null, "node_info": {"start": 0, "end": 3820, "_node_type": "1"}, "relationships": {"1": "a24c5a8a-eedb-4c40-9a4a-52f761e50d72", "3": "7adb4dad-97d0-4710-84a6-e6d0ed00475f"}}, "__type__": "1"}, "7adb4dad-97d0-4710-84a6-e6d0ed00475f": {"__data__": {"text": "in the default awk namespace.\nThe func pointer is the address of a struct representing your function, as just described.\n\ngawk does not modify what func points to, but the extension function itself receives this pointer and can modify what it points\nto, thus it is purposely not declared to be const.\n\nThe combination of min_required_args, max_expected_args, and suppress_lint may be confusing. Here is how you should set things up.\n\nAny number of arguments is valid\n\nSet min_required_args and max_expected_args to zero and set suppress_lint to awk_true.\n\nA minimum number of arguments is required, no limit on maximum number of arguments\n\nSet min_required_args to the minimum required. Set max_expected_args to zero and set suppress_lint to awk_true.\n\nA minimum number of arguments is required, a maximum number is expected\n\nSet min_required_args to the minimum required. Set max_expected_args to the maximum expected. Set suppress_lint to awk_false.\n\nA minimum number of arguments is required, and no more than a maximum is allowed\n\nSet min_required_args to the minimum required. Set max_expected_args to the maximum expected. Set suppress_lint to awk_false. In\nyour extension function, check that num_actual_args does not exceed f->max_expected_args. If it does, issue a fatal error message.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Registering An Exit Callback Function [Exit-Callback-Functions.html], Up: Registration Functions\n[Registration-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7adb4dad-97d0-4710-84a6-e6d0ed00475f", "embedding": null, "doc_hash": "bb6007c1305e91c60d40e96053b189d5b69be53e5ff82bb2733942db87a12e86", "extra_info": null, "node_info": {"start": 3729, "end": 5348, "_node_type": "1"}, "relationships": {"1": "a24c5a8a-eedb-4c40-9a4a-52f761e50d72", "2": "92a134ad-857b-476a-9201-275cecdb8993"}}, "__type__": "1"}, "42f947b8-1754-4fbb-86cc-f4553372ccab": {"__data__": {"text": "Previous: Other Design Decisions [Extension-Other-Design-Decisions.html], Up: Extension API Design [Extension-Design.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.5.4 ROOM FOR FUTURE GROWTH\n\nThe API can later be expanded, in at least the following way:\n\n * gawk passes an \u201cextension id\u201d into the extension when it first loads the extension. The extension then passes this id back to\n   gawk with each function call. This mechanism allows gawk to identify the extension calling into it, should it need to know.\n\nOf course, as of this writing, no decisions have been made with respect to the above.", "doc_id": "42f947b8-1754-4fbb-86cc-f4553372ccab", "embedding": null, "doc_hash": "c2581c2e45776f22d1dcb0f83e1a6029f6d3132edb244bf07544b303c0e21ef5", "extra_info": null, "node_info": {"start": 0, "end": 750, "_node_type": "1"}, "relationships": {"1": "8634b0bd-e4a9-43f9-8535-19526f8fe9f4"}}, "__type__": "1"}, "e2c2ef31-6f78-402f-85b9-59ad79478874": {"__data__": {"text": "Next: Informational Variables [Extension-API-Informational-Variables.html], Previous: API Version Constants and Variables\n[Extension-Versioning.html], Up: API Variables [Extension-API-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.14.2 GMP AND MPFR VERSION INFORMATION\n\nThe API also includes information about the versions of GMP and MPFR with which the running gawk was compiled (if any). They are\nincluded in the API struct as read-only constant integers:\n\napi->gmp_major_version\n\nThe major version of the GMP library used to compile gawk.\n\napi->gmp_minor_version\n\nThe minor version of the GMP library used to compile gawk.\n\napi->mpfr_major_version\n\nThe major version of the MPFR library used to compile gawk.\n\napi->mpfr_minor_version\n\nThe minor version of the MPFR library used to compile gawk.\n\nThese fields are set to zero if gawk was compiled without MPFR support.\n\nYou can check if the versions of MPFR and GMP that you are using match those of gawk with the following macro:\n\ncheck_mpfr_version(extension)\n\nThe extension is the extension id passed to all the other macros and functions defined in gawkapi.h. If you have not included the\n<mpfr.h> header file, then this macro will be defined to do nothing.\n\nIf you have included that file, then this macro compares the MPFR and GMP major and minor versions against those of the library\nyou are compiling against. If your libraries are newer than gawk\u2019s, it produces a fatal error message.\n\nThe dl_load_func() macro (see Boilerplate Code [Extension-API-Boilerplate.html]) calls check_mpfr_version().", "doc_id": "e2c2ef31-6f78-402f-85b9-59ad79478874", "embedding": null, "doc_hash": "3ff03526006de31a353baa87b9707aab1b26d1c7aae94a2febcc2d3aca66c761", "extra_info": null, "node_info": {"start": 0, "end": 1721, "_node_type": "1"}, "relationships": {"1": "d6caec65-9148-4483-bb89-e8096c8e5226"}}, "__type__": "1"}, "c9e51bc7-c2fc-4248-81be-0579aa6fc945": {"__data__": {"text": "Next: Extension Licensing [Plugin-License.html], Up: Writing Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.1 INTRODUCTION\n\nAn extension (sometimes called a plug-in) is a piece of external compiled code that gawk can load at runtime to provide additional\nfunctionality, over and above the built-in capabilities described in the rest of this Web page.\n\nExtensions are useful because they allow you (of course) to extend gawk\u2019s functionality. For example, they can provide access to\nsystem calls (such as chdir() to change directory) and to other C library routines that could be of use. As with most software,\n\u201cthe sky is the limit\u201d; if you can imagine something that you might want to do and can write in C or C++, you can write an\nextension to do it!\n\nExtensions are written in C or C++, using the application programming interface (API) defined for this purpose by the gawk\ndevelopers. The rest of this chapter explains the facilities that the API provides and how to use them, and presents a small\nexample extension. In addition, it documents the sample extensions included in the gawk distribution and describes the gawkextlib\nproject. See Extension API Design [Extension-Design.html], for a discussion of the extension mechanism goals and design.", "doc_id": "c9e51bc7-c2fc-4248-81be-0579aa6fc945", "embedding": null, "doc_hash": "1ef9014d97472ba55f6450e92ba727dbc242df20a44fede775686c77c48b0786", "extra_info": null, "node_info": {"start": 0, "end": 1446, "_node_type": "1"}, "relationships": {"1": "cffe936e-711c-4abe-b9a7-c10bf63a6a5c"}}, "__type__": "1"}, "4d3fd578-b72d-402e-963a-9d9ddb774e24": {"__data__": {"text": "Next: API Description [Extension-API-Description.html], Previous: Extension Licensing [Plugin-License.html], Up: Writing\nExtensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.3 HOW IT WORKS AT A HIGH LEVEL\n\nCommunication between gawk and an extension is two-way. First, when an extension is loaded, gawk passes it a pointer to a struct\nwhose fields are function pointers. This is shown in Figure 17.1.\n\nLoading the extension [gawk_api-figure1.png]\n\nFigure 17.1: Loading the extension\n\nThe extension can call functions inside gawk through these function pointers, at runtime, without needing (link-time) access to\ngawk\u2019s symbols. One of these function pointers is to a function for \u201cregistering\u201d new functions. This is shown in Figure 17.2.\n\nRegistering a new Function [gawk_api-figure2.png]\n\nFigure 17.2: Registering a new function\n\nIn the other direction, the extension registers its new functions with gawk by passing function pointers to the functions that\nprovide the new feature (do_chdir(), for example). gawk associates the function pointer with a name and can then call it, using a\ndefined calling convention. This is shown in Figure 17.3.\n\nCalling the new function [gawk_api-figure3.png]\n\nFigure 17.3: Calling the new function\n\nThe do_xxx() function, in turn, then uses the function pointers in the API struct to do its work, such as updating variables or\narrays, printing messages, setting ERRNO, and so on.\n\nConvenience macros make calling through the function pointers look like regular function calls so that extension code is quite\nreadable and understandable.\n\nAlthough all of this sounds somewhat complicated, the result is that extension code is quite straightforward to write and to read.\nYou can see this in the sample extension filefuncs.c (see Example: Some File Functions [Extension-Example.html]) and also in the\ntestext.c code for testing the APIs.\n\nSome other bits and pieces:\n\n * The API provides access to gawk\u2019s do_xxx values, reflecting command-line options, like do_lint, do_profiling, and so on (see\n   API Variables [Extension-API-Variables.html]). These are informational: an extension cannot affect their values inside gawk. In\n   addition, attempting to assign to them produces a compile-time error.\n * The API also provides major and minor version numbers, so that an extension can check if the gawk it is loaded with supports\n   the facilities it was compiled with. (Version mismatches \u201cshouldn\u2019t\u201d happen, but we all know how that goes.) See API Version\n   Constants and Variables [Extension-Versioning.html] for details.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: API Description [Extension-API-Description.html], Previous: Extension Licensing [Plugin-License.html], Up: Writing\nExtensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4d3fd578-b72d-402e-963a-9d9ddb774e24", "embedding": null, "doc_hash": "1068ff99e451458ecb0780ce2d40ac02d86542ccd3bc6b287d538ab4be20124d", "extra_info": null, "node_info": {"start": 0, "end": 3105, "_node_type": "1"}, "relationships": {"1": "4c1c9c97-efec-43e9-b671-6f754bcc5a8d"}}, "__type__": "1"}, "53e425fb-fc2d-42e5-b0ae-f3fa8e6fc5b0": {"__data__": {"text": "Next: Other Design Decisions [Extension-Other-Design-Decisions.html], Previous: Problems With The Old Mechanism\n[Old-Extension-Problems.html], Up: Extension API Design [Extension-Design.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.5.2 GOALS FOR A NEW MECHANISM\n\nSome goals for the new API were:\n\n * The API should be independent of gawk internals. Changes in gawk internals should not be visible to the writer of an extension\n   function.\n * The API should provide binary compatibility across gawk releases as long as the API itself does not change.\n * The API should enable extensions written in C or C++ to have roughly the same \u201cappearance\u201d to awk-level code as awk functions\n   do. This means that extensions should have:\n   * The ability to access function parameters.\n   * The ability to turn an undefined parameter into an array (call by reference).\n   * The ability to create, access and update global variables.\n   * Easy access to all the elements of an array at once (\u201carray flattening\u201d) in order to loop over all the element in an easy\n     fashion for C code.\n   * The ability to create arrays (including gawk\u2019s true arrays of arrays).\n\nSome additional important goals were:\n\n * The API should use only features in ISO C 90, so that extensions can be written using the widest range of C and C++ compilers.\n   The header should include the appropriate \u2018#ifdef __cplusplus\u2019 and \u2018extern \"C\"\u2019 magic so that a C++ compiler could be used. (If\n   using C++, the runtime system has to be smart enough to call any constructors and destructors, as gawk is a C program. As of\n   this writing, this has not been tested.)\n * The API mechanism should not require access to gawk\u2019s symbols121 by the compile-time or dynamic linker, in order to enable\n   creation of extensions that also work on MS-Windows.\n\nDuring development, it became clear that there were other features that should be available to extensions, which were also\nsubsequently provided:\n\n * Extensions should have the ability to hook into gawk\u2019s I/O redirection mechanism. In particular, the xgawk developers provided\n   a so-called \u201copen hook\u201d to take over reading records. During development, this was generalized to allow extensions to hook into\n   input processing, output processing, and two-way I/O.\n * An extension should be able to provide a \u201ccall back\u201d function to perform cleanup actions when gawk exits.\n * An extension should be able to provide a version string so that gawk\u2019s --version option can provide information about\n   extensions as well.\n\nThe requirement to avoid access to gawk\u2019s symbols is, at first glance, a difficult one to meet.\n\nOne design, apparently used by Perl and Ruby and maybe others, would be to make the mainline gawk code into a library, with the\ngawk utility a small C main() function linked against the library.\n\nThis seemed like the tail wagging the dog, complicating build and installation and making a simple copy of the gawk executable\nfrom one system to another (or one place to another on the same system!) into a chancy operation.\n\nPat Rankin suggested the solution that was adopted. See How It Works at a High Level [Extension-Mechanism-Outline.html], for the\ndetails.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(121)\n\nThe symbols are the variables and functions defined inside gawk. Access to these symbols by code external to gawk loaded\ndynamically at runtime is problematic on MS-Windows.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Other Design Decisions [Extension-Other-Design-Decisions.html], Previous: Problems With The Old Mechanism\n[Old-Extension-Problems.html], Up: Extension API Design [Extension-Design.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "53e425fb-fc2d-42e5-b0ae-f3fa8e6fc5b0", "embedding": null, "doc_hash": "1d8bc82ad1b928cec84086ee6a2dcfa1e93a56f69b9b8359b4c2cb59beb8214f", "extra_info": null, "node_info": {"start": 0, "end": 4044, "_node_type": "1"}, "relationships": {"1": "2b95165a-646a-4656-b7f6-d1da44d87678"}}, "__type__": "1"}, "82358acd-1890-4a80-a60f-39fa26d8bae2": {"__data__": {"text": "Next: Room For Future Growth [Extension-Future-Growth.html], Previous: Goals For A New Mechanism\n[Extension-New-Mechanism-Goals.html], Up: Extension API Design [Extension-Design.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.5.3 OTHER DESIGN DECISIONS\n\nAs an arbitrary design decision, extensions can read the values of predefined variables and arrays (such as ARGV and FS), but\ncannot change them, with the exception of PROCINFO.\n\nThe reason for this is to prevent an extension function from affecting the flow of an awk program outside its control. While a\nreal awk function can do what it likes, that is at the discretion of the programmer. An extension function should provide a\nservice or make a C API available for use within awk, and not mess with FS or ARGC and ARGV.\n\nIn addition, it becomes easy to start down a slippery slope. How much access to gawk facilities do extensions need? Do they need\ngetline? What about calling gsub() or compiling regular expressions? What about calling into awk functions? (That would be messy.)\n\nIn order to avoid these issues, the gawk developers chose to start with the simplest, most basic features that are still truly\nuseful.\n\nAnother decision is that although gawk provides nice things like MPFR, and arrays indexed internally by integers, these features\nare not being brought out to the API in order to keep things simple and close to traditional awk semantics. (In fact, arrays\nindexed internally by integers are so transparent that they aren\u2019t even documented!)\n\nAdditionally, all functions in the API check that their pointer input parameters are not NULL. If they are, they return an error.\n(It is a good idea for extension code to verify that pointers received from gawk are not NULL. Such a thing should not happen, but\nthe gawk developers are only human, and they have been known to occasionally make mistakes.)\n\nWith time, the API will undoubtedly evolve; the gawk developers expect this to be driven by user needs. For now, the current API\nseems to provide a minimal yet powerful set of features for creating extensions.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Room For Future Growth [Extension-Future-Growth.html], Previous: Goals For A New Mechanism\n[Extension-New-Mechanism-Goals.html], Up: Extension API Design [Extension-Design.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "82358acd-1890-4a80-a60f-39fa26d8bae2", "embedding": null, "doc_hash": "538402c1896ecc65b996e1f55049fb574ee733c99ad0edf591980102432029d7", "extra_info": null, "node_info": {"start": 0, "end": 2607, "_node_type": "1"}, "relationships": {"1": "7bbca3ab-aaed-4e41-836d-278a8e5b0689"}}, "__type__": "1"}, "2c8a6747-e58b-475e-94de-73835e9c3e13": {"__data__": {"text": "Next: Summary [Advanced-Features-Summary.html], Previous: Preserving Data Between Runs [Persistent-Memory.html], Up: Advanced\nFeatures of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.8 BUILTIN FEATURES VERSUS EXTENSIONS\n\nAs this and subsequent chapters show, gawk has a large number of extensions over standard awk built-in to the program. These have\ndeveloped over time. More recently, the focus has moved to using the extension mechanism (see Writing Extensions for gawk\n[Dynamic-Extensions.html]) for adding features. This section discusses the \u201cguiding philosophy\u201d behind what should be added to the\ninterpreter as a built-in feature versus what should be done in extensions.\n\nThere are several goals:\n\n 1. Keep the language awk; it should not become unrecognizable, even if programs in it will only run on gawk.\n 2. Keep the core from getting any larger unless absolutely necessary.\n 3. Add new functionality either in awk scripts (-f, @include) or in loadable extensions written in C or C++ (-l, @load).\n 4. Extend the core interpreter only if some feature is:\n    A. Truly desirable.\n    B. Cannot be done via library files or loadable extensions.\n    C. Can be implemented without too much pain in the core.\n\nCombining modules with awk files is a powerful technique. Some of the sample extensions demonstrate this.\n\nLoading extensions and library files should not be done automatically, because then there\u2019s overhead that most users don\u2019t want or\nneed.", "doc_id": "2c8a6747-e58b-475e-94de-73835e9c3e13", "embedding": null, "doc_hash": "dad7fcdd8893bb38647ec3afc7644b4150d8c09152ab1c0d22414a4e08509cef", "extra_info": null, "node_info": {"start": 0, "end": 1641, "_node_type": "1"}, "relationships": {"1": "9ffb8c30-4c8f-4e6a-8fe1-adb9640da2c4"}}, "__type__": "1"}, "c3303e27-d577-4c55-8649-4f7ba78a2a42": {"__data__": {"text": "Previous: Extension Time Functions [Extension-Sample-Time.html], Up: The Sample Extensions in the gawk Distribution\n[Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.12 API TESTS\n\nThe testext extension exercises parts of the extension API that are not tested by the other samples. The extension/testext.c file\ncontains both the C code for the extension and awk test code inside C comments that run the tests. The testing framework extracts\nthe awk code and runs the tests. See the source file for more information.", "doc_id": "c3303e27-d577-4c55-8649-4f7ba78a2a42", "embedding": null, "doc_hash": "fbebb18636052ba8a8df4f55d7c5727e209dc5d4b35a0d41c28ec1401033b994", "extra_info": null, "node_info": {"start": 0, "end": 686, "_node_type": "1"}, "relationships": {"1": "3663fede-2101-4c4d-9ba7-4b1dfef452e6"}}, "__type__": "1"}, "a5648aa4-c706-4225-8899-8a1e62bcfbc9": {"__data__": {"text": "Next: Interface to fnmatch() [Extension-Sample-Fnmatch.html], Up: The Sample Extensions in the gawk Distribution\n[Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.1 FILE-RELATED FUNCTIONS\n\nThe filefuncs extension provides three different functions, as follows. The usage is:\n\n@load \"filefuncs\"\n\nThis is how you load the extension.\n\nresult = chdir(\"/some/directory\")\n\nThe chdir() function is a direct hook to the chdir() system call to change the current directory. It returns zero upon success or\na value less than zero upon error. In the latter case, it updates ERRNO.\n\nresult = stat(\"/some/path\", statdata [, follow])\n\nThe stat() function provides a hook into the stat() system call. It returns zero upon success or a value less than zero upon\nerror. In the latter case, it updates ERRNO.\n\nBy default, it uses the lstat() system call. However, if passed a third argument, it uses stat() instead.\n\nIn all cases, it clears the statdata array. When the call is successful, stat() fills the statdata array with information\nretrieved from the filesystem, as follows:\n\nSubscriptField in struct statFile type \"name\"The file nameAll \"dev\"st_devAll \"ino\"st_inoAll \"mode\"st_modeAll \"nlink\"st_nlinkAll\n\"uid\"st_uidAll \"gid\"st_gidAll \"size\"st_sizeAll \"atime\"st_atimeAll \"mtime\"st_mtimeAll \"ctime\"st_ctimeAll \"rdev\"st_rdevDevice files\n\"major\"st_majorDevice files \"minor\"st_minorDevice files \"blksize\"st_blksizeAll \"pmode\"A human-readable version of the mode value,\nlike that printed by ls (for example, \"-rwxr-xr-x\")All \"linkval\"The value of the symbolic linkSymbolic links \"type\"The type of the\nfile as a string\u2014one of \"file\", \"blockdev\", \"chardev\", \"directory\", \"socket\", \"fifo\", \"symlink\", \"door\", or \"unknown\" (not all\nsystems support all file types)All\n\nflags = or(FTS_PHYSICAL, ...) result = fts(pathlist, flags, filedata)\n\nWalk the file trees provided in pathlist and fill in the filedata array, as described next. flags is the bitwise OR of several\npredefined values, also described in a moment. Return zero if there were no errors, otherwise return \u22121.\n\nThe fts() function provides a hook to the C library fts() routines for traversing file hierarchies. Instead of returning data\nabout one file at a time in a stream, it fills in a multidimensional array with data about each file and directory encountered in\nthe requested hierarchies.\n\nThe arguments are as follows:\n\npathlist\n\nAn array of file names. The element values are used; the index values are ignored.\n\nflags\n\nThis should be the bitwise OR of one or more of the following predefined constant flag values. At least one of FTS_LOGICAL or\nFTS_PHYSICAL must be provided; otherwise fts() returns an error value and sets ERRNO. The flags are:\n\nFTS_LOGICAL\n\nDo a \u201clogical\u201d file traversal, where the information returned for a symbolic link refers to the linked-to file, and not to the\nsymbolic link itself. This flag is mutually exclusive with FTS_PHYSICAL.\n\nFTS_PHYSICAL\n\nDo a \u201cphysical\u201d file traversal, where the information returned for a symbolic link refers to the symbolic link itself. This flag\nis mutually exclusive with FTS_LOGICAL.\n\nFTS_NOCHDIR\n\nAs a performance optimization, the C library fts() routines change directory as they traverse a file hierarchy. This flag disables\nthat optimization.\n\nFTS_COMFOLLOW\n\nImmediately follow a symbolic link named in", "doc_id": "a5648aa4-c706-4225-8899-8a1e62bcfbc9", "embedding": null, "doc_hash": "bb76f17dd22d9dcdabaa2017a471eb01aba4cad67f7990192fc465a40c5d24b1", "extra_info": null, "node_info": {"start": 0, "end": 3487, "_node_type": "1"}, "relationships": {"1": "4ac79bc9-3cbd-4930-8b8f-500f8f742b68", "3": "a2e76eab-6ea7-44b7-85f2-74572b7972b8"}}, "__type__": "1"}, "a2e76eab-6ea7-44b7-85f2-74572b7972b8": {"__data__": {"text": "follow a symbolic link named in pathlist, whether or not FTS_LOGICAL is set.\n\nFTS_SEEDOT\n\nBy default, the C library fts() routines do not return entries for . (dot) and .. (dot-dot). This option causes entries for\ndot-dot to also be included. (The extension always includes an entry for dot; more on this in a moment.)\n\nFTS_XDEV\n\nDuring a traversal, do not cross onto a different mounted filesystem.\n\nfiledata\n\nThe filedata array holds the results. fts() first clears it. Then it creates an element in filedata for every element in pathlist.\nThe index is the name of the directory or file given in pathlist. The element for this index is itself an array. There are two\ncases:\n\nThe path is a file\n\nIn this case, the array contains two or three elements:\n\n\"path\"\n\nThe full path to this file, starting from the \u201croot\u201d that was given in the pathlist array.\n\n\"stat\"\n\nThis element is itself an array, containing the same information as provided by the stat() function described earlier for its\nstatdata argument. The element may not be present if the stat() system call for the file failed.\n\n\"error\"\n\nIf some kind of error was encountered, the array will also contain an element named \"error\", which is a string describing the\nerror.\n\nThe path is a directory\n\nIn this case, the array contains one element for each entry in the directory. If an entry is a file, that element is the same as\nfor files, just described. If the entry is a directory, that element is (recursively) an array describing the subdirectory. If\nFTS_SEEDOT was provided in the flags, then there will also be an element named \"..\". This element will be an array containing the\ndata as provided by stat().\n\nIn addition, there will be an element whose index is \".\". This element is an array containing the same two or three elements as\nfor a file: \"path\", \"stat\", and \"error\".\n\nThe fts() function returns zero if there were no errors. Otherwise, it returns \u22121.\n\n> NOTE: The fts() extension does not exactly mimic the interface of the C library fts() routines, choosing instead to provide an\n> interface that is based on associative arrays, which is more comfortable to use from an awk program. This includes the lack of a\n> comparison function, because gawk already provides powerful array sorting facilities. Although an fts_read()-like interface\n> could have been provided, this felt less natural than simply creating a multidimensional array to represent the file hierarchy\n> and its information.\n\nSee test/fts.awk in the gawk distribution for an example use of the fts() extension function.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Interface to fnmatch() [Extension-Sample-Fnmatch.html], Up: The Sample Extensions in the gawk Distribution\n[Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a2e76eab-6ea7-44b7-85f2-74572b7972b8", "embedding": null, "doc_hash": "c8bc08222b9c73cf1b51bc69a2444ace363c7d829e44151e9adeb307141f0e02", "extra_info": null, "node_info": {"start": 3456, "end": 6341, "_node_type": "1"}, "relationships": {"1": "4ac79bc9-3cbd-4930-8b8f-500f8f742b68", "2": "a5648aa4-c706-4225-8899-8a1e62bcfbc9"}}, "__type__": "1"}, "32a616d9-5348-4414-8ce3-5980e4827766": {"__data__": {"text": "Next: Interface to fork(), wait(), and waitpid() [Extension-Sample-Fork.html], Previous: File-Related Functions\n[Extension-Sample-File-Functions.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.2 INTERFACE TO FNMATCH()\n\nThis extension provides an interface to the C library fnmatch() function. The usage is:\n\n@load \"fnmatch\"\n\nThis is how you load the extension.\n\nresult = fnmatch(pattern, string, flags)\n\nThe return value is zero on success, FNM_NOMATCH if the string did not match the pattern, or a different nonzero value if an error\noccurred.\n\nIn addition to the fnmatch() function, the fnmatch extension adds one constant (FNM_NOMATCH), and an array of flag values named\nFNM.\n\nThe arguments to fnmatch() are:\n\npattern\n\nThe file name wildcard to match\n\nstring\n\nThe file name string\n\nflag\n\nEither zero, or the bitwise OR of one or more of the flags in the FNM array\n\nThe flags are as follows:\n\nArray elementCorresponding flag defined by fnmatch() FNM[\"CASEFOLD\"]FNM_CASEFOLD FNM[\"FILE_NAME\"]FNM_FILE_NAME\nFNM[\"LEADING_DIR\"]FNM_LEADING_DIR FNM[\"NOESCAPE\"]FNM_NOESCAPE FNM[\"PATHNAME\"]FNM_PATHNAME FNM[\"PERIOD\"]FNM_PERIOD\n\nHere is an example:\n\n@load \"fnmatch\"\n\u2026\nflags = or(FNM[\"PERIOD\"], FNM[\"NOESCAPE\"])\nif (fnmatch(\"*.a\", \"foo.c\", flags) == FNM_NOMATCH)\n    print \"no match\"\n", "doc_id": "32a616d9-5348-4414-8ce3-5980e4827766", "embedding": null, "doc_hash": "7909d9bf2f81766e241e9fb7e04633475d41efbfb4e36dccf7931f29f22e3745", "extra_info": null, "node_info": {"start": 0, "end": 1507, "_node_type": "1"}, "relationships": {"1": "335b7063-7776-452b-89a6-cbd17640c4ea"}}, "__type__": "1"}, "433a6444-78b9-4079-a176-6657ff564d67": {"__data__": {"text": "Next: Enabling In-Place File Editing [Extension-Sample-Inplace.html], Previous: Interface to fnmatch()\n[Extension-Sample-Fnmatch.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.3 INTERFACE TO FORK(), WAIT(), AND WAITPID()\n\nThe fork extension adds three functions, as follows:\n\n@load \"fork\"\n\nThis is how you load the extension.\n\npid = fork()\n\nThis function creates a new process. The return value is zero in the child and the process ID number of the child in the parent,\nor \u22121 upon error. In the latter case, ERRNO indicates the problem. In the child, PROCINFO[\"pid\"] and PROCINFO[\"ppid\"] are updated\nto reflect the correct values.\n\nret = waitpid(pid)\n\nThis function takes a numeric argument, which is the process ID to wait for. The return value is that of the waitpid() system\ncall.\n\nret = wait()\n\nThis function waits for the first child to die. The return value is that of the wait() system call.\n\nThere is no corresponding exec() function.\n\nHere is an example:\n\n@load \"fork\"\n\u2026\nif ((pid = fork()) == 0)\n    print \"hello from the child\"\nelse\n    print \"hello from the parent\"\n", "doc_id": "433a6444-78b9-4079-a176-6657ff564d67", "embedding": null, "doc_hash": "d2e76be4a04703b7f4a8d34d3116968b0fcc74dcfd143f90a56b7acf47cebfab", "extra_info": null, "node_info": {"start": 0, "end": 1310, "_node_type": "1"}, "relationships": {"1": "c3185488-af73-454f-9884-78a2d670d97e"}}, "__type__": "1"}, "d24b35e2-9016-4871-aa36-9932c8043fcc": {"__data__": {"text": "Next: Character and Numeric values: ord() and chr() [Extension-Sample-Ord.html], Previous: Interface to fork(), wait(), and\nwaitpid() [Extension-Sample-Fork.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.4 ENABLING IN-PLACE FILE EDITING\n\nThe inplace extension emulates GNU sed\u2019s -i option, which performs \u201cin-place\u201d editing of each input file. It uses the bundled\ninplace.awk include file to invoke the extension properly. This extension makes use of the namespace facility to place all the\nvariables and functions in the inplace namespace (see Namespaces in gawk [Namespaces.html]):\n\n# inplace --- load and invoke the inplace extension.\n\n@load \"inplace\"\n\n# Please set inplace::suffix to make a backup copy.  For example, you may\n# want to set inplace::suffix to .bak on the command line or in a BEGIN rule.\n\n# Before there were namespaces in gawk, this extension used\n# INPLACE_SUFFIX as the variable for making backup copies. We allow this\n# too, so that any code that used the previous version continues to work.\n\n# By default, each filename on the command line will be edited inplace.\n# But you can selectively disable this by adding an inplace::enable=0 argument\n# prior to files that you do not want to process this way.  You can then\n# reenable it later on the commandline by putting inplace::enable=1 before files\n# that you wish to be subject to inplace editing.\n\n# N.B. We call inplace::end() in the BEGINFILE and END rules so that any\n# actions in an ENDFILE rule will be redirected as expected.\n\n@namespace \"inplace\"\n\n\n\n\n\n\nBEGIN {\n    enable = 1         # enabled by default\n}\n\n\n\n\n\n\nBEGINFILE {\n    sfx = (suffix ? suffix : awk::INPLACE_SUFFIX)\n    if (filename != \"\")\n        end(filename, sfx)\n    if (enable)\n        begin(filename = FILENAME, sfx)\n    else\n        filename = \"\"\n}\n\n\n\n\n\n\nEND {\n    if (filename != \"\")\n        end(filename, (suffix ? suffix : awk::INPLACE_SUFFIX))\n}\n\n\nFor each regular file that is processed, the extension redirects standard output to a temporary file configured to have the same\nowner and permissions as the original. After the file has been processed, the extension restores standard output to its original\ndestination. If inplace::suffix is not an empty string, the original file is linked to a backup file name created by appending\nthat suffix. Finally, the temporary file is renamed to the original file name.\n\nNote that the use of this feature can be controlled by placing \u2018inplace::enable=0\u2019 on the command-line prior to listing files that\nshould not be processed this way. You can reenable inplace editing by adding an \u2018inplace::enable=1\u2019 argument prior to files that\nshould be subject to inplace editing.\n\nThe inplace::filename variable serves to keep track of the current file name so as to not invoke inplace::end() before processing\nthe first file.\n\nIf any error occurs, the extension issues a fatal error to terminate processing immediately without damaging the original file.\n\nHere are some simple examples:\n\n$ gawk -i inplace '{ gsub(/foo/, \"bar\") }; { print }' file1 file2 file3\n\n\nTo keep a backup copy of the original files, try this:\n\n$ gawk -i inplace -v inplace::suffix=.bak '{ gsub(/foo/, \"bar\") }\n> { print }' file1 file2 file3\n\n\nPlease note that, while", "doc_id": "d24b35e2-9016-4871-aa36-9932c8043fcc", "embedding": null, "doc_hash": "7b340bde010cc175bb7ec51fe86825fc3279069d51a895a4cb8a285287640cfe", "extra_info": null, "node_info": {"start": 0, "end": 3457, "_node_type": "1"}, "relationships": {"1": "71e22586-52aa-4ffc-9294-a2886de9420a", "3": "61e17edb-6c19-4778-be4c-abc53816b6e9"}}, "__type__": "1"}, "61e17edb-6c19-4778-be4c-abc53816b6e9": {"__data__": {"text": "}\n> { print }' file1 file2 file3\n\n\nPlease note that, while the extension does attempt to preserve ownership and permissions, it makes no attempt to copy the ACLs\nfrom the original file.\n\nIf the program dies prematurely, as might happen if an unhandled signal is received, a temporary file may be left behind.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Character and Numeric values: ord() and chr() [Extension-Sample-Ord.html], Previous: Interface to fork(), wait(), and\nwaitpid() [Extension-Sample-Fork.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "61e17edb-6c19-4778-be4c-abc53816b6e9", "embedding": null, "doc_hash": "288a89b9051a699af62877d9dd0b47a917f770a124882898c60ec7031a99a52b", "extra_info": null, "node_info": {"start": 3399, "end": 4139, "_node_type": "1"}, "relationships": {"1": "71e22586-52aa-4ffc-9294-a2886de9420a", "2": "d24b35e2-9016-4871-aa36-9932c8043fcc"}}, "__type__": "1"}, "75c2f334-7cbe-4775-8e23-bf4e1330c833": {"__data__": {"text": "Next: Reading Directories [Extension-Sample-Readdir.html], Previous: Enabling In-Place File Editing\n[Extension-Sample-Inplace.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.5 CHARACTER AND NUMERIC VALUES: ORD() AND CHR()\n\nThe ordchr extension adds two functions, named ord() and chr(), as follows:\n\n@load \"ordchr\"\n\nThis is how you load the extension.\n\nnumber = ord(string)\n\nReturn the numeric value of the first character in string.\n\nchar = chr(number)\n\nReturn a string whose first character is that represented by number.\n\nThese functions are inspired by the Pascal language functions of the same name. Here is an example:\n\n@load \"ordchr\"\n\u2026\nprintf(\"The numeric value of 'A' is %d\\n\", ord(\"A\"))\nprintf(\"The string value of 65 is %s\\n\", chr(65))\n", "doc_id": "75c2f334-7cbe-4775-8e23-bf4e1330c833", "embedding": null, "doc_hash": "51848a93293f5d16c48933d509cf6297a9d38925938a6802d6c8ec8292b6deab", "extra_info": null, "node_info": {"start": 0, "end": 978, "_node_type": "1"}, "relationships": {"1": "9fa50a59-93e9-450c-921f-6e10ac70743b"}}, "__type__": "1"}, "6637d344-fbef-4478-87aa-0daa97af4cdf": {"__data__": {"text": "Next: Reading an Entire File [Extension-Sample-Readfile.html], Previous: Two-Way I/O Example [Extension-Sample-Rev2way.html], Up:\nThe Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.9 DUMPING AND RESTORING AN ARRAY\n\nThe rwarray extension adds four functions, named writea(), reada(), writeall() and readall(), as follows:\n\n@load \"rwarray\"\n\nThis is how you load the extension.\n\nret = writea(file, array)\n\nThis function takes a string argument, which is the name of the file to which to dump the array, and the array itself as the\nsecond argument. writea() understands arrays of arrays. It returns one on success, or zero upon failure.\n\nret = reada(file, array)\n\nreada() is the inverse of writea(); it reads the file named as its first argument, filling in the array named as the second\nargument. It clears the array first. Here too, the return value is one on success, or zero upon failure.\n\nret = writeall(file)\n\nThis function takes a string argument, which is the name of the file to which to dump the state of all variables. Calling this\nfunction is completely equivalent to calling writea(file, SYMTAB). It returns one on success, or zero upon failure\n\nret = readall(file)\n\nThis function takes a string argument, which is the name of the file from which to read the contents of various global variables.\nFor each variable in the file, the data is loaded unless the variable has already been assigned a value or used as an array. In\nthat case, the data for that variable in the file is ignored. It returns one on success, or zero upon failure.\n\nThe array created by reada() is identical to that written by writea() in the sense that the contents are the same. However, due to\nimplementation issues, the array traversal order of the re-created array is likely to be different from that of the original\narray. As array traversal order in awk is by default undefined, this is (technically) not a problem. If you need to guarantee a\nparticular traversal order, use the array sorting features in gawk to do so (see Controlling Array Traversal and Array Sorting\n[Array-Sorting.html]).\n\nThe file contains binary data. All integral values are written in network byte order. However, double-precision floating-point\nvalues are written as native binary data. Thus, arrays containing only string data can theoretically be dumped on systems with one\nbyte order and restored on systems with a different one, but this has not been tried.\n\nNote that the writeall() and readall() functions provide a mechanism for maintaining persistent state across repeated invocations\nof a program. If, for example, a program calculates some statistics based on the data in a series of files, it could save state\nusing writeall() after processing N files, and then reload the state using readall() when the N+1st file arrives to update the\nresults.\n\nHere is an example:\n\n@load \"rwarray\"\n\u2026\nret = writea(\"arraydump.bin\", array)\n\u2026\nret = reada(\"arraydump.bin\", array)\n\u2026\nret = writeall(\"globalstate.bin\")\n\u2026\nret = readall(\"globalstate.bin\")\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reading an Entire File [Extension-Sample-Readfile.html], Previous: Two-Way I/O Example [Extension-Sample-Rev2way.html], Up:\nThe Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6637d344-fbef-4478-87aa-0daa97af4cdf", "embedding": null, "doc_hash": "d14e34d80280c6e473adc7f1c2ec0b757a3724cb13cac0633e92f0f1f58b7ef8", "extra_info": null, "node_info": {"start": 0, "end": 3618, "_node_type": "1"}, "relationships": {"1": "afd566a7-a110-4eea-981c-ae9a502183bc"}}, "__type__": "1"}, "b37127c2-7b5a-410a-b072-6fae7db7d775": {"__data__": {"text": "Next: Reversing Output [Extension-Sample-Revout.html], Previous: Character and Numeric values: ord() and chr()\n[Extension-Sample-Ord.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.6 READING DIRECTORIES\n\nThe readdir extension adds an input parser for directories. The usage is as follows:\n\n@load \"readdir\"\n\n\nWhen this extension is in use, instead of skipping directories named on the command line (or with getline), they are read, with\neach entry returned as a record.\n\nThe record consists of three fields. The first two are the inode number and the file name, separated by a forward slash character.\nOn systems where the directory entry contains the file type, the record has a third field (also separated by a slash), which is a\nsingle letter indicating the type of the file. The letters and their corresponding file types are shown in Table 17.4.\n\nLetterFile type bBlock device cCharacter device dDirectory fRegular file lSymbolic link pNamed pipe (FIFO) sSocket uAnything else\n(unknown)\n\nTable 17.4: File types returned by the readdir extension\n\nOn systems without the file type information, the third field is always \u2018u\u2019.\n\n> NOTE: On GNU/Linux systems, there are filesystems that don\u2019t support the d_type entry (see the readdir(3) manual page), and so\n> the file type is always \u2018u\u2019. You can use the filefuncs extension to call stat() in order to get correct type information.\n\nBy default, if a directory cannot be opened (due to permission problems, for example), gawk will exit. As with regular files, this\nsituation can be handled using a BEGINFILE rule that checks ERRNO and prints an error or otherwise handles the problem.\n\nHere is an example:\n\n@load \"readdir\"\n\u2026\nBEGIN { FS = \"/\" }\n{ print \"file name is\", $2 }\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reversing Output [Extension-Sample-Revout.html], Previous: Character and Numeric values: ord() and chr()\n[Extension-Sample-Ord.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b37127c2-7b5a-410a-b072-6fae7db7d775", "embedding": null, "doc_hash": "5c2a074b6d151f222d8a7fe3637ea3e6f65f823db6e6fe3e94cbb3ffb1b8c68a", "extra_info": null, "node_info": {"start": 0, "end": 2361, "_node_type": "1"}, "relationships": {"1": "47077349-6f5e-4ef8-9ab7-0c9232528f75"}}, "__type__": "1"}, "41aa21e9-fbe6-4e30-88d0-103599d9b806": {"__data__": {"text": "Next: Extension Time Functions [Extension-Sample-Time.html], Previous: Dumping and Restoring an Array\n[Extension-Sample-Read-write-array.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.10 READING AN ENTIRE FILE\n\nThe readfile extension adds a single function named readfile(), and an input parser:\n\n@load \"readfile\"\n\nThis is how you load the extension.\n\nresult = readfile(\"/some/path\")\n\nThe argument is the name of the file to read. The return value is a string containing the entire contents of the requested file.\nUpon error, the function returns the empty string and sets ERRNO.\n\nBEGIN { PROCINFO[\"readfile\"] = 1 }\n\nIn addition, the extension adds an input parser that is activated if PROCINFO[\"readfile\"] exists. When activated, each input file\nis returned in its entirety as $0. RT is set to the null string.\n\nHere is an example:\n\n@load \"readfile\"\n\u2026\ncontents = readfile(\"/path/to/file\");\nif (contents == \"\" && ERRNO != \"\") {\n    print(\"problem reading file\", ERRNO) > \"/dev/stderr\"\n    ...\n}\n", "doc_id": "41aa21e9-fbe6-4e30-88d0-103599d9b806", "embedding": null, "doc_hash": "6e35de2eb94e00abccc01716199d703f2fe7dde95d185c8ed6e158201802aaf2", "extra_info": null, "node_info": {"start": 0, "end": 1228, "_node_type": "1"}, "relationships": {"1": "d2898402-0758-4ae2-a111-d4210f1d55d7"}}, "__type__": "1"}, "286a5d9e-8c78-4887-824a-ea58afe42e94": {"__data__": {"text": "Next: Dumping and Restoring an Array [Extension-Sample-Read-write-array.html], Previous: Reversing Output\n[Extension-Sample-Revout.html], Up: The Sample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.8 TWO-WAY I/O EXAMPLE\n\nThe revtwoway extension adds a simple two-way processor that reverses the characters in each line sent to it for reading back by\nthe awk program. Its main purpose is to show how to write a two-way processor, although it may also be mildly amusing. The\nfollowing example shows how to use it:\n\n@load \"revtwoway\"\n\nBEGIN {\n    cmd = \"/magic/mirror\"\n    print \"don't panic\" |& cmd\n    cmd |& getline result\n    print result\n    close(cmd)\n}\n\n\nThe output from this program also is: \u2018cinap t'nod\u2019.", "doc_id": "286a5d9e-8c78-4887-824a-ea58afe42e94", "embedding": null, "doc_hash": "dd7d0dfb76bd256653329280db017d1fb3576bcbd73c07634b9ad7b9f9104fe9", "extra_info": null, "node_info": {"start": 0, "end": 924, "_node_type": "1"}, "relationships": {"1": "4598e687-3e46-402f-af33-555c46198cf8"}}, "__type__": "1"}, "5f0d489a-fbb5-4abd-93ac-f0d1deaec11c": {"__data__": {"text": "Next: Two-Way I/O Example [Extension-Sample-Rev2way.html], Previous: Reading Directories [Extension-Sample-Readdir.html], Up: The\nSample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.7 REVERSING OUTPUT\n\nThe revoutput extension adds a simple output wrapper that reverses the characters in each output line. Its main purpose is to show\nhow to write an output wrapper, although it may be mildly amusing for the unwary. Here is an example:\n\n@load \"revoutput\"\n\nBEGIN {\n    REVOUT = 1\n    print \"don't panic\" > \"/dev/stdout\"\n}\n\n\nThe output from this program is \u2018cinap t'nod\u2019.", "doc_id": "5f0d489a-fbb5-4abd-93ac-f0d1deaec11c", "embedding": null, "doc_hash": "8de7a4db0ccde5c060023bcf3b4311bf4018acaf41481ad0a0be416f1a5750f1", "extra_info": null, "node_info": {"start": 0, "end": 781, "_node_type": "1"}, "relationships": {"1": "c0e1d2cd-8435-46b3-980b-7f55e7344d3b"}}, "__type__": "1"}, "354ed93c-dbc4-4fc9-bf0f-dce1007a3c94": {"__data__": {"text": "Next: API Tests [Extension-Sample-API-Tests.html], Previous: Reading an Entire File [Extension-Sample-Readfile.html], Up: The\nSample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.7.11 EXTENSION TIME FUNCTIONS\n\nThe time extension adds three functions, named gettimeofday() sleep(), and strptime(), as follows:\n\n@load \"time\"\n\nThis is how you load the extension.\n\nthe_time = gettimeofday()\n\nReturn the time in seconds that has elapsed since 1970-01-01 UTC as a floating-point value. If the time is unavailable on this\nplatform, return \u22121 and set ERRNO. The returned time should have sub-second precision, but the actual precision may vary based on\nthe platform. If the standard C gettimeofday() system call is available on this platform, then it simply returns the value.\nOtherwise, if on MS-Windows, it tries to use GetSystemTimeAsFileTime().\n\nresult = sleep(seconds)\n\nAttempt to sleep for seconds seconds. If seconds is negative, or the attempt to sleep fails, return \u22121 and set ERRNO. Otherwise,\nreturn zero after sleeping for the indicated amount of time. Note that seconds may be a floating-point (nonintegral) value.\nImplementation details: depending on platform availability, this function tries to use nanosleep() or select() to implement the\ndelay.\n\ntimeval = strptime(string, format)\n\nThis function takes two arguments, a string representing a date and time, and a format string describing the data in the string.\nIt calls the C library strptime() function with the given values. If the parsing succeeds, the results are passed to the C library\nmktime() function, and its result is returned, expressing the time in seconds since the epoch in the current local timezone,\nregardless of any timezone specified in the string arguments. (This is the same as gawk\u2019s built-in systime() function.) Otherwise\nit returns \u22121 upon error. In the latter case,\n\nNote that the underlying strptime() C library routine apparently ignores any time zone indication in the date string, producing\nvalues relative to the current time zone.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: API Tests [Extension-Sample-API-Tests.html], Previous: Reading an Entire File [Extension-Sample-Readfile.html], Up: The\nSample Extensions in the gawk Distribution [Extension-Samples.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "354ed93c-dbc4-4fc9-bf0f-dce1007a3c94", "embedding": null, "doc_hash": "7e867b9b9aa05592b84345b90f276fd6279169dc608924b56393de7e8bf3c3e4", "extra_info": null, "node_info": {"start": 0, "end": 2619, "_node_type": "1"}, "relationships": {"1": "90707f2c-11b6-4e7a-aef8-9096eb6db2b2"}}, "__type__": "1"}, "f42ada98-81bd-41b1-84d9-a29ec0f428d8": {"__data__": {"text": "Next: The gawkextlib Project [gawkextlib.html], Previous: Example: Some File Functions [Extension-Example.html], Up: Writing\nExtensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.7 THE SAMPLE EXTENSIONS IN THE GAWK DISTRIBUTION\n\nThis section provides a brief overview of the sample extensions that come in the gawk distribution. Some of them are intended for\nproduction use (e.g., the filefuncs, readdir, and inplace extensions). Others mainly provide example code that shows how to use\nthe extension API.\n\n * File-Related Functions [Extension-Sample-File-Functions.html]\n * Interface to fnmatch() [Extension-Sample-Fnmatch.html]\n * Interface to fork(), wait(), and waitpid() [Extension-Sample-Fork.html]\n * Enabling In-Place File Editing [Extension-Sample-Inplace.html]\n * Character and Numeric values: ord() and chr() [Extension-Sample-Ord.html]\n * Reading Directories [Extension-Sample-Readdir.html]\n * Reversing Output [Extension-Sample-Revout.html]\n * Two-Way I/O Example [Extension-Sample-Rev2way.html]\n * Dumping and Restoring an Array [Extension-Sample-Read-write-array.html]\n * Reading an Entire File [Extension-Sample-Readfile.html]\n * Extension Time Functions [Extension-Sample-Time.html]\n * API Tests [Extension-Sample-API-Tests.html]", "doc_id": "f42ada98-81bd-41b1-84d9-a29ec0f428d8", "embedding": null, "doc_hash": "22fbeff86c95078b8a4d636456354fb1ba96fd85122360a2f45a0edbcfc8bc6d", "extra_info": null, "node_info": {"start": 0, "end": 1434, "_node_type": "1"}, "relationships": {"1": "4d059e42-d4f6-482c-b043-f1975d856e96"}}, "__type__": "1"}, "a6b669d8-8d75-40a7-b657-88d0f3e34da7": {"__data__": {"text": "Next: Customized Input Parsers [Input-Parsers.html], Previous: Registering An Exit Callback Function\n[Exit-Callback-Functions.html], Up: Registration Functions [Registration-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6.3 REGISTERING AN EXTENSION VERSION STRING\n\nYou can register a version string that indicates the name and version of your extension with gawk, as follows:\n\nvoid register_ext_version(const char *version);\n\nRegister the string pointed to by version with gawk. Note that gawk does not copy the version string, so it should not be changed.\n\ngawk prints all registered extension version strings when it is invoked with the --version option.", "doc_id": "a6b669d8-8d75-40a7-b657-88d0f3e34da7", "embedding": null, "doc_hash": "7e5149840fad9bcdddcee5f726a941c1821b8d3fed9e8a51584c3dd3039beb8c", "extra_info": null, "node_info": {"start": 0, "end": 823, "_node_type": "1"}, "relationships": {"1": "f5cc379f-94f8-484d-80fb-accfe34143dc"}}, "__type__": "1"}, "d7927e0f-e3ab-4871-9c06-99309a2ede93": {"__data__": {"text": "Next: GMP and MPFR Version Information [Extension-GMP_002fMPFR-Versioning.html], Up: API Variables [Extension-API-Variables.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.14.1 API VERSION CONSTANTS AND VARIABLES\n\nThe API provides both a \u201cmajor\u201d and a \u201cminor\u201d version number. The API versions are available at compile time as C preprocessor\ndefines to support conditional compilation, and as enum constants to facilitate debugging:\n\nAPI VersionC Preprocessor Defineenum constant Majorgawk_api_major_versionGAWK_API_MAJOR_VERSION\nMinorgawk_api_minor_versionGAWK_API_MINOR_VERSION\n\nTable 17.3: gawk API version constants\n\nThe minor version increases when new functions are added to the API. Such new functions are always added to the end of the API\nstruct.\n\nThe major version increases (and the minor version is reset to zero) if any of the data types change size or member order, or if\nany of the existing functions change signature.\n\nIt could happen that an extension may be compiled against one version of the API but loaded by a version of gawk using a different\nversion. For this reason, the major and minor API versions of the running gawk are included in the API struct as read-only\nconstant integers:\n\napi->major_version\n\nThe major version of the running gawk.\n\napi->minor_version\n\nThe minor version of the running gawk.\n\nIt is up to the extension to decide if there are API incompatibilities. Typically, a check like this is enough:\n\nif (   api->major_version != GAWK_API_MAJOR_VERSION\n    || api->minor_version < GAWK_API_MINOR_VERSION) {\n        fprintf(stderr, \"foo_extension: version mismatch with gawk!\\n\");\n        fprintf(stderr, \"\\tmy version (%d, %d), gawk version (%d, %d)\\n\",\n                GAWK_API_MAJOR_VERSION, GAWK_API_MINOR_VERSION,\n                api->major_version, api->minor_version);\n        exit(1);\n}\n\n\nSuch code is included in the boilerplate dl_load_func() macro provided in gawkapi.h (discussed in Boilerplate Code\n[Extension-API-Boilerplate.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: GMP and MPFR Version Information [Extension-GMP_002fMPFR-Versioning.html], Up: API Variables [Extension-API-Variables.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d7927e0f-e3ab-4871-9c06-99309a2ede93", "embedding": null, "doc_hash": "9272ca1795fd87ed02195f9c647e7c81e5de8590c524540450bb5cc92cf964e2", "extra_info": null, "node_info": {"start": 0, "end": 2462, "_node_type": "1"}, "relationships": {"1": "6f28ba4c-3389-4422-a681-46ee6a85328e"}}, "__type__": "1"}, "a311859c-1de4-4afd-8a48-fd5c8b69ced3": {"__data__": {"text": "Next: Exercises [Extension-Exercises.html], Previous: The gawkextlib Project [gawkextlib.html], Up: Writing Extensions for gawk\n[Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.9 SUMMARY\n\n * You can write extensions (sometimes called plug-ins) for gawk in C or C++ using the application programming interface (API)\n   defined by the gawk developers.\n * Extensions must have a license compatible with the GNU General Public License (GPL), and they must assert that fact by\n   declaring a variable named plugin_is_GPL_compatible.\n * Communication between gawk and an extension is two-way. gawk passes a struct to the extension that contains various data fields\n   and function pointers. The extension can then call into gawk via the supplied function pointers to accomplish certain tasks.\n * One of these tasks is to \u201cregister\u201d the name and implementation of new awk-level functions with gawk. The implementation takes\n   the form of a C function pointer with a defined signature. By convention, implementation functions are named do_XXXX() for some\n   awk-level function XXXX().\n * The API is defined in a header file named gawkapi.h. You must include a number of standard header files before including it in\n   your source file.\n * API function pointers are provided for the following kinds of operations:\n   * Allocating, reallocating, and releasing memory\n   * Registration functions (you may register extension functions, exit callbacks, a version string, input parsers, output\n     wrappers, and two-way processors)\n   * Printing fatal, nonfatal, warning, and \u201clint\u201d warning messages\n   * Updating ERRNO, or unsetting it\n   * Accessing parameters, including converting an undefined parameter into an array\n   * Symbol table access (retrieving a global variable, creating one, or changing one)\n   * Creating and releasing cached values; this provides an efficient way to use values for multiple variables and can be a big\n     performance win\n   * Manipulating arrays (retrieving, adding, deleting, and modifying elements; getting the count of elements in an array;\n     creating a new array; clearing an array; and flattening an array for easy C-style looping over all its indices and elements)\n * The API defines a number of standard data types for representing awk values, array elements, and arrays.\n * The API provides convenience functions for constructing values. It also provides memory management functions to ensure\n   compatibility between memory allocated by gawk and memory allocated by an extension.\n * All memory passed from gawk to an extension must be treated as read-only by the extension.\n * All memory passed from an extension to gawk must come from the API\u2019s memory allocation functions. gawk takes responsibility for\n   the memory and releases it when appropriate.\n * The API provides information about the running version of gawk so that an extension can make sure it is compatible with the\n   gawk that loaded it.\n * It is easiest to start a new extension by copying the boilerplate code described in this chapter. Macros in the gawkapi.h\n   header file make this easier to do.\n * The gawk distribution includes a number of small but useful sample extensions. The gawkextlib project includes several more\n   (larger) extensions. If you wish to write an extension and contribute it to the community of gawk users, the gawkextlib project\n   is the place to do so.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Exercises [Extension-Exercises.html], Previous: The gawkextlib Project [gawkextlib.html], Up: Writing Extensions for gawk\n[Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a311859c-1de4-4afd-8a48-fd5c8b69ced3", "embedding": null, "doc_hash": "129b18ec8f34be20eee53174470477c16345232818e34da353b73cd342435592", "extra_info": null, "node_info": {"start": 0, "end": 3907, "_node_type": "1"}, "relationships": {"1": "8cbfa767-a894-48a4-b9a2-a1d984d8b465"}}, "__type__": "1"}, "63a55fe4-f155-4ada-a387-1d6a7af9a1be": {"__data__": {"text": "Next: A Simple Stream Editor [Simple-Sed.html], Previous: Removing Duplicates from Unsorted Text [History-Sorting.html], Up: A\nGrab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.7 EXTRACTING PROGRAMS FROM TEXINFO SOURCE FILES\n\nBoth this chapter and the previous chapter (A Library of awk Functions [Library-Functions.html]) present a large number of awk\nprograms. If you want to experiment with these programs, it is tedious to type them in by hand. Here we present a program that can\nextract parts of a Texinfo input file into separate files.\n\nThis Web page is written in Texinfo [https://www.gnu.org/software/texinfo/], the GNU Project\u2019s document formatting language. A\nsingle Texinfo source file can be used to produce both printed documentation, with TeX, and online documentation. (Texinfo is\nfully documented in the book Texinfo\u2014The GNU Documentation Format, available from the Free Software Foundation, and also available\nonline [https://www.gnu.org/software/texinfo/manual/texinfo/].)\n\nFor our purposes, it is enough to know three things about Texinfo input files:\n\n * The \u201cat\u201d symbol (\u2018@\u2019) is special in Texinfo, much as the backslash (\u2018\\\u2019) is in C or awk. Literal \u2018@\u2019 symbols are represented in\n   Texinfo source files as \u2018@@\u2019.\n * Comments start with either \u2018@c\u2019 or \u2018@comment\u2019. The file-extraction program works by using special comments that start at the\n   beginning of a line.\n * Lines containing \u2018@group\u2019 and \u2018@end group\u2019 commands bracket example text that should not be split across a page boundary.\n   (Unfortunately, TeX isn\u2019t always smart enough to do things exactly right, so we have to give it some help.)\n\nThe following program, extract.awk, reads through a Texinfo source file and does two things, based on the special comments. Upon\nseeing \u2018@c\u00a0system\u00a0\u2026\u2019, it runs a command, by extracting the command text from the control line and passing it on to the system()\nfunction (see Input/Output Functions [I_002fO-Functions.html]). Upon seeing \u2018@c file filename\u2019, each subsequent line is sent to\nthe file filename, until \u2018@c endfile\u2019 is encountered. The rules in extract.awk match either \u2018@c\u2019 or \u2018@comment\u2019 by letting the\n\u2018omment\u2019 part be optional. Lines containing \u2018@group\u2019 and \u2018@end group\u2019 are simply removed. extract.awk uses the join() library\nfunction (see Merging an Array into a String [Join-Function.html]).\n\nThe example programs in the online Texinfo source for GAWK: Effective AWK Programming (gawktexi.in) have all been bracketed inside\n\u2018file\u2019 and \u2018endfile\u2019 lines. The gawk distribution uses a copy of extract.awk to extract the sample programs and install many of\nthem in a standard directory where gawk can find them. The Texinfo file looks something like this:\n\n\u2026\nThis program has a @code{BEGIN} rule\nthat prints a nice message:\n\n@example\n@c file examples/messages.awk\nBEGIN @{ print \"Don't panic!\" @}\n@c endfile\n@end example\n\nIt also prints some final advice:\n\n@example\n@c file examples/messages.awk\nEND @{ print \"Always avoid bored archaeologists!\" @}\n@c endfile\n@end example\n\u2026\n\n\nextract.awk begins by setting IGNORECASE to one, so that mixed upper- and lowercase letters in the directives won\u2019t matter.\n\nThe first rule handles calling system(), checking that a command is given (NF is at least three) and also checking that the\ncommand exits with a zero exit status, signifying OK:\n\n# extract.awk --- extract files and run programs from Texinfo", "doc_id": "63a55fe4-f155-4ada-a387-1d6a7af9a1be", "embedding": null, "doc_hash": "5204a57fa235d624cf9a5fcb3d6a6bf66a5140328ff2a13ec2fc1bf2d82f1f8d", "extra_info": null, "node_info": {"start": 0, "end": 3578, "_node_type": "1"}, "relationships": {"1": "7521c9d7-6759-47ef-a62a-76aa91f83931", "3": "afb73ac9-c63b-4961-ba2f-66c889fbec1a"}}, "__type__": "1"}, "afb73ac9-c63b-4961-ba2f-66c889fbec1a": {"__data__": {"text": "OK:\n\n# extract.awk --- extract files and run programs from Texinfo files\n\nBEGIN    { IGNORECASE = 1 }\n\n/^@c(omment)?[ \\t]+system/ {\n    if (NF < 3) {\n        e = (\"extract: \" FILENAME \":\" FNR)\n        e = (e  \": badly formed `system' line\")\n        print e > \"/dev/stderr\"\n        next\n    }\n    $1 = \"\"\n    $2 = \"\"\n    stat = system($0)\n    if (stat != 0) {\n        e = (\"extract: \" FILENAME \":\" FNR)\n        e = (e \": warning: system returned \" stat)\n        print e > \"/dev/stderr\"\n    }\n}\n\n\nThe variable e is used so that the rule fits nicely on the screen.\n\nThe second rule handles moving data into files. It verifies that a file name is given in the directive. If the file named is not\nthe current file, then the current file is closed. Keeping the current file open until a new file is encountered allows the use of\nthe \u2018>\u2019 redirection for printing the contents, keeping open-file management simple.\n\nThe for loop does the work. It reads lines using getline (see Explicit Input with getline [Getline.html]). For an unexpected\nend-of-file, it calls the unexpected_eof() function. If the line is an \u201cendfile\u201d line, then it breaks out of the loop. If the line\nis an \u2018@group\u2019 or \u2018@end group\u2019 line, then it ignores it and goes on to the next line. Similarly, comments within examples are also\nignored.\n\nMost of the work is in the following few lines. If the line has no \u2018@\u2019 symbols, the program can print it directly. Otherwise, each\nleading \u2018@\u2019 must be stripped off. To remove the \u2018@\u2019 symbols, the line is split into separate elements of the array a, using the\nsplit() function (see String-Manipulation Functions [String-Functions.html]). The \u2018@\u2019 symbol is used as the separator character.\nEach element of a that is empty indicates two successive \u2018@\u2019 symbols in the original line. For each two empty elements (\u2018@@\u2019 in\nthe original file), we have to add a single \u2018@\u2019 symbol back in.\n\nWhen the processing of the array is finished, join() is called with the value of SUBSEP (see Multidimensional Arrays\n[Multidimensional.html]), to rejoin the pieces back into a single line. That line is then printed to the output file:\n\n/^@c(omment)?[ \\t]+file/ {\n    if (NF != 3) {\n        e = (\"extract: \" FILENAME \":\" FNR \": badly formed `file' line\")\n        print e > \"/dev/stderr\"\n        next\n    }\n    if ($3 != curfile) {\n        if (curfile != \"\")\n            filelist[curfile] = 1   # save to close later\n        curfile = $3\n    }\n\n    for (;;) {\n        if ((getline line) <= 0)\n            unexpected_eof()\n        if (line ~ /^@c(omment)?[ \\t]+endfile/)\n            break\n        else if (line ~ /^@(end[ \\t]+)?group/)\n            continue\n        else if (line ~ /^@c(omment+)?[ \\t]+/)\n ", "doc_id": "afb73ac9-c63b-4961-ba2f-66c889fbec1a", "embedding": null, "doc_hash": "37b6ebd7218b70a5e0ce3dadc2e159e41e0c84de1be85fc4d211295ab5072228", "extra_info": null, "node_info": {"start": 3522, "end": 6210, "_node_type": "1"}, "relationships": {"1": "7521c9d7-6759-47ef-a62a-76aa91f83931", "2": "63a55fe4-f155-4ada-a387-1d6a7af9a1be", "3": "2396d0fe-bdfc-440b-91ad-2dc3c8afd843"}}, "__type__": "1"}, "2396d0fe-bdfc-440b-91ad-2dc3c8afd843": {"__data__": {"text": "if (line ~ /^@c(omment+)?[ \\t]+/)\n            continue\n        if (index(line, \"@\") == 0) {\n            print line > curfile\n            continue\n        }\n        n = split(line, a, \"@\")\n        # if a[1] == \"\", means leading @,\n        # don't add one back in.\n        for (i = 2; i <= n; i++) {\n            if (a[i] == \"\") { # was an @@\n                a[i] = \"@\"\n                if (a[i+1] == \"\")\n                    i++\n            }\n        }\n\n\n        print join(a, 1, n, SUBSEP) > curfile\n    }\n}\n\n\nAn important thing to note is the use of the \u2018>\u2019 redirection. Output done with \u2018>\u2019 only opens the file once; it stays open and\nsubsequent output is appended to the file (see Redirecting Output of print and printf [Redirection.html]). This makes it easy to\nmix program text and explanatory prose for the same sample source file (as has been done here!) without any hassle. The file is\nonly closed when a new data file name is encountered or at the end of the input file.\n\nWhen a new file name is encountered, instead of closing the file, the program saves the name of the current file in filelist. This\nmakes it possible to interleave the code for more than one file in the Texinfo input file. (Previous versions of this program did\nclose the file. But because of the \u2018>\u2019 redirection, a file whose parts were not all one after the other ended up getting\nclobbered.) An END rule then closes all the open files when processing is finished:\n\nEND {\n    close(curfile)          # close the last one\n    for (f in filelist)     # close all the rest\n        close(f)\n}\n\n\nFinally, the function unexpected_eof() prints an appropriate error message and then exits:\n\nfunction unexpected_eof()\n{\n    printf(\"extract: %s:%d: unexpected EOF or error\\n\",\n                     FILENAME, FNR) > \"/dev/stderr\"\n    exit 1\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: A Simple Stream Editor [Simple-Sed.html], Previous: Removing Duplicates from Unsorted Text [History-Sorting.html], Up: A\nGrab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2396d0fe-bdfc-440b-91ad-2dc3c8afd843", "embedding": null, "doc_hash": "9a20fc51ef9c3744a416204ea96ff25e7472ad02a79954219fe11f26e32c769b", "extra_info": null, "node_info": {"start": 6232, "end": 8417, "_node_type": "1"}, "relationships": {"1": "7521c9d7-6759-47ef-a62a-76aa91f83931", "2": "afb73ac9-c63b-4961-ba2f-66c889fbec1a"}}, "__type__": "1"}, "d74dea6b-0288-4026-8088-2fe78e893e70": {"__data__": {"text": "Next: Contents of the gawk Distribution [Distribution-contents.html], Previous: Getting the gawk Distribution [Getting.html], Up:\nThe gawk Distribution [Gawk-Distribution.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.1.2 EXTRACTING THE DISTRIBUTION\n\ngawk is distributed as several tar files compressed with different compression programs: gzip, bzip2, and xz. For simplicity, the\nrest of these instructions assume you are using the one compressed with the GNU Gzip program (gzip).\n\nOnce you have the distribution (e.g., gawk-5.2.2.tar.gz), use gzip to expand the file and then use tar to extract it. You can use\nthe following pipeline to produce the gawk distribution:\n\ngzip -d -c gawk-5.2.2.tar.gz | tar -xvpf -\n\n\nOn a system with GNU tar, you can let tar do the decompression for you:\n\ntar -xvpzf gawk-5.2.2.tar.gz\n\n\nExtracting the archive creates a directory named gawk-5.2.2 in the current directory.\n\nThe distribution file name is of the form gawk-V.R.P.tar.gz. The V represents the major version of gawk, the R represents the\ncurrent release of version V, and the P represents a patch level, meaning that minor bugs have been fixed in the release. The\ncurrent patch level is 2, but when retrieving distributions, you should get the version with the highest version, release, and\npatch level. (Note, however, that patch levels greater than or equal to 60 denote \u201cbeta\u201d or nonproduction software; you might not\nwant to retrieve such a version unless you don\u2019t mind experimenting.) If you are not on a Unix or GNU/Linux system, you need to\nmake other arrangements for getting and extracting the gawk distribution. You should consult a local expert.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Contents of the gawk Distribution [Distribution-contents.html], Previous: Getting the gawk Distribution [Getting.html], Up:\nThe gawk Distribution [Gawk-Distribution.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d74dea6b-0288-4026-8088-2fe78e893e70", "embedding": null, "doc_hash": "ac9fff6e9fdce958f1dbec77c5a953df2e098eb923c135282935fb7ba5112c04", "extra_info": null, "node_info": {"start": 0, "end": 2174, "_node_type": "1"}, "relationships": {"1": "fd357d15-6e69-47bc-8a3c-9076059ca1aa"}}, "__type__": "1"}, "7f502ac9-71cd-4c7f-a917-967396de942d": {"__data__": {"text": "Next: Arbitrary-Precision Integer Arithmetic with gawk [Arbitrary-Precision-Integers.html], Previous: Arbitrary-Precision\nArithmetic Features in gawk [MPFR-features.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.4 FLOATING-POINT ARITHMETIC: CAVEAT EMPTOR!\n\n> Math class is tough!\n\n\u2014 Teen Talk Barbie, July 1992\n\nThis section provides a high-level overview of the issues involved when doing lots of floating-point arithmetic.98 The discussion\napplies to both hardware and arbitrary-precision floating-point arithmetic.\n\n> CAUTION: The material here is purposely general. If you need to do serious computer arithmetic, you should do some research\n> first, and not rely just on what we tell you.\n\n * Floating-Point Arithmetic Is Not Exact [Inexactness-of-computations.html]\n * Getting the Accuracy You Need [Getting-Accuracy.html]\n * Try a Few Extra Bits of Precision and Rounding [Try-To-Round.html]\n * Setting the Precision [Setting-precision.html]\n * Setting the Rounding Mode [Setting-the-rounding-mode.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(98)\n\nThere is a very nice paper on floating-point arithmetic [http://www.validlab.com/goldberg/paper.pdf] by David Goldberg, \u201cWhat\nEvery Computer Scientist Should Know About Floating-Point Arithmetic,\u201d ACM Computing Surveys 23, 1 (1991-03): 5-48. This is worth\nreading if you are interested in the details, but it does require a background in computer science.", "doc_id": "7f502ac9-71cd-4c7f-a917-967396de942d", "embedding": null, "doc_hash": "d961d77fd55e4a67772cc9abbc0d920e009a5262d96dc0f6dca016350477be80", "extra_info": null, "node_info": {"start": 0, "end": 1769, "_node_type": "1"}, "relationships": {"1": "39f75cde-83ff-4fd0-85c6-9cb2f4dec03b"}}, "__type__": "1"}, "c102ca41-67b1-4fbc-b8ba-a7bc353bb4ce": {"__data__": {"text": "Previous: More on CSV Files [More-CSV.html], Up: Defining Fields by Content [Splitting-By-Content.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.7.2 FS VERSUS FPAT: A SUBTLE DIFFERENCE\n\nAs we discussed earlier, FS describes the data between fields (\u201cwhat fields are not\u201d) and FPAT describes the fields themselves\n(\u201cwhat fields are\u201d). This leads to a subtle difference in how fields are found when using regexps as the value for FS or FPAT.\n\nIn order to distinguish one field from another, there must be a non-empty separator between each field. This makes intuitive\nsense\u2014otherwise one could not distinguish fields from separators.\n\nThus, regular expression matching as done when splitting fields with FS is not allowed to match the null string; it must always\nmatch at least one character, in order to be able to proceed through the entire record.\n\nOn the other hand, regular expression matching with FPAT can match the null string, and the non-matching intervening characters\nfunction as the separators.\n\nThis same difference is reflected in how matching is done with the split() and patsplit() functions (see String-Manipulation\nFunctions [String-Functions.html]).", "doc_id": "c102ca41-67b1-4fbc-b8ba-a7bc353bb4ce", "embedding": null, "doc_hash": "5887de89413b21bacdb0c5eca319ee1c72af86e5e24f9e57f0cb6f8e737e13af", "extra_info": null, "node_info": {"start": 0, "end": 1320, "_node_type": "1"}, "relationships": {"1": "a337ee94-e861-46c6-a977-4b1d27207607"}}, "__type__": "1"}, "bc17cdb9-0dba-4e5b-9e0b-bc06f2b175d1": {"__data__": {"text": "Next: Common Extensions Summary [Common-Extensions.html], Previous: Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html], Up:\nThe Evolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.6 HISTORY OF GAWK FEATURES\n\nThis section describes the features in gawk over and above those in POSIX awk, in the order they were added to gawk.\n\nVersion 2.10 of gawk introduced the following features:\n\n * \n * The AWKPATH environment variable for specifying a path search for the -f command-line option (see Command-Line Options\n   [Options.html]).\n * The IGNORECASE variable and its effects (see Case Sensitivity in Matching [Case_002dsensitivity.html]).\n * The /dev/stdin, /dev/stdout, /dev/stderr and /dev/fd/N special file names (see Special File names in gawk\n   [Special-Files.html]).\n\nVersion 2.13 of gawk introduced the following features:\n\n * The FIELDWIDTHS variable and its effects (see Reading Fixed-Width Data [Constant-Size.html]).\n * The systime() and strftime() built-in functions for obtaining and printing timestamps (see Time Functions\n   [Time-Functions.html]).\n * Additional command-line options (see Command-Line Options [Options.html]):\n   * The -W lint option to provide error and portability checking for both the source code and at runtime.\n   * The -W compat option to turn off the GNU extensions.\n   * The -W posix option for full POSIX compliance.\n\nVersion 2.14 of gawk introduced the following feature:\n\n * The next file statement for skipping to the next data file (see The nextfile Statement [Nextfile-Statement.html]).\n\nVersion 2.15 of gawk introduced the following features:\n\n * New variables (see Predefined Variables [Built_002din-Variables.html]):\n   * ARGIND, which tracks the movement of FILENAME through ARGV.\n   * ERRNO, which contains the system error message when getline returns \u22121 or close() fails.\n * The /dev/pid, /dev/ppid, /dev/pgrpid, and /dev/user special file names. These have since been removed.\n * The ability to delete all of an array at once with \u2018delete array\u2019 (see The delete Statement [Delete.html]).\n * Command-line option changes (see Command-Line Options [Options.html]):\n   * The ability to use GNU-style long-named options that start with --.\n   * The --source option for mixing command-line and library-file source code.\n\nVersion 3.0 of gawk introduced the following features:\n\n * New or changed variables:\n   * IGNORECASE changed, now applying to string comparison as well as regexp operations (see Case Sensitivity in Matching\n     [Case_002dsensitivity.html]).\n   * RT, which contains the input text that matched RS (see How Input Is Split into Records [Records.html]).\n * Full support for both POSIX and GNU regexps (see Regular Expressions [Regexp.html]).\n * The gensub() function for more powerful text manipulation (see String-Manipulation Functions [String-Functions.html]).\n * The strftime() function acquired a default time format, allowing it to be called with no arguments (see Time Functions\n   [Time-Functions.html]).\n * The ability for FS and for the third argument to split() to be null strings (see Making Each Character a Separate Field\n   [Single-Character-Fields.html]).\n * The ability for RS to be a regexp (see How Input Is Split into Records [Records.html]).\n * The next file statement became nextfile (see The nextfile Statement [Nextfile-Statement.html]).\n * The fflush() function from BWK awk (then at Bell Laboratories; see Input/Output Functions [I_002fO-Functions.html]).\n * New command-line options:\n   * The --lint-old option to", "doc_id": "bc17cdb9-0dba-4e5b-9e0b-bc06f2b175d1", "embedding": null, "doc_hash": "4aabe71b7003f87e0232d9fa10c6c613ce205e849aef5edaa9e42fe64d9914ec", "extra_info": null, "node_info": {"start": 0, "end": 3708, "_node_type": "1"}, "relationships": {"1": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8", "3": "aeb573f6-5f1a-425e-bad5-34c4ea637293"}}, "__type__": "1"}, "aeb573f6-5f1a-425e-bad5-34c4ea637293": {"__data__": {"text": "* New command-line options:\n   * The --lint-old option to warn about constructs that are not available in the original Version 7 Unix version of awk (see\n     Major Changes Between V7 and SVR3.1 [V7_002fSVR3_002e1.html]).\n   * The -m option from BWK awk. (Brian was still at Bell Laboratories at the time.) This was later removed from both his awk and\n     from gawk.\n   * The --re-interval option to provide interval expressions in regexps (see Regular Expression Operators\n     [Regexp-Operators.html]).\n   * The --traditional option was added as a better name for --compat (see Command-Line Options [Options.html]).\n * The use of GNU Autoconf to control the configuration process (see Compiling gawk for Unix-Like Systems\n   [Quick-Installation.html]).\n * Amiga support. This has since been removed.\n\nVersion 3.1 of gawk introduced the following features:\n\n * New variables (see Predefined Variables [Built_002din-Variables.html]):\n   * BINMODE, for non-POSIX systems, which allows binary I/O for input and/or output files (see Using gawk on PC Operating Systems\n     [PC-Using.html]).\n   * LINT, which dynamically controls lint warnings.\n   * PROCINFO, an array for providing process-related information.\n   * TEXTDOMAIN, for setting an application\u2019s internationalization text domain (see Internationalization with gawk\n     [Internationalization.html]).\n * The ability to use octal and hexadecimal constants in awk program source code (see Octal and Hexadecimal Numbers\n   [Nondecimal_002dnumbers.html]).\n * The \u2018|&\u2019 operator for two-way I/O to a coprocess (see Two-Way Communications with Another Process [Two_002dway-I_002fO.html]).\n * The /inet special files for TCP/IP networking using \u2018|&\u2019 (see Using gawk for Network Programming [TCP_002fIP-Networking.html]).\n * The optional second argument to close() that allows closing one end of a two-way pipe to a coprocess (see Two-Way\n   Communications with Another Process [Two_002dway-I_002fO.html]).\n * The optional third argument to the match() function for capturing text-matching subexpressions within a regexp (see\n   String-Manipulation Functions [String-Functions.html]).\n * Positional specifiers in printf formats for making translations easier (see Rearranging printf Arguments\n   [Printf-Ordering.html]).\n * A number of new built-in functions:\n   * The asort() and asorti() functions for sorting arrays (see Controlling Array Traversal and Array Sorting\n     [Array-Sorting.html]).\n   * The bindtextdomain(), dcgettext() and dcngettext() functions for internationalization (see Internationalizing awk Programs\n     [Programmer-i18n.html]).\n   * The extension() function and the ability to add new built-in functions dynamically. This has seen removed. It was replaced by\n     the new extension mechanism. See Writing Extensions for gawk [Dynamic-Extensions.html].\n   * The mktime() function for creating timestamps (see Time Functions [Time-Functions.html]).\n   * The and(), or(), xor(), compl(), lshift(), rshift(), and strtonum() functions (see Bit-Manipulation Functions\n     [Bitwise-Functions.html]).\n * The support for \u2018next file\u2019 as two words was removed completely (see The nextfile Statement [Nextfile-Statement.html]).\n * Additional command-line options (see Command-Line Options [Options.html]):\n   * The --dump-variables option to print a list of all global variables.\n   * The --exec option, for use in CGI scripts.\n   * The --gen-po command-line option and the use of a", "doc_id": "aeb573f6-5f1a-425e-bad5-34c4ea637293", "embedding": null, "doc_hash": "6cb43791cb10dc598918aadccd5722c171ee558ede4bee9f40afd574c8c8df34", "extra_info": null, "node_info": {"start": 3662, "end": 7110, "_node_type": "1"}, "relationships": {"1": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8", "2": "bc17cdb9-0dba-4e5b-9e0b-bc06f2b175d1", "3": "96a4fa6b-8f08-4ece-95d9-89c085259679"}}, "__type__": "1"}, "96a4fa6b-8f08-4ece-95d9-89c085259679": {"__data__": {"text": "scripts.\n   * The --gen-po command-line option and the use of a leading underscore to mark strings that should be translated (see\n     Extracting Marked Strings [String-Extraction.html]).\n   * The --non-decimal-data option to allow non-decimal input data (see Allowing Nondecimal Input Data [Nondecimal-Data.html]).\n   * The --profile option and pgawk, the profiling version of gawk, for producing execution profiles of awk programs (see\n     Profiling Your awk Programs [Profiling.html]).\n   * The --use-lc-numeric option to force gawk to use the locale\u2019s decimal point for parsing input data (see Conversion of Strings\n     and Numbers [Conversion.html]).\n * The use of GNU Automake to help in standardizing the configuration process (see Compiling gawk for Unix-Like Systems\n   [Quick-Installation.html]).\n * The use of GNU gettext for gawk\u2019s own message output (see gawk Can Speak Your Language [Gawk-I18N.html]).\n * BeOS support. This was later removed.\n * Tandem support. This was later removed.\n * The Atari port became officially unsupported and was later removed entirely.\n * The source code changed to use ISO C standard-style function definitions.\n * POSIX compliance for sub() and gsub() (see More about \u2018\\\u2019 and \u2018&\u2019 with sub(), gsub(), and gensub() [Gory-Details.html]).\n * The length() function was extended to accept an array argument and return the number of elements in the array (see\n   String-Manipulation Functions [String-Functions.html]).\n * The strftime() function acquired a third argument to enable printing times as UTC (see Time Functions [Time-Functions.html]).\n\nVersion 4.0 of gawk introduced the following features:\n\n * Variable additions:\n   * FPAT, which allows you to specify a regexp that matches the fields, instead of matching the field separator (see Defining\n     Fields by Content [Splitting-By-Content.html]).\n   * If PROCINFO[\"sorted_in\"] exists, \u2018for (iggy in foo)\u2019 loops sort the indices before looping over them. The value of this\n     element provides control over how the indices are sorted before the loop traversal starts (see Using Predefined Array\n     Scanning Orders with gawk [Controlling-Scanning.html]).\n   * PROCINFO[\"strftime\"], which holds the default format for strftime() (see Time Functions [Time-Functions.html]).\n * The special files /dev/pid, /dev/ppid, /dev/pgrpid and /dev/user were removed.\n * Support for IPv6 was added via the /inet6 special file. /inet4 forces IPv4 and /inet chooses the system default, which is\n   probably IPv4 (see Using gawk for Network Programming [TCP_002fIP-Networking.html]).\n * The use of \u2018\\s\u2019 and \u2018\\S\u2019 escape sequences in regular expressions (see gawk-Specific Regexp Operators\n   [GNU-Regexp-Operators.html]).\n * Interval expressions became part of default regular expressions (see Regular Expression Operators [Regexp-Operators.html]).\n * POSIX character classes work even with --traditional (see Regular Expression Operators [Regexp-Operators.html]).\n * break and continue became invalid outside a loop, even with --traditional (see The break Statement [Break-Statement.html], and\n   also see The continue Statement [Continue-Statement.html]).\n * fflush(), nextfile, and \u2018delete array\u2019 are allowed if --posix or --traditional, since they are all now part of POSIX.\n * An optional third argument to asort() and asorti(), specifying how to sort (see String-Manipulation Functions\n   [String-Functions.html]).\n * The behavior of fflush() changed to match BWK awk and for POSIX; now both \u2018fflush()\u2019 and", "doc_id": "96a4fa6b-8f08-4ece-95d9-89c085259679", "embedding": null, "doc_hash": "70764b55faf44f02f18dd91c8cbf942a8e54d4290da8e51f598924bc55ff542a", "extra_info": null, "node_info": {"start": 7107, "end": 10604, "_node_type": "1"}, "relationships": {"1": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8", "2": "aeb573f6-5f1a-425e-bad5-34c4ea637293", "3": "9b20e937-c179-4e11-9d06-bc9a72e7ce7b"}}, "__type__": "1"}, "9b20e937-c179-4e11-9d06-bc9a72e7ce7b": {"__data__": {"text": "match BWK awk and for POSIX; now both \u2018fflush()\u2019 and \u2018fflush(\"\")\u2019 flush all open output\n   redirections (see Input/Output Functions [I_002fO-Functions.html]).\n * The isarray() function which distinguishes if an item is an array or not, to make it possible to traverse arrays of arrays (see\n   Getting Type Information [Type-Functions.html]).\n * The patsplit() function which gives the same capability as FPAT, for splitting (see String-Manipulation Functions\n   [String-Functions.html]).\n * An optional fourth argument to the split() function, which is an array to hold the values of the separators (see\n   String-Manipulation Functions [String-Functions.html]).\n * Arrays of arrays (see Arrays of Arrays [Arrays-of-Arrays.html]).\n * The BEGINFILE and ENDFILE special patterns (see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]).\n * Indirect function calls (see Indirect Function Calls [Indirect-Calls.html]).\n * switch / case are enabled by default (see The switch Statement [Switch-Statement.html]).\n * Command-line option changes (see Command-Line Options [Options.html]):\n   * The -b and --characters-as-bytes options which prevent gawk from treating input as a multibyte string.\n   * The redundant --compat, --copyleft, and --usage long options were removed.\n   * The --gen-po option was finally renamed to the correct --gen-pot.\n   * The --sandbox option which disables certain features.\n   * All long options acquired corresponding short options, for use in \u2018#!\u2019 scripts.\n * Directories named on the command line now produce a warning, not a fatal error, unless --posix or --traditional are used (see\n   Directories on the Command Line [Command_002dline-directories.html]).\n * The gawk internals were rewritten, bringing the dgawk debugger and possibly improved performance (see Debugging awk Programs\n   [Debugger.html]).\n * Per the GNU Coding Standards, dynamic extensions must now define a global symbol indicating that they are GPL-compatible (see\n   Extension Licensing [Plugin-License.html]).\n * In POSIX mode, string comparisons use strcoll() / wcscoll() (see String Comparison Based on Locale Collating Order\n   [POSIX-String-Comparison.html]).\n * The option for raw sockets was removed, since it was never implemented (see Using gawk for Network Programming\n   [TCP_002fIP-Networking.html]).\n * Ranges of the form \u2018[d-h]\u2019 are treated as if they were in the C locale, no matter what kind of regexp is being used, and even\n   if --posix (see Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html]).\n * Support was removed for the following systems:\n   * Atari\n   * Amiga\n   * BeOS\n   * Cray\n   * MIPS RiscOS\n   * MS-DOS with the Microsoft Compiler\n   * MS-Windows with the Microsoft Compiler\n   * NeXT\n   * SunOS 3.x, Sun 386 (Road Runner)\n   * Tandem (non-POSIX)\n   * Prestandard VAX C compiler for VAX/VMS\n\nVersion 4.1 of gawk introduced the following features:\n\n * Three new arrays: SYMTAB, FUNCTAB, and PROCINFO[\"identifiers\"] (see Built-in Variables That Convey Information\n   [Auto_002dset.html]).\n * The three executables gawk, pgawk, and dgawk, were merged into one, named just gawk. As a result the command-line options\n   changed.\n * Command-line option changes (see Command-Line Options [Options.html]):\n   * The -D option invokes the debugger.\n   * The -i and --include options load awk library", "doc_id": "9b20e937-c179-4e11-9d06-bc9a72e7ce7b", "embedding": null, "doc_hash": "0f85036a89c809eafa494736ef05c069519ab33967d6b971b8668f7eedd445cf", "extra_info": null, "node_info": {"start": 10613, "end": 13974, "_node_type": "1"}, "relationships": {"1": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8", "2": "96a4fa6b-8f08-4ece-95d9-89c085259679", "3": "a7eb74e6-5e52-4f72-a3ca-012bbd68774a"}}, "__type__": "1"}, "a7eb74e6-5e52-4f72-a3ca-012bbd68774a": {"__data__": {"text": "invokes the debugger.\n   * The -i and --include options load awk library files.\n   * The -l and --load options load compiled dynamic extensions.\n   * The -M and --bignum options enable MPFR.\n   * The -o option only does pretty-printing.\n   * The -p option is used for profiling.\n   * The -R option was removed.\n * Support for high precision arithmetic with MPFR (see Arithmetic and Arbitrary-Precision Arithmetic with gawk\n   [Arbitrary-Precision-Arithmetic.html]).\n * The and(), or() and xor() functions changed to allow any number of arguments, with a minimum of two (see Bit-Manipulation\n   Functions [Bitwise-Functions.html]).\n * The dynamic extension interface was completely redone (see Writing Extensions for gawk [Dynamic-Extensions.html]).\n * Redirected getline became allowed inside BEGINFILE and ENDFILE (see The BEGINFILE and ENDFILE Special Patterns\n   [BEGINFILE_002fENDFILE.html]).\n * Support for nonfatal I/O (see Enabling Nonfatal Output [Nonfatal.html]).\n * The where command was added to the debugger (see Working with the Stack [Execution-Stack.html]).\n * Support for Ultrix was removed.\n\nVersion 4.2 of gawk introduced the following changes:\n\n * Changes to ENVIRON are reflected into gawk\u2019s environment and that of programs that it runs. See Built-in Variables That Convey\n   Information [Auto_002dset.html].\n * FIELDWIDTHS was enhanced to allow skipping characters before assigning a value to a field (see Defining Fields by Content\n   [Splitting-By-Content.html]).\n * The PROCINFO[\"argv\"] array. See Built-in Variables That Convey Information [Auto_002dset.html].\n * The maximum number of hexadecimal digits in \u2018\\x\u2019 escapes is now two. See Escape Sequences [Escape-Sequences.html].\n * Strongly typed regexp constants of the form \u2018@/\u2026/\u2019 (see Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]).\n * The bitwise functions changed, making negative arguments into a fatal error (see Bit-Manipulation Functions\n   [Bitwise-Functions.html]).\n * The mktime() function now accepts an optional second argument (see Time Functions [Time-Functions.html]).\n * The typeof() function (see Getting Type Information [Type-Functions.html]).\n * Optimizations are enabled by default. Use -s / --no-optimize to disable optimizations.\n * For many years, POSIX specified that default field splitting only allowed spaces and tabs to separate fields, and this was how\n   gawk behaved with --posix. As of 2013, the standard restored historical behavior, and now default field splitting with --posix\n   also allows newlines to separate fields.\n * Nonfatal output with print and printf. See Enabling Nonfatal Output [Nonfatal.html].\n * Retryable I/O via PROCINFO[input-file, \"RETRY\"]; (see Retrying Reads After Certain Input Errors [Retrying-Input.html]).\n * Changes to the pretty-printer (see Profiling Your awk Programs [Profiling.html]):\n   * The --pretty-print option no longer runs the awk program too.\n   * Comments in the source program are preserved and placed into the output file.\n   * Explicit parentheses for expressions in the input are preserved in the generated output.\n * Improvements to the extension API (see Writing Extensions for gawk [Dynamic-Extensions.html]):\n   * The get_file() function to access open redirections.\n   * The nonfatal() function for generating nonfatal error messages.\n   * Support for GMP and MPFR values.\n   * Input parsers can now override the default field parsing mechanism by specifying explicit locations.\n * Shell startup files are supplied with the distribution and installed by \u2018make install\u2019 (see Shell Startup Files\n  ", "doc_id": "a7eb74e6-5e52-4f72-a3ca-012bbd68774a", "embedding": null, "doc_hash": "ae538ce228d593b13bd513141bc76fa2aede43cb2726b2760d2af0b70c1b86b3", "extra_info": null, "node_info": {"start": 13959, "end": 17537, "_node_type": "1"}, "relationships": {"1": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8", "2": "9b20e937-c179-4e11-9d06-bc9a72e7ce7b", "3": "7c33e08c-d449-4277-87ca-9aa177e2d592"}}, "__type__": "1"}, "7c33e08c-d449-4277-87ca-9aa177e2d592": {"__data__": {"text": "distribution and installed by \u2018make install\u2019 (see Shell Startup Files\n   [Shell-Startup-Files.html]).\n * The igawk program and its manual page are no longer installed when gawk is built. See An Easy Way to Use Library Functions\n   [Igawk-Program.html].\n * Support for MirBSD was removed.\n * Support for GNU/Linux on Alpha was removed.\n\nVersion 5.0 added the following features:\n\n * The PROCINFO[\"platform\"] array element, which allows you to write code that takes the operating system / platform into account.\n\nVersion 5.1 was created to release gawk with a correct major version number for the API. This was overlooked for version 5.0,\nunfortunately. It added the following features:\n\n * The index for this manual was completely reworked.\n * Support was added for MSYS2.\n * asort() and asorti() were changed to allow FUNCTAB and SYMTAB as the first argument if a second destination array is supplied\n   (see String-Manipulation Functions [String-Functions.html]).\n * The -I/--trace options were added to print a trace of the byte codes as they execute (see Command-Line Options [Options.html]).\n * $0 and the fields are now cleared before starting a BEGINFILE rule (see The BEGINFILE and ENDFILE Special Patterns\n   [BEGINFILE_002fENDFILE.html]).\n * Several example programs in the manual were updated to their modern POSIX equivalents.\n * The \u201cno effect\u201d lint warnings from --lint were fixed up and now behave more sanely (see Command-Line Options [Options.html]).\n * Handling of Infinity and NaN values were improved. See Other Stuff to Know [Math-Definitions.html], and also see Standards\n   Versus Existing Practice [POSIX-Floating-Point-Problems.html].\n\nVersion 5.2 added the following features:\n\n * The mkbool() built-in function (see Generating Boolean Values [Boolean-Functions.html]).\n * Interval expressions in regular expressions are enabled by default (see Some Notes On Interval Expressions\n   [Interval-Expressions.html]).\n * Support for the FNV1-A hash algorithm for its hash function (see Other Environment Variables\n   [Other-Environment-Variables.html]).\n * The gawkbug script for reporting bugs (see Submitting Bug Reports [Bug-address.html]).\n * Terence Kelly\u2019s persistent memory allocator (PMA) was added, allowing the use of persistent data on certain systems (see\n   Preserving Data Between Runs [Persistent-Memory.html]).\n * PROCINFO[\"pma\"] exists if the PMA allocator is compiled in (see Built-in Variables That Convey Information\n   [Auto_002dset.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Common Extensions Summary [Common-Extensions.html], Previous: Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html], Up:\nThe Evolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7c33e08c-d449-4277-87ca-9aa177e2d592", "embedding": null, "doc_hash": "ad550f93a0c90e884ff0ae5f028fc5a731371cdc9b7d5d0a47e90c39cb0d7d36", "extra_info": null, "node_info": {"start": 17524, "end": 20385, "_node_type": "1"}, "relationships": {"1": "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8", "2": "a7eb74e6-5e52-4f72-a3ca-012bbd68774a"}}, "__type__": "1"}, "a8a8fe34-2aee-4354-8e75-378e1956169e": {"__data__": {"text": "Next: Reading Fixed-Width Data [Constant-Size.html], Previous: Changing the Contents of a Field [Changing-Fields.html], Up:\nReading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.5 SPECIFYING HOW FIELDS ARE SEPARATED\n\nThe field separator, which is either a single character or a regular expression, controls the way awk splits an input record into\nfields. awk scans the input record for character sequences that match the separator; the fields themselves are the text between\nthe matches.\n\nIn the examples that follow, we use the bullet symbol (\u2022) to represent spaces in the output. If the field separator is \u2018oo\u2019, then\nthe following line:\n\nmoo goo gai pan\n\n\nis split into three fields: \u2018m\u2019, \u2018\u2022g\u2019, and \u2018\u2022gai\u2022pan\u2019. Note the leading spaces in the values of the second and third fields.\n\nThe field separator is represented by the predefined variable FS. Shell programmers take note: awk does not use the name IFS that\nis used by the POSIX-compliant shells (such as the Unix Bourne shell, sh, or Bash).\n\nThe value of FS can be changed in the awk program with the assignment operator, \u2018=\u2019 (see Assignment Expressions\n[Assignment-Ops.html]). Often, the right time to do this is at the beginning of execution before any input has been processed, so\nthat the very first record is read with the proper separator. To do this, use the special BEGIN pattern (see The BEGIN and END\nSpecial Patterns [BEGIN_002fEND.html]). For example, here we set the value of FS to the string \",\":\n\nawk 'BEGIN { FS = \",\" } ; { print $2 }'\n\n\nGiven the input line:\n\nJohn Q. Smith, 29 Oak St., Walamazoo, MI 42139\n\n\nthis awk program extracts and prints the string \u2018\u202229\u2022Oak\u2022St.\u2019.\n\nSometimes the input data contains separator characters that don\u2019t separate fields the way you thought they would. For instance,\nthe person\u2019s name in the example we just used might have a title or suffix attached, such as:\n\nJohn Q. Smith, LXIX, 29 Oak St., Walamazoo, MI 42139\n\n\nThe same program would extract \u2018\u2022LXIX\u2019 instead of \u2018\u202229\u2022Oak\u2022St.\u2019. If you were expecting the program to print the address, you would\nbe surprised. The moral is to choose your data layout and separator characters carefully to prevent such problems. (If the data is\nnot in a form that is easy to process, perhaps you can massage it first with a separate awk program.)\n\n * Whitespace Normally Separates Fields [Default-Field-Splitting.html]\n * Using Regular Expressions to Separate Fields [Regexp-Field-Splitting.html]\n * Making Each Character a Separate Field [Single-Character-Fields.html]\n * Setting FS from the Command Line [Command-Line-Field-Separator.html]\n * Making the Full Line Be a Single Field [Full-Line-Fields.html]\n * Field-Splitting Summary [Field-Splitting-Summary.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reading Fixed-Width Data [Constant-Size.html], Previous: Changing the Contents of a Field [Changing-Fields.html], Up:\nReading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a8a8fe34-2aee-4354-8e75-378e1956169e", "embedding": null, "doc_hash": "7e33f214676037d6754f05f1d81ef182ceac9e08543501731854998672d4be99", "extra_info": null, "node_info": {"start": 0, "end": 3246, "_node_type": "1"}, "relationships": {"1": "9a52ae33-d8c2-4345-971c-e027d78d6572"}}, "__type__": "1"}, "bdf60020-de77-4c6a-af15-91135247ce28": {"__data__": {"text": "Previous: Making the Full Line Be a Single Field [Full-Line-Fields.html], Up: Specifying How Fields Are Separated\n[Field-Separators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.5.6 FIELD-SPLITTING SUMMARY\n\nIt is important to remember that when you assign a string constant as the value of FS, it undergoes normal awk string processing.\nFor example, with Unix awk and gawk, the assignment \u2018FS = \"\\..\"\u2019 assigns the character string \"..\" to FS (the backslash is\nstripped). This creates a regexp meaning \u201cfields are separated by occurrences of any two characters.\u201d If instead you want fields\nto be separated by a literal period followed by any single character, use \u2018FS = \"\\\\..\"\u2019.\n\nThe following list summarizes how fields are split, based on the value of FS (\u2018==\u2019 means \u201cis equal to\u201d):\n\nFS == \" \"\n\nFields are separated by runs of whitespace. Leading and trailing whitespace are ignored. This is the default.\n\nFS == any other single character\n\nFields are separated by each occurrence of the character. Multiple successive occurrences delimit empty fields, as do leading and\ntrailing occurrences. The character can even be a regexp metacharacter; it does not need to be escaped.\n\nFS == regexp\n\nFields are separated by occurrences of characters that match regexp. Leading and trailing matches of regexp delimit empty fields.\n\nFS == \"\"\n\nEach individual character in the record becomes a separate field. (This is a common extension; it is not specified by the POSIX\nstandard.)\n\nFS and IGNORECASE\n\nThe IGNORECASE variable (see Built-in Variables That Control awk [User_002dmodified.html]) affects field splitting only when the\nvalue of FS is a regexp. It has no effect when FS is a single character, even if that character is a letter. Thus, in the\nfollowing code:\n\nFS = \"c\"\nIGNORECASE = 1\n$0 = \"aCa\"\nprint $1\n\n\nThe output is \u2018aCa\u2019. If you really want to split fields on an alphabetic character while ignoring case, use a regexp that will do\nit for you (e.g., \u2018FS = \"[c]\"\u2019). In this case, IGNORECASE will take effect.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Making the Full Line Be a Single Field [Full-Line-Fields.html], Up: Specifying How Fields Are Separated\n[Field-Separators.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "bdf60020-de77-4c6a-af15-91135247ce28", "embedding": null, "doc_hash": "02bfcc16abbc756dceda9a4e87571217d0b698932060c93c0f6384ce038d0467", "extra_info": null, "node_info": {"start": 0, "end": 2493, "_node_type": "1"}, "relationships": {"1": "9083eb9c-0989-4bb2-b3fa-9f02fbc6acf2"}}, "__type__": "1"}, "c2684062-76f8-44b5-b323-85004de742f0": {"__data__": {"text": "Previous: Capturing Optional Trailing Data [Allowing-trailing-data.html], Up: Reading Fixed-Width Data [Constant-Size.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.6.4 FIELD VALUES WITH FIXED-WIDTH DATA\n\nSo far, so good. But what happens if there isn\u2019t as much data as there should be based on the contents of FIELDWIDTHS? Or, what\nhappens if there is more data than expected?\n\nFor many years, what happens in these cases was not well defined. Starting with version 4.2, the rules are as follows:\n\nEnough data for some fields\n\nFor example, if FIELDWIDTHS is set to \"2 3 4\" and the input record is \u2018aabbb\u2019. In this case, NF is set to two.\n\nNot enough data for a field\n\nFor example, if FIELDWIDTHS is set to \"2 3 4\" and the input record is \u2018aab\u2019. In this case, NF is set to two and $2 has the value\n\"b\". The idea is that even though there aren\u2019t as many characters as were expected, there are some, so the data should be made\navailable to the program.\n\nToo much data\n\nFor example, if FIELDWIDTHS is set to \"2 3 4\" and the input record is \u2018aabbbccccddd\u2019. In this case, NF is set to three and the\nextra characters (\u2018ddd\u2019) are ignored. If you want gawk to capture the extra characters, supply a final \u2018*\u2019 in the value of\nFIELDWIDTHS.\n\nToo much data, but with \u2018*\u2019 supplied\n\nFor example, if FIELDWIDTHS is set to \"2 3 4 *\" and the input record is \u2018aabbbccccddd\u2019. In this case, NF is set to four, and $4\nhas the value \"ddd\".\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Capturing Optional Trailing Data [Allowing-trailing-data.html], Up: Reading Fixed-Width Data [Constant-Size.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c2684062-76f8-44b5-b323-85004de742f0", "embedding": null, "doc_hash": "1f5f39db082514dcb7d7af7bab80b69976abc09c4364b02f12348c02b886b1ef", "extra_info": null, "node_info": {"start": 0, "end": 1886, "_node_type": "1"}, "relationships": {"1": "82a26f48-f338-46e1-ab78-77aba2d98c7b"}}, "__type__": "1"}, "6707f1a7-2a0d-47cb-b471-fb984b6fd7e6": {"__data__": {"text": "Next: Nonconstant Field Numbers [Nonconstant-Fields.html], Previous: How Input Is Split into Records [Records.html], Up: Reading\nInput Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.2 EXAMINING FIELDS\n\nWhen awk reads an input record, the record is automatically parsed or separated by the awk utility into chunks called fields. By\ndefault, fields are separated by whitespace, like words in a line. Whitespace in awk means any string of one or more spaces, TABs,\nor newlines; other characters that are considered whitespace by other languages (such as formfeed, vertical tab, etc.) are not\nconsidered whitespace by awk.\n\nThe purpose of fields is to make it more convenient for you to refer to these pieces of the record. You don\u2019t have to use them\u2014you\ncan operate on the whole record if you want\u2014but fields are what make simple awk programs so powerful.\n\nYou use a dollar sign (\u2018$\u2019) to refer to a field in an awk program, followed by the number of the field you want. Thus, $1 refers\nto the first field, $2 to the second, and so on. (Unlike in the Unix shells, the field numbers are not limited to single digits.\n$127 is the 127th field in the record.) For example, suppose the following is a line of input:\n\nThis seems like a pretty nice example.\n\n\nHere the first field, or $1, is \u2018This\u2019, the second field, or $2, is \u2018seems\u2019, and so on. Note that the last field, $7, is\n\u2018example.\u2019. Because there is no space between the \u2018e\u2019 and the \u2018.\u2019, the period is considered part of the seventh field.\n\nNF is a predefined variable whose value is the number of fields in the current record. awk automatically updates the value of NF\neach time it reads a record. No matter how many fields there are, the last field in a record can be represented by $NF. So, $NF is\nthe same as $7, which is \u2018example.\u2019. If you try to reference a field beyond the last one (such as $8 when the record has only\nseven fields), you get the empty string. (If used in a numeric operation, you get zero.)\n\nThe use of $0, which looks like a reference to the \u201czeroth\u201d field, is a special case: it represents the whole input record. Use it\nwhen you are not interested in specific fields. Here are some more examples:\n\n$ awk '$1 ~ /li/ { print $0 }' mail-list\n-| Amelia       555-5553     amelia.zodiacusque@gmail.com    F\n-| Julie        555-6699     julie.perscrutabor@skeeve.com   F\n\n\nThis example prints each record in the file mail-list whose first field contains the string \u2018li\u2019.\n\nBy contrast, the following example looks for \u2018li\u2019 in the entire record and prints the first and last fields for each matching\ninput record:\n\n$ awk '/li/ { print $1, $NF }' mail-list\n-| Amelia F\n-| Broderick R\n-| Julie F\n-| Samuel A\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Nonconstant Field Numbers [Nonconstant-Fields.html], Previous: How Input Is Split into Records [Records.html], Up: Reading\nInput Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6707f1a7-2a0d-47cb-b471-fb984b6fd7e6", "embedding": null, "doc_hash": "81a5ac739e12ed5eb201b352229181eb5b752c51026a7c18edd501bfe16b199a", "extra_info": null, "node_info": {"start": 0, "end": 3204, "_node_type": "1"}, "relationships": {"1": "aec303e5-bf22-4867-87a2-fff16eb9fabf"}}, "__type__": "1"}, "9f76359e-4bc1-449a-98cb-48d1e0bdad86": {"__data__": {"text": "Next: Checking for Zero-Length Files [Empty-Files.html], Previous: Rereading the Current File [Rewind-Function.html], Up: Data\nfile Management [Data-File-Management.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.3.3 CHECKING FOR READABLE DATA FILES\n\nNormally, if you give awk a data file that isn\u2019t readable, it stops with a fatal error. There are times when you might want to\njust ignore such files and keep going.71 You can do this by prepending the following program to your awk program:\n\n# readable.awk --- library file to skip over unreadable files\n\nBEGIN {\n    for (i = 1; i < ARGC; i++) {\n        if (ARGV[i] ~ /^[a-zA-Z_][a-zA-Z0-9_]*=.*/ \\\n            || ARGV[i] == \"-\" || ARGV[i] == \"/dev/stdin\")\n            continue    # assignment or standard input\n        else if ((getline junk < ARGV[i]) < 0) # unreadable\n            delete ARGV[i]\n        else\n            close(ARGV[i])\n    }\n}\n\n\nThis works, because the getline won\u2019t be fatal. Removing the element from ARGV with delete skips the file (because it\u2019s no longer\nin the list). See also Using ARGC and ARGV [ARGC-and-ARGV.html].\n\nBecause awk variable names only allow the English letters, the regular expression check purposely does not use character classes\nsuch as \u2018[:alpha:]\u2019 and \u2018[:alnum:]\u2019 (see Using Bracket Expressions [Bracket-Expressions.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(71)\n\nThe BEGINFILE special pattern (see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]) provides an\nalternative mechanism for dealing with files that can\u2019t be opened. However, the code here provides a portable solution.", "doc_id": "9f76359e-4bc1-449a-98cb-48d1e0bdad86", "embedding": null, "doc_hash": "b3a56cb2eed87f83b7fc9ca8dcaf9f0dbd624e1febf811240a02adf057e29018", "extra_info": null, "node_info": {"start": 0, "end": 1863, "_node_type": "1"}, "relationships": {"1": "7d1edffe-b7b7-49c1-8227-29ad315005f0"}}, "__type__": "1"}, "ecbbe97f-710c-41e3-8161-fd8071bf5058": {"__data__": {"text": "Next: Rereading the Current File [Rewind-Function.html], Up: Data file Management [Data-File-Management.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.3.1 NOTING DATA FILE BOUNDARIES\n\nThe BEGIN and END rules are each executed exactly once, at the beginning and end of your awk program, respectively (see The BEGIN\nand END Special Patterns [BEGIN_002fEND.html]). We (the gawk authors) once had a user who mistakenly thought that the BEGIN rules\nwere executed at the beginning of each data file and the END rules were executed at the end of each data file.\n\nWhen informed that this was not the case, the user requested that we add new special patterns to gawk, named BEGIN_FILE and\nEND_FILE, that would have the desired behavior. He even supplied us the code to do so.\n\nAdding these special patterns to gawk wasn\u2019t necessary; the job can be done cleanly in awk itself, as illustrated by the following\nlibrary program. It arranges to call two user-supplied functions, beginfile() and endfile(), at the beginning and end of each data\nfile. Besides solving the problem in only nine(!) lines of code, it does so portably; this works with any implementation of awk:\n\n# transfile.awk\n#\n# Give the user a hook for filename transitions\n#\n# The user must supply functions beginfile() and endfile()\n# that each take the name of the file being started or\n# finished, respectively.\n\nFILENAME != _oldfilename {\n    if (_oldfilename != \"\")\n        endfile(_oldfilename)\n    _oldfilename = FILENAME\n    beginfile(FILENAME)\n}\n\nEND { endfile(FILENAME) }\n\n\nThis file must be loaded before the user\u2019s \u201cmain\u201d program, so that the rule it supplies is executed first.\n\nThis rule relies on awk\u2019s FILENAME variable, which automatically changes for each new data file. The current file name is saved in\na private variable, _oldfilename. If FILENAME does not equal _oldfilename, then a new data file is being processed and it is\nnecessary to call endfile() for the old file. Because endfile() should only be called if a file has been processed, the program\nfirst checks to make sure that _oldfilename is not the null string. The program then assigns the current file name to _oldfilename\nand calls beginfile() for the file. Because, like all awk variables, _oldfilename is initialized to the null string, this rule\nexecutes correctly even for the first data file.\n\nThe program also supplies an END rule to do the final processing for the last file. Because this END rule comes before any END\nrules supplied in the \u201cmain\u201d program, endfile() is called first. Once again, the value of multiple BEGIN and END rules should be\nclear.\n\nIf the same data file occurs twice in a row on the command line, then endfile() and beginfile() are not executed at the end of the\nfirst pass and at the beginning of the second pass. The following version solves the problem:\n\n# ftrans.awk --- handle datafile transitions\n#\n# user supplies beginfile() and endfile() functions\n\nFNR == 1 {\n    if (_filename_ != \"\")\n        endfile(_filename_)\n    _filename_ = FILENAME\n    beginfile(FILENAME)\n}\n\nEND { endfile(_filename_) }\n\n\nCounting Things [Wc-Program.html] shows how this library function can be used and how it simplifies writing the main program.\n\nSo Why Does gawk Have BEGINFILE and ENDFILE?\n\nYou are probably wondering, if beginfile() and endfile() functions can do the job, why does gawk have BEGINFILE and ENDFILE\npatterns?\n\nGood question. Normally, if awk cannot open a file, this causes an immediate fatal error. In this case, there is no way for a\nuser-defined function to deal with the problem, as the mechanism for calling it relies on", "doc_id": "ecbbe97f-710c-41e3-8161-fd8071bf5058", "embedding": null, "doc_hash": "688ba02673ffbe2f65cdc6917740baa697a236af32a116952f7448d9e50f4732", "extra_info": null, "node_info": {"start": 0, "end": 3752, "_node_type": "1"}, "relationships": {"1": "65e13cc7-4604-47d7-ab3c-05b67bd57050", "3": "53b51d92-eaac-4483-9af7-a2076dc568d3"}}, "__type__": "1"}, "53b51d92-eaac-4483-9af7-a2076dc568d3": {"__data__": {"text": "function to deal with the problem, as the mechanism for calling it relies on the file being open and at the first\nrecord. Thus, the main reason for BEGINFILE is to give you a \u201chook\u201d to catch files that cannot be processed. ENDFILE exists for\nsymmetry, and because it provides an easy way to do per-file cleanup processing. For more information, refer to The BEGINFILE and\nENDFILE Special Patterns [BEGINFILE_002fENDFILE.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Rereading the Current File [Rewind-Function.html], Up: Data file Management [Data-File-Management.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "53b51d92-eaac-4483-9af7-a2076dc568d3", "embedding": null, "doc_hash": "d1ebb1a5d5c109d56f26cc82a0c230bcdd0434161ec1dbfc99107eaf38ec6496", "extra_info": null, "node_info": {"start": 3676, "end": 4404, "_node_type": "1"}, "relationships": {"1": "65e13cc7-4604-47d7-ab3c-05b67bd57050", "2": "ecbbe97f-710c-41e3-8161-fd8071bf5058"}}, "__type__": "1"}, "9ea45f58-511b-48ff-8823-3bc28bf5dac6": {"__data__": {"text": "Next: Example: Some File Functions [Extension-Example.html], Previous: API Description [Extension-API-Description.html], Up:\nWriting Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.5 HOW GAWK FINDS EXTENSIONS\n\nCompiled extensions have to be installed in a directory where gawk can find them. If gawk is configured and built in the default\nfashion, the directory in which to find extensions is /usr/local/lib/gawk. You can also specify a search path with a list of\ndirectories to search for compiled extensions. See The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html] for more\ninformation.", "doc_id": "9ea45f58-511b-48ff-8823-3bc28bf5dac6", "embedding": null, "doc_hash": "2209ef682cfc55fe9014a41f35d4644d5d2729b5178c06f9528e1c2451c9d6c6", "extra_info": null, "node_info": {"start": 0, "end": 793, "_node_type": "1"}, "relationships": {"1": "45ca20d3-9a52-4ad4-b21b-b0e0ea6291de"}}, "__type__": "1"}, "d137ce59-1287-4a4a-baaf-3b0985c30a7d": {"__data__": {"text": "Previous: How to Start the Debugger [Debugger-Invocation.html], Up: Sample gawk Debugging Session [Sample-Debugging-Session.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.2.2 FINDING THE BUG\n\nLet\u2019s say that we are having a problem using (a faulty version of) uniq.awk in \u201cfield-skipping\u201d mode, and it doesn\u2019t seem to be\ncatching lines which should be identical when skipping the first field, such as:\n\nawk is a wonderful program!\ngawk is a wonderful program!\n\n\nThis could happen if we were thinking (C-like) of the fields in a record as being numbered in a zero-based fashion, so instead of\nthe lines:\n\nclast = join(alast, fcount+1, n)\ncline = join(aline, fcount+1, m)\n\n\nwe wrote:\n\nclast = join(alast, fcount, n)\ncline = join(aline, fcount, m)\n\n\nThe first thing we usually want to do when trying to investigate a problem like this is to put a breakpoint in the program so that\nwe can watch it at work and catch what it is doing wrong. A reasonable spot for a breakpoint in uniq.awk is at the beginning of\nthe function are_equal(), which compares the current line with the previous one. To set the breakpoint, use the b (breakpoint)\ncommand:\n\ngawk> b are_equal\n-| Breakpoint 1 set at file `awklib/eg/prog/uniq.awk', line 63\n\n\nThe debugger tells us the file and line number where the breakpoint is. Now type \u2018r\u2019 or \u2018run\u2019 and the program runs until it hits\nthe breakpoint for the first time:\n\ngawk> r\n-| Starting program:\n-| Stopping in Rule ...\n-| Breakpoint 1, are_equal(n, m, clast, cline, alast, aline)\n         at `awklib/eg/prog/uniq.awk':63\n-| 63          if (fcount == 0 && charcount == 0)\ngawk>\n\n\nNow we can look at what\u2019s going on inside our program. First of all, let\u2019s see how we got to where we are. At the prompt, we type\n\u2018bt\u2019 (short for \u201cbacktrace\u201d), and the debugger responds with a listing of the current stack frames:\n\ngawk> bt\n-| #0  are_equal(n, m, clast, cline, alast, aline)\n         at `awklib/eg/prog/uniq.awk':68\n-| #1  in main() at `awklib/eg/prog/uniq.awk':88\n\n\nThis tells us that are_equal() was called by the main program at line 88 of uniq.awk. (This is not a big surprise, because this is\nthe only call to are_equal() in the program, but in more complex programs, knowing who called a function and with what parameters\ncan be the key to finding the source of the problem.)\n\nNow that we\u2019re in are_equal(), we can start looking at the values of some variables. Let\u2019s say we type \u2018p n\u2019 (p is short for\n\u201cprint\u201d). We would expect to see the value of n, a parameter to are_equal(). Actually, the debugger gives us:\n\ngawk> p n\n-| n = untyped variable\n\n\nIn this case, n is an uninitialized local variable, because the function was called without arguments (see Function Calls\n[Function-Calls.html]).\n\nA more useful variable to display might be the current record:\n\ngawk> p $0\n-| $0 = \"gawk is a wonderful program!\"\n\n\nThis might be a bit puzzling at first, as this is the second line of our test input. Let\u2019s look at NR:\n\ngawk> p NR\n-| NR = 2\n\n\nSo we can see that are_equal() was only called for the second record of the file. Of course, this is because our program contains\na rule for \u2018NR ==", "doc_id": "d137ce59-1287-4a4a-baaf-3b0985c30a7d", "embedding": null, "doc_hash": "15c80adb38c2d85412dfb329c70ccb64032e1ee65db567280849eb733d8ef5e7", "extra_info": null, "node_info": {"start": 0, "end": 3265, "_node_type": "1"}, "relationships": {"1": "f50ba7be-16a9-4851-93b9-37a240bb19b5", "3": "8fb2b68f-5aef-498e-9981-7131cc7e7d85"}}, "__type__": "1"}, "8fb2b68f-5aef-498e-9981-7131cc7e7d85": {"__data__": {"text": "file. Of course, this is because our program contains\na rule for \u2018NR == 1\u2019:\n\nNR == 1 {\n    last = $0\n    next\n}\n\n\nOK, let\u2019s just check that that rule worked correctly:\n\ngawk> p last\n-| last = \"awk is a wonderful program!\"\n\n\nEverything we have done so far has verified that the program has worked as planned, up to and including the call to are_equal(),\nso the problem must be inside this function. To investigate further, we must begin \u201cstepping through\u201d the lines of are_equal(). We\nstart by typing \u2018n\u2019 (for \u201cnext\u201d):\n\ngawk> n\n-| 66          if (fcount > 0) {\n\n\nThis tells us that gawk is now ready to execute line 66, which decides whether to give the lines the special \u201cfield-skipping\u201d\ntreatment indicated by the -1 command-line option. (Notice that we skipped from where we were before, at line 63, to here, because\nthe condition in line 63, \u2018if (fcount == 0 && charcount == 0)\u2019, was false.)\n\nContinuing to step, we now get to the splitting of the current and last records:\n\ngawk> n\n-| 67              n = split(last, alast)\ngawk> n\n-| 68              m = split($0, aline)\n\n\nAt this point, we should be curious to see what our records were split into, so we try to look:\n\ngawk> p n m alast aline\n-| n = 5\n-| m = untyped variable\n-| alast = array, 5 elements\n-| aline = untyped variable\n\n\n(The p command can take more than one argument, similar to awk\u2019s print statement.)\n\nThis is kind of disappointing, though. All we found out is that there are five elements in alast; m and aline don\u2019t have values\nbecause we are at line 68 but haven\u2019t executed it yet. This information is useful enough (we now know that none of the words were\naccidentally left out), but what if we want to see inside the array?\n\nThe first choice would be to use subscripts:\n\ngawk> p alast[0]\n-| \"0\" not in array `alast'\n\n\nOops!\n\ngawk> p alast[1]\n-| alast[\"1\"] = \"awk\"\n\n\nThis would be kind of slow for a 100-member array, though, so gawk provides a shortcut (reminiscent of another language not to be\nmentioned):\n\ngawk> p @alast\n-| alast[\"1\"] = \"awk\"\n-| alast[\"2\"] = \"is\"\n-| alast[\"3\"] = \"a\"\n-| alast[\"4\"] = \"wonderful\"\n-| alast[\"5\"] = \"program!\"\n\n\nIt looks like we got this far OK. Let\u2019s take another step or two:\n\ngawk> n\n-| 69              clast = join(alast, fcount, n)\ngawk> n\n-| 70              cline = join(aline, fcount, m)\n\n\nWell, here we are at our error (sorry to spoil the suspense). What we had in mind was to join the fields starting from the second\none to make the virtual record to compare, and if the first field were numbered zero, this would work. Let\u2019s look at what we\u2019ve\ngot:\n\ngawk> p cline clast\n-| cline = \"gawk is a wonderful program!\"\n-| clast = \"awk is a wonderful program!\"\n\n\nHey, those look pretty familiar! They\u2019re just our original, unaltered input records. A little thinking (the human brain is still\nthe best debugging tool), and we realize that we were off by one!\n\nWe get out of the debugger:\n\ngawk> q\n-| The program is running. Exit anyway (y/n)? y\n\n\nThen we get into an editor:\n\nclast = join(alast, fcount+1, n)\ncline", "doc_id": "8fb2b68f-5aef-498e-9981-7131cc7e7d85", "embedding": null, "doc_hash": "e9de2ff3e68f85ee5f7f68565f909570e3de783e7223a83278876db9d728ab5d", "extra_info": null, "node_info": {"start": 3207, "end": 6233, "_node_type": "1"}, "relationships": {"1": "f50ba7be-16a9-4851-93b9-37a240bb19b5", "2": "d137ce59-1287-4a4a-baaf-3b0985c30a7d", "3": "964c7418-3e05-4905-836b-5f75ec97e094"}}, "__type__": "1"}, "964c7418-3e05-4905-836b-5f75ec97e094": {"__data__": {"text": "= join(alast, fcount+1, n)\ncline = join(aline, fcount+1, m)\n\n\nand problem solved!\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: How to Start the Debugger [Debugger-Invocation.html], Up: Sample gawk Debugging Session [Sample-Debugging-Session.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "964c7418-3e05-4905-836b-5f75ec97e094", "embedding": null, "doc_hash": "7a89d455fff972b938d9a10da5ef64b716a71c6e5975ec892e2e82ebf52d5fc0", "extra_info": null, "node_info": {"start": 6260, "end": 6663, "_node_type": "1"}, "relationships": {"1": "f50ba7be-16a9-4851-93b9-37a240bb19b5", "2": "8fb2b68f-5aef-498e-9981-7131cc7e7d85"}}, "__type__": "1"}, "dce81be4-2e37-46a9-9e07-fd447f198e6f": {"__data__": {"text": "Next: Skipping Intervening Fields [Skipping-intervening.html], Up: Reading Fixed-Width Data [Constant-Size.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.6.1 PROCESSING FIXED-WIDTH DATA\n\nAn example of fixed-width data would be the input for old Fortran programs where numbers are run together, or the output of\nprograms that did not anticipate the use of their output as input for other programs.\n\nAn example of the latter is a table where all the columns are lined up by the use of a variable number of spaces and empty fields\nare just spaces. Clearly, awk\u2019s normal field splitting based on FS does not work well in this case. Although a portable awk\nprogram can use a series of substr() calls on $0 (see String-Manipulation Functions [String-Functions.html]), this is awkward and\ninefficient for a large number of fields.\n\nThe splitting of an input record into fixed-width fields is specified by assigning a string containing space-separated numbers to\nthe built-in variable FIELDWIDTHS. Each number specifies the width of the field, including columns between fields. If you want to\nignore the columns between fields, you can specify the width as a separate field that is subsequently ignored. It is a fatal error\nto supply a field width that has a negative value.\n\nThe following data is the output of the Unix w utility. It is useful to illustrate the use of FIELDWIDTHS:\n\n 10:06pm  up 21 days, 14:04,  23 users\nUser     tty       login\u00a0 idle   JCPU   PCPU  what\nhzuo     ttyV0     8:58pm            9      5  vi p24.tex\nhzang    ttyV3     6:37pm    50                -csh\neklye    ttyV5     9:53pm            7      1  em thes.tex\ndportein ttyV6     8:17pm  1:47                -csh\ngierd    ttyD3    10:00pm     1                elm\ndave     ttyD4     9:47pm            4      4  w\nbrent    ttyp0    26Jun91  4:46  26:46   4:41  bash\ndave     ttyq4    26Jun9115days     46     46  wnewmail\n\n\nThe following program takes this input, converts the idle time to number of seconds, and prints out the first two fields and the\ncalculated idle time:\n\nBEGIN  { FIELDWIDTHS = \"9 6 10 6 7 7 35\" }\nNR > 2 {\n    idle = $4\n    sub(/^ +/, \"\", idle)   # strip leading spaces\n    if (idle == \"\")\n        idle = 0\n    if (idle ~ /:/) {      # hh:mm\n        split(idle, t, \":\")\n        idle = t[1] * 60 + t[2]\n    }\n    if (idle ~ /days/)\n        idle *= 24 * 60 * 60\n\n    print $1, $2, idle\n}\n\n\n> NOTE: The preceding program uses a number of awk features that haven\u2019t been introduced yet.\n\nRunning the program on the data produces the following results:\n\nhzuo      ttyV0  0\nhzang     ttyV3  50\neklye", "doc_id": "dce81be4-2e37-46a9-9e07-fd447f198e6f", "embedding": null, "doc_hash": "7cc7a219ed0a4cf0b017577b08d7c8acb43a7aa3fda0ee32a37fb013f47b148b", "extra_info": null, "node_info": {"start": 0, "end": 2740, "_node_type": "1"}, "relationships": {"1": "9c03e6f4-822d-4692-bcfa-827aed8137db", "3": "6537fa30-cedc-4d52-852a-85c2d9e0d688"}}, "__type__": "1"}, "6537fa30-cedc-4d52-852a-85c2d9e0d688": {"__data__": {"text": " 0\nhzang     ttyV3  50\neklye     ttyV5  0\ndportein  ttyV6  107\ngierd     ttyD3  1\ndave      ttyD4  0\nbrent     ttyp0  286\ndave      ttyq4  1296000\n\n\nAnother (possibly more practical) example of fixed-width input data is the input from a deck of balloting cards. In some parts of\nthe United States, voters mark their choices by punching holes in computer cards. These cards are then processed to count the\nvotes for any particular candidate or on any particular issue. Because a voter may choose not to vote on some issue, any column on\nthe card may be empty. An awk program for processing such data could use the FIELDWIDTHS feature to simplify reading the data. (Of\ncourse, getting gawk to run on a system with card readers is another story!)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Skipping Intervening Fields [Skipping-intervening.html], Up: Reading Fixed-Width Data [Constant-Size.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6537fa30-cedc-4d52-852a-85c2d9e0d688", "embedding": null, "doc_hash": "89dd4430bfcf324291f63bc3cf484f670c869a0af7cdcf1188842ddb0b6c84e5", "extra_info": null, "node_info": {"start": 2712, "end": 3760, "_node_type": "1"}, "relationships": {"1": "9c03e6f4-822d-4692-bcfa-827aed8137db", "2": "dce81be4-2e37-46a9-9e07-fd447f198e6f"}}, "__type__": "1"}, "ae340dc6-c9ae-4043-8a60-0888eb042624": {"__data__": {"text": "Next: How To Create and Populate Arrays [Creating-Arrays.html], Previous: Array Functions [Array-Functions.html], Up: Array\nManipulation [Array-Manipulation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.12.3 WORKING WITH ALL THE ELEMENTS OF AN ARRAY\n\nTo flatten an array is to create a structure that represents the full array in a fashion that makes it easy for C code to traverse\nthe entire array. Some of the code in extension/testext.c does this, and also serves as a nice example showing how to use the\nAPIs.\n\nWe walk through that part of the code one step at a time. First, the gawk script that drives the test extension:\n\n@load \"testext\"\nBEGIN {\n    n = split(\"blacky rusty sophie raincloud lucky\", pets)\n    printf(\"pets has %d elements\\n\", length(pets))\n    ret = dump_array_and_delete(\"pets\", \"3\")\n    printf(\"dump_array_and_delete(pets) returned %d\\n\", ret)\n    if (\"3\" in pets)\n        printf(\"dump_array_and_delete() did NOT remove index \\\"3\\\"!\\n\")\n    else\n        printf(\"dump_array_and_delete() did remove index \\\"3\\\"!\\n\")\n    print \"\"\n}\n\n\nThis code creates an array with split() (see String-Manipulation Functions [String-Functions.html]) and then calls\ndump_array_and_delete(). That function looks up the array whose name is passed as the first argument, and deletes the element at\nthe index passed in the second argument. The awk code then prints the return value and checks if the element was indeed deleted.\nHere is the C code that implements dump_array_and_delete(). It has been edited slightly for presentation.\n\nThe first part declares variables, sets up the default return value in result, and checks that the function was called with the\ncorrect number of arguments:\n\nstatic awk_value_t *\ndump_array_and_delete(int nargs, awk_value_t *result)\n{\n    awk_value_t value, value2, value3;\n    awk_flat_array_t *flat_array;\n    size_t count;\n    char *name;\n    int i;\n\n    assert(result != NULL);\n    make_number(0.0, result);\n\n    if (nargs != 2) {\n        printf(\"dump_array_and_delete: nargs not right \"\n               \"(%d should be 2)\\n\", nargs);\n        goto out;\n    }\n\n\nThe function then proceeds in steps, as follows. First, retrieve the name of the array, passed as the first argument, followed by\nthe array itself. If either operation fails, print an error message and return:\n\n    /* get argument named array as flat array and print it */\n    if (get_argument(0, AWK_STRING, & value)) {\n        name = value.str_value.str;\n        if (sym_lookup(name, AWK_ARRAY, & value2))\n            printf(\"dump_array_and_delete: sym_lookup of %s passed\\n\",\n                   name);\n        else {\n            printf(\"dump_array_and_delete: sym_lookup of %s failed\\n\",\n                   name);\n            goto out;\n        }\n    } else {\n       ", "doc_id": "ae340dc6-c9ae-4043-8a60-0888eb042624", "embedding": null, "doc_hash": "22f5d0110bc416168a2aaf285bbcf2014955b68899ea672fdb26ec543d5c6ac1", "extra_info": null, "node_info": {"start": 0, "end": 2925, "_node_type": "1"}, "relationships": {"1": "2211243b-44b5-452a-9bf0-22f8cac74ebd", "3": "bca4b3a9-9999-44e2-bbb8-b48a259d6ed4"}}, "__type__": "1"}, "bca4b3a9-9999-44e2-bbb8-b48a259d6ed4": {"__data__": {"text": "    }\n    } else {\n        printf(\"dump_array_and_delete: get_argument(0) failed\\n\");\n        goto out;\n    }\n\n\nFor testing purposes and to make sure that the C code sees the same number of elements as the awk code, the second step is to get\nthe count of elements in the array and print it:\n\n    if (! get_element_count(value2.array_cookie, & count)) {\n        printf(\"dump_array_and_delete: get_element_count failed\\n\");\n        goto out;\n    }\n\n    printf(\"dump_array_and_delete: incoming size is %lu\\n\",\n           (unsigned long) count);\n\n\nThe third step is to actually flatten the array, and then to double-check that the count in the awk_flat_array_t is the same as\nthe count just retrieved:\n\n    if (! flatten_array_typed(value2.array_cookie, & flat_array,\n                              AWK_STRING, AWK_UNDEFINED)) {\n        printf(\"dump_array_and_delete: could not flatten array\\n\");\n        goto out;\n    }\n\n    if (flat_array->count != count) {\n        printf(\"dump_array_and_delete: flat_array->count (%lu)\"\n               \" != count (%lu)\\n\",\n                (unsigned long) flat_array->count,\n                (unsigned long) count);\n        goto out;\n    }\n\n\nThe fourth step is to retrieve the index of the element to be deleted, which was passed as the second argument. Remember that\nargument counts passed to get_argument() are zero-based, and thus the second argument is numbered one:\n\n    if (! get_argument(1, AWK_STRING, & value3)) {\n        printf(\"dump_array_and_delete: get_argument(1) failed\\n\");\n        goto out;\n    }\n\n\nThe fifth step is where the \u201creal work\u201d is done. The function loops over every element in the array, printing the index and\nelement values. In addition, upon finding the element with the index that is supposed to be deleted, the function sets the\nAWK_ELEMENT_DELETE bit in the flags field of the element. When the array is released, gawk traverses the flattened array, and\ndeletes any elements that have this flag bit set:\n\n    for (i = 0; i < flat_array->count; i++) {\n        printf(\"\\t%s[\\\"%.*s\\\"] = %s\\n\",\n            name,\n            (int) flat_array->elements[i].index.str_value.len,\n            flat_array->elements[i].index.str_value.str,\n            valrep2str(& flat_array->elements[i].value));\n\n        if (strcmp(value3.str_value.str,\n                   flat_array->elements[i].index.str_value.str) == 0) {\n            flat_array->elements[i].flags |= AWK_ELEMENT_DELETE;\n            printf(\"dump_array_and_delete: marking element \\\"%s\\\" \"\n        ", "doc_id": "bca4b3a9-9999-44e2-bbb8-b48a259d6ed4", "embedding": null, "doc_hash": "9087ca0816a74d5f2674d30f31b2cce065bc95793bfa2d9ddac711b320f2401d", "extra_info": null, "node_info": {"start": 2917, "end": 5424, "_node_type": "1"}, "relationships": {"1": "2211243b-44b5-452a-9bf0-22f8cac74ebd", "2": "ae340dc6-c9ae-4043-8a60-0888eb042624", "3": "ac9a9161-7ac9-4e63-9c02-cd6b7495e625"}}, "__type__": "1"}, "ac9a9161-7ac9-4e63-9c02-cd6b7495e625": {"__data__": {"text": "marking element \\\"%s\\\" \"\n                   \"for deletion\\n\",\n                flat_array->elements[i].index.str_value.str);\n        }\n    }\n\n\nThe sixth step is to release the flattened array. This tells gawk that the extension is no longer using the array, and that it\nshould delete any elements marked for deletion. gawk also frees any storage that was allocated, so you should not use the pointer\n(flat_array in this code) once you have called release_flattened_array():\n\n    if (! release_flattened_array(value2.array_cookie, flat_array)) {\n        printf(\"dump_array_and_delete: could not release flattened array\\n\");\n        goto out;\n    }\n\n\nFinally, because everything was successful, the function sets the return value to success, and returns:\n\n    make_number(1.0, result);\nout:\n    return result;\n}\n\n\nHere is the output from running this part of the test:\n\npets has 5 elements\ndump_array_and_delete: sym_lookup of pets passed\ndump_array_and_delete: incoming size is 5\n        pets[\"1\"] = \"blacky\"\n        pets[\"2\"] = \"rusty\"\n        pets[\"3\"] = \"sophie\"\ndump_array_and_delete: marking element \"3\" for deletion\n        pets[\"4\"] = \"raincloud\"\n        pets[\"5\"] = \"lucky\"\ndump_array_and_delete(pets) returned 1\ndump_array_and_delete() did remove index \"3\"!\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: How To Create and Populate Arrays [Creating-Arrays.html], Previous: Array Functions [Array-Functions.html], Up: Array\nManipulation [Array-Manipulation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ac9a9161-7ac9-4e63-9c02-cd6b7495e625", "embedding": null, "doc_hash": "de8ab1552fef5e40cb45b0a809d2c56c21e5eb09477537e436f82a51a7f2c602", "extra_info": null, "node_info": {"start": 5400, "end": 7020, "_node_type": "1"}, "relationships": {"1": "2211243b-44b5-452a-9bf0-22f8cac74ebd", "2": "bca4b3a9-9999-44e2-bbb8-b48a259d6ed4"}}, "__type__": "1"}, "3814df53-62a0-4b8e-b5d8-fc48b5a07b57": {"__data__": {"text": "Previous: Standards Versus Existing Practice [POSIX-Floating-Point-Problems.html], Up: Arithmetic and Arbitrary-Precision\nArithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.8 SUMMARY\n\n * Most computer arithmetic is done using either integers or floating-point values. Standard awk uses double-precision\n   floating-point values.\n * In the early 1990s Barbie mistakenly said, \u201cMath class is tough!\u201d Although math isn\u2019t tough, floating-point arithmetic isn\u2019t\n   the same as pencil-and-paper math, and care must be taken:\n   * Not all numbers can be represented exactly.\n   * Comparing values should use a delta, instead of being done directly with \u2018==\u2019 and \u2018!=\u2019.\n   * Errors accumulate.\n   * Operations are not always truly associative or distributive.\n * Increasing the accuracy can help, but it is not a panacea.\n * Often, increasing the accuracy and then rounding to the desired number of digits produces reasonable results.\n * Use -M (or --bignum) to enable MPFR arithmetic. Use PREC to set the precision in bits, and ROUNDMODE to set the IEEE 754\n   rounding mode.\n * With -M, gawk performs arbitrary-precision integer arithmetic using the GMP library. This is faster and more space-efficient\n   than using MPFR for the same calculations.\n * There are several areas with respect to floating-point numbers where gawk disagrees with the POSIX standard. It pays to be\n   aware of them.\n * Overall, there is no need to be unduly suspicious about the results from floating-point arithmetic. The lesson to remember is\n   that floating-point arithmetic is always more complex than arithmetic using pencil and paper. In order to take advantage of the\n   power of floating-point arithmetic, you need to know its limitations and work within them. For most casual use of\n   floating-point arithmetic, you will often get the expected result if you simply round the display of your final results to the\n   correct number of significant decimal digits.\n * As general advice, avoid presenting numerical data in a manner that implies better precision than is actually the case.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Standards Versus Existing Practice [POSIX-Floating-Point-Problems.html], Up: Arithmetic and Arbitrary-Precision\nArithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3814df53-62a0-4b8e-b5d8-fc48b5a07b57", "embedding": null, "doc_hash": "e57d6d4a9e5dcca2ecba0f3222e64ec17c309c9528cf3b5445618a84d2a7d6b6", "extra_info": null, "node_info": {"start": 0, "end": 2641, "_node_type": "1"}, "relationships": {"1": "22633822-2951-47ae-9575-1192d148f7a9"}}, "__type__": "1"}, "122143d9-0b23-4b9b-acea-4ba577533585": {"__data__": {"text": "Next: The switch Statement [Switch-Statement.html], Previous: The do-while Statement [Do-Statement.html], Up: Control Statements\nin Actions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.4 THE FOR STATEMENT\n\nThe for statement makes it more convenient to count iterations of a loop. The general form of the for statement looks like this:\n\nfor (initialization; condition; increment)\n  body\n\n\nThe initialization, condition, and increment parts are arbitrary awk expressions, and body stands for any awk statement.\n\nThe for statement starts by executing initialization. Then, as long as the condition is true, it repeatedly executes body and then\nincrement. Typically, initialization sets a variable to either zero or one, increment adds one to it, and condition compares it\nagainst the desired number of iterations. For example:\n\nawk '\n{\n    for (i = 1; i <= 3; i++)\n        print $i\n}' inventory-shipped\n\n\nThis prints the first three fields of each input record, with one input field per output line.\n\nC and C++ programmers might expect to be able to use the comma operator to set more than one variable in the initialization part\nof the for loop, or to increment multiple variables in the increment part of the loop, like so:\n\nfor (i = 0, j = length(a); i < j; i++, j--) \u2026   C/C++, not awk!\n\n\nYou cannot do this; the comma operator is not supported in awk. There are workarounds, but they are nonobvious and can lead to\ncode that is difficult to read and understand. It is best, therefore, to simply write additional initializations as separate\nstatements preceding the for loop and to place additional increment statements at the end of the loop\u2019s body.\n\nMost often, increment is an increment expression, as in the earlier example. But this is not required; it can be any expression\nwhatsoever. For example, the following statement prints all the powers of two between 1 and 100:\n\nfor (i = 1; i <= 100; i *= 2)\n    print i\n\n\nIf there is nothing to be done, any of the three expressions in the parentheses following the for keyword may be omitted. Thus,\n\u2018for\u00a0(;\u00a0x\u00a0>\u00a00;)\u2019 is equivalent to \u2018while\u00a0(x\u00a0>\u00a00)\u2019. If the condition is omitted, it is treated as true, effectively yielding an\ninfinite loop (i.e., a loop that never terminates).\n\nIn most cases, a for loop is an abbreviation for a while loop, as shown here:\n\ninitialization\nwhile (condition) {\n  body\n  increment\n}\n\n\nThe only exception is when the continue statement (see The continue Statement [Continue-Statement.html]) is used inside the loop.\nChanging a for statement to a while statement in this way can change the effect of the continue statement inside the loop.\n\nThe awk language has a for statement in addition to a while statement because a for loop is often both less work to type and more\nnatural to think of. Counting the number of iterations is very common in loops. It can be easier to think of this counting as part\nof looping rather than as something to do inside the loop.\n\nThere is an alternative version of the for loop, for iterating over all the indices of an array:\n\nfor (i in array)\n    do something with array[i]\n\n\nSee Scanning All Elements of an Array [Scanning-an-Array.html] for more information on this version of the for loop.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The switch Statement [Switch-Statement.html], Previous: The do-while Statement [Do-Statement.html], Up: Control Statements\nin Actions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "122143d9-0b23-4b9b-acea-4ba577533585", "embedding": null, "doc_hash": "e656a1ffc8fbf4216a3b180e9d19a62624c16a809b404b65aa549ca3bc061b87", "extra_info": null, "node_info": {"start": 0, "end": 3726, "_node_type": "1"}, "relationships": {"1": "5c2d91c5-1ce1-4c95-8ef4-40fa7a5d4e96"}}, "__type__": "1"}, "16244553-8122-45fa-94ad-465ad53e9f7f": {"__data__": {"text": "Next: Foreword to the Fourth Edition [Foreword4.html], Previous: General Introduction [index.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nFOREWORD TO THE THIRD EDITION\n\nArnold Robbins and I are good friends. We were introduced in 1990 by circumstances\u2014and our favorite programming language, AWK. The\ncircumstances started a couple of years earlier. I was working at a new job and noticed an unplugged Unix computer sitting in the\ncorner. No one knew how to use it, and neither did I. However, a couple of days later, it was running, and I was root and the\none-and-only user. That day, I began the transition from statistician to Unix programmer.\n\nOn one of many trips to the library or bookstore in search of books on Unix, I found the gray AWK book, a.k.a. Alfred V. Aho,\nBrian W. Kernighan, and Peter J. Weinberger\u2019s The AWK Programming Language (Addison-Wesley, 1988). awk\u2019s simple programming\nparadigm\u2014find a pattern in the input and then perform an action\u2014often reduced complex or tedious data manipulations to a few lines\nof code. I was excited to try my hand at programming in AWK.\n\nAlas, the awk on my computer was a limited version of the language described in the gray book. I discovered that my computer had\n\u201cold awk\u201d and the book described \u201cnew awk.\u201d I learned that this was typical; the old version refused to step aside or relinquish\nits name. If a system had a new awk, it was invariably called nawk, and few systems had it. The best way to get a new awk was to\nftp the source code for gawk from prep.ai.mit.edu. gawk was a version of new awk written by David Trueman and Arnold, and\navailable under the GNU General Public License.\n\n(Incidentally, it\u2019s no longer difficult to find a new awk. gawk ships with GNU/Linux, and you can download binaries or source code\nfor almost any system; my wife uses gawk on her VMS box.)\n\nMy Unix system started out unplugged from the wall; it certainly was not plugged into a network. So, oblivious to the existence of\ngawk and the Unix community in general, and desiring a new awk, I wrote my own, called mawk. Before I was finished, I knew about\ngawk, but it was too late to stop, so I eventually posted to a comp.sources newsgroup.\n\nA few days after my posting, I got a friendly email from Arnold introducing himself. He suggested we share design and algorithms\nand attached a draft of the POSIX standard so that I could update mawk to support language extensions added after publication of\nThe AWK Programming Language.\n\nFrankly, if our roles had been reversed, I would not have been so open and we probably would have never met. I\u2019m glad we did meet.\nHe is an AWK expert\u2019s AWK expert and a genuinely nice person. Arnold contributes significant amounts of his expertise and time to\nthe Free Software Foundation.\n\nThis book is the gawk reference manual, but at its core it is a book about AWK programming that will appeal to a wide audience. It\nis a definitive reference to the AWK language as defined by the 1987 Bell Laboratories release and codified in the 1992 POSIX\nUtilities standard.\n\nOn the other hand, the novice AWK programmer can study a wealth of practical programs that emphasize the power of AWK\u2019s basic\nidioms: data-driven control flow, pattern matching with regular expressions, and associative arrays. Those looking for something\nnew can try out gawk\u2019s interface to network protocols via special /inet files.\n\nThe programs in this book make clear that an AWK program is typically much smaller and faster to develop than a counterpart\nwritten in C. Consequently, there is often a payoff to prototyping an algorithm or design in AWK to get it running quickly", "doc_id": "16244553-8122-45fa-94ad-465ad53e9f7f", "embedding": null, "doc_hash": "4de00d2cb196b39a1a8bd3f40a45cbd7d9ed5d522181a8f7b6c06c78375edc93", "extra_info": null, "node_info": {"start": 0, "end": 3819, "_node_type": "1"}, "relationships": {"1": "bb6207c6-4b32-42e2-9b85-da07c23227ed", "3": "c0b17737-b3cb-4d11-bd68-cbbbc1e1096f"}}, "__type__": "1"}, "c0b17737-b3cb-4d11-bd68-cbbbc1e1096f": {"__data__": {"text": "payoff to prototyping an algorithm or design in AWK to get it running quickly and\nexpose problems early. Often, the interpreted performance is adequate and the AWK prototype becomes the product.\n\nThe new pgawk (profiling gawk), produces program execution counts. I recently experimented with an algorithm that for n lines of\ninput, exhibited ~ C n^2 performance, while theory predicted ~ C n log n behavior. A few minutes poring over the awkprof.out\nprofile pinpointed the problem to a single line of code. pgawk is a welcome addition to my programmer\u2019s toolbox.\n\nArnold has distilled over a decade of experience writing and using AWK programs, and developing gawk, into this book. If you use\nAWK or want to learn how, then read this book.\n\nMichael Brennan\nAuthor of mawk\nMarch 2001\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Foreword to the Fourth Edition [Foreword4.html], Previous: General Introduction [index.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c0b17737-b3cb-4d11-bd68-cbbbc1e1096f", "embedding": null, "doc_hash": "3f115cb8912d0cde4f0ca7cc751ee26ee68813017ffb02b59e228e2d7ac1b35f", "extra_info": null, "node_info": {"start": 3742, "end": 4855, "_node_type": "1"}, "relationships": {"1": "bb6207c6-4b32-42e2-9b85-da07c23227ed", "2": "16244553-8122-45fa-94ad-465ad53e9f7f"}}, "__type__": "1"}, "bc8f669f-1ab5-4714-8c0c-49986b7d6f12": {"__data__": {"text": "Next: Preface [Preface.html], Previous: Foreword to the Third Edition [Foreword3.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nFOREWORD TO THE FOURTH EDITION\n\nSome things don\u2019t change. Thirteen years ago I wrote: \u201cIf you use AWK or want to learn how, then read this book.\u201d True then, and\nstill true today.\n\nLearning to use a programming language is about more than mastering the syntax. One needs to acquire an understanding of how to\nuse the features of the language to solve practical programming problems. A focus of this book is many examples that show how to\nuse AWK.\n\nSome things do change. Our computers are much faster and have more memory. Consequently, speed and storage inefficiencies of a\nhigh-level language matter less. Prototyping in AWK and then rewriting in C for performance reasons happens less, because more\noften the prototype is fast enough.\n\nOf course, there are computing operations that are best done in C or C++. With gawk 4.1 and later, you do not have to choose\nbetween writing your program in AWK or in C/C++. You can write most of your program in AWK and the aspects that require C/C++\ncapabilities can be written in C/C++, and then the pieces glued together when the gawk module loads the C/C++ module as a dynamic\nplug-in. Writing Extensions for gawk [Dynamic-Extensions.html], has all the details, and, as expected, many examples to help you\nlearn the ins and outs.\n\nI enjoy programming in AWK and had fun (re)reading this book. I think you will too.\n\nMichael Brennan\nAuthor of mawk\nOctober 2014\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Preface [Preface.html], Previous: Foreword to the Third Edition [Foreword3.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "bc8f669f-1ab5-4714-8c0c-49986b7d6f12", "embedding": null, "doc_hash": "170cd9f875e3a8f1f57a39d08fd253b6fa003ea845ee0e56c7150afee9f4e049", "extra_info": null, "node_info": {"start": 0, "end": 2039, "_node_type": "1"}, "relationships": {"1": "0f27e216-4b02-481c-ae19-6c8c507dfaf1"}}, "__type__": "1"}, "4f8b3054-d62e-4171-9bb1-d27af1e797d3": {"__data__": {"text": "Next: Examples Using printf [Printf-Examples.html], Previous: Format-Control Letters [Control-Letters.html], Up: Using printf\nStatements for Fancier Printing [Printf.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.5.3 MODIFIERS FOR PRINTF FORMATS\n\nA format specification can also include modifiers that can control how much of the item\u2019s value is printed, as well as how much\nspace it gets. The modifiers come between the \u2018%\u2019 and the format-control letter. We use the bullet symbol \u201c\u2022\u201d in the following\nexamples to represent spaces in the output. Here are the possible modifiers, in the order in which they may appear:\n\nN$\n\nAn integer constant followed by a \u2018$\u2019 is a positional specifier. Normally, format specifications are applied to arguments in the\norder given in the format string. With a positional specifier, the format specification is applied to a specific argument, instead\nof what would be the next argument in the list. Positional specifiers begin counting with one. Thus:\n\nprintf \"%s %s\\n\", \"don't\", \"panic\"\nprintf \"%2$s %1$s\\n\", \"panic\", \"don't\"\n\n\nprints the famous friendly message twice.\n\nAt first glance, this feature doesn\u2019t seem to be of much use. It is in fact a gawk extension, intended for use in translating\nmessages at runtime. See Rearranging printf Arguments [Printf-Ordering.html], which describes how and why to use positional\nspecifiers. For now, we ignore them.\n\n- (Minus)\n\nThe minus sign, used before the width modifier (see later on in this list), says to left-justify the argument within its specified\nwidth. Normally, the argument is printed right-justified in the specified width. Thus:\n\nprintf \"%-4s\", \"foo\"\n\n\nprints \u2018foo\u2022\u2019.\n\nspace\n\nFor numeric conversions, prefix positive values with a space and negative values with a minus sign.\n\n+\n\nThe plus sign, used before the width modifier (see later on in this list), says to always supply a sign for numeric conversions,\neven if the data to format is positive. The \u2018+\u2019 overrides the space modifier.\n\n#\n\nUse an \u201calternative form\u201d for certain control letters. For \u2018%o\u2019, supply a leading zero. For \u2018%x\u2019 and \u2018%X\u2019, supply a leading \u20180x\u2019\nor \u20180X\u2019 for a nonzero result. For \u2018%e\u2019, \u2018%E\u2019, \u2018%f\u2019, and \u2018%F\u2019, the result always contains a decimal point. For \u2018%g\u2019 and \u2018%G\u2019,\ntrailing zeros are not removed from the result.\n\n0\n\nA leading \u20180\u2019 (zero) acts as a flag indicating that output should be padded with zeros instead of spaces. This applies only to the\nnumeric output formats. This flag only has an effect when the field width is wider than the value to print.\n\n'\n\nA single quote or apostrophe character is a POSIX extension to ISO C. It indicates that the integer part of a floating-point\nvalue, or the entire part of an integer decimal value, should have a thousands-separator character in it. This only works in\nlocales that support such characters. For example:\n\n$ cat thousands.awk          Show source program\n-| BEGIN { printf \"%'d\\n\", 1234567 }\n$ LC_ALL=C gawk -f thousands.awk\n-| 1234567                   Results in \"C\" locale\n$ LC_ALL=en_US.UTF-8 gawk -f thousands.awk\n-| 1,234,567                 Results in US English UTF locale\n\n\nFor more information about locales and internationalization issues, see Where You Are Makes a Difference", "doc_id": "4f8b3054-d62e-4171-9bb1-d27af1e797d3", "embedding": null, "doc_hash": "bfd5c2fad2ae68534b55230d9ef40b4e86a1a95939ef66aaa264b58a9a81c751", "extra_info": null, "node_info": {"start": 0, "end": 3368, "_node_type": "1"}, "relationships": {"1": "ed305d92-9308-403e-af76-0310bb7dde19", "3": "2f181e22-83c9-467c-81f6-42d2da9fce5c"}}, "__type__": "1"}, "2f181e22-83c9-467c-81f6-42d2da9fce5c": {"__data__": {"text": "more information about locales and internationalization issues, see Where You Are Makes a Difference [Locales.html].\n\n> NOTE: The \u2018'\u2019 flag is a nice feature, but its use complicates things: it becomes difficult to use it in command-line programs.\n> For information on appropriate quoting tricks, see Shell Quoting Issues [Quoting.html].\n\nwidth\n\nThis is a number specifying the desired minimum width of a field. Inserting any number between the \u2018%\u2019 sign and the format-control\ncharacter forces the field to expand to this width. The default way to do this is to pad with spaces on the left. For example:\n\nprintf \"%4s\", \"foo\"\n\n\nprints \u2018\u2022foo\u2019.\n\nThe value of width is a minimum width, not a maximum. If the item value requires more than width characters, it can be as wide as\nnecessary. Thus, the following:\n\nprintf \"%4s\", \"foobar\"\n\n\nprints \u2018foobar\u2019.\n\nPreceding the width with a minus sign causes the output to be padded with spaces on the right, instead of on the left.\n\n.prec\n\nA period followed by an integer constant specifies the precision to use when printing. The meaning of the precision varies by\ncontrol letter:\n\n%d, %i, %o, %u, %x, %X\n\nMinimum number of digits to print.\n\n%e, %E, %f, %F\n\nNumber of digits to the right of the decimal point.\n\n%g, %G\n\nMaximum number of significant digits.\n\n%s\n\nMaximum number of characters from the string that should print.\n\nThus, the following:\n\nprintf \"%.4s\", \"foobar\"\n\n\nprints \u2018foob\u2019.\n\nThe C library printf\u2019s dynamic width and prec capability (e.g., \"%*.*s\") is supported. Instead of supplying explicit width and/or\nprec values in the format string, they are passed in the argument list. For example:\n\nw = 5\np = 3\ns = \"abcdefg\"\nprintf \"%*.*s\\n\", w, p, s\n\n\nis exactly equivalent to:\n\ns = \"abcdefg\"\nprintf \"%5.3s\\n\", s\n\n\nBoth programs output \u2018\u2022\u2022abc\u2019. Earlier versions of awk did not support this capability. If you must use such a version, you may\nsimulate this feature by using concatenation to build up the format string, like so:\n\nw = 5\np = 3\ns = \"abcdefg\"\nprintf \"%\" w \".\" p \"s\\n\", s\n\n\nThis is not particularly easy to read, but it does work.\n\nC programmers may be used to supplying additional modifiers (\u2018h\u2019, \u2018j\u2019, \u2018l\u2019, \u2018L\u2019, \u2018t\u2019, and \u2018z\u2019) in printf format strings. These are\nnot valid in awk. Most awk implementations silently ignore them. If --lint is provided on the command line (see Command-Line\nOptions [Options.html]), gawk warns about their use. If --posix is supplied, their use is a fatal error.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Examples Using printf [Printf-Examples.html], Previous: Format-Control Letters [Control-Letters.html], Up: Using printf\nStatements for Fancier Printing [Printf.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2f181e22-83c9-467c-81f6-42d2da9fce5c", "embedding": null, "doc_hash": "524f6c2f17d66fab5cb556bd84f44a868014ab07b9a4ab0a7b9d0879af5da5e5", "extra_info": null, "node_info": {"start": 3268, "end": 6079, "_node_type": "1"}, "relationships": {"1": "ed305d92-9308-403e-af76-0310bb7dde19", "2": "4f8b3054-d62e-4171-9bb1-d27af1e797d3"}}, "__type__": "1"}, "df5376b4-93bf-411d-a498-9a6baee29e57": {"__data__": {"text": "Next: Field-Splitting Summary [Field-Splitting-Summary.html], Previous: Setting FS from the Command Line\n[Command-Line-Field-Separator.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.5.5 MAKING THE FULL LINE BE A SINGLE FIELD\n\nOccasionally, it\u2019s useful to treat the whole input line as a single field. This can be done easily and portably simply by setting\nFS to \"\\n\" (a newline):22\n\nawk -F'\\n' 'program' files \u2026\n\n\nWhen you do this, $1 is the same as $0.\n\nChanging FS Does Not Affect the Fields\n\nAccording to the POSIX standard, awk is supposed to behave as if each record is split into fields at the time it is read. In\nparticular, this means that if you change the value of FS after a record is read, the values of the fields (i.e., how they were\nsplit) should reflect the old value of FS, not the new one.\n\nHowever, many older implementations of awk do not work this way. Instead, they defer splitting the fields until a field is\nactually referenced. The fields are split using the current value of FS! (d.c.) This behavior can be difficult to diagnose. The\nfollowing example illustrates the difference between the two methods:\n\nsed 1q /etc/passwd | awk '{ FS = \":\" ; print $1 }'\n\n\nwhich usually prints:\n\nroot\n\n\non an incorrect implementation of awk, while gawk prints the full first line of the file, something like:\n\nroot:x:0:0:Root:/:\n\n\n(The sed23 command prints just the first line of /etc/passwd.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(22)\n\nThanks to Andrew Schorr for this tip.\n\n(23)\n\nThe sed utility is a \u201cstream editor.\u201d Its behavior is also defined by the POSIX standard.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Field-Splitting Summary [Field-Splitting-Summary.html], Previous: Setting FS from the Command Line\n[Command-Line-Field-Separator.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "df5376b4-93bf-411d-a498-9a6baee29e57", "embedding": null, "doc_hash": "ef62d19393f49e4a77d69883f8abb9437f0aa8aff6013b00b0d698c31791abd5", "extra_info": null, "node_info": {"start": 0, "end": 2305, "_node_type": "1"}, "relationships": {"1": "fee2e630-636b-4de5-a8f1-4b1bbf3f3cf6"}}, "__type__": "1"}, "3044b959-d29b-47f4-9e9e-314f2f57a9ac": {"__data__": {"text": "Next: The return Statement [Return-Statement.html], Previous: Function Definition Examples [Function-Example.html], Up:\nUser-Defined Functions [User_002ddefined.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.3 CALLING USER-DEFINED FUNCTIONS\n\nCalling a function means causing the function to run and do its job. A function call is an expression and its value is the value\nreturned by the function.\n\n * Writing a Function Call [Calling-A-Function.html]\n * Controlling Variable Scope [Variable-Scope.html]\n * Passing Function Arguments by Value Or by Reference [Pass-By-Value_002fReference.html]\n * Other Points About Calling Functions [Function-Caveats.html]", "doc_id": "3044b959-d29b-47f4-9e9e-314f2f57a9ac", "embedding": null, "doc_hash": "5138056ee194059e09d61e890703fd90346e722e142440e003a7758729bf2e92", "extra_info": null, "node_info": {"start": 0, "end": 811, "_node_type": "1"}, "relationships": {"1": "a7afd14d-1708-4eb5-910a-96fd24197561"}}, "__type__": "1"}, "6333d5e7-ecdc-402d-b026-fcc5a24602d9": {"__data__": {"text": "Next: Operator Precedence (How Operators Nest) [Precedence.html], Previous: Truth Values and Conditions\n[Truth-Values-and-Conditions.html], Up: Expressions [Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.4 FUNCTION CALLS\n\nA function is a name for a particular calculation. This enables you to ask for it by name at any point in the program. For\nexample, the function sqrt() computes the square root of a number.\n\nA fixed set of functions are built in, which means they are available in every awk program. The sqrt() function is one of these.\nSee Built-in Functions [Built_002din.html] for a list of built-in functions and their descriptions. In addition, you can define\nfunctions for use in your program. See User-Defined Functions [User_002ddefined.html] for instructions on how to do this. Finally,\ngawk lets you write functions in C or C++ that may be called from your program (see Writing Extensions for gawk\n[Dynamic-Extensions.html]).\n\nThe way to use a function is with a function call expression, which consists of the function name followed immediately by a list\nof arguments in parentheses. The arguments are expressions that provide the raw materials for the function\u2019s calculations. When\nthere is more than one argument, they are separated by commas. If there are no arguments, just write \u2018()\u2019 after the function name.\nThe following examples show function calls with and without arguments:\n\nsqrt(x^2 + y^2)        one argument\natan2(y, x)            two arguments\nrand()                 no arguments\n\n\n> CAUTION: Do not put any space between the function name and the opening parenthesis! A user-defined function name looks just\n> like the name of a variable\u2014a space would make the expression look like concatenation of a variable with an expression inside\n> parentheses. With built-in functions, space before the parenthesis is harmless, but it is best not to get into the habit of\n> using space to avoid mistakes with user-defined functions.\n\nEach function expects a particular number of arguments. For example, the sqrt() function must be called with a single argument,\nthe number of which to take the square root:\n\nsqrt(argument)\n\n\nSome of the built-in functions have one or more optional arguments. If those arguments are not supplied, the functions use a\nreasonable default value. See Built-in Functions [Built_002din.html] for full details. If arguments are omitted in calls to\nuser-defined functions, then those arguments are treated as local variables. Such local variables act like the empty string if\nreferenced where a string value is required, and like zero if referenced where a numeric value is required (see User-Defined\nFunctions [User_002ddefined.html]).\n\nAs an advanced feature, gawk provides indirect function calls, which is a way to choose the function to call at runtime, instead\nof when you write the source code to your program. We defer discussion of this feature until later; see Indirect Function Calls\n[Indirect-Calls.html].\n\nLike every other expression, the function call has a value, often called the return value, which is computed by the function based\non the arguments you give it. In this example, the return value of \u2018sqrt(argument)\u2019 is the square root of argument. The following\nprogram reads numbers, one number per line, and prints the square root of each one:\n\n$ awk '{ print \"The square root of\", $1, \"is\", sqrt($1) }'\n1\n-| The square root of 1 is 1\n3\n-| The square root of 3 is 1.73205\n5\n-| The square root of 5 is 2.23607\nCtrl-d\n\n\nA function can also have side effects, such as assigning values to certain variables or doing I/O. This program shows how the\nmatch() function (see String-Manipulation Functions [String-Functions.html]) changes", "doc_id": "6333d5e7-ecdc-402d-b026-fcc5a24602d9", "embedding": null, "doc_hash": "67c2c8b14b7a0ab4b63c0fa54aca2cb3598180fc88089de59de8725abb12adde", "extra_info": null, "node_info": {"start": 0, "end": 3861, "_node_type": "1"}, "relationships": {"1": "1be9f85c-a1e4-4f19-9d36-1b88a1d16631", "3": "30c64545-ba0e-46f4-8ded-b95248e04249"}}, "__type__": "1"}, "30c64545-ba0e-46f4-8ded-b95248e04249": {"__data__": {"text": "function (see String-Manipulation Functions [String-Functions.html]) changes the variables RSTART and RLENGTH:\n\n{\n    if (match($1, $2))\n        print RSTART, RLENGTH\n    else\n        print \"no match\"\n}\n\n\nHere is a sample run:\n\n$ awk -f matchit.awk\naaccdd  c+\n-| 3 2\nfoo     bar\n-| no match\nabcdefg e\n-| 5 1\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Operator Precedence (How Operators Nest) [Precedence.html], Previous: Truth Values and Conditions\n[Truth-Values-and-Conditions.html], Up: Expressions [Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "30c64545-ba0e-46f4-8ded-b95248e04249", "embedding": null, "doc_hash": "6f51fff25eef6a2f9d6adce9e24cb8f9b5ecef58ef905688c57a9c356900594e", "extra_info": null, "node_info": {"start": 3785, "end": 4460, "_node_type": "1"}, "relationships": {"1": "1be9f85c-a1e4-4f19-9d36-1b88a1d16631", "2": "6333d5e7-ecdc-402d-b026-fcc5a24602d9"}}, "__type__": "1"}, "de233484-494c-4dd2-8a03-82d1d89490e6": {"__data__": {"text": "Previous: Passing Function Arguments by Value Or by Reference [Pass-By-Value_002fReference.html], Up: Calling User-Defined\nFunctions [Function-Calling.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.3.4 OTHER POINTS ABOUT CALLING FUNCTIONS\n\nSome awk implementations allow you to call a function that has not been defined. They only report a problem at runtime, when the\nprogram actually tries to call the function. For example:\n\nBEGIN {\n    if (0)\n        foo()\n    else\n        bar()\n}\nfunction bar() { \u2026 }\n# note that `foo' is not defined\n\n\nBecause the \u2018if\u2019 statement will never be true, it is not really a problem that foo() has not been defined. Usually, though, it is\na problem if a program calls an undefined function.\n\nIf --lint is specified (see Command-Line Options [Options.html]), gawk reports calls to undefined functions.\n\nSome awk implementations generate a runtime error if you use either the next statement or the nextfile statement (see The next\nStatement [Next-Statement.html], and see The nextfile Statement [Nextfile-Statement.html]) inside a user-defined function. gawk\ndoes not have this limitation.\n\nYou can call a function and pass it more parameters than it was declared with, like so:\n\nfunction foo(p1, p2)\n{\n    \u2026\n}\n\nBEGIN {\n    foo(1, 2, 3, 4)\n}\n\n\nDoing so is bad practice, however. The called function cannot do anything with the additional values being passed to it, so awk\nevaluates the expressions but then just throws them away.\n\nMore importantly, such a call is confusing for whoever will next read your program.63 Function parameters generally are input\nitems that influence the computation performed by the function. Calling a function with more parameters than it accepts gives the\nfalse impression that those values are important to the function, when in fact they are not.\n\nBecause this is such a bad practice, gawk unconditionally issues a warning whenever it executes such a function call. (If you\ndon\u2019t like the warning, fix your code! It\u2019s incorrect, after all.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(63)\n\nSaid person might even be you, sometime in the future, at which point you will wonder, \u201cwhat was I thinking?!?\u201d\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Passing Function Arguments by Value Or by Reference [Pass-By-Value_002fReference.html], Up: Calling User-Defined\nFunctions [Function-Calling.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "de233484-494c-4dd2-8a03-82d1d89490e6", "embedding": null, "doc_hash": "f73a780b81ec98cb548f2a0f86431b714e9bc7fde94429459e459474d0cbc4e1", "extra_info": null, "node_info": {"start": 0, "end": 2770, "_node_type": "1"}, "relationships": {"1": "cc285eff-c1d3-4e2f-9186-934d3da74e10"}}, "__type__": "1"}, "f474ade8-79d3-4652-9a1e-4c687f281018": {"__data__": {"text": "Next: Calling User-Defined Functions [Function-Calling.html], Previous: Function Definition Syntax [Definition-Syntax.html], Up:\nUser-Defined Functions [User_002ddefined.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.2 FUNCTION DEFINITION EXAMPLES\n\nHere is an example of a user-defined function, called myprint(), that takes a number and prints it in a specific format:\n\nfunction myprint(num)\n{\n     printf \"%6.3g\\n\", num\n}\n\n\nTo illustrate, here is an awk rule that uses our myprint() function:\n\n$3 > 0     { myprint($3) }\n\n\nThis program prints, in our special format, all the third fields that contain a positive number in our input. Therefore, when\ngiven the following input:\n\n 1.2   3.4    5.6   7.8\n 9.10 11.12 -13.14 15.16\n17.18 19.20  21.22 23.24\n\n\nthis program, using our function to format the results, prints:\n\n   5.6\n  21.2\n\n\nThis function deletes all the elements in an array (recall that the extra whitespace signifies the start of the local variable\nlist):\n\nfunction delarray(a,    i)\n{\n    for (i in a)\n        delete a[i]\n}\n\n\nWhen working with arrays, it is often necessary to delete all the elements in an array and start over with a new list of elements\n(see The delete Statement [Delete.html]). Instead of having to repeat this loop everywhere that you need to clear out an array,\nyour program can just call delarray(). (This guarantees portability. The use of \u2018delete array\u2019 to delete the contents of an entire\narray is a relatively recent62 addition to the POSIX standard.)\n\nThe following is an example of a recursive function. It takes a string as an input parameter and returns the string in reverse\norder. Recursive functions must always have a test that stops the recursion. In this case, the recursion terminates when the input\nstring is already empty:\n\nfunction rev(str)\n{\n    if (str == \"\")\n        return \"\"\n\n    return (rev(substr(str, 2)) substr(str, 1, 1))\n}\n\n\nIf this function is in a file named rev.awk, it can be tested this way:\n\n$ echo \"Don't Panic!\" |\n> gawk -e '{ print rev($0) }' -f rev.awk\n-| !cinaP t'noD\n\n\nThe C ctime() function takes a timestamp and returns it as a string, formatted in a well-known fashion. The following example uses\nthe built-in strftime() function (see Time Functions [Time-Functions.html]) to create an awk version of ctime():\n\n# ctime.awk\n#\n# awk version of C ctime(3) function\n\nfunction ctime(ts,    format)\n{\n    format = \"%a %b %e %H:%M:%S %Z %Y\"\n\n    if (ts == 0)\n        ts = systime()       # use current time as default\n    return strftime(format, ts)\n}\n\n\nYou might think that ctime() could use PROCINFO[\"strftime\"] for its format string. That would be a mistake, because ctime() is\nsupposed to return the time formatted in a standard fashion, and user-level code could have changed PROCINFO[\"strftime\"].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(62)\n\nLate in 2012.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Calling User-Defined Functions [Function-Calling.html], Previous: Function Definition Syntax [Definition-Syntax.html], Up:\nUser-Defined Functions [User_002ddefined.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f474ade8-79d3-4652-9a1e-4c687f281018", "embedding": null, "doc_hash": "39783c636c9af176c67ad0a995ba52270746d5020b3f6381f4a1556b0abbf0d8", "extra_info": null, "node_info": {"start": 0, "end": 3464, "_node_type": "1"}, "relationships": {"1": "9bf621bb-1287-4ef9-884a-944fde799720"}}, "__type__": "1"}, "d6c15559-e4da-4864-9912-51d36db56413": {"__data__": {"text": "Previous: Indirect Function Calls [Indirect-Calls.html], Up: Functions [Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n9.4 SUMMARY\n\n * awk provides built-in functions and lets you define your own functions.\n * POSIX awk provides three kinds of built-in functions: numeric, string, and I/O. gawk provides functions that sort arrays, work\n   with values representing time, do bit manipulation, determine variable type (array versus scalar), and internationalize and\n   localize programs. gawk also provides several extensions to some of standard functions, typically in the form of additional\n   arguments.\n * Functions accept zero or more arguments and return a value. The expressions that provide the argument values are completely\n   evaluated before the function is called. Order of evaluation is not defined. The return value can be ignored.\n * The handling of backslash in sub() and gsub() is not simple. It is more straightforward in gawk\u2019s gensub() function, but that\n   function still requires care in its use.\n * User-defined functions provide important capabilities but come with some syntactic inelegancies. In a function call, there\n   cannot be any space between the function name and the opening left parenthesis of the argument list. Also, there is no\n   provision for local variables, so the convention is to add extra parameters, and to separate them visually from the real\n   parameters by extra whitespace.\n * User-defined functions may call other user-defined (and built-in) functions and may call themselves recursively. Function\n   parameters \u201chide\u201d any global variables of the same names. You cannot use the name of a reserved variable (such as ARGC) as the\n   name of a parameter in user-defined functions.\n * Scalar values are passed to user-defined functions by value. Array parameters are passed by reference; any changes made by the\n   function to array parameters are thus visible after the function has returned.\n * Use the return statement to return from a user-defined function. An optional expression becomes the function\u2019s return value.\n   Only scalar values may be returned by a function.\n * If a variable that has never been used is passed to a user-defined function, how that function treats the variable can set its\n   nature: either scalar or array.\n * gawk provides indirect function calls using a special syntax. By setting a variable to the name of a function, you can\n   determine at runtime what function will be called at that point in the program. This is equivalent to function pointers in C\n   and C++.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Indirect Function Calls [Indirect-Calls.html], Up: Functions [Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d6c15559-e4da-4864-9912-51d36db56413", "embedding": null, "doc_hash": "78902e2e7a68513999d83c5948f44746305b12c47f7318cf29e581067b188420", "extra_info": null, "node_info": {"start": 0, "end": 2991, "_node_type": "1"}, "relationships": {"1": "7d47b796-d69f-4a87-8234-d0629d1155fa"}}, "__type__": "1"}, "cd2c3088-e9af-4d1b-ad34-84c07a9f5530": {"__data__": {"text": "Next: A Library of awk Functions [Library-Functions.html], Previous: Arrays in awk [Arrays.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n9 FUNCTIONS\n\nThis chapter describes awk\u2019s built-in functions, which fall into three categories: numeric, string, and I/O. gawk provides\nadditional groups of functions to work with values that represent time, do bit manipulation, sort arrays, provide type\ninformation, and internationalize and localize programs.\n\nBesides the built-in functions, awk has provisions for writing new functions that the rest of a program can use. The second half\nof this chapter describes these user-defined functions. Finally, we explore indirect function calls, a gawk-specific extension\nthat lets you determine at runtime what function is to be called.\n\n * Built-in Functions [Built_002din.html]\n * User-Defined Functions [User_002ddefined.html]\n * Indirect Function Calls [Indirect-Calls.html]\n * Summary [Functions-Summary.html]", "doc_id": "cd2c3088-e9af-4d1b-ad34-84c07a9f5530", "embedding": null, "doc_hash": "69a5526c896fcf122309dd00b57e106a7a31e5bd01218731a1dab24296fcf630", "extra_info": null, "node_info": {"start": 0, "end": 1141, "_node_type": "1"}, "relationships": {"1": "a7276d79-e83e-446a-947a-c15072631047"}}, "__type__": "1"}, "f49ea804-b81c-4edc-9c13-279f048ee088": {"__data__": {"text": "Next: Some Limitations of the Implementation [Implementation-Limitations.html], Previous: Making Additions to gawk\n[Additions.html], Up: Implementation Notes [Notes.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nC.3 PROBABLE FUTURE EXTENSIONS\n\n> AWK is a language similar to PERL, only considerably more elegant.\n\n\u2014 Arnold Robbins\n\n> Hey!\n\n\u2014 Larry Wall\n\nThe TODO file in the master branch of the gawk Git repository lists possible future enhancements. Some of these relate to the\nsource code, and others to possible new features. Please see that file for the list. See Making Additions to gawk\n[Additions.html], if you are interested in tackling any of the projects listed there.", "doc_id": "f49ea804-b81c-4edc-9c13-279f048ee088", "embedding": null, "doc_hash": "b37b165ec6c63dce1be22272c6b66b9c6a9f0d4a13e36d9491b2d1b45dc157f6", "extra_info": null, "node_info": {"start": 0, "end": 831, "_node_type": "1"}, "relationships": {"1": "c78bd177-fa9b-4ece-be84-46c77a169b27"}}, "__type__": "1"}, "b85d199c-4ca0-4adb-a1e1-b552af5c5dba": {"__data__": {"text": "Next: Index [Index.html], Previous: GNU General Public License [Copying.html], Up: General Introduction [index.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nGNU FREE DOCUMENTATION LICENSE\n\nVersion 1.3, 3 November 2008\n\nCopyright \u00a9 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.\nhttps://fsf.org/https://fsf.org/\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n\n 0.  PREAMBLE\n     \n     The purpose of this License is to make a manual, textbook, or other functional and useful document free in the sense of\n     freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either\n     commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for\n     their work, while not being considered responsible for modifications made by others.\n     \n     This License is a kind of \u201ccopyleft\u201d, which means that derivative works of the document must themselves be free in the same\n     sense. It complements the GNU General Public License, which is a copyleft license designed for free software.\n     \n     We have designed this License in order to use it for manuals for free software, because free software needs free\n     documentation: a free program should come with manuals providing the same freedoms that the software does. But this License\n     is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is\n     published as a printed book. We recommend this License principally for works whose purpose is instruction or reference.\n\n 1.  APPLICABILITY AND DEFINITIONS\n     \n     This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying\n     it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in\n     duration, to use that work under the conditions stated herein. The \u201cDocument\u201d, below, refers to any such manual or work. Any\n     member of the public is a licensee, and is addressed as \u201cyou\u201d. You accept the license if you copy, modify or distribute the\n     work in a way requiring permission under copyright law.\n     \n     A \u201cModified Version\u201d of the Document means any work containing the Document or a portion of it, either copied verbatim, or\n     with modifications and/or translated into another language.\n     \n     A \u201cSecondary Section\u201d is a named appendix or a front-matter section of the Document that deals exclusively with the\n     relationship of the publishers or authors of the Document to the Document\u2019s overall subject (or to related matters) and\n     contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of\n     mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical\n     connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position\n     regarding them.\n     \n     The \u201cInvariant Sections\u201d are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in\n     the notice that says that the Document is released under this License. If a section does not fit the above definition of\n     Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the\n     Document does not identify any Invariant Sections then there are none.\n", "doc_id": "b85d199c-4ca0-4adb-a1e1-b552af5c5dba", "embedding": null, "doc_hash": "e091a4ec62633d58c3d7c2ac1a0d22aba0ef0593b1d2fedc830a3846ab92d508", "extra_info": null, "node_info": {"start": 0, "end": 3767, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "3": "d5f07dbc-b4bd-48c9-ba59-8d2c55c1a7c4"}}, "__type__": "1"}, "d5f07dbc-b4bd-48c9-ba59-8d2c55c1a7c4": {"__data__": {"text": "  Document does not identify any Invariant Sections then there are none.\n     \n     The \u201cCover Texts\u201d are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice\n     that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text\n     may be at most 25 words.\n     \n     A \u201cTransparent\u201d copy of the Document means a machine-readable copy, represented in a format whose specification is available\n     to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images\n     composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for\n     input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy\n     made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage\n     subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount\n     of text. A copy that is not \u201cTransparent\u201d is called \u201cOpaque\u201d.\n     \n     Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input\n     format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human\n     modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that\n     can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not\n     generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes\n     only.\n     \n     The \u201cTitle Page\u201d means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly,\n     the material this License requires to appear in the title page. For works in formats which do not have any title page as\n     such, \u201cTitle Page\u201d means the text near the most prominent appearance of the work\u2019s title, preceding the beginning of the body\n     of the text.\n     \n     The \u201cpublisher\u201d means any person or entity that distributes copies of the Document to the public.\n     \n     A section \u201cEntitled XYZ\u201d means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in\n     parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned\n     below, such as \u201cAcknowledgements\u201d, \u201cDedications\u201d, \u201cEndorsements\u201d, or \u201cHistory\u201d.) To \u201cPreserve the Title\u201d of such a section\n     when you modify the Document means that it remains a section \u201cEntitled XYZ\u201d according to this definition.\n     \n     The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document.\n     These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming\n     warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this\n     License.\n\n 2.  VERBATIM COPYING\n     \n     You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License,\n     the copyright notices, and the license notice saying this License applies", "doc_id": "d5f07dbc-b4bd-48c9-ba59-8d2c55c1a7c4", "embedding": null, "doc_hash": "09189c3e8d332f958f3305c0202d07159f4ff7acddc7ff6077738b50df5d1309", "extra_info": null, "node_info": {"start": 3707, "end": 7239, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "2": "b85d199c-4ca0-4adb-a1e1-b552af5c5dba", "3": "c8bff656-39c7-4e0a-a2c6-59f73a147312"}}, "__type__": "1"}, "c8bff656-39c7-4e0a-a2c6-59f73a147312": {"__data__": {"text": "    the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and\n     that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or\n     control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange\n     for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3.\n     \n     You may also lend copies, under the same conditions stated above, and you may publicly display copies.\n\n 3.  COPYING IN QUANTITY\n     \n     If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than\n     100, and the Document\u2019s license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and\n     legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers\n     must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with\n     all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with\n     changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be\n     treated as verbatim copying in other respects.\n     \n     If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as\n     fit reasonably) on the actual cover, and continue the rest onto adjacent pages.\n     \n     If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a\n     machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network\n     location from which the general network-using public has access to download using public-standard network protocols a\n     complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably\n     prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain\n     thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or\n     through your agents or retailers) of that edition to the public.\n     \n     It is requested, but not required, that you contact the authors of the Document well before redistributing any large number\n     of copies, to give them a chance to provide you with an updated version of the Document.\n\n 4.  MODIFICATIONS\n     \n     You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that\n     you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document,\n     thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must\n     do these things in the Modified Version:\n     \n     A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous\n        versions (which should, if there were any, be listed in the History section of the Document). You may use the same title\n        as a previous version if the original publisher of that version gives permission.\n     B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the\n        Modified Version, together with at least five of the principal", "doc_id": "c8bff656-39c7-4e0a-a2c6-59f73a147312", "embedding": null, "doc_hash": "4ad54a50d8b56756b2aa298ac9e6ef888c0009530b070c5de46eb15132872990", "extra_info": null, "node_info": {"start": 7238, "end": 10987, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "2": "d5f07dbc-b4bd-48c9-ba59-8d2c55c1a7c4", "3": "b84629d5-5740-41c0-aee5-eecc14f212bf"}}, "__type__": "1"}, "b84629d5-5740-41c0-aee5-eecc14f212bf": {"__data__": {"text": "     Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if\n        it has fewer than five), unless they release you from this requirement.\n     C. State on the Title page the name of the publisher of the Modified Version, as the publisher.\n     D. Preserve all the copyright notices of the Document.\n     E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices.\n     F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified\n        Version under the terms of this License, in the form shown in the Addendum below.\n     G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document\u2019s\n        license notice.\n     H. Include an unaltered copy of this License.\n     I. Preserve the section Entitled \u201cHistory\u201d, Preserve its Title, and add to it an item stating at least the title, year, new\n        authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \u201cHistory\u201d in\n        the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then\n        add an item describing the Modified Version as stated in the previous sentence.\n     J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and\n        likewise the network locations given in the Document for previous versions it was based on. These may be placed in the\n        \u201cHistory\u201d section. You may omit a network location for a work that was published at least four years before the Document\n        itself, or if the original publisher of the version it refers to gives permission.\n     K. For any section Entitled \u201cAcknowledgements\u201d or \u201cDedications\u201d, Preserve the Title of the section, and preserve in the\n        section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein.\n     L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the\n        equivalent are not considered part of the section titles.\n     M. Delete any section Entitled \u201cEndorsements\u201d. Such a section may not be included in the Modified Version.\n     N. Do not retitle any existing section to be Entitled \u201cEndorsements\u201d or to conflict in title with any Invariant Section.\n     O. Preserve any Warranty Disclaimers.\n     \n     If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no\n     material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this,\n     add their titles to the list of Invariant Sections in the Modified Version\u2019s license notice. These titles must be distinct\n     from any other section titles.\n     \n     You may add a section Entitled \u201cEndorsements\u201d, provided it contains nothing but endorsements of your Modified Version by\n     various parties\u2014for example, statements of peer review or that the text has been approved by an organization as the\n     authoritative definition of a standard.\n     \n     You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the\n     end of the list of Cover Texts in the Modified Version. Only one passage of", "doc_id": "b84629d5-5740-41c0-aee5-eecc14f212bf", "embedding": null, "doc_hash": "e6212c5cafe4f1b2bdc53d4aa1ac21f4206a3f1589b6d25753d73e69a873fb75", "extra_info": null, "node_info": {"start": 10998, "end": 14504, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "2": "c8bff656-39c7-4e0a-a2c6-59f73a147312", "3": "896e10a6-42a2-407d-b5ff-fde999481d55"}}, "__type__": "1"}, "896e10a6-42a2-407d-b5ff-fde999481d55": {"__data__": {"text": " end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may\n     be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same\n     cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add\n     another; but you may replace the old one, on explicit permission from the previous publisher that added the old one.\n     \n     The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or\n     to assert or imply endorsement of any Modified Version.\n\n 5.  COMBINING DOCUMENTS\n     \n     You may combine the Document with other documents released under this License, under the terms defined in section 4 above for\n     modified versions, provided that you include in the combination all of the Invariant Sections of all of the original\n     documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you\n     preserve all their Warranty Disclaimers.\n     \n     The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with\n     a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each\n     such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section\n     if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the\n     license notice of the combined work.\n     \n     In the combination, you must combine any sections Entitled \u201cHistory\u201d in the various original documents, forming one section\n     Entitled \u201cHistory\u201d; likewise combine any sections Entitled \u201cAcknowledgements\u201d, and any sections Entitled \u201cDedications\u201d. You\n     must delete all sections Entitled \u201cEndorsements.\u201d\n\n 6.  COLLECTIONS OF DOCUMENTS\n     \n     You may make a collection consisting of the Document and other documents released under this License, and replace the\n     individual copies of this License in the various documents with a single copy that is included in the collection, provided\n     that you follow the rules of this License for verbatim copying of each of the documents in all other respects.\n     \n     You may extract a single document from such a collection, and distribute it individually under this License, provided you\n     insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim\n     copying of that document.\n\n 7.  AGGREGATION WITH INDEPENDENT WORKS\n     \n     A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of\n     a storage or distribution medium, is called an \u201caggregate\u201d if the copyright resulting from the compilation is not used to\n     limit the legal rights of the compilation\u2019s users beyond what the individual works permit. When the Document is included in\n     an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of\n     the Document.\n     \n     If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than\n     one half of the entire aggregate, the Document\u2019s Cover Texts may be placed on covers that bracket the Document within the\n     aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on\n     printed", "doc_id": "896e10a6-42a2-407d-b5ff-fde999481d55", "embedding": null, "doc_hash": "af58161dead76fbc2cef8ec0d141aec2927b4c273673d03b8539a6bb5768745c", "extra_info": null, "node_info": {"start": 14497, "end": 18206, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "2": "b84629d5-5740-41c0-aee5-eecc14f212bf", "3": "75315c01-ac2c-4e30-87c7-907724f4f852"}}, "__type__": "1"}, "75315c01-ac2c-4e30-87c7-907724f4f852": {"__data__": {"text": "the Document is in electronic form. Otherwise they must appear on\n     printed covers that bracket the whole aggregate.\n\n 8.  TRANSLATION\n     \n     Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of\n     section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you\n     may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections.\n     You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers,\n     provided that you also include the original English version of this License and the original versions of those notices and\n     disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or\n     disclaimer, the original version will prevail.\n     \n     If a section in the Document is Entitled \u201cAcknowledgements\u201d, \u201cDedications\u201d, or \u201cHistory\u201d, the requirement (section 4) to\n     Preserve its Title (section 1) will typically require changing the actual title.\n\n 9.  TERMINATION\n     \n     You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt\n     otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this\n     License.\n     \n     However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a)\n     provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if\n     the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\n     \n     Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of\n     the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any\n     work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\n     \n     Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights\n     from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or\n     all of the same material does not give you any rights to use it.\n\n 10. FUTURE REVISIONS OF THIS LICENSE\n     \n     The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such\n     new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\n     See https://www.gnu.org/copyleft/ [https://www.gnu.org/copyleft/].\n     \n     Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered\n     version of this License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions\n     either of that specified version or of any later version that has been published (not as a draft) by the Free Software\n     Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not\n     as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this\n     License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that\n     version for the", "doc_id": "75315c01-ac2c-4e30-87c7-907724f4f852", "embedding": null, "doc_hash": "ac0d145fda0871f9f7c10dd9ce069761286238db5b485aab2bdeaaa3775acae9", "extra_info": null, "node_info": {"start": 18205, "end": 21953, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "2": "896e10a6-42a2-407d-b5ff-fde999481d55", "3": "e8e0557e-aa9f-419c-8dd6-ec0cf68ef837"}}, "__type__": "1"}, "e8e0557e-aa9f-419c-8dd6-ec0cf68ef837": {"__data__": {"text": "a version permanently authorizes you to choose that\n     version for the Document.\n\n 11. RELICENSING\n     \n     \u201cMassive Multiauthor Collaboration Site\u201d (or \u201cMMC Site\u201d) means any World Wide Web server that publishes copyrightable works\n     and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of\n     such a server. A \u201cMassive Multiauthor Collaboration\u201d (or \u201cMMC\u201d) contained in the site means any set of copyrightable works\n     thus published on the MMC site.\n     \n     \u201cCC-BY-SA\u201d means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a\n     not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft\n     versions of that license published by that same organization.\n     \n     \u201cIncorporate\u201d means to publish or republish a Document, in whole or in part, as part of another Document.\n     \n     An MMC is \u201celigible for relicensing\u201d if it is licensed under this License, and if all works that were first published under\n     this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover\n     texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008.\n     \n     The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before\n     August 1, 2009, provided the MMC is eligible for relicensing.\n\n * ADDENDUM: How to use this License for your documents\n\n\nADDENDUM: HOW TO USE THIS LICENSE FOR YOUR DOCUMENTS\n\nTo use this License in a document you have written, include a copy of the License in the document and put the following copyright\nand license notices just after the title page:\n\n  Copyright (C)  year  your name.\n  Permission is granted to copy, distribute and/or modify this document\n  under the terms of the GNU Free Documentation License, Version 1.3\n  or any later version published by the Free Software Foundation;\n  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover\n  Texts.  A copy of the license is included in the section entitled ``GNU\n  Free Documentation License''.\n\n\nIf you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \u201cwith\u2026Texts.\u201d line with this:\n\n    with the Invariant Sections being list their titles, with\n    the Front-Cover Texts being list, and with the Back-Cover Texts\n    being list.\n\n\nIf you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit\nthe situation.\n\nIf your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice\nof free software license, such as the GNU General Public License, to permit their use in free software.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Index [Index.html], Previous: GNU General Public License [Copying.html], Up: General Introduction [index.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "e8e0557e-aa9f-419c-8dd6-ec0cf68ef837", "embedding": null, "doc_hash": "11d2d49fefc5b80d67a80c3f953c6c74f717bfaa54a225bd23ed167d91f76b98", "extra_info": null, "node_info": {"start": 21944, "end": 25131, "_node_type": "1"}, "relationships": {"1": "4bef2b94-8207-452b-98a1-5e0c83bd6d1d", "2": "75315c01-ac2c-4e30-87c7-907724f4f852"}}, "__type__": "1"}, "aa3fa935-0f20-42fa-ba9a-a9644e44b756": {"__data__": {"text": "Next: Case Sensitivity in Matching [Case_002dsensitivity.html], Previous: Using Dynamic Regexps [Computed-Regexps.html], Up:\nRegular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.7 GAWK-SPECIFIC REGEXP OPERATORS\n\nGNU software that deals with regular expressions provides a number of additional regexp operators. These operators are described\nin this section and are specific to gawk; they are not available in other awk implementations. Most of the additional operators\ndeal with word matching. For our purposes, a word is a sequence of one or more letters, digits, or underscores (\u2018_\u2019):\n\n\\s\n\nMatches any space character as defined by the current locale. Think of it as shorthand for \u2018[[:space:]]\u2019.\n\n\\S\n\nMatches any character that is not a space, as defined by the current locale. Think of it as shorthand for \u2018[^[:space:]]\u2019.\n\n\\w\n\nMatches any word-constituent character\u2014that is, it matches any letter, digit, or underscore. Think of it as shorthand for\n\u2018[[:alnum:]_]\u2019.\n\n\\W\n\nMatches any character that is not word-constituent. Think of it as shorthand for \u2018[^[:alnum:]_]\u2019.\n\n\\<\n\nMatches the empty string at the beginning of a word. For example, /\\<away/ matches \u2018away\u2019 but not \u2018stowaway\u2019.\n\n\\>\n\nMatches the empty string at the end of a word. For example, /stow\\>/ matches \u2018stow\u2019 but not \u2018stowaway\u2019.\n\n\\y\n\nMatches the empty string at either the beginning or the end of a word (i.e., the word boundary). For example, \u2018\\yballs?\\y\u2019 matches\neither \u2018ball\u2019 or \u2018balls\u2019, as a separate word.\n\n\\B\n\nMatches the empty string that occurs between two word-constituent characters. For example, /\\Brat\\B/ matches \u2018crate\u2019, but it does\nnot match \u2018dirty rat\u2019. \u2018\\B\u2019 is essentially the opposite of \u2018\\y\u2019. Another way to think of this is that \u2018\\B\u2019 matches the empty\nstring provided it\u2019s not at the edge of a word.\n\nThere are two other operators that work on buffers. In Emacs, a buffer is, naturally, an Emacs buffer. Other GNU programs,\nincluding gawk, consider the entire string to match as the buffer. The operators are:\n\n\\`\n\nMatches the empty string at the beginning of a buffer (string)\n\n\\'\n\nMatches the empty string at the end of a buffer (string)\n\nBecause \u2018^\u2019 and \u2018$\u2019 always work in terms of the beginning and end of strings, these operators don\u2019t add any new capabilities for\nawk. They are provided for compatibility with other GNU software.\n\nIn other GNU software, the word-boundary operator is \u2018\\b\u2019. However, that conflicts with the awk language\u2019s definition of \u2018\\b\u2019 as\nbackspace, so gawk uses a different letter. An alternative method would have been to require two backslashes in the GNU operators,\nbut this was deemed too confusing. The current method of using \u2018\\y\u2019 for the GNU \u2018\\b\u2019 appears to be the lesser of two evils.\n\nThe various command-line options (see Command-Line Options [Options.html]) control how gawk interprets characters in regexps:\n\nNo options\n\nIn the default case, gawk provides all the facilities of POSIX regexps and the previously described GNU regexp operators. GNU\nregexp operators described in Regular Expression Operators [Regexp-Operators.html].\n\n--posix\n\nMatch only POSIX regexps; the GNU operators are not special (e.g., \u2018\\w\u2019 matches a", "doc_id": "aa3fa935-0f20-42fa-ba9a-a9644e44b756", "embedding": null, "doc_hash": "96c966cbba99c53a0b72cb114675cca444a11ca51f22fa99b1d5057b034bb26a", "extra_info": null, "node_info": {"start": 0, "end": 3323, "_node_type": "1"}, "relationships": {"1": "05c3801a-f835-48a3-9009-86e66e22f8b4", "3": "37ac3a04-b249-46e0-9cd3-799294fc0d4e"}}, "__type__": "1"}, "37ac3a04-b249-46e0-9cd3-799294fc0d4e": {"__data__": {"text": "operators are not special (e.g., \u2018\\w\u2019 matches a literal \u2018w\u2019). Interval expressions are allowed.\n\n--traditional\n\nMatch traditional Unix awk regexps. The GNU operators are not special. Because BWK awk supports them, the POSIX character classes\n(\u2018[[:alnum:]]\u2019, etc.) are available. So too, interval expressions are allowed. Characters described by octal and hexadecimal\nescape sequences are treated literally, even if they represent regexp metacharacters.\n\n--re-interval\n\nThis option remains for backwards compatibility but no longer has any real effect.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Case Sensitivity in Matching [Case_002dsensitivity.html], Previous: Using Dynamic Regexps [Computed-Regexps.html], Up:\nRegular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "37ac3a04-b249-46e0-9cd3-799294fc0d4e", "embedding": null, "doc_hash": "61581be9c7797b9f356ba5b0f66db151ea5d77d80bbea7faa4a0ab0119718ea6", "extra_info": null, "node_info": {"start": 3276, "end": 4178, "_node_type": "1"}, "relationships": {"1": "05c3801a-f835-48a3-9009-86e66e22f8b4", "2": "aa3fa935-0f20-42fa-ba9a-a9644e44b756"}}, "__type__": "1"}, "4e90bc47-e1b4-4dce-a6eb-48f943b97270": {"__data__": {"text": "Next: Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html], Up: Installing gawk [Installation.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nB.1 THE GAWK DISTRIBUTION\n\nThis section describes how to get the gawk distribution, how to extract it, and then what is in the various files and\nsubdirectories.\n\n * Getting the gawk Distribution [Getting.html]\n * Extracting the Distribution [Extracting.html]\n * Contents of the gawk Distribution [Distribution-contents.html]", "doc_id": "4e90bc47-e1b4-4dce-a6eb-48f943b97270", "embedding": null, "doc_hash": "b908b755e9f6733f5af3c82447c2ed9411c28e75edc2421cf8cb25653165dea5", "extra_info": null, "node_info": {"start": 0, "end": 640, "_node_type": "1"}, "relationships": {"1": "b74ff1b5-e0aa-4d84-a378-14040e11cef9"}}, "__type__": "1"}, "b0e08832-d657-452c-8a33-082a8aeaad82": {"__data__": {"text": "Next: Summary [I18N-Summary.html], Previous: A Simple Internationalization Example [I18N-Example.html], Up: Internationalization\nwith gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.6 GAWK CAN SPEAK YOUR LANGUAGE\n\ngawk itself has been internationalized using the GNU gettext package. (GNU gettext is described in complete detail in GNU gettext\nutilities [https://www.gnu.org/software/gettext/manual/].) As of this writing, the latest version of GNU gettext is version\n0.19.8.1 [ftp://ftp.gnu.org/gnu/gettext/gettext-0.19.8.1.tar.gz].\n\nIf a translation of gawk\u2019s messages exists, then gawk produces usage messages, warnings, and fatal errors in the local language.", "doc_id": "b0e08832-d657-452c-8a33-082a8aeaad82", "embedding": null, "doc_hash": "1f3f8477669b56ac2da98c74845a95de10e28fda6500c881570286b8c6dcbebf", "extra_info": null, "node_info": {"start": 0, "end": 844, "_node_type": "1"}, "relationships": {"1": "359369b4-74e0-4d30-ba12-05010a5345d0"}}, "__type__": "1"}, "b6c69e6d-cf7d-4065-abad-8d54b2775a0a": {"__data__": {"text": "Next: Memory Allocation Functions and Convenience Macros [Memory-Allocation-Functions.html], Previous: Introduction\n[Extension-API-Functions-Introduction.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.2 GENERAL-PURPOSE DATA TYPES\n\n> I have a true love/hate relationship with unions.\n\n\u2014 Arnold Robbins\n\n> That\u2019s the thing about unions: the compiler will arrange things so they can accommodate both love and hate.\n\n\u2014 Chet Ramey\n\nThe extension API defines a number of simple types and structures for general-purpose use. Additional, more specialized, data\nstructures are introduced in subsequent sections, together with the functions that use them.\n\nThe general-purpose types and structures are as follows:\n\ntypedef void *awk_ext_id_t;\n\nA value of this type is received from gawk when an extension is loaded. That value must then be passed back to gawk as the first\nparameter of each API function.\n\n#define awk_const \u2026\n\nThis macro expands to \u2018const\u2019 when compiling an extension, and to nothing when compiling gawk itself. This makes certain fields in\nthe API data structures unwritable from extension code, while allowing gawk to use them as it needs to.\n\ntypedef enum awk_bool { \u00a0\u00a0\u00a0\u00a0awk_false = 0, \u00a0\u00a0\u00a0\u00a0awk_true } awk_bool_t;\n\nA simple Boolean type.\n\ntypedef struct awk_string { \u00a0\u00a0\u00a0\u00a0char *str;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* data */ \u00a0\u00a0\u00a0\u00a0size_t len;\u00a0\u00a0\u00a0\u00a0\u00a0/* length thereof, in chars */ } awk_string_t;\n\nThis represents a mutable string. gawk owns the memory pointed to if it supplied the value. Otherwise, it takes ownership of the\nmemory pointed to. Such memory must come from calling one of the gawk_malloc(), gawk_calloc(), or gawk_realloc() functions!\n\nAs mentioned earlier, strings are maintained using the current multibyte encoding.\n\ntypedef enum { \u00a0\u00a0\u00a0\u00a0AWK_UNDEFINED, \u00a0\u00a0\u00a0\u00a0AWK_NUMBER, \u00a0\u00a0\u00a0\u00a0AWK_STRING, \u00a0\u00a0\u00a0\u00a0AWK_REGEX, \u00a0\u00a0\u00a0\u00a0AWK_STRNUM, \u00a0\u00a0\u00a0\u00a0AWK_ARRAY,\n\u00a0\u00a0\u00a0\u00a0AWK_SCALAR,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* opaque access to a variable */ \u00a0\u00a0\u00a0\u00a0AWK_VALUE_COOKIE,\u00a0\u00a0\u00a0/* for updating a previously created value */\n\u00a0\u00a0\u00a0\u00a0AWK_BOOL } awk_valtype_t;\n\nThis enum indicates the type of a value. It is used in the following struct.\n\ntypedef struct awk_value { \u00a0\u00a0\u00a0\u00a0awk_valtype_t val_type; \u00a0\u00a0\u00a0\u00a0union { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_string_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0s; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awknum_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0n;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_array_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_scalar_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scl; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_cookie_t\u00a0vc; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_bool_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0b; \u00a0\u00a0\u00a0\u00a0}\nu; } awk_value_t;\n\nAn \u201cawk value.\u201d The val_type member indicates what kind of value the union holds, and each member is of the appropriate type.\n\n#define str_value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u.s #define strnum_value\u00a0\u00a0\u00a0str_value #define regex_value\u00a0\u00a0\u00a0\u00a0str_value #define num_value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u.n.d #define\nnum_type\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u.n.type #define num_ptr\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0u.n.ptr #define array_cookie\u00a0\u00a0\u00a0u.a #define scalar_cookie\u00a0\u00a0u.scl #define\nvalue_cookie\u00a0\u00a0\u00a0u.vc #define bool_value\u00a0\u00a0\u00a0\u00a0\u00a0u.b\n\nUsing these macros makes accessing the fields of the awk_value_t more readable.\n\nenum AWK_NUMBER_TYPE { \u00a0\u00a0\u00a0\u00a0AWK_NUMBER_TYPE_DOUBLE, \u00a0\u00a0\u00a0\u00a0AWK_NUMBER_TYPE_MPFR, \u00a0\u00a0\u00a0\u00a0AWK_NUMBER_TYPE_MPZ };\n\nThis enum is used in the following", "doc_id": "b6c69e6d-cf7d-4065-abad-8d54b2775a0a", "embedding": null, "doc_hash": "62fcf89ee6116f335b0c3c449e76212b2e6b7431fa90d43ca97cb1f619487747", "extra_info": null, "node_info": {"start": 0, "end": 3191, "_node_type": "1"}, "relationships": {"1": "41be2939-14be-4f5b-a6dd-d1f2bd452c7c", "3": "e4e87621-8ada-41ab-8ace-9cb59048ce1e"}}, "__type__": "1"}, "e4e87621-8ada-41ab-8ace-9cb59048ce1e": {"__data__": {"text": "};\n\nThis enum is used in the following structure for defining the type of numeric value that is being worked with. It is declared at\nthe top level of the file so that it works correctly for C++ as well as for C.\n\ntypedef struct awk_number { \u00a0\u00a0\u00a0\u00a0double d; \u00a0\u00a0\u00a0\u00a0enum AWK_NUMBER_TYPE type; \u00a0\u00a0\u00a0\u00a0void *ptr; } awk_number_t;\n\nThis represents a numeric value. Internally, gawk stores every number as either a C double, a GMP integer, or an MPFR\narbitrary-precision floating-point value. In order to allow extensions to also support GMP and MPFR values, numeric values are\npassed in this structure.\n\nThe double-precision d element is always populated in data received from gawk. In addition, by examining the type member, an\nextension can determine if the ptr member is either a GMP integer (type mpz_ptr), or an MPFR floating-point value (type\nmpfr_ptr_t), and cast it appropriately.\n\n> CAUTION: Any MPFR or MPZ values that you create and pass to gawk to save are copied. This means you are responsible to release\n> the storage once you\u2019re done with it. See the sample intdiv extension for some example code.\n\ntypedef void *awk_scalar_t;\n\nScalars can be represented as an opaque type. These values are obtained from gawk and then passed back into it. This is discussed\nin a general fashion in the text following this list, and in more detail in Variable Access and Update by Cookie\n[Symbol-table-by-cookie.html].\n\ntypedef void *awk_value_cookie_t;\n\nA \u201cvalue cookie\u201d is an opaque type representing a cached value. This is also discussed in a general fashion in the text following\nthis list, and in more detail in Creating and Using Cached Values [Cached-values.html].\n\nScalar values in awk are numbers, strings, strnums, or typed regexps. The awk_value_t struct represents values. The val_type\nmember indicates what is in the union.\n\nRepresenting numbers is easy\u2014the API uses a C double. Strings require more work. Because gawk allows embedded NUL bytes in string\nvalues, a string must be represented as a pair containing a data pointer and length. This is the awk_string_t type.\n\nA strnum (numeric string) value is represented as a string and consists of user input data that appears to be numeric. When an\nextension creates a strnum value, the result is a string flagged as user input. Subsequent parsing by gawk then determines whether\nit looks like a number and should be treated as a strnum, or as a regular string.\n\nThis is useful in cases where an extension function would like to do something comparable to the split() function which sets the\nstrnum attribute on the array elements it creates. For example, an extension that implements CSV splitting would want to use this\nfeature. This is also useful for a function that retrieves a data item from a database. The PostgreSQL PQgetvalue() function, for\nexample, returns a string that may be numeric or textual depending on the contents.\n\nTyped regexp values (see Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]) are not of much use to extension\nfunctions. Extension functions can tell that they\u2019ve received them, and create them for scalar values. Otherwise, they can examine\nthe text of the regexp through regex_value.str and regex_value.len.\n\nIdentifiers (i.e., the names of global variables) can be associated with either scalar values or with arrays. In addition, gawk\nprovides true arrays of arrays, where any given array element can itself be an array. Discussion of arrays is delayed until Array\nManipulation [Array-Manipulation.html].\n\nThe various macros listed earlier make it easier to use the elements of the union as if they were fields in a struct; this is a\ncommon coding practice in C. Such code is easier to write and to read, but it remains your responsibility to make sure that", "doc_id": "e4e87621-8ada-41ab-8ace-9cb59048ce1e", "embedding": null, "doc_hash": "d19e6c0ca2d775693b61f905582a0343d6c194cb1a1a19088bef2987c22f48af", "extra_info": null, "node_info": {"start": 3160, "end": 6918, "_node_type": "1"}, "relationships": {"1": "41be2939-14be-4f5b-a6dd-d1f2bd452c7c", "2": "b6c69e6d-cf7d-4065-abad-8d54b2775a0a", "3": "f52f2b07-cc7d-4cc8-9127-a57db09ba910"}}, "__type__": "1"}, "f52f2b07-cc7d-4cc8-9127-a57db09ba910": {"__data__": {"text": "is easier to write and to read, but it remains your responsibility to make sure that the\nval_type member correctly reflects the type of the value in the awk_value_t struct.\n\nConceptually, the first three members of the union (number, string, and array) are all that is needed for working with awk values.\nHowever, because the API provides routines for accessing and changing the value of a global scalar variable only by using the\nvariable\u2019s name, there is a performance penalty: gawk must find the variable each time it is accessed and changed. This turns out\nto be a real issue, not just a theoretical one.\n\nThus, if you know that your extension will spend considerable time reading and/or changing the value of one or more scalar\nvariables, you can obtain a scalar cookie103 object for that variable, and then use the cookie for getting the variable\u2019s value or\nfor changing the variable\u2019s value. The awk_scalar_t type holds a scalar cookie, and the scalar_cookie macro provides access to the\nvalue of that type in the awk_value_t struct. Given a scalar cookie, gawk can directly retrieve or modify the value, as required,\nwithout having to find it first.\n\nThe awk_value_cookie_t type and value_cookie macro are similar. If you know that you wish to use the same numeric or string value\nfor one or more variables, you can create the value once, retaining a value cookie for it, and then pass in that value cookie\nwhenever you wish to set the value of a variable. This saves storage space within the running gawk process and reduces the time\nneeded to create the value.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(103)\n\nSee the \u201ccookie\u201d entry in the Jargon file [http://catb.org/jargon/html/C/cookie.html] for a definition of cookie, and the \u201cmagic\ncookie\u201d entry in the Jargon file [http://catb.org/jargon/html/M/magic-cookie.html] for a nice example. See also the entry for\n\u201cCookie\u201d in the Glossary [Glossary.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Memory Allocation Functions and Convenience Macros [Memory-Allocation-Functions.html], Previous: Introduction\n[Extension-API-Functions-Introduction.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f52f2b07-cc7d-4cc8-9127-a57db09ba910", "embedding": null, "doc_hash": "5071f953d9a73a2cce63e8f9d78d006ec1c1c038bec69e1130994831b52953c4", "extra_info": null, "node_info": {"start": 6866, "end": 9290, "_node_type": "1"}, "relationships": {"1": "41be2939-14be-4f5b-a6dd-d1f2bd452c7c", "2": "e4e87621-8ada-41ab-8ace-9cb59048ce1e"}}, "__type__": "1"}, "fe3b6026-e45f-4e89-acef-46e8ed5d77c8": {"__data__": {"text": "Next: Data file Management [Data-File-Management.html], Previous: Naming Library Function Global Variables [Library-Names.html],\nUp: A Library of awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.2 GENERAL PROGRAMMING\n\nThis section presents a number of functions that are of general programming use.\n\n * Converting Strings to Numbers [Strtonum-Function.html]\n * Assertions [Assert-Function.html]\n * Rounding Numbers [Round-Function.html]\n * The Cliff Random Number Generator [Cliff-Random-Function.html]\n * Translating Between Characters and Numbers [Ordinal-Functions.html]\n * Merging an Array into a String [Join-Function.html]\n * Managing the Time of Day [Getlocaltime-Function.html]\n * Reading a Whole File at Once [Readfile-Function.html]\n * Quoting Strings to Pass to the Shell [Shell-Quoting.html]\n * Checking Whether A Value Is Numeric [Isnumeric-Function.html]", "doc_id": "fe3b6026-e45f-4e89-acef-46e8ed5d77c8", "embedding": null, "doc_hash": "813c457b30d24e9b712a637c63544e6f441eae1a116e455642199eea43478844", "extra_info": null, "node_info": {"start": 0, "end": 1054, "_node_type": "1"}, "relationships": {"1": "440a5b63-c639-4618-8663-1516f7107a5e"}}, "__type__": "1"}, "03f5a904-b699-4542-9bfd-846f0a5f6142": {"__data__": {"text": "Next: Summary of getline Variants [Getline-Summary.html], Previous: Using getline into a Variable from a Coprocess\n[Getline_002fVariable_002fCoprocess.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.9 POINTS TO REMEMBER ABOUT GETLINE\n\nHere are some miscellaneous points about getline that you should bear in mind:\n\n * When getline changes the value of $0 and NF, awk does not automatically jump to the start of the program and start testing the\n   new record against every pattern. However, the new record is tested against any subsequent rules.\n * Some very old awk implementations limit the number of pipelines that an awk program may have open to just one. In gawk, there\n   is no such limit. You can open as many pipelines (and coprocesses) as the underlying operating system permits.\n * An interesting side effect occurs if you use getline without a redirection inside a BEGIN rule. Because an unredirected getline\n   reads from the command-line data files, the first getline command causes awk to set the value of FILENAME. Normally, FILENAME\n   does not have a value inside BEGIN rules, because you have not yet started to process the command-line data files. (d.c.) (See\n   The BEGIN and END Special Patterns [BEGIN_002fEND.html]; also see Built-in Variables That Convey Information\n   [Auto_002dset.html].)\n * Using FILENAME with getline (\u2018getline < FILENAME\u2019) is likely to be a source of confusion. awk opens a separate input stream\n   from the current input file. However, by not using a variable, $0 and NF are still updated. If you\u2019re doing this, it\u2019s probably\n   by accident, and you should reconsider what it is you\u2019re trying to accomplish.\n * Summary of getline Variants [Getline-Summary.html], presents a table summarizing the getline variants and which variables they\n   can affect. It is worth noting that those variants that do not use redirection can cause FILENAME to be updated if they cause\n   awk to start reading a new input file.\n * If the variable being assigned is an expression with side effects, different versions of awk behave differently upon\n   encountering end-of-file. Some versions don\u2019t evaluate the expression; many versions (including gawk) do. Here is an example,\n   courtesy of Duncan Moore:\n   \n   BEGIN {\n       system(\"echo 1 > f\")\n       while ((getline a[++c] < \"f\") > 0) { }\n       print c\n   }\n   \n   \n   Here, the side effect is the \u2018++c\u2019. Is c incremented if end-of-file is encountered before the element in a is assigned?\n   \n   gawk treats getline like a function call, and evaluates the expression \u2018a[++c]\u2019 before attempting to read from f. However, some\n   versions of awk only evaluate the expression once they know that there is a string value to be assigned.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary of getline Variants [Getline-Summary.html], Previous: Using getline into a Variable from a Coprocess\n[Getline_002fVariable_002fCoprocess.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "03f5a904-b699-4542-9bfd-846f0a5f6142", "embedding": null, "doc_hash": "5f8650674eab9b91398177d77ba130913ed3c72635bef3756b1af6ac7a3294a6", "extra_info": null, "node_info": {"start": 0, "end": 3317, "_node_type": "1"}, "relationships": {"1": "dae3c2bc-3288-4783-86bc-760f2ae6f945"}}, "__type__": "1"}, "d8ccec8a-565c-4f65-acd0-863cbed22ad3": {"__data__": {"text": "Previous: Points to Remember About getline [Getline-Notes.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.10 SUMMARY OF GETLINE VARIANTS\n\nTable 4.1 summarizes the eight variants of getline, listing which predefined variables are set by each one, and whether the\nvariant is standard or a gawk extension. Note: for each variant, gawk sets the RT predefined variable.\n\nVariantEffectawk / gawk getlineSets $0, NF, FNR, NR, and RTawk getline varSets var, FNR, NR, and RTawk getline < fileSets $0, NF,\nand RTawk getline var < fileSets var and RTawk command | getlineSets $0, NF, and RTawk command | getline varSets var and RTawk\ncommand |& getlineSets $0, NF, and RTgawk command |& getline varSets var and RTgawk\n\nTable 4.1: getline variants and what they set", "doc_id": "d8ccec8a-565c-4f65-acd0-863cbed22ad3", "embedding": null, "doc_hash": "a081f29577139bd6a9e06f72d3ab394e67c1e050eba600e471133c2c45cbc7f2", "extra_info": null, "node_info": {"start": 0, "end": 956, "_node_type": "1"}, "relationships": {"1": "3cdd291c-f8cb-4158-8bd7-6bd73ed31e4e"}}, "__type__": "1"}, "8e9a80b0-6c72-4787-9673-a14270ec4731": {"__data__": {"text": "Next: Reading Input with a Timeout [Read-Timeout.html], Previous: Multiple-Line Records [Multiple-Line.html], Up: Reading Input\nFiles [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.10 EXPLICIT INPUT WITH GETLINE\n\nSo far we have been getting our input data from awk\u2019s main input stream\u2014either the standard input (usually your keyboard,\nsometimes the output from another program) or the files specified on the command line. The awk language has a special built-in\ncommand called getline that can be used to read input under your explicit control.\n\nThe getline command is used in several different ways and should not be used by beginners. The examples that follow the\nexplanation of the getline command include material that has not been covered yet. Therefore, come back and study the getline\ncommand after you have reviewed the rest of this Web page and have a good knowledge of how awk works.\n\nThe getline command returns 1 if it finds a record and 0 if it encounters the end of the file. If there is some error in getting a\nrecord, such as a file that cannot be opened, then getline returns \u22121. In this case, gawk sets the variable ERRNO to a string\ndescribing the error that occurred.\n\nIf ERRNO indicates that the I/O operation may be retried, and PROCINFO[\"input\", \"RETRY\"] is set, then getline returns \u22122 instead\nof \u22121, and further calls to getline may be attempted. See Retrying Reads After Certain Input Errors [Retrying-Input.html] for\nfurther information about this feature.\n\nIn the following examples, command stands for a string value that represents a shell command.\n\n> NOTE: When --sandbox is specified (see Command-Line Options [Options.html]), reading lines from files, pipes, and coprocesses is\n> disabled.\n\n * Using getline with No Arguments [Plain-Getline.html]\n * Using getline into a Variable [Getline_002fVariable.html]\n * Using getline from a File [Getline_002fFile.html]\n * Using getline into a Variable from a File [Getline_002fVariable_002fFile.html]\n * Using getline from a Pipe [Getline_002fPipe.html]\n * Using getline into a Variable from a Pipe [Getline_002fVariable_002fPipe.html]\n * Using getline from a Coprocess [Getline_002fCoprocess.html]\n * Using getline into a Variable from a Coprocess [Getline_002fVariable_002fCoprocess.html]\n * Points to Remember About getline [Getline-Notes.html]\n * Summary of getline Variants [Getline-Summary.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reading Input with a Timeout [Read-Timeout.html], Previous: Multiple-Line Records [Multiple-Line.html], Up: Reading Input\nFiles [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "8e9a80b0-6c72-4787-9673-a14270ec4731", "embedding": null, "doc_hash": "6f04b8d8ce7c0e3dc6dc947c2e37d118fb7ba9ecb3065f71441bde9c2f99c16a", "extra_info": null, "node_info": {"start": 0, "end": 2892, "_node_type": "1"}, "relationships": {"1": "ac743f89-f3de-4125-a677-360f283b5aba"}}, "__type__": "1"}, "1c2c8921-9e62-4a0e-8c54-bd5c3bd56180": {"__data__": {"text": "Next: Using getline into a Variable from a Coprocess [Getline_002fVariable_002fCoprocess.html], Previous: Using getline into a\nVariable from a Pipe [Getline_002fVariable_002fPipe.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.7 USING GETLINE FROM A COPROCESS\n\nReading input into getline from a pipe is a one-way operation. The command that is started with \u2018command | getline\u2019 only sends\ndata to your awk program.\n\nOn occasion, you might want to send data to another program for processing and then read the results back. gawk allows you to\nstart a coprocess, with which two-way communications are possible. This is done with the \u2018|&\u2019 operator. Typically, you write data\nto the coprocess first and then read the results back, as shown in the following:\n\nprint \"some query\" |& \"db_server\"\n\"db_server\" |& getline\n\n\nwhich sends a query to db_server and then reads the results.\n\nThe values of NR and FNR are not changed, because the main input stream is not used. However, the record is split into fields in\nthe normal manner, thus changing the values of $0, of the other fields, and of NF and RT.\n\nCoprocesses are an advanced feature. They are discussed here only because this is the section on getline. See Two-Way\nCommunications with Another Process [Two_002dway-I_002fO.html], where coprocesses are discussed in more detail.", "doc_id": "1c2c8921-9e62-4a0e-8c54-bd5c3bd56180", "embedding": null, "doc_hash": "88a6822d04a1a304c4ac45bfb297f204b8d3572cf3d8a8ce278f452c584f0671", "extra_info": null, "node_info": {"start": 0, "end": 1527, "_node_type": "1"}, "relationships": {"1": "9cfbcb28-6854-4c16-b18c-ac8916a96193"}}, "__type__": "1"}, "b406262a-39f9-4eda-a2f0-77569235a484": {"__data__": {"text": "Next: Using getline into a Variable from a File [Getline_002fVariable_002fFile.html], Previous: Using getline into a Variable\n[Getline_002fVariable.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.3 USING GETLINE FROM A FILE\n\nUse \u2018getline < file\u2019 to read the next record from file. Here, file is a string-valued expression that specifies the file name. \u2018<\nfile\u2019 is called a redirection because it directs input to come from a different place. For example, the following program reads\nits input record from the file secondary.input when it encounters a first field with a value equal to 10 in the current input\nfile:\n\n{\n    if ($1 == 10) {\n         getline < \"secondary.input\"\n         print\n    } else\n         print\n}\n\n\nBecause the main input stream is not used, the values of NR and FNR are not changed. However, the record it reads is split into\nfields in the normal manner, so the values of $0 and the other fields are changed, resulting in a new value of NF. RT is also set.\n\nAccording to POSIX, \u2018getline < expression\u2019 is ambiguous if expression contains unparenthesized operators other than \u2018$\u2019; for\nexample, \u2018getline < dir \"/\" file\u2019 is ambiguous because the concatenation operator (not discussed yet; see String Concatenation\n[Concatenation.html]) is not parenthesized. You should write it as \u2018getline < (dir \"/\" file)\u2019 if you want your program to be\nportable to all awk implementations.", "doc_id": "b406262a-39f9-4eda-a2f0-77569235a484", "embedding": null, "doc_hash": "922545594029394cc3482eedb04cc701830a6da4d3e69208d89862667de043ee", "extra_info": null, "node_info": {"start": 0, "end": 1596, "_node_type": "1"}, "relationships": {"1": "1f693fec-5edb-47b2-994d-96128d9bd262"}}, "__type__": "1"}, "43a53b8e-963f-48f1-913c-f4e1b9a0fca1": {"__data__": {"text": "Next: Using getline into a Variable from a Pipe [Getline_002fVariable_002fPipe.html], Previous: Using getline into a Variable from\na File [Getline_002fVariable_002fFile.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.5 USING GETLINE FROM A PIPE\n\n> Omniscience has much to recommend it. Failing that, attention to details would be useful.\n\n\u2014 Brian Kernighan\n\nThe output of a command can also be piped into getline, using \u2018command | getline\u2019. In this case, the string command is run as a\nshell command and its output is piped into awk to be used as input. This form of getline reads one record at a time from the pipe.\nFor example, the following program copies its input to its output, except for lines that begin with \u2018@execute\u2019, which are replaced\nby the output produced by running the rest of the line as a shell command:\n\n{\n     if ($1 == \"@execute\") {\n          tmp = substr($0, 10)        # Remove \"@execute\"\n          while ((tmp | getline) > 0)\n               print\n          close(tmp)\n     } else\n          print\n}\n\n\nThe close() function is called to ensure that if two identical \u2018@execute\u2019 lines appear in the input, the command is run for each\none. See Closing Input and Output Redirections [Close-Files-And-Pipes.html]. Given the input:\n\nfoo\nbar\nbaz\n@execute who\nbletch\n\n\nthe program might produce:\n\nfoo\nbar\nbaz\narnold     ttyv0   Jul 13 14:22\nmiriam     ttyp0   Jul 13 14:23     (murphy:0)\nbill       ttyp1   Jul 13 14:23     (murphy:0)\nbletch\n\n\nNotice that this program ran the command who and printed the result. (If you try this program yourself, you will of course get\ndifferent results, depending upon who is logged in on your system.)\n\nThis variation of getline splits the record into fields, sets the value of NF, and recomputes the value of $0. The values of NR\nand FNR are not changed. RT is set.\n\nAccording to POSIX, \u2018expression | getline\u2019 is ambiguous if expression contains unparenthesized operators other than \u2018$\u2019\u2014for\nexample, \u2018\"echo\u00a0\" \"date\" | getline\u2019 is ambiguous because the concatenation operator is not parenthesized. You should write it as\n\u2018(\"echo\u00a0\" \"date\") | getline\u2019 if you want your program to be portable to all awk implementations.\n\n> NOTE: Unfortunately, gawk has not been consistent in its treatment of a construct like \u2018\"echo\u00a0\" \"date\" | getline\u2019. Most\n> versions, including the current version, treat it as \u2018(\"echo\u00a0\" \"date\") | getline\u2019. (This is also how BWK awk behaves.) Some\n> versions instead treat it as \u2018\"echo\u00a0\" (\"date\" | getline)\u2019. (This is how mawk behaves.) In short, always use explicit\n> parentheses, and then you won\u2019t have to worry.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using getline into a Variable from a Pipe [Getline_002fVariable_002fPipe.html], Previous: Using getline into a Variable from\na File [Getline_002fVariable_002fFile.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "43a53b8e-963f-48f1-913c-f4e1b9a0fca1", "embedding": null, "doc_hash": "3946fa5990acc4d340cbc6d61d167c209b5119881f6bc8e339e226cef846e4e3", "extra_info": null, "node_info": {"start": 0, "end": 3203, "_node_type": "1"}, "relationships": {"1": "50311660-e2f9-4712-a8bf-da5f413c2135"}}, "__type__": "1"}, "4458cc67-a0a6-49d8-9783-154e76a2094c": {"__data__": {"text": "Next: Using getline from a File [Getline_002fFile.html], Previous: Using getline with No Arguments [Plain-Getline.html], Up:\nExplicit Input with getline [Getline.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.2 USING GETLINE INTO A VARIABLE\n\nYou can use \u2018getline var\u2019 to read the next record from awk\u2019s input into the variable var. No other processing is done. For\nexample, suppose the next line is a comment or a special string, and you want to read it without triggering any rules. This form\nof getline allows you to read that line and store it in a variable so that the main read-a-line-and-check-each-rule loop of awk\nnever sees it. The following example swaps every two lines of input:\n\n{\n     if ((getline tmp) > 0) {\n          print tmp\n          print $0\n     } else\n          print $0\n}\n\n\nIt takes the following list:\n\nwan\ntew\nfree\nphore\n\n\nand produces these results:\n\ntew\nwan\nphore\nfree\n\n\nThe getline command used in this way sets only the variables NR, FNR, and RT (and, of course, var). The record is not split into\nfields, so the values of the fields (including $0) and the value of NF do not change.", "doc_id": "4458cc67-a0a6-49d8-9783-154e76a2094c", "embedding": null, "doc_hash": "586f3077d098d016533eb8b28b020e80b4b766256894b322d692238f9f92a2f4", "extra_info": null, "node_info": {"start": 0, "end": 1269, "_node_type": "1"}, "relationships": {"1": "1c52626d-39e4-43c7-90e3-839322b4ee6a"}}, "__type__": "1"}, "e8089dba-c086-40c5-952e-2b6c598f3d7b": {"__data__": {"text": "Next: Points to Remember About getline [Getline-Notes.html], Previous: Using getline from a Coprocess\n[Getline_002fCoprocess.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.8 USING GETLINE INTO A VARIABLE FROM A COPROCESS\n\nWhen you use \u2018command |& getline var\u2019, the output from the coprocess command is sent through a two-way pipe to getline and into\nthe variable var.\n\nIn this version of getline, none of the predefined variables are changed and the record is not split into fields. The only\nvariable changed is var. However, RT is set.", "doc_id": "e8089dba-c086-40c5-952e-2b6c598f3d7b", "embedding": null, "doc_hash": "9a396c06b45e379d09c988b68322e9c43dcbca6fc9afd40a188d9cb484c9fcda", "extra_info": null, "node_info": {"start": 0, "end": 740, "_node_type": "1"}, "relationships": {"1": "22a08ddc-ea62-47a8-add2-316a99312fdf"}}, "__type__": "1"}, "311e7959-b9ae-4bbb-9348-f8ffcfc6e7ac": {"__data__": {"text": "Next: Using getline from a Pipe [Getline_002fPipe.html], Previous: Using getline from a File [Getline_002fFile.html], Up: Explicit\nInput with getline [Getline.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.4 USING GETLINE INTO A VARIABLE FROM A FILE\n\nUse \u2018getline var < file\u2019 to read input from the file file, and put it in the variable var. As earlier, file is a string-valued\nexpression that specifies the file from which to read.\n\nIn this version of getline, none of the predefined variables are changed and the record is not split into fields. The only\nvariable changed is var.25 For example, the following program copies all the input files to the output, except for records that\nsay \u2018@include\u00a0filename\u2019. Such a record is replaced by the contents of the file filename:\n\n{\n     if (NF == 2 && $1 == \"@include\") {\n          while ((getline line < $2) > 0)\n               print line\n          close($2)\n     } else\n          print\n}\n\n\nNote here how the name of the extra input file is not built into the program; it is taken directly from the data, specifically\nfrom the second field on the @include line.\n\nThe close() function is called to ensure that if two identical @include lines appear in the input, the entire specified file is\nincluded twice. See Closing Input and Output Redirections [Close-Files-And-Pipes.html].\n\nOne deficiency of this program is that it does not process nested @include statements (i.e., @include statements in included\nfiles) the way a true macro preprocessor would. See An Easy Way to Use Library Functions [Igawk-Program.html] for a program that\ndoes handle nested @include statements.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(25)\n\nThis is not quite true. RT could be changed if RS is a regular expression.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using getline from a Pipe [Getline_002fPipe.html], Previous: Using getline from a File [Getline_002fFile.html], Up: Explicit\nInput with getline [Getline.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "311e7959-b9ae-4bbb-9348-f8ffcfc6e7ac", "embedding": null, "doc_hash": "5d74fb3288374d3ce8431b7a68d95b3287e932b9a3c662db466d98a728aa346d", "extra_info": null, "node_info": {"start": 0, "end": 2357, "_node_type": "1"}, "relationships": {"1": "af2c3795-d140-4c41-a8ea-f8a7dc17cf5a"}}, "__type__": "1"}, "ce0acce8-24b0-4e3c-a591-f4240baefc60": {"__data__": {"text": "Next: Using getline from a Coprocess [Getline_002fCoprocess.html], Previous: Using getline from a Pipe [Getline_002fPipe.html],\nUp: Explicit Input with getline [Getline.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.6 USING GETLINE INTO A VARIABLE FROM A PIPE\n\nWhen you use \u2018command | getline var\u2019, the output of command is sent through a pipe to getline and into the variable var. For\nexample, the following program reads the current date and time into the variable current_time, using the date utility, and then\nprints it:\n\nBEGIN {\n     \"date\" | getline current_time\n     close(\"date\")\n     print \"Report printed on \" current_time\n}\n\n\nIn this version of getline, none of the predefined variables are changed and the record is not split into fields. However, RT is\nset.", "doc_id": "ce0acce8-24b0-4e3c-a591-f4240baefc60", "embedding": null, "doc_hash": "fe518c38a21c5c1caf875b8d62aa9db9ba4ea3122897129fe3de93260ba6fa8f", "extra_info": null, "node_info": {"start": 0, "end": 926, "_node_type": "1"}, "relationships": {"1": "c12d7f98-c884-49b1-b2e0-4c0b18b39c71"}}, "__type__": "1"}, "3969dfe4-7b62-4fc2-87bc-1f672b61800c": {"__data__": {"text": "Next: Reading a Whole File at Once [Readfile-Function.html], Previous: Merging an Array into a String [Join-Function.html], Up:\nGeneral Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.7 MANAGING THE TIME OF DAY\n\nThe systime() and strftime() functions described in Time Functions [Time-Functions.html] provide the minimum functionality\nnecessary for dealing with the time of day in human-readable form. Although strftime() is extensive, the control formats are not\nnecessarily easy to remember or intuitively obvious when reading a program.\n\nThe following function, getlocaltime(), populates a user-supplied array with preformatted time information. It returns a string\nwith the current time formatted in the same way as the date utility:\n\n# getlocaltime.awk --- get the time of day in a usable format\n\n# Returns a string in the format of output of date(1)\n# Populates the array argument time with individual values:\n#    time[\"second\"]       -- seconds (0 - 59)\n#    time[\"minute\"]       -- minutes (0 - 59)\n#    time[\"hour\"]         -- hours (0 - 23)\n#    time[\"althour\"]      -- hours (0 - 12)\n#    time[\"monthday\"]     -- day of month (1 - 31)\n#    time[\"month\"]        -- month of year (1 - 12)\n#    time[\"monthname\"]    -- name of the month\n#    time[\"shortmonth\"]   -- short name of the month\n#    time[\"year\"]         -- year modulo 100 (0 - 99)\n#    time[\"fullyear\"]     -- full year\n#    time[\"weekday\"]      -- day of week (Sunday = 0)\n#    time[\"altweekday\"]   -- day of week (Monday = 0)\n#    time[\"dayname\"]      -- name of weekday\n#    time[\"shortdayname\"] -- short name of weekday\n#    time[\"yearday\"]      -- day of year (0 - 365)\n#    time[\"timezone\"]     -- abbreviation of timezone name\n#    time[\"ampm\"]         -- AM or PM designation\n#    time[\"weeknum\"]      -- week number, Sunday first day\n#    time[\"altweeknum\"]   -- week number, Monday first day\n\nfunction getlocaltime(time,    ret, now, i)\n{\n    # get time once, avoids unnecessary system calls\n    now = systime()\n\n    # return date(1)-style output\n    ret = strftime(\"%a %b %e %H:%M:%S %Z %Y\", now)\n\n    # clear out target array\n    delete time\n\n    # fill in values, force numeric values to be\n    # numeric by adding 0\n    time[\"second\"]       = strftime(\"%S\", now) + 0\n    time[\"minute\"]       = strftime(\"%M\", now) + 0\n    time[\"hour\"]         = strftime(\"%H\", now) + 0\n    time[\"althour\"]      = strftime(\"%I\", now) + 0\n    time[\"monthday\"]     = strftime(\"%d\", now) + 0\n    time[\"month\"]        = strftime(\"%m\", now) + 0\n    time[\"monthname\"]    = strftime(\"%B\", now)\n    time[\"shortmonth\"]   = strftime(\"%b\", now)\n    time[\"year\"]         = strftime(\"%y\", now) + 0\n   ", "doc_id": "3969dfe4-7b62-4fc2-87bc-1f672b61800c", "embedding": null, "doc_hash": "b4ebe66a37fd320e2b02b542265c3ed66bb35ca59812110e23d2824e2ba7c4f7", "extra_info": null, "node_info": {"start": 0, "end": 2842, "_node_type": "1"}, "relationships": {"1": "70d92ac1-82f8-4108-a8d0-8d0901b1f9ae", "3": "ec59a3fa-d1f0-4676-b267-ee72e21a8e84"}}, "__type__": "1"}, "ec59a3fa-d1f0-4676-b267-ee72e21a8e84": {"__data__": {"text": "     = strftime(\"%y\", now) + 0\n    time[\"fullyear\"]     = strftime(\"%Y\", now) + 0\n    time[\"weekday\"]      = strftime(\"%w\", now) + 0\n    time[\"altweekday\"]   = strftime(\"%u\", now) + 0\n    time[\"dayname\"]      = strftime(\"%A\", now)\n    time[\"shortdayname\"] = strftime(\"%a\", now)\n    time[\"yearday\"]      = strftime(\"%j\", now) + 0\n    time[\"timezone\"]     = strftime(\"%Z\", now)\n    time[\"ampm\"]         = strftime(\"%p\", now)\n    time[\"weeknum\"]      = strftime(\"%U\", now) + 0\n    time[\"altweeknum\"]   = strftime(\"%W\", now) + 0\n\n    return ret\n}\n\n\nThe string indices are easier to use and read than the various formats required by strftime(). The alarm program presented in An\nAlarm Clock Program [Alarm-Program.html] uses this function. A more general design for the getlocaltime() function would have\nallowed the user to supply an optional timestamp value to use instead of the current time.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reading a Whole File at Once [Readfile-Function.html], Previous: Merging an Array into a String [Join-Function.html], Up:\nGeneral Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ec59a3fa-d1f0-4676-b267-ee72e21a8e84", "embedding": null, "doc_hash": "93ab6d1de2e76188109fbe0e598a13f98e64d46538a6b4b78ecf74b985803a12", "extra_info": null, "node_info": {"start": 2808, "end": 4063, "_node_type": "1"}, "relationships": {"1": "70d92ac1-82f8-4108-a8d0-8d0901b1f9ae", "2": "3969dfe4-7b62-4fc2-87bc-1f672b61800c"}}, "__type__": "1"}, "6e198b31-05f9-4b2a-865f-5e633a420058": {"__data__": {"text": "Next: Reading the User Database [Passwd-Functions.html], Previous: Data file Management [Data-File-Management.html], Up: A Library\nof awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.4 PROCESSING COMMAND-LINE OPTIONS\n\nMost utilities on POSIX-compatible systems take options on the command line that can be used to change the way a program behaves.\nawk is an example of such a program (see Command-Line Options [Options.html]). Often, options take arguments (i.e., data that the\nprogram needs to correctly obey the command-line option). For example, awk\u2019s -F option requires a string to use as the field\nseparator. The first occurrence on the command line of either -- or a string that does not begin with \u2018-\u2019 ends the options.\n\nModern Unix systems provide a C function named getopt() for processing command-line arguments. The programmer provides a string\ndescribing the one-letter options. If an option requires an argument, it is followed in the string with a colon. getopt() is also\npassed the count and values of the command-line arguments and is called in a loop. getopt() processes the command-line arguments\nfor option letters. Each time around the loop, it returns a single character representing the next option letter that it finds, or\n\u2018?\u2019 if it finds an invalid option. When it returns \u22121, there are no options left on the command line.\n\nWhen using getopt(), options that do not take arguments can be grouped together. Furthermore, options that take arguments require\nthat the argument be present. The argument can immediately follow the option letter, or it can be a separate command-line\nargument.\n\nGiven a hypothetical program that takes three command-line options, -a, -b, and -c, where -b requires an argument, all of the\nfollowing are valid ways of invoking the program:\n\nprog -a -b foo -c data1 data2 data3\nprog -ac -bfoo -- data1 data2 data3\nprog -acbfoo data1 data2 data3\n\n\nNotice that when the argument is grouped with its option, the rest of the argument is considered to be the option\u2019s argument. In\nthis example, -acbfoo indicates that all of the -a, -b, and -c options were supplied, and that \u2018foo\u2019 is the argument to the -b\noption.\n\ngetopt() provides four external variables that the programmer can use:\n\noptind\n\nThe index in the argument value array (argv) where the first nonoption command-line argument can be found.\n\noptarg\n\nThe string value of the argument to an option.\n\nopterr\n\nUsually getopt() prints an error message when it finds an invalid option. Setting opterr to zero disables this feature. (An\napplication might want to print its own error message.)\n\noptopt\n\nThe letter representing the command-line option.\n\nThe following C fragment shows how getopt() might process command-line arguments for awk:\n\nint\nmain(int argc, char *argv[])\n{\n    \u2026\n    /* print our own message */\n    opterr = 0;\n    while ((c = getopt(argc, argv, \"v:f:F:W:\")) != -1) {\n        switch (c) {\n        case 'f':    /* file */\n            \u2026\n            break;\n        case 'F':    /* field separator */\n            \u2026\n            break;\n        case 'v':    /* variable assignment */\n            \u2026\n            break;\n        case 'W':    /* extension */\n            \u2026\n           ", "doc_id": "6e198b31-05f9-4b2a-865f-5e633a420058", "embedding": null, "doc_hash": "4a3558b0274a3aa6d0d26d23c9ba4ee4b50b947f8b27e0efd6556de57cb5b4fb", "extra_info": null, "node_info": {"start": 0, "end": 3377, "_node_type": "1"}, "relationships": {"1": "256a90e7-1492-46b4-9fe1-db7e92796fb1", "3": "583be6be-4f38-4234-a02e-15de6dcc94ca"}}, "__type__": "1"}, "583be6be-4f38-4234-a02e-15de6dcc94ca": {"__data__": {"text": "       \u2026\n            break;\n        case '?':\n        default:\n            usage();\n            break;\n        }\n    }\n    \u2026\n}\n\n\nThe GNU project\u2019s version of the original Unix utilities popularized the use of long command line options. For example, --help in\naddition to -h. Arguments to long options are either provided as separate command line arguments (\u2018--source 'program-text'\u2019) or\nseparated from the option with an \u2018=\u2019 sign (\u2018--source='program-text'\u2019).\n\nAs a side point, gawk actually uses the GNU getopt_long() function to process both normal and GNU-style long options (see\nCommand-Line Options [Options.html]).\n\nThe abstraction provided by getopt() is very useful and is quite handy in awk programs as well. Following is an awk version of\ngetopt() that accepts both short and long options. (Support for long options was supplied by Greg Minshall. We thank him.)\n\nThis function highlights one of the greatest weaknesses in awk, which is that it is very poor at manipulating single characters.\nThe function needs repeated calls to substr() in order to access individual characters (see String-Manipulation Functions\n[String-Functions.html]).72\n\nThe discussion that follows walks through the code a bit at a time:\n\n# getopt.awk --- Do C library getopt(3) function in awk\n#                Also supports long options.\n\n# External variables:\n#    Optind -- index in ARGV of first nonoption argument\n#    Optarg -- string value of argument to current option\n#    Opterr -- if nonzero, print our own diagnostic\n#    Optopt -- current option letter\n\n# Returns:\n#    -1     at end of options\n#    \"?\"    for unrecognized option\n#    <s>    a string representing the current option\n\n# Private Data:\n#    _opti  -- index in multiflag option, e.g., -abc\n\n\nThe function starts out with comments presenting a list of the global variables it uses, what the return values are, what they\nmean, and any global variables that are \u201cprivate\u201d to this library function. Such documentation is essential for any program, and\nparticularly for library functions.\n\nThe getopt() function first checks that it was indeed called with a string of options (the options parameter). If both options and\nlongoptions have a zero length, getopt() immediately returns \u22121:\n\nfunction getopt(argc, argv, options, longopts,    thisopt, i, j)\n{\n    if (length(options) == 0 && length(longopts) == 0)\n        return -1                # no options given\n\n\n\n    if (argv[Optind] == \"--\") {  # all done\n        Optind++\n        _opti = 0\n        return -1\n\n\n    } else if (argv[Optind] !~ /^-[^:[:space:]]/) {\n        _opti = 0\n        return -1\n    }\n\n\nThe next thing to check for is the end of the options. A -- ends the command-line options, as does any command-line argument that\ndoes not begin with a \u2018-\u2019 (unless it is an argument to a preceding option). Optind steps through the array of command-line\narguments; it retains its value across calls to getopt(), because it is a global variable.\n\nThe regular expression /^-[^:[:space:]/ checks for a \u2018-\u2019 followed by anything that is not whitespace and not a colon. If the\ncurrent command-line argument does not match", "doc_id": "583be6be-4f38-4234-a02e-15de6dcc94ca", "embedding": null, "doc_hash": "33dad04fa231bb16aa0dbff2e8453b7ba220d7147e579d53944a00b7bb965bd4", "extra_info": null, "node_info": {"start": 3376, "end": 6504, "_node_type": "1"}, "relationships": {"1": "256a90e7-1492-46b4-9fe1-db7e92796fb1", "2": "6e198b31-05f9-4b2a-865f-5e633a420058", "3": "c836bc35-3f36-4e91-9b15-80427f159d1d"}}, "__type__": "1"}, "c836bc35-3f36-4e91-9b15-80427f159d1d": {"__data__": {"text": "whitespace and not a colon. If the\ncurrent command-line argument does not match this pattern, it is not an option, and it ends option processing. Now, we check to\nsee if we are processing a short (single letter) option, or a long option (indicated by two dashes, e.g., \u2018--filename\u2019). If it is\na short option, we continue on:\n\n    if (argv[Optind] !~ /^--/) {        # if this is a short option\n        if (_opti == 0)\n            _opti = 2\n        thisopt = substr(argv[Optind], _opti, 1)\n        Optopt = thisopt\n        i = index(options, thisopt)\n        if (i == 0) {\n            if (Opterr)\n                printf(\"%c -- invalid option\\n\", thisopt) > \"/dev/stderr\"\n            if (_opti >= length(argv[Optind])) {\n                Optind++\n                _opti = 0\n            } else\n                _opti++\n            return \"?\"\n        }\n\n\nThe _opti variable tracks the position in the current command-line argument (argv[Optind]). If multiple options are grouped\ntogether with one \u2018-\u2019 (e.g., -abx), it is necessary to return them to the user one at a time.\n\nIf _opti is equal to zero, it is set to two, which is the index in the string of the next character to look at (we skip the \u2018-\u2019,\nwhich is at position one). The variable thisopt holds the character, obtained with substr(). It is saved in Optopt for the main\nprogram to use.\n\nIf thisopt is not in the options string, then it is an invalid option. If Opterr is nonzero, getopt() prints an error message on\nthe standard error that is similar to the message from the C version of getopt().\n\nBecause the option is invalid, it is necessary to skip it and move on to the next option character. If _opti is greater than or\nequal to the length of the current command-line argument, it is necessary to move on to the next argument, so Optind is\nincremented and _opti is reset to zero. Otherwise, Optind is left alone and _opti is merely incremented.\n\nIn any case, because the option is invalid, getopt() returns \"?\". The main program can examine Optopt if it needs to know what the\ninvalid option letter actually is. Continuing on:\n\n        if (substr(options, i + 1, 1) == \":\") {\n            # get option argument\n            if (length(substr(argv[Optind], _opti + 1)) > 0)\n                Optarg = substr(argv[Optind], _opti + 1)\n            else\n                Optarg = argv[++Optind]\n            _opti = 0\n        } else\n            Optarg = \"\"\n\n\nIf the option requires an argument, the option letter is followed by a colon in the options string. If there are remaining\ncharacters in the current command-line argument (argv[Optind]), then the rest of that string is assigned to Optarg. Otherwise, the\nnext command-line argument is used (\u2018-xFOO\u2019 versus \u2018-x\u00a0FOO\u2019). In either", "doc_id": "c836bc35-3f36-4e91-9b15-80427f159d1d", "embedding": null, "doc_hash": "b273951d05a776a0a8b7bfa7428dce308fad939aaa9c031405107a400de5da38", "extra_info": null, "node_info": {"start": 6439, "end": 9173, "_node_type": "1"}, "relationships": {"1": "256a90e7-1492-46b4-9fe1-db7e92796fb1", "2": "583be6be-4f38-4234-a02e-15de6dcc94ca", "3": "8b546ea0-e82a-4162-8f9c-693888cfdd31"}}, "__type__": "1"}, "8b546ea0-e82a-4162-8f9c-693888cfdd31": {"__data__": {"text": "versus \u2018-x\u00a0FOO\u2019). In either case, _opti is reset to zero, because there are no more\ncharacters left to examine in the current command-line argument. Continuing:\n\n        if (_opti == 0 || _opti >= length(argv[Optind])) {\n            Optind++\n            _opti = 0\n        } else\n            _opti++\n        return thisopt\n\n\nFinally, for a short option, if _opti is either zero or greater than the length of the current command-line argument, it means\nthis element in argv is through being processed, so Optind is incremented to point to the next element in argv. If neither\ncondition is true, then only _opti is incremented, so that the next option letter can be processed on the next call to getopt().\n\nOn the other hand, if the earlier test found that this was a long option, we take a different branch:\n\n    } else {\n        j = index(argv[Optind], \"=\")\n        if (j > 0)\n            thisopt = substr(argv[Optind], 3, j - 3)\n        else\n            thisopt = substr(argv[Optind], 3)\n        Optopt = thisopt\n\n\nFirst, we search this option for a possible embedded equal sign, as the specification of long options allows an argument to an\noption \u2018--someopt\u2019 to be specified as \u2018--someopt=answer\u2019 as well as \u2018--someopt\u00a0answer\u2019.\n\n        i = match(longopts, \"(^|,)\" thisopt \"($|[,:])\")\n        if (i == 0) {\n            if (Opterr)\n                 printf(\"%s -- invalid option\\n\", thisopt) > \"/dev/stderr\"\n            Optind++\n            return \"?\"\n        }\n\n\nNext, we try to find the current option in longopts. The regular expression given to match(), \"(^|,)\"\u00a0thisopt\u00a0\"($|[,:])\", matches\nthis option at the beginning of longopts, or at the beginning of a subsequent long option (the previous long option would have\nbeen terminated by a comma), and, in any case, either at the end of the longopts string (\u2018$\u2019), or followed by a comma (separating\nthis option from a subsequent option) or a colon (indicating this long option takes an argument (\u2018[,:]\u2019).\n\nUsing this regular expression, we check to see if the current option might possibly be in longopts (if longopts is not specified,\nthis test will also fail). In case of an error, we possibly print an error message and then return \"?\". Continuing on:\n\n        if (substr(longopts, i-1+RLENGTH, 1) == \":\") {\n            if (j > 0)\n                Optarg = substr(argv[Optind], j + 1)\n            else\n                Optarg = argv[++Optind]\n        } else\n            Optarg = \"\"\n\n\nWe now check to see if this option takes an argument and, if so, we set Optarg to the value of that argument (either a value after\nan equal sign specified on the command line, immediately adjoining the long option string, or as the next argument on the command\nline).\n\n        Optind++\n ", "doc_id": "8b546ea0-e82a-4162-8f9c-693888cfdd31", "embedding": null, "doc_hash": "2f83f475935ddcf136cfd0857d0b2ce5f9c471cd12a464822ad46aafeb640c69", "extra_info": null, "node_info": {"start": 9218, "end": 11942, "_node_type": "1"}, "relationships": {"1": "256a90e7-1492-46b4-9fe1-db7e92796fb1", "2": "c836bc35-3f36-4e91-9b15-80427f159d1d", "3": "d35a3985-bdf6-467a-854d-e5a9fb22e1ea"}}, "__type__": "1"}, "d35a3985-bdf6-467a-854d-e5a9fb22e1ea": {"__data__": {"text": "argument on the command\nline).\n\n        Optind++\n        return thisopt\n    }\n}\n\n\nWe increase Optind (which we already increased once if a required argument was separated from its option by an equal sign), and\nreturn the long option (minus its leading dashes).\n\nThe BEGIN rule initializes both Opterr and Optind to one. Opterr is set to one, because the default behavior is for getopt() to\nprint a diagnostic message upon seeing an invalid option. Optind is set to one, because there\u2019s no reason to look at the program\nname, which is in ARGV[0]:\n\nBEGIN {\n    Opterr = 1    # default is to diagnose\n    Optind = 1    # skip ARGV[0]\n\n    # test program\n    if (_getopt_test) {\n        _myshortopts = \"ab:cd\"\n        _mylongopts = \"longa,longb:,otherc,otherd\"\n\n        while ((_go_c = getopt(ARGC, ARGV, _myshortopts, _mylongopts)) != -1)\n            printf(\"c = <%s>, Optarg = <%s>\\n\", _go_c, Optarg)\n        printf(\"non-option arguments:\\n\")\n        for (; Optind < ARGC; Optind++)\n            printf(\"\\tARGV[%d] = <%s>\\n\", Optind, ARGV[Optind])\n    }\n}\n\n\nThe rest of the BEGIN rule is a simple test program. Here are the results of some sample runs of the test program:\n\n$ awk -f getopt.awk -v _getopt_test=1 -- -a -cbARG bax -x\n-| c = <a>, Optarg = <>\n-| c = <c>, Optarg = <>\n-| c = <b>, Optarg = <ARG>\n-| non-option arguments:\n-|         ARGV[3] = <bax>\n-|         ARGV[4] = <-x>\n\n$ awk -f getopt.awk -v _getopt_test=1 -- -a -x -- xyz abc\n-| c = <a>, Optarg = <>\nerror\u2192 x -- invalid option\n-| c = <?>, Optarg = <>\n-| non-option arguments:\n-|         ARGV[4] = <xyz>\n-|         ARGV[5] = <abc>\n\n$ awk -f getopt.awk -v _getopt_test=1 -- -a \\\n> --longa -b xx --longb=foo=bar --otherd --otherc arg1 arg2\n-| c = <a>, Optarg = <>\n-| c = <longa>, Optarg = <>\n-| c = <b>, Optarg = <xx>\n-| c = <longb>, Optarg = <foo=bar>\n-| c = <otherd>, Optarg = <>\n-| c = <otherc>, Optarg = <>\n-| non-option arguments:\n-|        ARGV[8] = <arg1>\n-|        ARGV[9] = <arg2>\n\n\nIn all the runs, the first -- terminates the arguments to awk, so that it does not try to interpret the -a, etc., as its own\noptions.\n\n> NOTE: After getopt() is through, user-level code must clear out all the elements of ARGV from 1 to Optind, so that awk does not\n> try to process the command-line options as file names.\n\nUsing \u2018#!\u2019 with the -E option may help avoid conflicts between your program\u2019s options and gawk\u2019s options, as -E causes gawk to\nabandon processing of further options (see Executable awk Programs [Executable-Scripts.html] and see Command-Line Options\n[Options.html]).\n\nSeveral of", "doc_id": "d35a3985-bdf6-467a-854d-e5a9fb22e1ea", "embedding": null, "doc_hash": "d830bc61d576303b7c160026d5a11624ea031ff9e2441e1192b3392225ce7fa9", "extra_info": null, "node_info": {"start": 11929, "end": 14483, "_node_type": "1"}, "relationships": {"1": "256a90e7-1492-46b4-9fe1-db7e92796fb1", "2": "8b546ea0-e82a-4162-8f9c-693888cfdd31", "3": "1b917eec-49cc-43a2-a249-a045a1eac0e7"}}, "__type__": "1"}, "1b917eec-49cc-43a2-a249-a045a1eac0e7": {"__data__": {"text": "and see Command-Line Options\n[Options.html]).\n\nSeveral of the sample programs presented in Practical awk Programs [Sample-Programs.html], use getopt() to process their\narguments.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(72)\n\nThis function was written before gawk acquired the ability to split strings into single characters using \"\" as the separator. We\nhave left it alone, as using substr() is more portable.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reading the User Database [Passwd-Functions.html], Previous: Data file Management [Data-File-Management.html], Up: A Library\nof awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "1b917eec-49cc-43a2-a249-a045a1eac0e7", "embedding": null, "doc_hash": "808c6997644df5098c7c56797e90d2c7a3a560037f933f23b2850be6cb7e2da1", "extra_info": null, "node_info": {"start": 14464, "end": 15342, "_node_type": "1"}, "relationships": {"1": "256a90e7-1492-46b4-9fe1-db7e92796fb1", "2": "d35a3985-bdf6-467a-854d-e5a9fb22e1ea"}}, "__type__": "1"}, "59ef8bf7-33b0-40ff-8d5c-e6aebf14a23e": {"__data__": {"text": "Next: Try a Few Extra Bits of Precision and Rounding [Try-To-Round.html], Previous: Floating-Point Arithmetic Is Not Exact\n[Inexactness-of-computations.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.2 GETTING THE ACCURACY YOU NEED\n\nCan arbitrary-precision arithmetic give exact results? There are no easy answers. The standard rules of algebra often do not apply\nwhen using floating-point arithmetic. Among other things, the distributive and associative laws do not hold completely, and order\nof operation may be important for your computation. Rounding error, cumulative precision loss, and underflow are often\ntroublesome.\n\nWhen gawk tests the expressions \u20180.1 + 12.2\u2019 and \u201812.3\u2019 for equality using the machine double-precision arithmetic, it decides\nthat they are not equal! (See Be Careful Comparing Values [Comparing-FP-Values.html].) You can get the result you want by\nincreasing the precision; 56 bits in this case does the job:\n\n$ gawk -M -v PREC=56 'BEGIN { print (0.1 + 12.2 == 12.3) }'\n-| 1\n\n\nIf adding more bits is good, perhaps adding even more bits of precision is better? Here is what happens if we use an even larger\nvalue of PREC:\n\n$ gawk -M -v PREC=201 'BEGIN { print (0.1 + 12.2 == 12.3) }'\n-| 0\n\n\nThis is not a bug in gawk or in the MPFR library. It is easy to forget that the finite number of bits used to store the value is\noften just an approximation after proper rounding. The test for equality succeeds if and only if all bits in the two operands are\nexactly the same. Because this is not necessarily true after floating-point computations with a particular precision and effective\nrounding mode, a straight test for equality may not work. Instead, compare the two numbers to see if they are within the desirable\ndelta of each other.\n\nIn applications where 15 or fewer decimal places suffice, hardware double-precision arithmetic can be adequate, and is usually\nmuch faster. But you need to keep in mind that every floating-point operation can suffer a new rounding error with catastrophic\nconsequences, as illustrated by our earlier attempt to compute the value of pi. Extra precision can greatly enhance the stability\nand the accuracy of your computation in such cases.\n\nAdditionally, you should understand that repeated addition is not necessarily equivalent to multiplication in floating-point\narithmetic. In the example in Errors Accumulate [Errors-accumulate.html]:\n\n$ gawk 'BEGIN {\n>   for (d = 1.1; d <= 1.5; d += 0.1)    # loop five times (?)\n>       i++\n>   print i\n> }'\n-| 4\n\n\nyou may or may not succeed in getting the correct result by choosing an arbitrarily large value for PREC. Reformulation of the\nproblem at hand is often the correct approach in such situations.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Try a Few Extra Bits of Precision and Rounding [Try-To-Round.html], Previous: Floating-Point Arithmetic Is Not Exact\n[Inexactness-of-computations.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "59ef8bf7-33b0-40ff-8d5c-e6aebf14a23e", "embedding": null, "doc_hash": "fc2d9f557b6848a7a391df99ca643201bb151af28f3f5c4377cb1d199b25b9c3", "extra_info": null, "node_info": {"start": 0, "end": 3351, "_node_type": "1"}, "relationships": {"1": "31550f3e-33ab-43ce-9f7f-9a830a1596d6"}}, "__type__": "1"}, "9e45b1fe-a71b-4e62-bdd4-f995c1944c07": {"__data__": {"text": "Next: Running awk and gawk [Invoking-Gawk.html], Previous: Preface [Preface.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nPART I:\nTHE AWK LANGUAGE\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n * Getting Started with awk\n * Running awk and gawk [Invoking-Gawk.html]\n * Regular Expressions [Regexp.html]\n * Reading Input Files [Reading-Files.html]\n * Printing Output [Printing.html]\n * Expressions [Expressions.html]\n * Patterns, Actions, and Variables [Patterns-and-Actions.html]\n * Arrays in awk [Arrays.html]\n * Functions [Functions.html]\n\n\n1 GETTING STARTED WITH AWK\n\nThe basic function of awk is to search files for lines (or other units of text) that contain certain patterns. When a line matches\none of the patterns, awk performs specified actions on that line. awk continues to process input lines in this way until it\nreaches the end of the input files.\n\nPrograms in awk are different from programs in most other languages, because awk programs are data driven (i.e., you describe the\ndata you want to work with and then what to do when you find it). Most other languages are procedural; you have to describe, in\ngreat detail, every step the program should take. When working with procedural languages, it is usually much harder to clearly\ndescribe the data your program will process. For this reason, awk programs are often refreshingly easy to read and write.\n\nWhen you run awk, you specify an awk program that tells awk what to do. The program consists of a series of rules (it may also\ncontain function definitions, an advanced feature that we will ignore for now; see User-Defined Functions\n[User_002ddefined.html]). Each rule specifies one pattern to search for and one action to perform upon finding the pattern.\n\nSyntactically, a rule consists of a pattern followed by an action. The action is enclosed in braces to separate it from the\npattern. Newlines usually separate rules. Therefore, an awk program looks like this:\n\npattern { action }\npattern { action }\n\u2026\n\n\n * How to Run awk Programs [Running-gawk.html]\n * Data files for the Examples [Sample-Data-Files.html]\n * Some Simple Examples [Very-Simple.html]\n * An Example with Two Rules [Two-Rules.html]\n * A More Complex Example [More-Complex.html]\n * awk Statements Versus Lines [Statements_002fLines.html]\n * Other Features of awk [Other-Features.html]\n * When to Use awk [When.html]\n * Summary [Intro-Summary.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Running awk and gawk [Invoking-Gawk.html], Previous: Preface [Preface.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9e45b1fe-a71b-4e62-bdd4-f995c1944c07", "embedding": null, "doc_hash": "2a211d590bede439db9675e0f52a4d80c1532a3e75a570ba77ed099e015791fe", "extra_info": null, "node_info": {"start": 0, "end": 2979, "_node_type": "1"}, "relationships": {"1": "c16a1353-52d0-44bb-b8e1-b8fafd5cbad9"}}, "__type__": "1"}, "09f055ae-0319-40b9-9e32-fed709a17920": {"__data__": {"text": "Next: Extracting the Distribution [Extracting.html], Up: The gawk Distribution [Gawk-Distribution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.1.1 GETTING THE GAWK DISTRIBUTION\n\nThere are two ways to get GNU software:\n\n * Copy it from someone else who already has it.\n * Retrieve gawk from the Internet host ftp.gnu.org, in the directory /gnu/gawk. Both anonymous ftp and http access are supported.\n   If you have the wget program, you can use a command like the following:\n   \n   wget https://ftp.gnu.org/gnu/gawk/gawk-5.2.2.tar.gz\n   \n\nThe GNU software archive is mirrored around the world. The up-to-date list of mirror sites is available from the main FSF website\n[https://www.gnu.org/order/ftp.html]. Try to use one of the mirrors; they will be less busy, and you can usually find one closer\nto your site.\n\nYou may also retrieve the gawk source code from the official Git repository; for more information see Accessing The gawk Git\nRepository [Accessing-The-Source.html].", "doc_id": "09f055ae-0319-40b9-9e32-fed709a17920", "embedding": null, "doc_hash": "d8a16d886bcdd01cc94a531a28ea4f05ef7e348a808642cf5f5efc2c4d89c108", "extra_info": null, "node_info": {"start": 0, "end": 1131, "_node_type": "1"}, "relationships": {"1": "161bbe4d-cbe8-4289-9ce4-6c08b262eeaa"}}, "__type__": "1"}, "313079e2-cbe8-4b08-bd3b-0cc60846a8db": {"__data__": {"text": "Next: Qualified Names [Qualified-Names.html], Up: Namespaces in gawk [Namespaces.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.1 STANDARD AWK\u2019S SINGLE NAMESPACE\n\nIn standard awk, there is a single, global, namespace. This means that all function names and global variable names must be\nunique. For example, two different awk source files cannot both define a function named min(), or define the same identifier, used\nas a scalar in one and as an array in the other.\n\nThis situation is okay when programs are small, say a few hundred lines, or even a few thousand, but it prevents the development\nof reusable libraries of awk functions, and can inadvertently cause independently-developed library files to accidentally step on\neach other\u2019s \u201cprivate\u201d global variables (see Naming Library Function Global Variables [Library-Names.html]).\n\nMost other programming languages solve this issue by providing some kind of namespace control: a way to say \u201cthis function is in\nnamespace xxx, and that function is in namespace yyy.\u201d (Of course, there is then still a single namespace for the namespaces, but\nthe hope is that there are much fewer namespaces in use by any given program, and thus much less chance for collisions.) These\nfacilities are sometimes referred to as packages or modules.\n\nStarting with version 5.0, gawk provides a simple mechanism to put functions and global variables into separate namespaces.", "doc_id": "313079e2-cbe8-4b08-bd3b-0cc60846a8db", "embedding": null, "doc_hash": "9b1c25c931cbc5b1e37ed997c5a8e2d91a666066fc59681f4221777ce608e113", "extra_info": null, "node_info": {"start": 0, "end": 1563, "_node_type": "1"}, "relationships": {"1": "08720dee-6c13-47bb-874e-c8dab90a8963"}}, "__type__": "1"}, "eacae598-8adf-4695-b753-33e13398dfba": {"__data__": {"text": "Next: GNU General Public License [Copying.html], Previous: Basic Programming Concepts [Basic-Concepts.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nGLOSSARY\n\nAction\n\nA series of awk statements attached to a rule. If the rule\u2019s pattern matches an input record, awk executes the rule\u2019s action.\nActions are always enclosed in braces. (See Actions [Action-Overview.html].)\n\nAda\n\nA programming language originally defined by the U.S. Department of Defense for embedded programming. It was designed to enforce\ngood Software Engineering practices.\n\nAmazing awk Assembler\n\nHenry Spencer at the University of Toronto wrote a retargetable assembler completely as sed and awk scripts. It is thousands of\nlines long, including machine descriptions for several eight-bit microcomputers. It is a good example of a program that would have\nbeen better written in another language.\n\nAmazingly Workable Formatter (awf)\n\nHenry Spencer at the University of Toronto wrote a formatter that accepts a large subset of the \u2018nroff -ms\u2019 and \u2018nroff -man\u2019\nformatting commands, using awk and sh.\n\nAnchor\n\nThe regexp metacharacters \u2018^\u2019 and \u2018$\u2019, which force the match to the beginning or end of the string, respectively.\n\nANSI\n\nThe American National Standards Institute. This organization produces many standards, among them the standards for the C and C++\nprogramming languages. These standards often become international standards as well. See also \u201cISO.\u201d\n\nArgument\n\nAn argument can be two different things. It can be an option or a file name passed to a command while invoking it from the command\nline, or it can be something passed to a function inside a program, e.g. inside awk.\n\nIn the latter case, an argument can be passed to a function in two ways. Either it is given to the called function by value, i.e.,\na copy of the value of the variable is made available to the called function, but the original variable cannot be modified by the\nfunction itself; or it is given by reference, i.e., a pointer to the interested variable is passed to the function, which can then\ndirectly modify it. In awk scalars are passed by value, and arrays are passed by reference. See \u201cPass By Value/Reference.\u201d\n\nArray\n\nA grouping of multiple values under the same name. Most languages just provide sequential arrays. awk provides associative arrays.\n\nAssertion\n\nA statement in a program that a condition is true at this point in the program. Useful for reasoning about how a program is\nsupposed to behave.\n\nAssignment\n\nAn awk expression that changes the value of some awk variable or data object. An object that you can assign to is called an\nlvalue. The assigned values are called rvalues. See Assignment Expressions [Assignment-Ops.html].\n\nAssociative Array\n\nArrays in which the indices may be numbers or strings, not just sequential integers in a fixed range.\n\nawk Language\n\nThe language in which awk programs are written.\n\nawk Program\n\nAn awk program consists of a series of patterns and actions, collectively known as rules. For each input record given to the\nprogram, the program\u2019s rules are all processed in turn. awk programs may also contain function definitions.\n\nawk Script\n\nAnother name for an awk program.\n\nBash\n\nThe GNU version of the standard shell (the Bourne-Again SHell). See also \u201cBourne Shell.\u201d\n\nBinary\n\nBase-two notation, where the digits are 0\u20131. Since electronic circuitry works \u201cnaturally\u201d in base 2 (just think of Off/On),\neverything inside a computer is calculated using base 2. Each digit represents the presence (or absence) of a power of 2 and is\ncalled a bit. So, for example, the base-two number 10101 is the same as decimal 21, ((1 x 16) + (1 x 4) + (1 x 1)).\n\nSince", "doc_id": "eacae598-8adf-4695-b753-33e13398dfba", "embedding": null, "doc_hash": "c851eb92437fae98c2d11790f974b13f544e5f4cca5888d163a4ded0bc16d4b1", "extra_info": null, "node_info": {"start": 0, "end": 3848, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "3": "0992bc16-09f0-4147-967a-fb9071d0c564"}}, "__type__": "1"}, "0992bc16-09f0-4147-967a-fb9071d0c564": {"__data__": {"text": "((1 x 16) + (1 x 4) + (1 x 1)).\n\nSince base-two numbers quickly become very long to read and write, they are usually grouped by 3 (i.e., they are read as octal\nnumbers), or by 4 (i.e., they are read as hexadecimal numbers). There is no direct way to insert base 2 numbers in a C program. If\nneed arises, such numbers are usually inserted as octal or hexadecimal numbers. The number of base-two digits that fit into\nregisters used for representing integer numbers in computers is a rough indication of the computing power of the computer itself.\nMost computers nowadays use 64 bits for representing integer numbers in their registers, but 32-bit, 16-bit and 8-bit registers\nhave been widely used in the past. See Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html].\n\nBit\n\nShort for \u201cBinary Digit.\u201d All values in computer memory ultimately reduce to binary digits: values that are either zero or one.\nGroups of bits may be interpreted differently\u2014as integers, floating-point numbers, character data, addresses of other memory\nobjects, or other data. awk lets you work with floating-point numbers and strings. gawk lets you manipulate bit values with the\nbuilt-in functions described in Bit-Manipulation Functions [Bitwise-Functions.html].\n\nComputers are often defined by how many bits they use to represent integer values. Typical systems are 32-bit systems, but 64-bit\nsystems are becoming increasingly popular, and 16-bit systems have essentially disappeared.\n\nBoolean Expression\n\nNamed after the English mathematician Boole. See also \u201cLogical Expression.\u201d\n\nBourne Shell\n\nThe standard shell (/bin/sh) on Unix and Unix-like systems, originally written by Steven R. Bourne at Bell Laboratories. Many\nshells (Bash, ksh, pdksh, zsh) are generally upwardly compatible with the Bourne shell.\n\nBraces\n\nThe characters \u2018{\u2019 and \u2018}\u2019. Braces are used in awk for delimiting actions, compound statements, and function bodies.\n\nBracket Expression\n\nInside a regular expression, an expression included in square brackets, meant to designate a single character as belonging to a\nspecified character class. A bracket expression can contain a list of one or more characters, like \u2018[abc]\u2019, a range of characters,\nlike \u2018[A-Z]\u2019, or a name, delimited by \u2018:\u2019, that designates a known set of characters, like \u2018[:digit:]\u2019. The form of bracket\nexpression enclosed between \u2018:\u2019 is independent of the underlying representation of the character themselves, which could utilize\nthe ASCII, EBCDIC, or Unicode codesets, depending on the architecture of the computer system, and on localization. See also\n\u201cRegular Expression.\u201d\n\nBuilt-in Function\n\nThe awk language provides built-in functions that perform various numerical, I/O-related, and string computations. Examples are\nsqrt() (for the square root of a number) and substr() (for a substring of a string). gawk provides functions for timestamp\nmanagement, bit manipulation, array sorting, type checking, and runtime string translation. (See Built-in Functions\n[Built_002din.html].)\n\nBuilt-in Variable\n\nARGC, ARGV, CONVFMT, ENVIRON, FILENAME, FNR, FS, NF, NR, OFMT, OFS, ORS, RLENGTH, RSTART, RS, and SUBSEP are the variables that\nhave special meaning to awk. In addition, ARGIND, BINMODE, ERRNO, FIELDWIDTHS, FPAT, IGNORECASE, LINT, PROCINFO, RT, and\nTEXTDOMAIN are the variables that have special meaning to gawk. Changing some of them affects awk\u2019s running environment. (See\nPredefined Variables [Built_002din-Variables.html].)\n\nC\n\nThe system programming", "doc_id": "0992bc16-09f0-4147-967a-fb9071d0c564", "embedding": null, "doc_hash": "075337564aeb41683663a2a83447612f2d3407040b74a583c1d0511003c64de9", "extra_info": null, "node_info": {"start": 3821, "end": 7303, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "eacae598-8adf-4695-b753-33e13398dfba", "3": "aad08716-4d9d-4e8e-b993-df2ab0ee2b82"}}, "__type__": "1"}, "aad08716-4d9d-4e8e-b993-df2ab0ee2b82": {"__data__": {"text": "system programming language that most GNU software is written in. The awk programming language has C-like syntax, and this Web\npage points out similarities between awk and C when appropriate.\n\nIn general, gawk attempts to be as similar to the 1990 version of ISO C as makes sense.\n\nC Shell\n\nThe C Shell (csh or its improved version, tcsh) is a Unix shell that was created by Bill Joy in the late 1970s. The C shell was\ndifferentiated from other shells by its interactive features and overall style, which looks more like C. The C Shell is not\nbackward compatible with the Bourne Shell, so special attention is required when converting scripts written for other Unix shells\nto the C shell, especially with regard to the management of shell variables. See also \u201cBourne Shell.\u201d\n\nC++\n\nA popular object-oriented programming language derived from C.\n\nCharacter Class\n\nSee \u201cBracket Expression.\u201d\n\nCharacter List\n\nSee \u201cBracket Expression.\u201d\n\nCharacter Set\n\nThe set of numeric codes used by a computer system to represent the characters (letters, numbers, punctuation, etc.) of a\nparticular country or place. The most common character set in use today is ASCII (American Standard Code for Information\nInterchange). Many European countries use an extension of ASCII known as ISO-8859-1 (ISO Latin-1). The Unicode character set\n[http://www.unicode.org] is increasingly popular and standard, and is particularly widely used on GNU/Linux systems.\n\nCHEM\n\nA preprocessor for pic that reads descriptions of molecules and produces pic input for drawing them. It was written in awk by\nBrian Kernighan and Jon Bentley, and is available from http://netlib.org/typesetting/chem [http://netlib.org/typesetting/chem].\n\nComparison Expression\n\nA relation that is either true or false, such as \u2018a < b\u2019. Comparison expressions are used in if, while, do, and for statements,\nand in patterns to select which input records to process. (See Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html].)\n\nCompiler\n\nA program that translates human-readable source code into machine-executable object code. The object code is then executed\ndirectly by the computer. See also \u201cInterpreter.\u201d\n\nComplemented Bracket Expression\n\nThe negation of a bracket expression. All that is not described by a given bracket expression. The symbol \u2018^\u2019 precedes the negated\nbracket expression. E.g.: \u2018[^[:digit:]]\u2019 designates whatever character is not a digit. \u2018[^bad]\u2019 designates whatever character is\nnot one of the letters \u2018b\u2019, \u2018a\u2019, or \u2018d\u2019. See \u201cBracket Expression.\u201d\n\nCompound Statement\n\nA series of awk statements, enclosed in curly braces. Compound statements may be nested. (See Control Statements in Actions\n[Statements.html].)\n\nComputed Regexps\n\nSee \u201cDynamic Regular Expressions.\u201d\n\nConcatenation\n\nConcatenating two strings means sticking them together, one after another, producing a new string. For example, the string \u2018foo\u2019\nconcatenated with the string \u2018bar\u2019 gives the string \u2018foobar\u2019. (See String Concatenation [Concatenation.html].)\n\nConditional Expression\n\nAn expression using the \u2018?:\u2019 ternary operator, such as \u2018expr1 ? expr2 : expr3\u2019. The expression expr1 is evaluated; if the result\nis true, the value of the whole expression is the value of expr2; otherwise the value is expr3. In either case, only one of expr2\nand expr3 is evaluated. (See Conditional Expressions [Conditional-Exp.html].)\n\nControl Statement\n\nA control statement is an instruction to perform a given operation or a set of operations inside an awk program, if a given\ncondition is true. Control statements are: if, for, while, and do (see Control Statements in Actions [Statements.html]).\n\nCookie\n\nA peculiar", "doc_id": "aad08716-4d9d-4e8e-b993-df2ab0ee2b82", "embedding": null, "doc_hash": "9b58d0abaa33ad550bedbc7263d0f4ed5b0f3118f5c7cc69df7436a57dd1fb07", "extra_info": null, "node_info": {"start": 7315, "end": 10963, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "0992bc16-09f0-4147-967a-fb9071d0c564", "3": "74c3aac2-7711-4e8e-a610-a22a40869c9f"}}, "__type__": "1"}, "74c3aac2-7711-4e8e-a610-a22a40869c9f": {"__data__": {"text": "in Actions [Statements.html]).\n\nCookie\n\nA peculiar goodie, token, saying or remembrance produced by or presented to a program. (With thanks to Professor Doug McIlroy.)\n\nCoprocess\n\nA subordinate program with which two-way communications is possible.\n\nCurly Braces\n\nSee \u201cBraces.\u201d\n\nDark Corner\n\nAn area in the language where specifications often were (or still are) not clear, leading to unexpected or undesirable behavior.\nSuch areas are marked in this Web page with \u201c(d.c.)\u201d in the text and are indexed under the heading \u201cdark corner.\u201d\n\nData Driven\n\nA description of awk programs, where you specify the data you are interested in processing, and what to do when that data is seen.\n\nData Objects\n\nThese are numbers and strings of characters. Numbers are converted into strings and vice versa, as needed. (See Conversion of\nStrings and Numbers [Conversion.html].)\n\nDeadlock\n\nThe situation in which two communicating processes are each waiting for the other to perform an action.\n\nDebugger\n\nA program used to help developers remove \u201cbugs\u201d from (de-bug) their programs.\n\nDouble Precision\n\nAn internal representation of numbers that can have fractional parts. Double precision numbers keep track of more digits than do\nsingle precision numbers, but operations on them are sometimes more expensive. This is the way awk stores numeric values. It is\nthe C type double.\n\nDynamic Regular Expression\n\nA dynamic regular expression is a regular expression written as an ordinary expression. It could be a string constant, such as\n\"foo\", but it may also be an expression whose value can vary. (See Using Dynamic Regexps [Computed-Regexps.html].)\n\nEmpty String\n\nSee \u201cNull String.\u201d\n\nEnvironment\n\nA collection of strings, of the form \u2018name=val\u2019, that each program has available to it. Users generally place values into the\nenvironment in order to provide information to various programs. Typical examples are the environment variables HOME and PATH.\n\nEpoch\n\nThe date used as the \u201cbeginning of time\u201d for timestamps. Time values in most systems are represented as seconds since the epoch,\nwith library functions available for converting these values into standard date and time formats.\n\nThe epoch on Unix and POSIX systems is 1970-01-01 00:00:00 UTC. See also \u201cGMT\u201d and \u201cUTC.\u201d\n\nEscape Sequences \u00b6\n\nA special sequence of characters used for describing nonprinting characters, such as \u2018\\n\u2019 for newline or \u2018\\033\u2019 for the ASCII ESC\n(Escape) character. (See Escape Sequences [Escape-Sequences.html].)\n\nExtension\n\nAn additional feature or change to a programming language or utility not defined by that language\u2019s or utility\u2019s standard. gawk\nhas (too) many extensions over POSIX awk.\n\nFDL\n\nSee \u201cFree Documentation License.\u201d\n\nField\n\nWhen awk reads an input record, it splits the record into pieces separated by whitespace (or by a separator regexp that you can\nchange by setting the predefined variable FS). Such pieces are called fields. If the pieces are of fixed length, you can use the\nbuilt-in variable FIELDWIDTHS to describe their lengths. If you wish to specify the contents of fields instead of the field\nseparator, you can use the predefined variable FPAT to do so. (See Specifying How Fields Are Separated [Field-Separators.html],\nReading Fixed-Width Data [Constant-Size.html], and Defining Fields by Content [Splitting-By-Content.html].)\n\nFlag\n\nA variable whose truth value indicates the existence or nonexistence of some condition.\n\nFloating-Point Number\n\nOften referred to in mathematical terms as a \u201crational\u201d or real number, this is just a number that can have a fractional part. See\nalso \u201cDouble Precision\u201d and \u201cSingle Precision.\u201d\n\nFormat\n\nFormat strings control the appearance of output in the strftime() and", "doc_id": "74c3aac2-7711-4e8e-a610-a22a40869c9f", "embedding": null, "doc_hash": "eb09b3be5ab5a9d99b7b166759c802063568622662a921ae04be348c25a89d3e", "extra_info": null, "node_info": {"start": 10934, "end": 14634, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "aad08716-4d9d-4e8e-b993-df2ab0ee2b82", "3": "f47ed1a9-d036-4e76-8928-5ca3cfd975d7"}}, "__type__": "1"}, "f47ed1a9-d036-4e76-8928-5ca3cfd975d7": {"__data__": {"text": "strings control the appearance of output in the strftime() and sprintf() functions, and in the printf statement as well.\nAlso, data conversions from numbers to strings are controlled by the format strings contained in the predefined variables CONVFMT\nand OFMT. (See Format-Control Letters [Control-Letters.html].)\n\nFortran\n\nShorthand for FORmula TRANslator, one of the first programming languages available for scientific calculations. It was created by\nJohn Backus, and has been available since 1957. It is still in use today.\n\nFree Documentation License\n\nThis document describes the terms under which this Web page is published and may be copied. (See GNU Free Documentation License\n[GNU-Free-Documentation-License.html].)\n\nFree Software Foundation\n\nA nonprofit organization dedicated to the production and distribution of freely distributable software. It was founded by Richard\nM. Stallman, the author of the original Emacs editor. GNU Emacs is the most widely used version of Emacs today.\n\nFSF\n\nSee \u201cFree Software Foundation.\u201d\n\nFunction\n\nA part of an awk program that can be invoked from every point of the program, to perform a task. awk has several built-in\nfunctions. Users can define their own functions in every part of the program. Function can be recursive, i.e., they may invoke\nthemselves. See Functions [Functions.html]. In gawk it is also possible to have functions shared among different programs, and\nincluded where required using the @include directive (see Including Other Files into Your Program [Include-Files.html]). In gawk\nthe name of the function that should be invoked can be generated at run time, i.e., dynamically. The gawk extension API provides\nconstructor functions (see Constructor Functions [Constructor-Functions.html]).\n\ngawk\n\nThe GNU implementation of awk.\n\nGeneral Public License\n\nThis document describes the terms under which gawk and its source code may be distributed. (See GNU General Public License\n[Copying.html].)\n\nGMT\n\n\u201cGreenwich Mean Time.\u201d This is the old term for UTC. It is the time of day used internally for Unix and POSIX systems. See also\n\u201cEpoch\u201d and \u201cUTC.\u201d\n\nGNU\n\n\u201cGNU\u2019s not Unix\u201d. An on-going project of the Free Software Foundation to create a complete, freely distributable, POSIX-compliant\ncomputing environment.\n\nGNU/Linux\n\nA variant of the GNU system using the Linux kernel, instead of the Free Software Foundation\u2019s Hurd kernel. The Linux kernel is a\nstable, efficient, full-featured clone of Unix that has been ported to a variety of architectures. It is most popular on PC-class\nsystems, but runs well on a variety of other systems too. The Linux kernel source code is available under the terms of the GNU\nGeneral Public License, which is perhaps its most important aspect.\n\nGPL\n\nSee \u201cGeneral Public License.\u201d\n\nHexadecimal\n\nBase 16 notation, where the digits are 0\u20139 and A\u2013F, with \u2018A\u2019 representing 10, \u2018B\u2019 representing 11, and so on, up to \u2018F\u2019 for 15.\nHexadecimal numbers are written in C using a leading \u20180x\u2019, to indicate their base. Thus, 0x12 is 18 ((1 x 16) + 2). See Octal and\nHexadecimal Numbers [Nondecimal_002dnumbers.html].\n\nI/O\n\nAbbreviation for \u201cInput/Output,\u201d the act of moving data into and/or out of a running program.\n\nInput Record\n\nA single chunk of data that is read in by awk. Usually, an awk input record consists of one line of text. (See How Input Is Split\ninto Records [Records.html].)\n\nInteger\n\nA whole number, i.e., a number that does not have a fractional part.\n\nInternationalization\n\nThe process of writing or modifying a program so that it can use multiple languages without requiring further source code changes.\n\nInterpreter\n\nA program that reads human-readable", "doc_id": "f47ed1a9-d036-4e76-8928-5ca3cfd975d7", "embedding": null, "doc_hash": "c51cf9f37433f7e326442bab5c2aad38e7eab9c40753f380894305221c1bacec", "extra_info": null, "node_info": {"start": 14629, "end": 18283, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "74c3aac2-7711-4e8e-a610-a22a40869c9f", "3": "a55f13a0-1417-4af9-ab69-7346d95c500e"}}, "__type__": "1"}, "a55f13a0-1417-4af9-ab69-7346d95c500e": {"__data__": {"text": "further source code changes.\n\nInterpreter\n\nA program that reads human-readable source code directly, and uses the instructions in it to process data and produce results. awk\nis typically (but not always) implemented as an interpreter. See also \u201cCompiler.\u201d\n\nInterval Expression\n\nA component of a regular expression that lets you specify repeated matches of some part of the regexp. Interval expressions were\nnot originally available in awk programs.\n\nISO\n\nThe International Organization for Standardization. This organization produces international standards for many things, including\nprogramming languages, such as C and C++. In the computer arena, important standards like those for C, C++, and POSIX become both\nAmerican national and ISO international standards simultaneously. This Web page refers to Standard C as \u201cISO C\u201d throughout. See\nthe ISO website [https://www.iso.org/iso/home/about.htm] for more information about the name of the organization and its\nlanguage-independent three-letter acronym.\n\nJava\n\nA modern programming language originally developed by Sun Microsystems (now Oracle) supporting Object-Oriented programming.\nAlthough usually implemented by compiling to the instructions for a standard virtual machine (the JVM), the language can be\ncompiled to native code.\n\nKeyword\n\nIn the awk language, a keyword is a word that has special meaning. Keywords are reserved and may not be used as variable names.\n\ngawk\u2019s keywords are: BEGIN, BEGINFILE, END, ENDFILE, break, case, continue, default, delete, do\u2026while, else, exit, for\u2026in, for,\nfunction, func, if, next, nextfile, switch, and while.\n\nKorn Shell\n\nThe Korn Shell (ksh) is a Unix shell which was developed by David Korn at Bell Laboratories in the early 1980s. The Korn Shell is\nbackward-compatible with the Bourne shell and includes many features of the C shell. See also \u201cBourne Shell.\u201d\n\nLesser General Public License\n\nThis document describes the terms under which binary library archives or shared objects, and their source code may be distributed.\n\nLGPL\n\nSee \u201cLesser General Public License.\u201d\n\nLinux\n\nSee \u201cGNU/Linux.\u201d\n\nLocalization\n\nThe process of providing the data necessary for an internationalized program to work in a particular language.\n\nLogical Expression\n\nAn expression using the operators for logic, AND, OR, and NOT, written \u2018&&\u2019, \u2018||\u2019, and \u2018!\u2019 in awk. Often called Boolean\nexpressions, after the mathematician who pioneered this kind of mathematical logic.\n\nLvalue\n\nAn expression that can appear on the left side of an assignment operator. In most languages, lvalues can be variables or array\nelements. In awk, a field designator can also be used as an lvalue.\n\nMatching\n\nThe act of testing a string against a regular expression. If the regexp describes the contents of the string, it is said to match\nit.\n\nMetacharacters\n\nCharacters used within a regexp that do not stand for themselves. Instead, they denote regular expression operations, such as\nrepetition, grouping, or alternation.\n\nNesting\n\nNesting is where information is organized in layers, or where objects contain other similar objects. In gawk the @include\ndirective can be nested. The \u201cnatural\u201d nesting of arithmetic and logical operations can be changed using parentheses (see Operator\nPrecedence (How Operators Nest) [Precedence.html]).\n\nNo-op\n\nAn operation that does nothing.\n\nNull String\n\nA string with no characters in it. It is represented explicitly in awk programs by placing two double quote characters next to\neach other (\"\"). It can appear in input data by having two successive occurrences of the field separator appear next to each\nother.\n\nNumber\n\nA numeric-valued data object. Modern awk implementations use double precision floating-point to represent numbers. Ancient awk\nimplementations used single precision floating-point.\n\nOctal\n\nBase-eight notation, where the digits", "doc_id": "a55f13a0-1417-4af9-ab69-7346d95c500e", "embedding": null, "doc_hash": "6f552161a213a479bd7eac7c1b64e73f5a3473eba7699cdaaf172402b03f31db", "extra_info": null, "node_info": {"start": 18266, "end": 22104, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "f47ed1a9-d036-4e76-8928-5ca3cfd975d7", "3": "79429f11-1e58-451a-870e-d02b164f82ce"}}, "__type__": "1"}, "79429f11-1e58-451a-870e-d02b164f82ce": {"__data__": {"text": "floating-point.\n\nOctal\n\nBase-eight notation, where the digits are 0\u20137. Octal numbers are written in C using a leading \u20180\u2019, to indicate their base. Thus,\n013 is 11 ((1 x 8) + 3). See Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html].\n\nOutput Record\n\nA single chunk of data that is written out by awk. Usually, an awk output record consists of one or more lines of text. See How\nInput Is Split into Records [Records.html].\n\nPattern\n\nPatterns tell awk which input records are interesting to which rules.\n\nA pattern is an arbitrary conditional expression against which input is tested. If the condition is satisfied, the pattern is said\nto match the input record. A typical pattern might compare the input record against a regular expression. (See Pattern Elements\n[Pattern-Overview.html].)\n\nPEBKAC\n\nAn acronym describing what is possibly the most frequent source of computer usage problems. (Problem Exists Between Keyboard And\nChair.)\n\nPlug-in\n\nSee \u201cExtensions.\u201d\n\nPOSIX\n\nThe name for a series of standards that specify a Portable Operating System interface. The \u201cIX\u201d denotes the Unix heritage of these\nstandards. The main standard of interest for awk users is IEEE Standard for Information Technology, Standard 1003.1TM-2017\n(Revision of IEEE Std 1003.1-2008). The 2018 POSIX standard can be found online at\nhttps://pubs.opengroup.org/onlinepubs/9699919799/ [https://pubs.opengroup.org/onlinepubs/9699919799/].\n\nPrecedence\n\nThe order in which operations are performed when operators are used without explicit parentheses.\n\nPrivate\n\nVariables and/or functions that are meant for use exclusively by library functions and not for the main awk program. Special care\nmust be taken when naming such variables and functions. (See Naming Library Function Global Variables [Library-Names.html].)\n\nRange (of input lines)\n\nA sequence of consecutive lines from the input file(s). A pattern can specify ranges of input lines for awk to process or it can\nspecify single lines. (See Pattern Elements [Pattern-Overview.html].)\n\nRecord\n\nSee \u201cInput record\u201d and \u201cOutput record.\u201d\n\nRecursion\n\nWhen a function calls itself, either directly or indirectly. If this is clear, stop, and proceed to the next entry. Otherwise,\nrefer to the entry for \u201crecursion.\u201d\n\nRedirection\n\nRedirection means performing input from something other than the standard input stream, or performing output to something other\nthan the standard output stream.\n\nYou can redirect input to the getline statement using the \u2018<\u2019, \u2018|\u2019, and \u2018|&\u2019 operators. You can redirect the output of the print\nand printf statements to a file or a system command, using the \u2018>\u2019, \u2018>>\u2019, \u2018|\u2019, and \u2018|&\u2019 operators. (See Explicit Input with\ngetline [Getline.html], and Redirecting Output of print and printf [Redirection.html].)\n\nReference Counts\n\nAn internal mechanism in gawk to minimize the amount of memory needed to store the value of string variables. If the value assumed\nby a variable is used in more than one place, only one copy of the value itself is kept, and the associated reference count is\nincreased when the same value is used by an additional variable, and decreased when the related variable is no longer in use. When\nthe reference count goes to zero, the memory space used to store the value of the variable is freed.\n\nRegexp\n\nSee \u201cRegular Expression.\u201d\n\nRegular Expression\n\nA regular expression (\u201cregexp\u201d for short) is a pattern that denotes a set of strings, possibly an infinite set. For example, the\nregular expression \u2018R.*xp\u2019 matches any string starting with the letter \u2018R\u2019 and ending with the letters \u2018xp\u2019. In awk, regular\nexpressions are used in patterns and in conditional expressions. Regular expressions may", "doc_id": "79429f11-1e58-451a-870e-d02b164f82ce", "embedding": null, "doc_hash": "69716dc61aa3509517cc3fea46ac95cc4f5ba3de40f64802a709cf0eeb4cf4a2", "extra_info": null, "node_info": {"start": 22119, "end": 25786, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "a55f13a0-1417-4af9-ab69-7346d95c500e", "3": "a3107513-4df1-499f-bbb1-3e7db5dea53c"}}, "__type__": "1"}, "a3107513-4df1-499f-bbb1-3e7db5dea53c": {"__data__": {"text": "regular\nexpressions are used in patterns and in conditional expressions. Regular expressions may contain escape sequences. (See Regular\nExpressions [Regexp.html].)\n\nRegular Expression Constant\n\nA regular expression constant is a regular expression written within slashes, such as /foo/. This regular expression is chosen\nwhen you write the awk program and cannot be changed during its execution. (See How to Use Regular Expressions\n[Regexp-Usage.html].)\n\nRegular Expression Operators\n\nSee \u201cMetacharacters.\u201d\n\nRounding\n\nRounding the result of an arithmetic operation can be tricky. More than one way of rounding exists, and in gawk it is possible to\nchoose which method should be used in a program. See Setting the Rounding Mode [Setting-the-rounding-mode.html].\n\nRule\n\nA segment of an awk program that specifies how to process single input records. A rule consists of a pattern and an action. awk\nreads an input record; then, for each rule, if the input record satisfies the rule\u2019s pattern, awk executes the rule\u2019s action.\nOtherwise, the rule does nothing for that input record.\n\nRvalue\n\nA value that can appear on the right side of an assignment operator. In awk, essentially every expression has a value. These\nvalues are rvalues.\n\nScalar\n\nA single value, be it a number or a string. Regular variables are scalars; arrays and functions are not.\n\nSearch Path\n\nIn gawk, a list of directories to search for awk program source files. In the shell, a list of directories to search for\nexecutable programs.\n\nsed\n\nSee \u201cStream Editor.\u201d\n\nSeed\n\nThe initial value, or starting point, for a sequence of random numbers.\n\nShell\n\nThe command interpreter for Unix and POSIX-compliant systems. The shell works both interactively, and as a programming language\nfor batch files, or shell scripts.\n\nShort-Circuit\n\nThe nature of the awk logical operators \u2018&&\u2019 and \u2018||\u2019. If the value of the entire expression is determinable from evaluating just\nthe lefthand side of these operators, the righthand side is not evaluated. (See Boolean Expressions [Boolean-Ops.html].)\n\nSide Effect\n\nA side effect occurs when an expression has an effect aside from merely producing a value. Assignment expressions, increment and\ndecrement expressions, and function calls have side effects. (See Assignment Expressions [Assignment-Ops.html].)\n\nSingle Precision\n\nAn internal representation of numbers that can have fractional parts. Single precision numbers keep track of fewer digits than do\ndouble precision numbers, but operations on them are sometimes less expensive in terms of CPU time. This is the type used by some\nancient versions of awk to store numeric values. It is the C type float.\n\nSpace\n\nThe character generated by hitting the space bar on the keyboard.\n\nSpecial File\n\nA file name interpreted internally by gawk, instead of being handed directly to the underlying operating system\u2014for example,\n/dev/stderr. (See Special File names in gawk [Special-Files.html].)\n\nStatement\n\nAn expression inside an awk program in the action part of a pattern\u2013action rule, or inside an awk function. A statement can be a\nvariable assignment, an array operation, a loop, etc.\n\nStream Editor\n\nA program that reads records from an input stream and processes them one or more at a time. This is in contrast with batch\nprograms, which may expect to read their input files in entirety before starting to do anything, as well as with interactive\nprograms which require input from the user.\n\nString\n\nA datum consisting of a sequence of characters, such as \u2018I am a string\u2019. Constant strings are written with double quotes in the\nawk language and may contain escape sequences. (See Escape Sequences [Escape-Sequences.html].)\n\nTab\n\nThe character generated by hitting the TAB key on the keyboard. It usually expands to up to eight spaces upon output.\n\nText Domain\n\nA unique name that identifies an application. Used for grouping messages that are translated", "doc_id": "a3107513-4df1-499f-bbb1-3e7db5dea53c", "embedding": null, "doc_hash": "dbcceadd0815e0b54b55de087c92be17b288b072dfb624f918e516e1ad4d903b", "extra_info": null, "node_info": {"start": 25759, "end": 29660, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "79429f11-1e58-451a-870e-d02b164f82ce", "3": "7f18c61a-78bc-40ab-ab5d-f5617e9f51f5"}}, "__type__": "1"}, "7f18c61a-78bc-40ab-ab5d-f5617e9f51f5": {"__data__": {"text": "unique name that identifies an application. Used for grouping messages that are translated at runtime into the local language.\n\nTimestamp\n\nA value in the \u201cseconds since the epoch\u201d format used by Unix and POSIX systems. Used for the gawk functions mktime(), strftime(),\nand systime(). See also \u201cEpoch,\u201d \u201cGMT,\u201d and \u201cUTC.\u201d\n\nUnix\n\nA computer operating system originally developed in the early 1970\u2019s at AT&T Bell Laboratories. It initially became popular in\nuniversities around the world and later moved into commercial environments as a software development system and network server\nsystem. There are many commercial versions of Unix, as well as several work-alike systems whose source code is freely available\n(such as GNU/Linux, NetBSD [http://www.netbsd.org], FreeBSD [https://www.freebsd.org], and OpenBSD [http://www.openbsd.org]).\n\nUTC\n\nThe accepted abbreviation for \u201cUniversal Coordinated Time.\u201d This is standard time in Greenwich, England, which is used as a\nreference time for day and date calculations. See also \u201cEpoch\u201d and \u201cGMT.\u201d\n\nVariable\n\nA name for a value. In awk, variables may be either scalars or arrays.\n\nWhitespace\n\nA sequence of space, TAB, or newline characters occurring inside an input record or a string.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: GNU General Public License [Copying.html], Previous: Basic Programming Concepts [Basic-Concepts.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7f18c61a-78bc-40ab-ab5d-f5617e9f51f5", "embedding": null, "doc_hash": "19ec447e4810d25674b42bd1b51839bd559c0b1fed794292468ed03818607b9a", "extra_info": null, "node_info": {"start": 29655, "end": 31221, "_node_type": "1"}, "relationships": {"1": "0e6157c4-b777-4911-bcfb-0756ef7aa163", "2": "a3107513-4df1-499f-bbb1-3e7db5dea53c"}}, "__type__": "1"}, "757ebc42-76e2-4fdb-961e-fa38b97a211e": {"__data__": {"text": "Up: String-Manipulation Functions [String-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.4.1 MORE ABOUT \u2018\\\u2019 AND \u2018&\u2019 WITH SUB(), GSUB(), AND GENSUB()\n\n> CAUTION: This subsubsection has been reported to cause headaches. You might want to skip it upon first reading.\n\nWhen using sub(), gsub(), or gensub(), and trying to get literal backslashes and ampersands into the replacement text, you need to\nremember that there are several levels of escape processing going on.\n\nFirst, there is the lexical level, which is when awk reads your program and builds an internal copy of it to execute. Then there\nis the runtime level, which is when awk actually scans the replacement string to determine what to generate.\n\nAt both levels, awk looks for a defined set of characters that can come after a backslash. At the lexical level, it looks for the\nescape sequences listed in Escape Sequences [Escape-Sequences.html]. Thus, for every \u2018\\\u2019 that awk processes at the runtime level,\nyou must type two backslashes at the lexical level. When a character that is not valid for an escape sequence follows the \u2018\\\u2019, BWK\nawk and gawk both simply remove the initial \u2018\\\u2019 and put the next character into the string. Thus, for example, \"a\\qb\" is treated\nas \"aqb\".\n\nAt the runtime level, the various functions handle sequences of \u2018\\\u2019 and \u2018&\u2019 differently. The situation is (sadly) somewhat\ncomplex. Historically, the sub() and gsub() functions treated the two-character sequence \u2018\\&\u2019 specially; this sequence was\nreplaced in the generated text with a single \u2018&\u2019. Any other \u2018\\\u2019 within the replacement string that did not precede an \u2018&\u2019 was\npassed through unchanged. This is illustrated in Table 9.1.\n\n You type         sub() sees          sub() generates\n \u2014\u2014\u2013         \u2014\u2014\u2014-          \u2014\u2014\u2014\u2014\u2014\n     \\&              &            The matched text\n    \\\\&             \\&            A literal \u2018&\u2019\n   \\\\\\&             \\&            A literal \u2018&\u2019\n  \\\\\\\\&            \\\\&            A literal \u2018\\&\u2019\n \\\\\\\\\\&            \\\\&            A literal \u2018\\&\u2019\n\\\\\\\\\\\\&           \\\\\\&            A literal \u2018\\\\&\u2019\n    \\\\q             \\q            A literal \u2018\\q\u2019\n\n\nTable 9.1: Historical escape sequence processing for sub() and gsub()\n\nThis table shows the lexical-level processing, where an odd number of backslashes becomes an even number at the runtime level, as\nwell as the runtime processing done by sub(). (For the sake of simplicity, the rest of the following tables only show the case of\neven numbers of backslashes entered at the lexical level.)\n\nThe problem with the historical approach is that there is no way to get a literal \u2018\\\u2019 followed by the matched text.\n\nSeveral editions of the POSIX standard attempted to fix this problem but weren\u2019t successful. The details are irrelevant at this\npoint in time.\n\nAt one point, the gawk maintainer submitted proposed text for a revised standard that reverts to rules that correspond more\nclosely to the original existing", "doc_id": "757ebc42-76e2-4fdb-961e-fa38b97a211e", "embedding": null, "doc_hash": "72b4b11eb15661ae260436e0074213218b4565f4b85d9e314fe854eda546e538", "extra_info": null, "node_info": {"start": 0, "end": 3076, "_node_type": "1"}, "relationships": {"1": "eee3412c-3791-4d6a-a064-ff044afbac98", "3": "7ae188ff-7f6e-4e18-98bb-ff6f4fef3450"}}, "__type__": "1"}, "7ae188ff-7f6e-4e18-98bb-ff6f4fef3450": {"__data__": {"text": "a revised standard that reverts to rules that correspond more\nclosely to the original existing practice. The proposed rules have special cases that make it possible to produce a \u2018\\\u2019 preceding\nthe matched text. This is shown in Table 9.2.\n\n You type         sub() sees         sub() generates\n \u2014\u2014\u2013         \u2014\u2014\u2014-         \u2014\u2014\u2014\u2014\u2014\n\\\\\\\\\\\\&           \\\\\\&            A literal \u2018\\&\u2019\n  \\\\\\\\&            \\\\&            A literal \u2018\\\u2019, followed by the matched text\n    \\\\&             \\&            A literal \u2018&\u2019\n    \\\\q             \\q            A literal \u2018\\q\u2019\n   \\\\\\\\             \\\\            \\\\\n\n\nTable 9.2: gawk rules for sub() and backslash\n\nIn a nutshell, at the runtime level, there are now three special sequences of characters (\u2018\\\\\\&\u2019, \u2018\\\\&\u2019, and \u2018\\&\u2019) whereas\nhistorically there was only one. However, as in the historical case, any \u2018\\\u2019 that is not part of one of these three sequences is\nnot special and appears in the output literally.\n\ngawk 3.0 and 3.1 follow these rules for sub() and gsub(). The POSIX standard took much longer to be revised than was expected. In\naddition, the gawk maintainer\u2019s proposal was lost during the standardization process. The final rules are somewhat simpler. The\nresults are similar except for one case.\n\nThe POSIX rules state that \u2018\\&\u2019 in the replacement string produces a literal \u2018&\u2019, \u2018\\\\\u2019 produces a literal \u2018\\\u2019, and \u2018\\\u2019 followed by\nanything else is not special; the \u2018\\\u2019 is placed straight into the output. These rules are presented in Table 9.3.\n\n You type         sub() sees         sub() generates\n \u2014\u2014\u2013         \u2014\u2014\u2014-         \u2014\u2014\u2014\u2014\u2014\n\\\\\\\\\\\\&           \\\\\\&            A literal \u2018\\&\u2019\n  \\\\\\\\&            \\\\&            A literal \u2018\\\u2019, followed by the matched text\n    \\\\&             \\&            A literal \u2018&\u2019\n    \\\\q             \\q            A literal \u2018\\q\u2019\n   \\\\\\\\             \\\\            \\\n\n\nTable 9.3: POSIX rules for sub() and gsub()\n\nThe only case where the difference is noticeable is the last one: \u2018\\\\\\\\\u2019 is seen as \u2018\\\\\u2019 and produces \u2018\\\u2019 instead of \u2018\\\\\u2019.\n\nStarting with version 3.1.4, gawk followed the POSIX rules when --posix was specified (see Command-Line Options [Options.html]).\nOtherwise, it continued to follow the proposed rules, as that had been its behavior for many years.\n\nWhen version 4.0.0 was released, the gawk maintainer made the POSIX rules the default, breaking well over a decade\u2019s worth of\nbackward compatibility.50 Needless to say, this was a bad idea, and as of version 4.0.1, gawk resumed its historical behavior, and\nonly follows the POSIX rules when", "doc_id": "7ae188ff-7f6e-4e18-98bb-ff6f4fef3450", "embedding": null, "doc_hash": "785aa5a1204deb2ae4581518fd272f4ed69d4acd5c95eef96a157a66d19e7d5c", "extra_info": null, "node_info": {"start": 2996, "end": 5514, "_node_type": "1"}, "relationships": {"1": "eee3412c-3791-4d6a-a064-ff044afbac98", "2": "757ebc42-76e2-4fdb-961e-fa38b97a211e", "3": "7b239a19-a599-4997-b943-4e59c017d776"}}, "__type__": "1"}, "7b239a19-a599-4997-b943-4e59c017d776": {"__data__": {"text": "gawk resumed its historical behavior, and\nonly follows the POSIX rules when --posix is given.\n\nThe rules for gensub() are considerably simpler. At the runtime level, whenever gawk sees a \u2018\\\u2019, if the following character is a\ndigit, then the text that matched the corresponding parenthesized subexpression is placed in the generated output. Otherwise, no\nmatter what character follows the \u2018\\\u2019, it appears in the generated text and the \u2018\\\u2019 does not, as shown in Table 9.4.\n\n  You type          gensub() sees         gensub() generates\n  \u2014\u2014\u2013          \u2014\u2014\u2014\u2014-         \u2014\u2014\u2014\u2014\u2014\u2014\n      &                    &            The matched text\n    \\\\&                   \\&            A literal \u2018&\u2019\n   \\\\\\\\                   \\\\            A literal \u2018\\\u2019\n  \\\\\\\\&                  \\\\&            A literal \u2018\\\u2019, then the matched text\n\\\\\\\\\\\\&                 \\\\\\&            A literal \u2018\\&\u2019\n    \\\\q                   \\q            A literal \u2018q\u2019\n\n\nTable 9.4: Escape sequence processing for gensub()\n\nBecause of the complexity of the lexical- and runtime-level processing and the special cases for sub() and gsub(), we recommend\nthe use of gawk and gensub() when you have to do substitutions.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(50)\n\nThis was rather naive of him, despite there being a note in this section indicating that the next major version would move to the\nPOSIX rules.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nUp: String-Manipulation Functions [String-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7b239a19-a599-4997-b943-4e59c017d776", "embedding": null, "doc_hash": "2abf8bb72fc5034facbb3b0bb04f1e1ad26136debc66070e05d5b76f222f98ba", "extra_info": null, "node_info": {"start": 5520, "end": 7227, "_node_type": "1"}, "relationships": {"1": "eee3412c-3791-4d6a-a064-ff044afbac98", "2": "7ae188ff-7f6e-4e18-98bb-ff6f4fef3450"}}, "__type__": "1"}, "5290a4ac-7b6e-41eb-9cf7-4cab6b54fa91": {"__data__": {"text": "Next: Traversing Arrays of Arrays [Walking-Arrays.html], Previous: Reading the User Database [Passwd-Functions.html], Up: A\nLibrary of awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.6 READING THE GROUP DATABASE\n\nMuch of the discussion presented in Reading the User Database [Passwd-Functions.html] applies to the group database as well.\nAlthough there has traditionally been a well-known file (/etc/group) in a well-known format, the POSIX standard only provides a\nset of C library routines (<grp.h> and getgrent()) for accessing the information. Even though this file may exist, it may not have\ncomplete information. Therefore, as with the user database, it is necessary to have a small C program that generates the group\ndatabase as its output. grcat, a C program that \u201ccats\u201d the group database, is as follows:\n\n/*\n * grcat.c\n *\n * Generate a printable version of the group database.\n */\n#include <stdio.h>\n#include <grp.h>\n\nint\nmain(int argc, char **argv)\n{\n    struct group *g;\n    int i;\n\n    while ((g = getgrent()) != NULL) {\n        printf(\"%s:%s:%ld:\", g->gr_name, g->gr_passwd,\n                                     (long) g->gr_gid);\n        for (i = 0; g->gr_mem[i] != NULL; i++) {\n            printf(\"%s\", g->gr_mem[i]);\n\n\n            if (g->gr_mem[i+1] != NULL)\n                putchar(',');\n        }\n\n\n        putchar('\\n');\n    }\n    endgrent();\n    return 0;\n}\n\n\nEach line in the group database represents one group. The fields are separated with colons and represent the following\ninformation:\n\nGroup Name\n\nThe group\u2019s name.\n\nGroup Password\n\nThe group\u2019s encrypted password. In practice, this field is never used; it is usually empty or set to \u2018*\u2019.\n\nGroup ID Number\n\nThe group\u2019s numeric group ID number; the association of name to number must be unique within the file. (On some systems it\u2019s a C\nlong, and not an int. Thus, we cast it to long for all cases.)\n\nGroup Member List\n\nA comma-separated list of usernames. These users are members of the group. Modern Unix systems allow users to be members of\nseveral groups simultaneously. If your system does, then there are elements \"group1\" through \"groupN\" in PROCINFO for those group\nID numbers. (Note that PROCINFO is a gawk extension; see Predefined Variables [Built_002din-Variables.html].)\n\nHere is what running grcat might produce:\n\n$ grcat\n-| wheel:*:0:arnold\n-| nogroup:*:65534:\n-| daemon:*:1:\n-| kmem:*:2:\n-| staff:*:10:arnold,miriam,andy\n-| other:*:20:\n\u2026\n\n\nHere are the functions for obtaining information from the group database. There are several, modeled after the C library functions\nof the same names:\n\n# group.awk --- functions for dealing with the group file\n\nBEGIN {\n    # Change to suit your system\n    _gr_awklib = \"/usr/local/libexec/awk/\"\n}\n\nfunction _gr_init(    oldfs, oldrs, olddol0, grcat,\n                    ", "doc_id": "5290a4ac-7b6e-41eb-9cf7-4cab6b54fa91", "embedding": null, "doc_hash": "775f7bf6a02a93c2b70a26ac6d79fa9e90e14caa15d063c08d5150957943a1ab", "extra_info": null, "node_info": {"start": 0, "end": 2989, "_node_type": "1"}, "relationships": {"1": "85f62711-490d-4e0f-8d5d-167e868e706f", "3": "77567b34-6503-40b6-9ffe-327aae8701ef"}}, "__type__": "1"}, "77567b34-6503-40b6-9ffe-327aae8701ef": {"__data__": {"text": "                            using_fw, using_fpat, n, a, i)\n{\n    if (_gr_inited)\n        return\n\n    oldfs = FS\n    oldrs = RS\n    olddol0 = $0\n    using_fw = (PROCINFO[\"FS\"] == \"FIELDWIDTHS\")\n    using_fpat = (PROCINFO[\"FS\"] == \"FPAT\")\n    FS = \":\"\n    RS = \"\\n\"\n\n    grcat = _gr_awklib \"grcat\"\n    while ((grcat | getline) > 0) {\n        if ($1 in _gr_byname)\n            _gr_byname[$1] = _gr_byname[$1] \",\" $4\n        else\n            _gr_byname[$1] = $0\n        if ($3 in _gr_bygid)\n            _gr_bygid[$3] = _gr_bygid[$3] \",\" $4\n        else\n            _gr_bygid[$3] = $0\n\n        n = split($4, a, \"[ \\t]*,[ \\t]*\")\n        for (i = 1; i <= n; i++)\n            if (a[i] in _gr_groupsbyuser)\n                _gr_groupsbyuser[a[i]] = _gr_groupsbyuser[a[i]] \" \" $1\n            else\n                _gr_groupsbyuser[a[i]] = $1\n\n        _gr_bycount[++_gr_count] = $0\n    }\n    close(grcat)\n    _gr_count = 0\n    _gr_inited++\n    FS = oldfs\n    if (using_fw)\n        FIELDWIDTHS = FIELDWIDTHS\n    else if (using_fpat)\n        FPAT = FPAT\n    RS = oldrs\n    $0 = olddol0\n}\n\n\nThe BEGIN rule sets a private variable to the directory where grcat is stored. Because it is used to help out an awk library\nroutine, we have chosen to put it in /usr/local/libexec/awk. You might want it to be in a different directory on your system.\n\nThese routines follow the same general outline as the user database routines (see Reading the User Database\n[Passwd-Functions.html]). The _gr_inited variable is used to ensure that the database is scanned no more than once. The _gr_init()\nfunction first saves FS, RS, and $0, and then sets FS and RS to the correct values for scanning the group information. It also\ntakes care to note whether FIELDWIDTHS or FPAT is being used, and to restore the appropriate field-splitting mechanism.\n\nThe group information is stored in several associative arrays. The arrays are indexed by group name (_gr_byname), by group ID\nnumber (_gr_bygid), and by position in the database (_gr_bycount). There is an additional array indexed by username\n(_gr_groupsbyuser), which is a space-separated list of groups to which each user belongs.\n\nUnlike in the user database, it is possible to have multiple records in the database for the same group. This is common when a\ngroup has a large number of members. A pair of such entries might look like the", "doc_id": "77567b34-6503-40b6-9ffe-327aae8701ef", "embedding": null, "doc_hash": "0441594ae417a246eeb7b3b360857dcd822f207f5947be8cc8bf809b568304f1", "extra_info": null, "node_info": {"start": 2990, "end": 5343, "_node_type": "1"}, "relationships": {"1": "85f62711-490d-4e0f-8d5d-167e868e706f", "2": "5290a4ac-7b6e-41eb-9cf7-4cab6b54fa91", "3": "c87d977f-5ba1-4c1f-a7f1-21c821cb0a31"}}, "__type__": "1"}, "c87d977f-5ba1-4c1f-a7f1-21c821cb0a31": {"__data__": {"text": "a\ngroup has a large number of members. A pair of such entries might look like the following:\n\ntvpeople:*:101:johnny,jay,arsenio\ntvpeople:*:101:david,conan,tom,joan\n\n\nFor this reason, _gr_init() looks to see if a group name or group ID number is already seen. If so, the usernames are simply\nconcatenated onto the previous list of users.74\n\nFinally, _gr_init() closes the pipeline to grcat, restores FS (and FIELDWIDTHS or FPAT, if necessary), RS, and $0, initializes\n_gr_count to zero (it is used later), and makes _gr_inited nonzero.\n\nThe getgrnam() function takes a group name as its argument, and if that group exists, it is returned. Otherwise, it relies on the\narray reference to a nonexistent element to create the element with the null string as its value:\n\nfunction getgrnam(group)\n{\n    _gr_init()\n    return _gr_byname[group]\n}\n\n\nThe getgrgid() function is similar; it takes a numeric group ID and looks up the information associated with that group ID:\n\nfunction getgrgid(gid)\n{\n    _gr_init()\n    return _gr_bygid[gid]\n}\n\n\nThe getgruser() function does not have a C counterpart. It takes a username and returns the list of groups that have the user as a\nmember:\n\nfunction getgruser(user)\n{\n    _gr_init()\n    return _gr_groupsbyuser[user]\n}\n\n\nThe getgrent() function steps through the database one entry at a time. It uses _gr_count to track its position in the list:\n\nfunction getgrent()\n{\n    _gr_init()\n    if (++_gr_count in _gr_bycount)\n        return _gr_bycount[_gr_count]\n\n\n    return \"\"\n}\n\n\nThe endgrent() function resets _gr_count to zero so that getgrent() can start over again:\n\nfunction endgrent()\n{\n    _gr_count = 0\n}\n\n\nAs with the user database routines, each function calls _gr_init() to initialize the arrays. Doing so only incurs the extra\noverhead of running grcat if these functions are used (as opposed to moving the body of _gr_init() into a BEGIN rule).\n\nMost of the work is in scanning the database and building the various associative arrays. The functions that the user calls are\nthemselves very simple, relying on awk\u2019s associative arrays to do work.\n\nThe id program in Printing Out User Information [Id-Program.html] uses these functions.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(74)\n\nThere is a subtle problem with the code just presented. Suppose that the first time there were no names. This code adds the names\nwith a leading comma. It also doesn\u2019t check that there is a $4.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Traversing Arrays of Arrays [Walking-Arrays.html], Previous: Reading the User Database [Passwd-Functions.html], Up: A\nLibrary of awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c87d977f-5ba1-4c1f-a7f1-21c821cb0a31", "embedding": null, "doc_hash": "305b85efb17b7872f9cbb66ca7fd30a73fa8a54f40aa2928894e1cb20283cd3d", "extra_info": null, "node_info": {"start": 5262, "end": 8151, "_node_type": "1"}, "relationships": {"1": "85f62711-490d-4e0f-8d5d-167e868e706f", "2": "77567b34-6503-40b6-9ffe-327aae8701ef"}}, "__type__": "1"}, "44beb03c-341e-4f4e-beb1-a077e8ccb039": {"__data__": {"text": "Next: Extracting Programs from Texinfo Source Files [Extract-Program.html], Previous: Generating Word-Usage Counts\n[Word-Sorting.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.6 REMOVING DUPLICATES FROM UNSORTED TEXT\n\nThe uniq program (see Printing Nonduplicated Lines of Text [Uniq-Program.html]) removes duplicate lines from sorted data.\n\nSuppose, however, you need to remove duplicate lines from a data file but that you want to preserve the order the lines are in. A\ngood example of this might be a shell history file. The history file keeps a copy of all the commands you have entered, and it is\nnot unusual to repeat a command several times in a row. Occasionally you might want to compact the history by removing duplicate\nentries. Yet it is desirable to maintain the order of the original commands.\n\nThis simple program does the job. It uses two arrays. The data array is indexed by the text of each line. For each line, data[$0]\nis incremented. If a particular line has not been seen before, then data[$0] is zero. In this case, the text of the line is stored\nin lines[count]. Each element of lines is a unique command, and the indices of lines indicate the order in which those lines are\nencountered. The END rule simply prints out the lines, in order:\n\n# histsort.awk --- compact a shell history file\n# Thanks to Byron Rakitzis for the general idea\n\n\n\n{\n    if (data[$0]++ == 0)\n        lines[++count] = $0\n}\n\n\n\n\n\n\nEND {\n    for (i = 1; i <= count; i++)\n        print lines[i]\n}\n\n\nThis program also provides a foundation for generating other useful information. For example, using the following print statement\nin the END rule indicates how often a particular command is used:\n\nprint data[lines[i]], lines[i]\n\n\nThis works because data[$0] is incremented each time a line is seen.\n\nRick van Rein offers the following one-liner to do the same job of removing duplicates from unsorted text:\n\nawk '{ if (! seen[$0]++) print }'\n\n\nThis can be simplified even further, at the risk of becoming almost too obscure:\n\nawk '! seen[$0]++'\n\n\nThis version uses the expression as a pattern, relying on awk\u2019s default action of printing the line when the pattern is true.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Extracting Programs from Texinfo Source Files [Extract-Program.html], Previous: Generating Word-Usage Counts\n[Word-Sorting.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "44beb03c-341e-4f4e-beb1-a077e8ccb039", "embedding": null, "doc_hash": "03b8e4fc1c3ec7edaaae732b3a2eac3fa7d044888f92c090cffa08a1ce8d979a", "extra_info": null, "node_info": {"start": 0, "end": 2771, "_node_type": "1"}, "relationships": {"1": "3f44d0bb-2268-47a7-b8e2-678d926a89e7"}}, "__type__": "1"}, "36cfc8f7-accb-4680-8c5a-f451c9e8ee32": {"__data__": {"text": "Previous: Major Contributors to gawk [Contributors.html], Up: The Evolution of the awk Language [Language-History.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.10 SUMMARY\n\n * The awk language has evolved over time. The first release was with V7 Unix, circa 1978. In 1987, for System V Release 3.1,\n   major additions, including user-defined functions, were made to the language. Additional changes were made for System V Release\n   4, in 1989. Since then, further minor changes have happened under the auspices of the POSIX standard.\n * Brian Kernighan\u2019s awk provides a small number of extensions that are implemented in common with other versions of awk.\n * gawk provides a large number of extensions over POSIX awk. They can be disabled with either the --traditional or --posix\n   options.\n * The interaction of POSIX locales and regexp matching in gawk has been confusing over the years. Today, gawk implements Rational\n   Range Interpretation, where ranges of the form \u2018[a-z]\u2019 match only the characters numerically between \u2018a\u2019 through \u2018z\u2019 in the\n   machine\u2019s native character set. Usually this is ASCII, but it can be EBCDIC on IBM S/390 systems.\n * Many people have contributed to gawk development over the years. We hope that the list provided in this chapter is complete and\n   gives the appropriate credit where credit is due.", "doc_id": "36cfc8f7-accb-4680-8c5a-f451c9e8ee32", "embedding": null, "doc_hash": "d1af45d1c70b73024bad713589fd56f7bccc1d2d66af2f95739a83e6601ce610", "extra_info": null, "node_info": {"start": 0, "end": 1489, "_node_type": "1"}, "relationships": {"1": "2a6017ca-3554-41a9-bea1-b2d676d7bbb2"}}, "__type__": "1"}, "10ede6ce-d5b0-4477-a584-54af35558a27": {"__data__": {"text": "Next: A Rose by Any Other Name [Names.html], Up: Preface [Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nHISTORY OF AWK AND GAWK\n\nRecipe for a Programming Language\n\n1 part egrep1 part snobol 2 parts ed3 parts C\n\nBlend all parts well using lex and yacc. Document minimally and release.\n\nAfter eight years, add another part egrep and two more parts C. Document very well and release.\n\nThe name awk comes from the initials of its designers: Alfred V. Aho, Peter J. Weinberger, and Brian W. Kernighan. The original\nversion of awk was written in 1977 at AT&T Bell Laboratories. In 1985, a new version made the programming language more powerful,\nintroducing user-defined functions, multiple input streams, and computed regular expressions. This new version became widely\navailable with Unix System V Release 3.1 (1987). The version in System V Release 4 (1989) added some new features and cleaned up\nthe behavior in some of the \u201cdark corners\u201d of the language. The specification for awk in the POSIX Command Language and Utilities\nstandard further clarified the language. Both the gawk designers and the original awk designers at Bell Laboratories provided\nfeedback for the POSIX specification.\n\nPaul Rubin wrote gawk in 1986. Jay Fenlason completed it, with advice from Richard Stallman. John Woods contributed parts of the\ncode as well. In 1988 and 1989, David Trueman, with help from me, thoroughly reworked gawk for compatibility with the newer awk.\nCirca 1994, I became the primary maintainer. Current development focuses on bug fixes, performance improvements, standards\ncompliance, and, occasionally, new features.\n\nIn May 1997, J\u00fcrgen Kahrs felt the need for network access from awk, and with a little help from me, set about adding features to\ndo this for gawk. At that time, he also wrote the bulk of TCP/IP Internetworking with gawk (a separate document, available as part\nof the gawk distribution). His code finally became part of the main gawk distribution with gawk version 3.1.\n\nJohn Haque rewrote the gawk internals, in the process providing an awk-level debugger. This version became available as gawk\nversion 4.0 in 2011.\n\nSee Major Contributors to gawk [Contributors.html] for a full list of those who have made important contributions to gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: A Rose by Any Other Name [Names.html], Up: Preface [Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "10ede6ce-d5b0-4477-a584-54af35558a27", "embedding": null, "doc_hash": "a5bb1470c74e14750a3a9bb81e13089bbb58773b473bbc8bc55d5bff4cd18e5c", "extra_info": null, "node_info": {"start": 0, "end": 2681, "_node_type": "1"}, "relationships": {"1": "4c59e0fd-943c-48bf-98a6-3652cf72a05f"}}, "__type__": "1"}, "21e5b78d-853d-4f67-8513-aeba11b3b089": {"__data__": {"text": "Next: Acknowledgments [Acknowledgments.html], Previous: The GNU Project and This Book [Manual-History.html], Up: Preface\n[Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nHOW TO CONTRIBUTE\n\nAs the maintainer of GNU awk, I once thought that I would be able to manage a collection of publicly available awk programs and I\neven solicited contributions. Making things available on the Internet helps keep the gawk distribution down to manageable size.\n\nThe initial collection of material, such as it is, is still available at ftp://ftp.freefriends.org/arnold/Awkstuff\n[ftp://ftp.freefriends.org/arnold/Awkstuff].\n\nIn the hopes of doing something broader, I acquired the awklang.org domain. Late in 2017, a volunteer took on the task of managing\nit.\n\nIf you have written an interesting awk program that you would like to share with the rest of the world, please see\nhttp://www.awklang.org [http://www.awklang.org] and use the \u201cContact\u201d link.\n\nIf you have written a gawk extension, please see The gawkextlib Project [gawkextlib.html].", "doc_id": "21e5b78d-853d-4f67-8513-aeba11b3b089", "embedding": null, "doc_hash": "d306814d207d52d3a9002af78ed986dff5b9575adbb5a4e275574646fb7e3e42", "extra_info": null, "node_info": {"start": 0, "end": 1186, "_node_type": "1"}, "relationships": {"1": "d901b462-1fbf-455a-9537-262368e392d4"}}, "__type__": "1"}, "d9355869-8188-479f-ba91-b3a849f3feb0": {"__data__": {"text": "Next: gawk Can Speak Your Language [Gawk-I18N.html], Previous: Translating awk Programs [Translator-i18n.html], Up:\nInternationalization with gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.5 A SIMPLE INTERNATIONALIZATION EXAMPLE\n\nNow let\u2019s look at a step-by-step example of how to internationalize and localize a simple awk program, using guide.awk as our\noriginal source:\n\nBEGIN {\n    TEXTDOMAIN = \"guide\"\n    bindtextdomain(\".\")  # for testing\n    print _\"Don't Panic\"\n    print _\"The Answer Is\", 42\n    print \"Pardon me, Zaphod who?\"\n}\n\n\nRun \u2018gawk --gen-pot\u2019 to create the .pot file:\n\n$ gawk --gen-pot -f guide.awk > guide.pot\n\n\nThis produces:\n\n#: guide.awk:4\nmsgid \"Don't Panic\"\nmsgstr \"\"\n\n#: guide.awk:5\nmsgid \"The Answer Is\"\nmsgstr \"\"\n\n\n\nThis original portable object template file is saved and reused for each language into which the application is translated. The\nmsgid is the original string and the msgstr is the translation.\n\n> NOTE: Strings not marked with a leading underscore do not appear in the guide.pot file.\n\nNext, the messages must be translated. Here is a translation to a hypothetical dialect of English, called \u201cMellow\u201d:93\n\n$ cp guide.pot guide-mellow.po\nAdd translations to guide-mellow.po \u2026\n\n\nFollowing are the translations:\n\n#: guide.awk:4\nmsgid \"Don't Panic\"\nmsgstr \"Hey man, relax!\"\n\n#: guide.awk:5\nmsgid \"The Answer Is\"\nmsgstr \"Like, the scoop is\"\n\n\n\n> NOTE: The following instructions apply to GNU/Linux with the GNU C Library. Be aware that the actual steps may change over time,\n> that the following description may not be accurate for all GNU/Linux distributions, and that things may work entirely\n> differently on other operating systems.\n\nThe next step is to make the directory to hold the binary message object file and then to create the guide.mo file. The directory\nhas the form locale/LC_MESSAGES, where locale is a locale name known to the C gettext routines.\n\nHow do we know which locale to use? It turns out that there are four different environment variables used by the C gettext\nroutines. In order, they are $LANGUAGE, $LC_ALL, $LANG, and $LC_MESSAGES.94 Thus, we check the value of $LANGUAGE:\n\n$ echo $LANGUAGE\n-| en_US.UTF-8\n\n\nWe next make the directories:\n\n$ mkdir en_US.UTF-8 en_US.UTF-8/LC_MESSAGES\n\n\nThe msgfmt utility converts the human-readable .po file into a machine-readable .mo file. By default, msgfmt creates a file named\nmessages. This file must be renamed and placed in the proper directory (using the -o option) so that gawk can find it:\n\n$ msgfmt guide-mellow.po -o en_US.UTF-8/LC_MESSAGES/guide.mo\n\n\nFinally, we run the program to test it:\n\n$ gawk -f guide.awk\n-| Hey man, relax!\n-| Like, the scoop is 42\n-| Pardon me, Zaphod who?\n\n\nIf the three replacement functions for dcgettext(), dcngettext(), and bindtextdomain() (see awk Portability Issues\n[I18N-Portability.html]) are in a file named libintl.awk, then we can run guide.awk unchanged as follows:\n\n$ gawk --posix -f guide.awk -f libintl.awk\n-| Don't Panic\n-| The Answer Is 42\n-| Pardon me, Zaphod", "doc_id": "d9355869-8188-479f-ba91-b3a849f3feb0", "embedding": null, "doc_hash": "9f49599cb8721d2ce7f8eaa5f311f1f07bac47cd508cbbbcd1ef65218ac99737", "extra_info": null, "node_info": {"start": 0, "end": 3199, "_node_type": "1"}, "relationships": {"1": "02af9c40-b042-433f-ac24-a325a70e1f36", "3": "6a9d8116-d789-4016-97de-a7a5ced7a13e"}}, "__type__": "1"}, "6a9d8116-d789-4016-97de-a7a5ced7a13e": {"__data__": {"text": "Don't Panic\n-| The Answer Is 42\n-| Pardon me, Zaphod who?\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(93)\n\nPerhaps it would be better if it were called \u201cHippy.\u201d Ah, well.\n\n(94)\n\nWell, sort of. It seems that if $LC_ALL is set to \u2018C\u2019, then no translations are done. Go figure.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: gawk Can Speak Your Language [Gawk-I18N.html], Previous: Translating awk Programs [Translator-i18n.html], Up:\nInternationalization with gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6a9d8116-d789-4016-97de-a7a5ced7a13e", "embedding": null, "doc_hash": "8fe61270119220dc980d9e60791f28642b58414067edadba0f94f62e8d10292a", "extra_info": null, "node_info": {"start": 3147, "end": 3890, "_node_type": "1"}, "relationships": {"1": "02af9c40-b042-433f-ac24-a325a70e1f36", "2": "d9355869-8188-479f-ba91-b3a849f3feb0"}}, "__type__": "1"}, "4df3708e-e1c6-4c96-a61b-eed3d27bf09c": {"__data__": {"text": "Previous: Getting Type Information [Type-Functions.html], Up: Built-in Functions [Built_002din.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.9 STRING-TRANSLATION FUNCTIONS\n\ngawk provides facilities for internationalizing awk programs. These include the functions described in the following list. The\ndescriptions here are purposely brief. See Internationalization with gawk [Internationalization.html], for the full story.\nOptional parameters are enclosed in square brackets ([ ]):\n\nbindtextdomain(directory [, domain])\n\nSet the directory in which gawk will look for message translation files, in case they will not or cannot be placed in the\n\u201cstandard\u201d locations (e.g., during testing). It returns the directory in which domain is \u201cbound.\u201d\n\nThe default domain is the value of TEXTDOMAIN. If directory is the null string (\"\"), then bindtextdomain() returns the current\nbinding for the given domain.\n\ndcgettext(string [, domain [, category] ])\n\nReturn the translation of string in text domain domain for locale category category. The default value for domain is the current\nvalue of TEXTDOMAIN. The default value for category is \"LC_MESSAGES\".\n\ndcngettext(string1, string2, number [, domain [, category] ])\n\nReturn the plural form used for number of the translation of string1 and string2 in text domain domain for locale category\ncategory. string1 is the English singular variant of a message, and string2 is the English plural variant of the same message. The\ndefault value for domain is the current value of TEXTDOMAIN. The default value for category is \"LC_MESSAGES\".\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Getting Type Information [Type-Functions.html], Up: Built-in Functions [Built_002din.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4df3708e-e1c6-4c96-a61b-eed3d27bf09c", "embedding": null, "doc_hash": "07fa63bbc39cd9ee493cfb5f19c73dff917b76b240cd1631ffd08314998b9411", "extra_info": null, "node_info": {"start": 0, "end": 2019, "_node_type": "1"}, "relationships": {"1": "01962dab-dd21-48f0-9653-b6ca2769d285"}}, "__type__": "1"}, "5a1a4e79-6334-4c46-8aa8-230f686dcf79": {"__data__": {"text": "Previous: Rearranging printf Arguments [Printf-Ordering.html], Up: Translating awk Programs [Translator-i18n.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n13.4.3 AWK PORTABILITY ISSUES\n\ngawk\u2019s internationalization features were purposely chosen to have as little impact as possible on the portability of awk programs\nthat use them to other versions of awk. Consider this program:\n\nBEGIN {\n    TEXTDOMAIN = \"guide\"\n    if (Test_Guide)   # set with -v\n        bindtextdomain(\"/test/guide/messages\")\n    print _\"don't panic!\"\n}\n\n\nAs written, it won\u2019t work on other versions of awk. However, it is actually almost portable, requiring very little change:\n\n * \n * Assignments to TEXTDOMAIN won\u2019t have any effect, because TEXTDOMAIN is not special in other awk implementations.\n * Non-GNU versions of awk treat marked strings as the concatenation of a variable named _ with the string following it.92\n   Typically, the variable _ has the null string (\"\") as its value, leaving the original string constant as the result.\n * By defining \u201cdummy\u201d functions to replace dcgettext(), dcngettext(), and bindtextdomain(), the awk program can be made to run,\n   but all the messages are output in the original language. For example:\n   \n   function bindtextdomain(dir, domain)\n   {\n       return dir\n   }\n   \n   function dcgettext(string, domain, category)\n   {\n       return string\n   }\n   \n   function dcngettext(string1, string2, number, domain, category)\n   {\n       return (number == 1 ? string1 : string2)\n   }\n   \n\n * The use of positional specifications in printf or sprintf() is not portable. To support gettext() at the C level, many systems\u2019\n   C versions of sprintf() do support positional specifiers. But it works only if enough arguments are supplied in the function\n   call. Many versions of awk pass printf formats and arguments unchanged to the underlying C library version of sprintf(), but\n   only one format and argument at a time. What happens if a positional specification is used is anybody\u2019s guess. However, because\n   the positional specifications are primarily for use in translated format strings, and because non-GNU awks never retrieve the\n   translated string, this should not be a problem in practice.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(92)\n\nThis is good fodder for an \u201cObfuscated awk\u201d contest.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Rearranging printf Arguments [Printf-Ordering.html], Up: Translating awk Programs [Translator-i18n.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "5a1a4e79-6334-4c46-8aa8-230f686dcf79", "embedding": null, "doc_hash": "9a99045ecb9844feef9a91f36aa0f6ea2d8555c4061b5761bc17f7808b27b6d7", "extra_info": null, "node_info": {"start": 0, "end": 2878, "_node_type": "1"}, "relationships": {"1": "0fa9a2b2-30a9-4371-bd74-3e5e72c60feb"}}, "__type__": "1"}, "747c4740-e247-466c-bc1f-aeb8c73b0bc4": {"__data__": {"text": "Previous: gawk Can Speak Your Language [Gawk-I18N.html], Up: Internationalization with gawk [Internationalization.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.7 SUMMARY\n\n * Internationalization means writing a program such that it can use multiple languages without requiring source code changes.\n   Localization means providing the data necessary for an internationalized program to work in a particular language.\n * gawk uses GNU gettext to let you internationalize and localize awk programs. A program\u2019s text domain identifies the program for\n   grouping all messages and other data together.\n * You mark a program\u2019s strings for translation by preceding them with an underscore. Once that is done, the strings are extracted\n   into a .pot file. This file is copied for each language into a .po file, and the .po files are compiled into .gmo files for use\n   at runtime.\n * You can use positional specifications with sprintf() and printf to rearrange the placement of argument values in formatted\n   strings and output. This is useful for the translation of format control strings.\n * The internationalization features have been designed so that they can be easily worked around in a standard awk.\n * gawk itself has been internationalized and ships with a number of translations for its messages.", "doc_id": "747c4740-e247-466c-bc1f-aeb8c73b0bc4", "embedding": null, "doc_hash": "22a7f11db1af98ed8d0a4f4fe5ef60a27a012533642320749a486bbf772e9bb3", "extra_info": null, "node_info": {"start": 0, "end": 1456, "_node_type": "1"}, "relationships": {"1": "1c037a2d-1643-40fa-9b6c-e969b225bbf8"}}, "__type__": "1"}, "5878eca1-8dd7-4e61-a735-da45eae7e4b3": {"__data__": {"text": "Next: GNU gettext [Explaining-gettext.html], Up: Internationalization with gawk [Internationalization.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.1 INTERNATIONALIZATION AND LOCALIZATION\n\nInternationalization means writing (or modifying) a program once, in such a way that it can use multiple languages without\nrequiring further source code changes. Localization means providing the data necessary for an internationalized program to work in\na particular language. Most typically, these terms refer to features such as the language used for printing error messages, the\nlanguage used to read responses, and information related to how numerical and monetary values are printed and read.", "doc_id": "5878eca1-8dd7-4e61-a735-da45eae7e4b3", "embedding": null, "doc_hash": "009ca05aecab85755ed9909f0f66e1ee2ae00f1c01fa9d8d3958693d95e3f10b", "extra_info": null, "node_info": {"start": 0, "end": 842, "_node_type": "1"}, "relationships": {"1": "1557277a-62cc-42cb-ad65-9b557391f8f8"}}, "__type__": "1"}, "f60374b7-e6f7-403e-85d9-f0117111a926": {"__data__": {"text": "Previous: Startup and Cleanup Actions [Using-BEGIN_002fEND.html], Up: The BEGIN and END Special Patterns [BEGIN_002fEND.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.4.2 INPUT/OUTPUT FROM BEGIN AND END RULES\n\nThere are several (sometimes subtle) points to be aware of when doing I/O from a BEGIN or END rule. The first has to do with the\nvalue of $0 in a BEGIN rule. Because BEGIN rules are executed before any input is read, there simply is no input record, and\ntherefore no fields, when executing BEGIN rules. References to $0 and the fields yield a null string or zero, depending upon the\ncontext. One way to give $0 a real value is to execute a getline command without a variable (see Explicit Input with getline\n[Getline.html]). Another way is simply to assign a value to $0.\n\nThe second point is similar to the first, but from the other direction. Traditionally, due largely to implementation issues, $0\nand NF were undefined inside an END rule. The POSIX standard specifies that NF is available in an END rule. It contains the number\nof fields from the last input record. Most probably due to an oversight, the standard does not say that $0 is also preserved,\nalthough logically one would think that it should be. In fact, all of BWK awk, mawk, and gawk preserve the value of $0 for use in\nEND rules. Be aware, however, that some other implementations and many older versions of Unix awk do not.\n\nThe third point follows from the first two. The meaning of \u2018print\u2019 inside a BEGIN or END rule is the same as always: \u2018print $0\u2019.\nIf $0 is the null string, then this prints an empty record. Many longtime awk programmers use an unadorned \u2018print\u2019 in BEGIN and\nEND rules to mean \u2018print\u00a0\"\"\u2019, relying on $0 being null. Although one might generally get away with this in BEGIN rules, it is a\nvery bad idea in END rules, at least in gawk. It is also poor style, because if an empty line is needed in the output, the program\nshould print one explicitly.\n\nFinally, the next and nextfile statements are not allowed in a BEGIN rule, because the implicit\nread-a-record-and-match-against-the-rules loop has not started yet. Similarly, those statements are not valid in an END rule,\nbecause all the input has been read. (See The next Statement [Next-Statement.html] and see The nextfile Statement\n[Nextfile-Statement.html].)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Startup and Cleanup Actions [Using-BEGIN_002fEND.html], Up: The BEGIN and END Special Patterns [BEGIN_002fEND.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f60374b7-e6f7-403e-85d9-f0117111a926", "embedding": null, "doc_hash": "e7fba59e11b438f5378b327f4b33996775a1f8679996f9c30d83fd156f12e017", "extra_info": null, "node_info": {"start": 0, "end": 2787, "_node_type": "1"}, "relationships": {"1": "190afaa3-e863-4aa3-a7c9-a132ac68873f"}}, "__type__": "1"}, "30952e72-4860-413a-a6ca-6404f162f822": {"__data__": {"text": "Next: Time Functions [Time-Functions.html], Previous: String-Manipulation Functions [String-Functions.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.5 INPUT/OUTPUT FUNCTIONS\n\nThe following functions relate to input/output (I/O). Optional parameters are enclosed in square brackets ([ ]):\n\nclose(filename [, how]) \u00b6\n\nClose the file filename for input or output. Alternatively, the argument may be a shell command that was used for creating a\ncoprocess, or for redirecting to or from a pipe; then the coprocess or pipe is closed. See Closing Input and Output Redirections\n[Close-Files-And-Pipes.html] for more information.\n\nWhen closing a coprocess, it is occasionally useful to first close one end of the two-way pipe and then to close the other. This\nis done by providing a second argument to close(). This second argument (how) should be one of the two string values \"to\" or\n\"from\", indicating which end of the pipe to close. Case in the string does not matter. See Two-Way Communications with Another\nProcess [Two_002dway-I_002fO.html], which discusses this feature in more detail and gives an example.\n\nNote that the second argument to close() is a gawk extension; it is not available in compatibility mode (see Command-Line Options\n[Options.html]).\n\nfflush([filename]) \u00b6\n\nFlush any buffered output associated with filename, which is either a file opened for writing or a shell command for redirecting\noutput to a pipe or coprocess.\n\nMany utility programs buffer their output (i.e., they save information to write to a disk file or the screen in memory until there\nis enough for it to be worthwhile to send the data to the output device). This is often more efficient than writing every little\nbit of information as soon as it is ready. However, sometimes it is necessary to force a program to flush its buffers (i.e., write\nthe information to its destination, even if a buffer is not full). This is the purpose of the fflush() function\u2014gawk also buffers\nits output, and the fflush() function forces gawk to flush its buffers.\n\nBrian Kernighan added fflush() to his awk in April 1992. For two decades, it was a common extension. In December 2012, it was\naccepted for inclusion into the POSIX standard. See the Austin Group website [http://austingroupbugs.net/view.php?id=634].\n\nPOSIX standardizes fflush() as follows: if there is no argument, or if the argument is the null string (\"\"), then awk flushes the\nbuffers for all open output files and pipes.\n\n> NOTE: Prior to version 4.0.2, gawk would flush only the standard output if there was no argument, and flush all output files and\n> pipes if the argument was the null string. This was changed in order to be compatible with BWK awk, in the hope that\n> standardizing this feature in POSIX would then be easier (which indeed proved to be the case).\n> \n> With gawk, you can use \u2018fflush(\"/dev/stdout\")\u2019 if you wish to flush only the standard output.\n\nfflush() returns zero if the buffer is successfully flushed; otherwise, it returns a nonzero value. (gawk returns \u22121.) In the case\nwhere all buffers are flushed, the return value is zero only if all buffers were flushed successfully. Otherwise, it is \u22121, and\ngawk warns about the problem filename.\n\ngawk also issues a warning message if you attempt to flush a file or pipe that was opened for reading (such as with getline), or\nif filename is not an open file, pipe, or coprocess. In such a case, fflush() returns \u22121, as well.\n\nInteractive Versus Noninteractive Buffering\n\nAs a side point, buffering issues can be even more confusing if your program is interactive (i.e., communicating with a user\nsitting at a keyboard).51\n\nInteractive programs generally line buffer their output (i.e., they write out", "doc_id": "30952e72-4860-413a-a6ca-6404f162f822", "embedding": null, "doc_hash": "2f9c79b9cfbf57025a1036678be6a21be48348fa01b7ec4df06b1e9251758ae7", "extra_info": null, "node_info": {"start": 0, "end": 3905, "_node_type": "1"}, "relationships": {"1": "8ed2d930-3c06-47af-9393-b21d93d3bf04", "3": "0df00af9-eaee-4c6c-bd68-b8441fc0c96e"}}, "__type__": "1"}, "0df00af9-eaee-4c6c-bd68-b8441fc0c96e": {"__data__": {"text": "programs generally line buffer their output (i.e., they write out every line). Noninteractive programs wait until they\nhave a full buffer, which may be many lines of output. Here is an example of the difference:\n\n$ awk '{ print $1 + $2 }'\n1 1\n-| 2\n2 3\n-| 5\nCtrl-d\n\n\nEach line of output is printed immediately. Compare that behavior with this example:\n\n$ awk '{ print $1 + $2 }' | cat\n1 1\n2 3\nCtrl-d\n-| 2\n-| 5\n\n\nHere, no output is printed until after the Ctrl-d is typed, because it is all buffered and sent down the pipe to cat in one shot.\n\nsystem(command) \u00b6\n\nExecute the operating system command command and then return to the awk program. Return command\u2019s exit status (see further on).\n\nFor example, if the following fragment of code is put in your awk program:\n\nEND {\n     system(\"date | mail -s 'awk run done' root\")\n}\n\n\nthe system administrator is sent mail when the awk program finishes processing input and begins its end-of-input processing.\n\nNote that redirecting print or printf into a pipe is often enough to accomplish your task. If you need to run many commands, it is\nmore efficient to simply print them down a pipeline to the shell:\n\nwhile (more stuff to do)\n    print command | \"/bin/sh\"\nclose(\"/bin/sh\")\n\n\nHowever, if your awk program is interactive, system() is useful for running large self-contained programs, such as a shell or an\neditor. Some operating systems cannot implement the system() function. system() causes a fatal error if it is not supported.\n\n> NOTE: When --sandbox is specified, the system() function is disabled (see Command-Line Options [Options.html]).\n\nOn POSIX systems, a command\u2019s exit status is a 16-bit number. The exit value passed to the C exit() function is held in the\nhigh-order eight bits. The low-order bits indicate if the process was killed by a signal (bit 7) and if so, the guilty signal\nnumber (bits 0\u20136).\n\nTraditionally, awk\u2019s system() function has simply returned the exit status value divided by 256. In the normal case this gives the\nexit status but in the case of death-by-signal it yields a fractional floating-point value.52 POSIX states that awk\u2019s system()\nshould return the full 16-bit value.\n\ngawk steers a middle ground. The return values are summarized in Table 9.5.\n\nSituationReturn value from system() --traditionalC system()\u2019s value divided by 256 --posixC system()\u2019s value Normal exit of\ncommandCommand\u2019s exit status Death by signal of command256 + number of murderous signal Death by signal of command with core\ndump512 + number of murderous signal Some kind of error\u22121\n\nTable 9.5: Return values from system()\n\nAs of August, 2018, BWK awk now follows gawk\u2019s behavior for the return value of system().\n\nControlling Output Buffering with system()\n\nThe fflush() function provides explicit control over output buffering for individual files and pipes. However, its use is not\nportable to many older awk implementations. An alternative method to flush output buffers is to call system() with a null string\nas its argument:\n\nsystem(\"\")   # flush output\n\n\ngawk treats this use of the system() function as a special case and is smart enough not to run a shell (or other command\ninterpreter) with the empty command. Therefore, with gawk, this idiom is not only useful, it is also efficient. Although this\nmethod should work with other awk implementations, it does not necessarily avoid starting an unnecessary shell. (Other\nimplementations may only flush the buffer associated with the standard output and not necessarily all buffered output.)\n\nIf you think about what a programmer expects, it makes sense that system() should flush any pending output. The following program:\n\nBEGIN {\n     print \"first print\"\n     system(\"echo system echo\")\n     print \"second", "doc_id": "0df00af9-eaee-4c6c-bd68-b8441fc0c96e", "embedding": null, "doc_hash": "06d015cdb377917bb711a841b754b9861b0e405ec6fb97acbf7b2b4cf98c95a7", "extra_info": null, "node_info": {"start": 3850, "end": 7575, "_node_type": "1"}, "relationships": {"1": "8ed2d930-3c06-47af-9393-b21d93d3bf04", "2": "30952e72-4860-413a-a6ca-6404f162f822", "3": "8d8502f8-f856-4db1-9dc4-32df0e81ca31"}}, "__type__": "1"}, "8d8502f8-f856-4db1-9dc4-32df0e81ca31": {"__data__": {"text": "    system(\"echo system echo\")\n     print \"second print\"\n}\n\n\nmust print:\n\nfirst print\nsystem echo\nsecond print\n\n\nand not:\n\nsystem echo\nfirst print\nsecond print\n\n\nIf awk did not flush its buffers before calling system(), you would see the latter (undesirable) output.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(51)\n\nA program is interactive if the standard output is connected to a terminal device. On modern systems, this means your keyboard and\nscreen.\n\n(52)\n\nIn private correspondence, Dr. Kernighan has indicated to me that the way this was done was probably a mistake.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Time Functions [Time-Functions.html], Previous: String-Manipulation Functions [String-Functions.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "8d8502f8-f856-4db1-9dc4-32df0e81ca31", "embedding": null, "doc_hash": "5fd8bd34f9b6aea4741bdde8db323c1b997ae988cfd27cb0593328a0bae0f5ca", "extra_info": null, "node_info": {"start": 7582, "end": 8600, "_node_type": "1"}, "relationships": {"1": "8ed2d930-3c06-47af-9393-b21d93d3bf04", "2": "0df00af9-eaee-4c6c-bd68-b8441fc0c96e"}}, "__type__": "1"}, "1ccc3eb6-8f51-428e-8638-3cbf7246e29a": {"__data__": {"text": "Next: Splitting a Large File into Pieces [Split-Program.html], Previous: Searching for Regular Expressions in Files\n[Egrep-Program.html], Up: Reinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.3 PRINTING OUT USER INFORMATION\n\nThe id utility lists a user\u2019s real and effective user ID numbers, real and effective group ID numbers, and the user\u2019s group set,\nif any. id only prints the effective user ID and group ID if they are different from the real ones. If possible, id also supplies\nthe corresponding user and group names. The output might look like this:\n\n$ id\n-| uid=1000(arnold) gid=1000(arnold) groups=1000(arnold),4(adm),7(lp),27(sudo)\n\n\nThis information is part of what is provided by gawk\u2019s PROCINFO array (see Predefined Variables [Built_002din-Variables.html]).\nHowever, the id utility provides a more palatable output than just individual numbers.\n\nThe POSIX version of id takes several options that give you control over the output\u2019s format, such as printing only real ids, or\nprinting only numbers or only names. Additionally, you can print the information for a specific user, instead of that of the\ncurrent user.\n\nHere is a version of POSIX id written in awk. It uses the getopt() library function (see Processing Command-Line Options\n[Getopt-Function.html]), the user database library functions (see Reading the User Database [Passwd-Functions.html]), and the\ngroup database library functions (see Reading the Group Database [Group-Functions.html]) from A Library of awk Functions\n[Library-Functions.html].\n\nThe program is moderately straightforward. All the work is done in the BEGIN rule. It starts with explanatory comments, a list of\noptions, and then a usage() function:\n\n# id.awk --- implement id in awk\n#\n# Requires user and group library functions and getopt\n# output is:\n# uid=12(foo) euid=34(bar) gid=3(baz) \\\n#             egid=5(blat) groups=9(nine),2(two),1(one)\n\n# Options:\n#   -G Output all group ids as space separated numbers (ruid, euid, groups)\n#   -g Output only the euid as a number\n#   -n Output name instead of the numeric value (with -g/-G/-u)\n#   -r Output ruid/rguid instead of effective id\n#   -u Output only effective user id, as a number\n\n\n\nfunction usage()\n{\n    printf(\"Usage:\\n\" \\\n           \"\\tid [user]\\n\" \\\n           \"\\tid -G [-n] [user]\\n\" \\\n           \"\\tid -g [-nr] [user]\\n\" \\\n           \"\\tid -u [-nr] [user]\\n\") > \"/dev/stderr\"\n\n    exit 1\n}\n\n\nThe first step is to parse the options using getopt(), and to set various flag variables according to the options given:\n\nBEGIN {\n    # parse args\n    while ((c = getopt(ARGC, ARGV, \"Ggnru\")) != -1) {\n        if (c == \"G\")\n            groupset_only++\n        else if (c == \"g\")\n            egid_only++\n        else if (c == \"n\")\n            names_not_groups++\n        else if (c == \"r\")\n            real_ids_only++\n      ", "doc_id": "1ccc3eb6-8f51-428e-8638-3cbf7246e29a", "embedding": null, "doc_hash": "e7326bf32af4753b82339e1aa15282b7d399ea8f2f9fff8639f7d04b1607981b", "extra_info": null, "node_info": {"start": 0, "end": 3022, "_node_type": "1"}, "relationships": {"1": "ca74daf6-d95a-4832-be3e-ad2cb1653393", "3": "6f82bdb3-0002-433f-b688-aee378e6a17c"}}, "__type__": "1"}, "6f82bdb3-0002-433f-b688-aee378e6a17c": {"__data__": {"text": "       real_ids_only++\n        else if (c == \"u\")\n            euid_only++\n        else\n            usage()\n    }\n\n\nThe next step is to check that no conflicting options were provided. -G and -r are mutually exclusive. It is also not allowed to\nprovide more than one user name on the command line:\n\n    if (groupset_only && real_ids_only)\n        usage()\n    else if (ARGC - Optind > 1)\n        usage()\n\n\nThe user and group ID numbers are obtained from PROCINFO for the current user, or from the user and password databases for a user\nsupplied on the command line. In the latter case, real_ids_only is set, since it\u2019s not possible to print information about the\neffective user and group IDs:\n\n    if (ARGC - Optind == 0) {\n        # gather info for current user\n        uid = PROCINFO[\"uid\"]\n        euid = PROCINFO[\"euid\"]\n        gid = PROCINFO[\"gid\"]\n        egid = PROCINFO[\"egid\"]\n        for (i = 1; (\"group\" i) in PROCINFO; i++)\n            groupset[i] = PROCINFO[\"group\" i]\n    } else {\n        fill_info_for_user(ARGV[ARGC-1])\n        real_ids_only++\n    }\n\n\nThe test in the for loop is worth noting. Any supplementary groups in the PROCINFO array have the indices \"group1\" through\n\"groupN\" for some N (i.e., the total number of supplementary groups). However, we don\u2019t know in advance how many of these groups\nthere are.\n\nThis loop works by starting at one, concatenating the value with \"group\", and then using in to see if that value is in the array\n(see Referring to an Array Element [Reference-to-Elements.html]). Eventually, i increments past the last group in the array and\nthe loop exits.\n\nThe loop is also correct if there are no supplementary groups; then the condition is false the first time it\u2019s tested, and the\nloop body never executes.\n\nNow, based on the options, we decide what information to print. For -G (print just the group set), we then select whether to print\nnames or numbers. In either case, when done we exit:\n\n    if (groupset_only) {\n        if (names_not_groups) {\n            for (i = 1; i in groupset; i++) {\n                entry = getgrgid(groupset[i])\n                name = get_first_field(entry)\n                printf(\"%s\", name)\n                if ((i + 1) in groupset)\n                    printf(\" \")\n            }\n        } else {\n            for (i = 1; i in groupset; i++) {\n                printf(\"%u\", groupset[i])\n                if ((i + 1) in groupset)\n                    printf(\" \")\n            }\n        }\n\n        print \"\"    # final", "doc_id": "6f82bdb3-0002-433f-b688-aee378e6a17c", "embedding": null, "doc_hash": "981e18cd1098b1e3b4526d0709b226dafa60d0f74effbdc4350d1c3b0768bfd1", "extra_info": null, "node_info": {"start": 3007, "end": 5498, "_node_type": "1"}, "relationships": {"1": "ca74daf6-d95a-4832-be3e-ad2cb1653393", "2": "1ccc3eb6-8f51-428e-8638-3cbf7246e29a", "3": "86055967-d5a5-46dc-b6cc-478838cbe4a6"}}, "__type__": "1"}, "86055967-d5a5-46dc-b6cc-478838cbe4a6": {"__data__": {"text": "    }\n\n        print \"\"    # final newline\n        exit 0\n    }\n\n\nOtherwise, for -g (effective group ID only), we check if -r was also provided, in which case we use the real group ID. Then based\non -n, we decide whether to print names or numbers. Here too, when done, we exit:\n\n    else if (egid_only) {\n        id = real_ids_only ? gid : egid\n        if (names_not_groups) {\n            entry = getgrgid(id)\n            name = get_first_field(entry)\n            printf(\"%s\\n\", name)\n        } else {\n            printf(\"%u\\n\", id)\n        }\n\n        exit 0\n    }\n\n\nThe get_first_field() function extracts the group name from the group database entry for the given group ID.\n\nSimilar processing logic applies to -u (effective user ID only), combined with -r and -n:\n\n    else if (euid_only) {\n        id = real_ids_only ? uid : euid\n        if (names_not_groups) {\n            entry = getpwuid(id)\n            name = get_first_field(entry)\n            printf(\"%s\\n\", name)\n        } else {\n            printf(\"%u\\n\", id)\n        }\n\n        exit 0\n    }\n\n\nAt this point, we haven\u2019t exited yet, so we print the regular, default output, based either on the current user\u2019s information, or\nthat of the user whose name was provided on the command line. We start with the real user ID:\n\n    printf(\"uid=%d\", uid)\n    pw = getpwuid(uid)\n    print_first_field(pw)\n\n\nThe print_first_field() function prints the user\u2019s login name from the password file entry, surrounded by parentheses. It is shown\nsoon. Printing the effective user ID is next:\n\n    if (euid != uid && ! real_ids_only) {\n        printf(\" euid=%d\", euid)\n        pw = getpwuid(euid)\n        print_first_field(pw)\n    }\n\n\nSimilar logic applies to the real and effective group IDs:\n\n    printf(\" gid=%d\", gid)\n    pw = getgrgid(gid)\n    print_first_field(pw)\n\n    if (egid != gid && ! real_ids_only) {\n        printf(\" egid=%d\", egid)\n        pw = getgrgid(egid)\n        print_first_field(pw)\n    }\n\n\nFinally, we print the group set and the terminating newline:\n\n    for (i = 1; i in groupset; i++) {\n        if (i == 1)\n            printf(\" groups=\")\n        group = groupset[i]\n        printf(\"%d\", group)\n        pw = getgrgid(group)\n        print_first_field(pw)\n        if ((i + 1) in groupset)\n            printf(\",\")\n    }\n\n  ", "doc_id": "86055967-d5a5-46dc-b6cc-478838cbe4a6", "embedding": null, "doc_hash": "4cfa7f096abb5ac56eecad291d2ce7ca12c95c33ef12f3d9697f2c2717170b7b", "extra_info": null, "node_info": {"start": 5499, "end": 7786, "_node_type": "1"}, "relationships": {"1": "ca74daf6-d95a-4832-be3e-ad2cb1653393", "2": "6f82bdb3-0002-433f-b688-aee378e6a17c", "3": "3fa6178e-1245-4378-b45f-04c5053250a6"}}, "__type__": "1"}, "3fa6178e-1245-4378-b45f-04c5053250a6": {"__data__": {"text": "        printf(\",\")\n    }\n\n    print \"\"\n}\n\n\nThe get_first_field() function extracts the first field from a password or group file entry for use as a user or group name.\nFields are separated by \u2018:\u2019 characters:\n\nfunction get_first_field(str,  a)\n{\n    if (str != \"\") {\n        split(str, a, \":\")\n        return a[1]\n    }\n}\n\n\nThis function is then used by print_first_field() to output the given name surrounded by parentheses:\n\nfunction print_first_field(str)\n{\n    first = get_first_field(str)\n    printf(\"(%s)\", first)\n}\n\n\nThese two functions simply isolate out some code that is used repeatedly, making the whole program shorter and cleaner. In\nparticular, moving the check for the empty string into get_first_field() saves several lines of code.\n\nFinally, fill_info_for_user() fetches user, group, and group set information for the user named on the command. The code is fairly\nstraightforward, merely requiring that we exit if the given user doesn\u2019t exist:\n\nfunction fill_info_for_user(user,\n                            pwent, fields, groupnames, grent, groups, i)\n{\n    pwent = getpwnam(user)\n    if (pwent == \"\") {\n        printf(\"id: '%s': no such user\\n\", user) > \"/dev/stderr\"\n        exit 1\n    }\n\n    split(pwent, fields, \":\")\n    uid = fields[3] + 0\n    gid = fields[4] + 0\n\n\nGetting the group set is a little awkward. The library routine getgruser() returns a list of group names. These have to be gone\nthrough and turned back into group numbers, so that the rest of the code will work as expected:\n\n    groupnames = getgruser(user)\n    split(groupnames, groups, \" \")\n    for (i = 1; i in groups; i++) {\n        grent = getgrnam(groups[i])\n        split(grent, fields, \":\")\n        groupset[i] = fields[3] + 0\n    }\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Splitting a Large File into Pieces [Split-Program.html], Previous: Searching for Regular Expressions in Files\n[Egrep-Program.html], Up: Reinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "3fa6178e-1245-4378-b45f-04c5053250a6", "embedding": null, "doc_hash": "9d8149f29ab02714692e845d651424d7e5a5538e5555dcfd50c304ccadd159ef", "extra_info": null, "node_info": {"start": 7773, "end": 9890, "_node_type": "1"}, "relationships": {"1": "ca74daf6-d95a-4832-be3e-ad2cb1653393", "2": "86055967-d5a5-46dc-b6cc-478838cbe4a6"}}, "__type__": "1"}, "84e683a4-26c2-4af4-98c7-1f7d7efaba25": {"__data__": {"text": "Next: The while Statement [While-Statement.html], Up: Control Statements in Actions [Statements.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.1 THE IF-ELSE STATEMENT\n\nThe if-else statement is awk\u2019s decision-making statement. It looks like this:\n\nif (condition) then-body [else else-body]\n\n\nThe condition is an expression that controls what the rest of the statement does. If the condition is true, then-body is executed;\notherwise, else-body is executed. The else part of the statement is optional. The condition is considered false if its value is\nzero or the null string; otherwise, the condition is true. Refer to the following:\n\nif (x % 2 == 0)\n    print \"x is even\"\nelse\n    print \"x is odd\"\n\n\nIn this example, if the expression \u2018x % 2 == 0\u2019 is true (i.e., if the value of x is evenly divisible by two), then the first print\nstatement is executed; otherwise, the second print statement is executed. If the else keyword appears on the same line as\nthen-body and then-body is not a compound statement (i.e., not surrounded by braces), then a semicolon must separate then-body\nfrom the else. To illustrate this, the previous example can be rewritten as:\n\nif (x % 2 == 0) print \"x is even\"; else\n        print \"x is odd\"\n\n\nIf the \u2018;\u2019 is left out, awk can\u2019t interpret the statement and it produces a syntax error. Don\u2019t actually write programs this way,\nbecause a human reader might fail to see the else if it is not the first thing on its line.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The while Statement [While-Statement.html], Up: Control Statements in Actions [Statements.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "84e683a4-26c2-4af4-98c7-1f7d7efaba25", "embedding": null, "doc_hash": "40547da8490a1cdcab1957550140658a284c937aeeab84d904bb827b8ec77c8c", "extra_info": null, "node_info": {"start": 0, "end": 1895, "_node_type": "1"}, "relationships": {"1": "c380a3d1-633d-4218-940a-bba23769ed86"}}, "__type__": "1"}, "3c810d7c-7c49-4e31-a434-8f4f562d4d6d": {"__data__": {"text": "Next: Finding Anagrams from a Dictionary [Anagram-Program.html], Previous: A Simple Stream Editor [Simple-Sed.html], Up: A Grab\nBag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.9 AN EASY WAY TO USE LIBRARY FUNCTIONS\n\nIn Including Other Files into Your Program [Include-Files.html], we saw how gawk provides a built-in file-inclusion capability.\nHowever, this is a gawk extension. This section provides the motivation for making file inclusion available for standard awk, and\nshows how to do it using a combination of shell and awk programming.\n\nUsing library functions in awk can be very beneficial. It encourages code reuse and the writing of general functions. Programs are\nsmaller and therefore clearer. However, using library functions is only easy when writing awk programs; it is painful when running\nthem, requiring multiple -f options. If gawk is unavailable, then so too is the AWKPATH environment variable and the ability to\nput awk functions into a library directory (see Command-Line Options [Options.html]). It would be nice to be able to write\nprograms in the following manner:\n\n# library functions\n@include getopt.awk\n@include join.awk\n\u2026\n\n# main program\nBEGIN {\n    while ((c = getopt(ARGC, ARGV, \"a:b:cde\")) != -1)\n        \u2026\n    \u2026\n}\n\n\nThe following program, igawk.sh, provides this service. It simulates gawk\u2019s searching of the AWKPATH variable and also allows\nnested includes (i.e., a file that is included with @include can contain further @include statements). igawk makes an effort to\nonly include files once, so that nested includes don\u2019t accidentally include a library function twice.\n\nigawk should behave just like gawk externally. This means it should accept all of gawk\u2019s command-line arguments, including the\nability to have multiple source files specified via -f and the ability to mix command-line and library source files.\n\nThe program is written using the POSIX Shell (sh) command language.78 It works as follows:\n\n 1. Loop through the arguments, saving anything that doesn\u2019t represent awk source code for later, when the expanded program is\n    run.\n 2. For any arguments that do represent awk text, put the arguments into a shell variable that will be expanded. There are two\n    cases:\n    a. Literal text, provided with -e or --source. This text is just appended directly.\n    b. Source file names, provided with -f. We use a neat trick and append \u2018@include filename\u2019 to the shell variable\u2019s contents.\n       Because the file-inclusion program works the way gawk does, this gets the text of the file included in the program at the\n       correct point.\n 3. Run an awk program (naturally) over the shell variable\u2019s contents to expand @include statements. The expanded program is\n    placed in a second shell variable.\n 4. Run the expanded program with gawk and any other original command-line arguments that the user supplied (such as the data file\n    names).\n\nThis program uses shell variables extensively: for storing command-line arguments and the text of the awk program that will expand\nthe user\u2019s program, for the user\u2019s original program, and for the expanded program. Doing so removes some potential problems that\nmight arise were we to use temporary files instead, at the cost of making the script somewhat more complicated.\n\nThe initial part of the program turns on shell tracing if the first argument is \u2018debug\u2019.\n\nThe next part loops through all the command-line arguments. There are several cases of interest:\n\n--\n\nThis ends the arguments to igawk. Anything else should be passed on to the user\u2019s awk program without being evaluated.\n\n-W\n\nThis indicates that the next option is specific to gawk.", "doc_id": "3c810d7c-7c49-4e31-a434-8f4f562d4d6d", "embedding": null, "doc_hash": "8facd41c9eaa68a0660c377c8f562fb39cdbacb41cd92456808f27bce365001c", "extra_info": null, "node_info": {"start": 0, "end": 3838, "_node_type": "1"}, "relationships": {"1": "ef278c6a-dd99-4ad7-81fa-16f396db38ab", "3": "a8d13bc5-8498-417a-b45a-c8801c220b06"}}, "__type__": "1"}, "a8d13bc5-8498-417a-b45a-c8801c220b06": {"__data__": {"text": "indicates that the next option is specific to gawk. To make argument processing easier, the -W is appended to the front of\nthe remaining arguments and the loop continues. (This is an sh programming trick. Don\u2019t worry about it if you are not familiar\nwith sh.)\n\n-v, -F\n\nThese are saved and passed on to gawk.\n\n-f, --file, --file=, -Wfile=\n\nThe file name is appended to the shell variable program with an @include statement. The expr utility is used to remove the leading\noption part of the argument (e.g., \u2018--file=\u2019). (Typical sh usage would be to use the echo and sed utilities to do this work.\nUnfortunately, some versions of echo evaluate escape sequences in their arguments, possibly mangling the program text. Using expr\navoids this problem.)\n\n--source, --source=, -Wsource=\n\nThe source text is appended to program.\n\n--version, -Wversion\n\nigawk prints its version number, runs \u2018gawk --version\u2019 to get the gawk version information, and then exits.\n\nIf none of the -f, --file, -Wfile, --source, or -Wsource arguments are supplied, then the first nonoption argument should be the\nawk program. If there are no command-line arguments left, igawk prints an error message and exits. Otherwise, the first argument\nis appended to program. In any case, after the arguments have been processed, the shell variable program contains the complete\ntext of the original awk program.\n\nThe program is as follows:\n\n#! /bin/sh\n# igawk --- like gawk but do @include processing\n\nif [ \"$1\" = debug ]\nthen\n    set -x\n    shift\nfi\n\n# A literal newline, so that program text is formatted correctly\nn='\n'\n\n# Initialize variables to empty\nprogram=\nopts=\n\nwhile [ $# -ne 0 ] # loop over arguments\ndo\n    case $1 in\n    --)     shift\n            break ;;\n\n    -W)     shift\n            # The ${x?'message here'} construct prints a\n            # diagnostic if $x is the null string\n            set -- -W\"${@?'missing operand'}\"\n            continue ;;\n\n    -[vF])  opts=\"$opts $1 '${2?'missing operand'}'\"\n            shift ;;\n\n    -[vF]*) opts=\"$opts '$1'\" ;;\n\n    -f)     program=\"$program$n@include ${2?'missing operand'}\"\n            shift ;;\n\n    -f*)    f=$(expr \"$1\" : '-f\\(.*\\)')\n            program=\"$program$n@include $f\" ;;\n\n    -[W-]file=*)\n            f=$(expr \"$1\" : '-.file=\\(.*\\)')\n            program=\"$program$n@include $f\" ;;\n\n    -[W-]file)\n            program=\"$program$n@include ${2?'missing operand'}\"\n            shift ;;\n\n    -[W-]source=*)\n            t=$(expr \"$1\" : '-.source=\\(.*\\)')\n            program=\"$program$n$t\" ;;\n\n    -[W-]source)\n            program=\"$program$n${2?'missing operand'}\"\n            shift ;;\n\n    -[W-]version)\n            echo igawk: version", "doc_id": "a8d13bc5-8498-417a-b45a-c8801c220b06", "embedding": null, "doc_hash": "8d3922eff31c76ea173eb974d33b85b8ebd543b9a4835844ee36bc11b9c30108", "extra_info": null, "node_info": {"start": 3796, "end": 6464, "_node_type": "1"}, "relationships": {"1": "ef278c6a-dd99-4ad7-81fa-16f396db38ab", "2": "3c810d7c-7c49-4e31-a434-8f4f562d4d6d", "3": "fb777cd5-2514-4217-b8af-ef41525121f1"}}, "__type__": "1"}, "fb777cd5-2514-4217-b8af-ef41525121f1": {"__data__": {"text": "           echo igawk: version 3.0 1>&2\n            gawk --version\n            exit 0 ;;\n\n    -[W-]*) opts=\"$opts '$1'\" ;;\n\n    *)      break ;;\n    esac\n    shift\ndone\n\nif [ -z \"$program\" ]\nthen\n     program=${1?'missing program'}\n     shift\nfi\n\n# At this point, `program' has the program.\n\n\nThe awk program to process @include directives is stored in the shell variable expand_prog. Doing this keeps the shell script\nreadable. The awk program reads through the user\u2019s program, one line at a time, using getline (see Explicit Input with getline\n[Getline.html]). The input file names and @include statements are managed using a stack. As each @include is encountered, the\ncurrent file name is \u201cpushed\u201d onto the stack and the file named in the @include directive becomes the current file name. As each\nfile is finished, the stack is \u201cpopped,\u201d and the previous input file becomes the current input file again. The process is started\nby making the original file the first one on the stack.\n\nThe pathto() function does the work of finding the full path to a file. It simulates gawk\u2019s behavior when searching the AWKPATH\nenvironment variable (see The AWKPATH Environment Variable [AWKPATH-Variable.html]). If a file name has a \u2018/\u2019 in it, no path\nsearch is done. Similarly, if the file name is \"-\", then that string is used as-is. Otherwise, the file name is concatenated with\nthe name of each directory in the path, and an attempt is made to open the generated file name. The only way to test if a file can\nbe read in awk is to go ahead and try to read it with getline; this is what pathto() does.79 If the file can be read, it is closed\nand the file name is returned:\n\nexpand_prog='\n\nfunction pathto(file,    i, t, junk)\n{\n    if (index(file, \"/\") != 0)\n        return file\n\n    if (file == \"-\")\n        return file\n\n    for (i = 1; i <= ndirs; i++) {\n        t = (pathlist[i] \"/\" file)\n\n\n        if ((getline junk < t) > 0) {\n            # found it\n            close(t)\n            return t\n        }\n\n\n    }\n    return \"\"\n}\n\n\nThe main program is contained inside one BEGIN rule. The first thing it does is set up the pathlist array that pathto() uses.\nAfter splitting the path on \u2018:\u2019, null elements are replaced with \".\", which represents the current directory:\n\nBEGIN {\n    path = ENVIRON[\"AWKPATH\"]\n    ndirs = split(path, pathlist, \":\")\n    for (i = 1; i <= ndirs; i++) {\n        if (pathlist[i] == \"\")\n            pathlist[i] = \".\"\n    }\n\n\nThe stack is initialized with ARGV[1], which will be \"/dev/stdin\". The main loop comes next. Input lines are read in succession.\nLines that do not start with @include are printed verbatim. If the line does start with @include, the file name is in $2. pathto()\nis called to generate the full path. If it cannot, then the program prints an error message and continues.\n\nThe next thing to check is if the file is included already. The processed array is indexed by the full file name of each included\nfile and it tracks this information for us. If the file is seen again, a warning message is printed. Otherwise,", "doc_id": "fb777cd5-2514-4217-b8af-ef41525121f1", "embedding": null, "doc_hash": "e109984f46a78464856d004c794a882203a29f1aa3769cabc8ab5f177300bf30", "extra_info": null, "node_info": {"start": 6491, "end": 9542, "_node_type": "1"}, "relationships": {"1": "ef278c6a-dd99-4ad7-81fa-16f396db38ab", "2": "a8d13bc5-8498-417a-b45a-c8801c220b06", "3": "69d0ec3a-114b-41ca-a362-3bd0918be710"}}, "__type__": "1"}, "69d0ec3a-114b-41ca-a362-3bd0918be710": {"__data__": {"text": "this information for us. If the file is seen again, a warning message is printed. Otherwise, the new file name\nis pushed onto the stack and processing continues.\n\nFinally, when getline encounters the end of the input file, the file is closed and the stack is popped. When stackptr is less than\nzero, the program is done:\n\n    stackptr = 0\n    input[stackptr] = ARGV[1] # ARGV[1] is first file\n\n    for (; stackptr >= 0; stackptr--) {\n        while ((getline < input[stackptr]) > 0) {\n            if (tolower($1) != \"@include\") {\n                print\n                continue\n            }\n            fpath = pathto($2)\n            if (fpath == \"\") {\n                printf(\"igawk: %s:%d: cannot find %s\\n\",\n                    input[stackptr], FNR, $2) > \"/dev/stderr\"\n                continue\n            }\n            if (! (fpath in processed)) {\n                processed[fpath] = input[stackptr]\n                input[++stackptr] = fpath  # push onto stack\n            } else\n                print $2, \"included in\", input[stackptr],\n                    \"already included in\",\n                    processed[fpath] > \"/dev/stderr\"\n        }\n        close(input[stackptr])\n    }\n}'  # close quote ends `expand_prog' variable\n\nprocessed_program=$(gawk -- \"$expand_prog\" /dev/stdin << EOF\n$program\nEOF\n)\n\n\nThe shell construct \u2018command << marker\u2019 is called a here document. Everything in the shell script up to the marker is fed to\ncommand as input. The shell processes the contents of the here document for variable and command substitution (and possibly other\nthings as well, depending upon the shell).\n\nThe shell construct \u2018$(\u2026)\u2019 is called command substitution. The output of the command inside the parentheses is substituted into\nthe command line. Because the result is used in a variable assignment, it is saved as a single string, even if the results contain\nwhitespace.\n\nThe expanded program is saved in the variable processed_program. It\u2019s done in these steps:\n\n 1. Run gawk with the @include-processing program (the value of the expand_prog shell variable) reading standard input.\n 2. Standard input is the contents of the user\u2019s program, from the shell variable program. Feed its contents to gawk via a here\n    document.\n 3. Save the results of this processing in the shell variable processed_program by using command substitution.\n\nThe last step is to call gawk with the expanded program, along with the original options and command-line arguments that the user\nsupplied:\n\neval gawk $opts -- '\"$processed_program\"' '\"$@\"'\n\n\nThe eval command is a shell construct that reruns the shell\u2019s parsing process. This keeps things properly quoted.\n\nThis version of igawk represents the fifth version of this program. There are four key simplifications that make the program work\nbetter:\n\n * Using @include even for the files named with -f makes", "doc_id": "69d0ec3a-114b-41ca-a362-3bd0918be710", "embedding": null, "doc_hash": "18a4e23a0a5b2d187eae91aa4f16bb6139bcd20edb21b63c3686a94b77b3146d", "extra_info": null, "node_info": {"start": 9483, "end": 12331, "_node_type": "1"}, "relationships": {"1": "ef278c6a-dd99-4ad7-81fa-16f396db38ab", "2": "fb777cd5-2514-4217-b8af-ef41525121f1", "3": "b51fd1e5-ae4d-45ed-9357-b91ad9a532d3"}}, "__type__": "1"}, "b51fd1e5-ae4d-45ed-9357-b91ad9a532d3": {"__data__": {"text": "the program work\nbetter:\n\n * Using @include even for the files named with -f makes building the initial collected awk program much simpler; all the @include\n   processing can be done once.\n * Not trying to save the line read with getline in the pathto() function when testing for the file\u2019s accessibility for use with\n   the main program simplifies things considerably.\n * Using a getline loop in the BEGIN rule does it all in one place. It is not necessary to call out to a separate loop for\n   processing nested @include statements.\n * Instead of saving the expanded program in a temporary file, putting it in a shell variable avoids some potential security\n   problems. This has the disadvantage that the script relies upon more features of the sh language, making it harder to follow\n   for those who aren\u2019t familiar with sh.\n\nAlso, this program illustrates that it is often worthwhile to combine sh and awk programming together. You can usually accomplish\nquite a lot, without having to resort to low-level programming in C or C++, and it is frequently easier to do certain kinds of\nstring and argument manipulation using the shell than it is in awk.\n\nFinally, igawk shows that it is not always necessary to add new features to a program; they can often be layered on top.80\n\nBefore gawk acquired its built-in @include mechanism, igawk and its manual page were installed as part of the regular gawk\ninstallation (\u2018make install\u2019). This is no longer done, because it\u2019s no longer necessary. But we\u2019ve kept the program in this Web\npage for its educational value.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(78)\n\nFully explaining the sh language is beyond the scope of this book. We provide some minimal explanations, but see a good shell\nprogramming book if you wish to understand things in more depth.\n\n(79)\n\nOn some very old versions of awk, the test \u2018getline junk < t\u2019 can loop forever if the file exists but is empty.\n\n(80)\n\ngawk does @include processing itself in order to support the use of awk programs as Web CGI scripts.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Finding Anagrams from a Dictionary [Anagram-Program.html], Previous: A Simple Stream Editor [Simple-Sed.html], Up: A Grab\nBag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b51fd1e5-ae4d-45ed-9357-b91ad9a532d3", "embedding": null, "doc_hash": "6eab8f0dcd8562b6558b49cd0ae08b051b00ca97e6ded74f260f819498136042", "extra_info": null, "node_info": {"start": 12326, "end": 14827, "_node_type": "1"}, "relationships": {"1": "ef278c6a-dd99-4ad7-81fa-16f396db38ab", "2": "69d0ec3a-114b-41ca-a362-3bd0918be710"}}, "__type__": "1"}, "a04ee503-6034-49ce-834f-f82e3a9946e2": {"__data__": {"text": "Previous: Checking for Zero-Length Files [Empty-Files.html], Up: Data file Management [Data-File-Management.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.3.5 TREATING ASSIGNMENTS AS FILE NAMES\n\nOccasionally, you might not want awk to process command-line variable assignments (see Assigning Variables on the Command Line\n[Assignment-Options.html]). In particular, if you have a file name that contains an \u2018=\u2019 character, awk treats the file name as an\nassignment and does not process it.\n\nSome users have suggested an additional command-line option for gawk to disable command-line assignments. However, some simple\nprogramming with a library file does the trick:\n\n# noassign.awk --- library file to avoid the need for a\n# special option that disables command-line assignments\n\nfunction disable_assigns(argc, argv,    i)\n{\n    for (i = 1; i < argc; i++)\n        if (argv[i] ~ /^[a-zA-Z_][a-zA-Z0-9_]*=.*/)\n            argv[i] = (\"./\" argv[i])\n}\n\nBEGIN {\n    if (No_command_assign)\n        disable_assigns(ARGC, ARGV)\n}\n\n\nYou then run your program this way:\n\nawk -v No_command_assign=1 -f noassign.awk -f yourprog.awk *\n\n\nThe function works by looping through the arguments. It prepends \u2018./\u2019 to any argument that matches the form of a variable\nassignment, turning that argument into a file name.\n\nThe use of No_command_assign allows you to disable command-line assignments at invocation time, by giving the variable a true\nvalue. When not set, it is initially zero (i.e., false), so the command-line arguments are left alone.", "doc_id": "a04ee503-6034-49ce-834f-f82e3a9946e2", "embedding": null, "doc_hash": "11732f15478d37ca72fb027202d21a72ccc2dfcc897e2ab80e75f7abafb0d522", "extra_info": null, "node_info": {"start": 0, "end": 1678, "_node_type": "1"}, "relationships": {"1": "7df98990-3765-4a07-87e1-1531ae9200da"}}, "__type__": "1"}, "ee39ed17-9cdb-4c9c-b256-1bacc9e86b03": {"__data__": {"text": "Next: Extension API Design [Extension-Design.html], Previous: Probable Future Extensions [Future-Extensions.html], Up:\nImplementation Notes [Notes.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nC.4 SOME LIMITATIONS OF THE IMPLEMENTATION\n\nThis following table describes limits of gawk on a Unix-like system (although it is variable even then). Other systems may have\ndifferent limits.\n\nItemLimit Characters in a character class2^(number of bits per byte) Length of input record in bytesULONG_MAX Length of output\nrecordUnlimited Length of source lineUnlimited Number of fields in a recordULONG_MAX Number of file redirectionsUnlimited Number\nof input records in one fileMAX_LONG Number of input records totalMAX_LONG Number of pipe redirectionsmin(number of processes per\nuser, number of open files) Numeric valuesDouble-precision floating point (if not using MPFR) Size of a field in bytesULONG_MAX\nSize of a literal string in bytesULONG_MAX Size of a printf string in bytesULONG_MAX", "doc_id": "ee39ed17-9cdb-4c9c-b256-1bacc9e86b03", "embedding": null, "doc_hash": "cafbd61ac033ad7e81ec2e933e79656977644360311eb090f933c4e5f20baa8d", "extra_info": null, "node_info": {"start": 0, "end": 1135, "_node_type": "1"}, "relationships": {"1": "a3305451-4b8f-4934-a041-affea476fdc4"}}, "__type__": "1"}, "58ad1cec-7e26-4634-9e99-bcea093f36ee": {"__data__": {"text": "Next: Loading Dynamic Extensions into Your Program [Loading-Shared-Libraries.html], Previous: gawk\u2019s Exit Status\n[Exit-Status.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.7 INCLUDING OTHER FILES INTO YOUR PROGRAM\n\nThis section describes a feature that is specific to gawk.\n\nThe @include keyword can be used to read external awk source files. This gives you the ability to split large awk source files\ninto smaller, more manageable pieces, and also lets you reuse common awk code from various awk scripts. In other words, you can\ngroup together awk functions used to carry out specific tasks into external files. These files can be used just like function\nlibraries, using the @include keyword in conjunction with the AWKPATH environment variable. Note that source files may also be\nincluded using the -i option.\n\nLet\u2019s see an example. We\u2019ll start with two (trivial) awk scripts, namely test1 and test2. Here is the test1 script:\n\nBEGIN {\n    print \"This is script test1.\"\n}\n\n\nand here is test2:\n\n@include \"test1\"\nBEGIN {\n    print \"This is script test2.\"\n}\n\n\nRunning gawk with test2 produces the following result:\n\n$ gawk -f test2\n-| This is script test1.\n-| This is script test2.\n\n\ngawk runs the test2 script, which includes test1 using the @include keyword. So, to include external awk source files, you just\nuse @include followed by the name of the file to be included, enclosed in double quotes.\n\n> NOTE: Keep in mind that this is a language construct and the file name cannot be a string variable, but rather just a literal\n> string constant in double quotes.\n\nThe files to be included may be nested; e.g., given a third script, namely test3:\n\n@include \"test2\"\nBEGIN {\n    print \"This is script test3.\"\n}\n\n\nRunning gawk with the test3 script produces the following results:\n\n$ gawk -f test3\n-| This is script test1.\n-| This is script test2.\n-| This is script test3.\n\n\nThe file name can, of course, be a pathname. For example:\n\n@include \"../io_funcs\"\n\n\nand:\n\n@include \"/usr/awklib/network\"\n\n\nare both valid. The AWKPATH environment variable can be of great value when using @include. The same rules for the use of the\nAWKPATH variable in command-line file searches (see The AWKPATH Environment Variable [AWKPATH-Variable.html]) apply to @include\nalso.\n\nThis is very helpful in constructing gawk function libraries. If you have a large script with useful, general-purpose awk\nfunctions, you can break it down into library files and put those files in a special directory. You can then include those\n\u201clibraries,\u201d either by using the full pathnames of the files, or by setting the AWKPATH environment variable accordingly and then\nusing @include with just the file part of the full pathname. Of course, you can keep library files in more than one directory; the\nmore complex the working environment is, the more directories you may need to organize the files to be included.\n\nGiven the ability to specify multiple -f options, the @include mechanism is not strictly necessary. However, the @include keyword\ncan help you in constructing self-contained gawk programs, thus reducing the need for writing complex and tedious command lines.\nIn particular, @include is very useful for writing CGI scripts to be run from web pages.\n\nThe @include directive and the -i/--include command line option are completely equivalent. An included program source is not\nloaded if it has been previously loaded.\n\nThe rules for finding a source file described in The AWKPATH Environment Variable [AWKPATH-Variable.html] also apply to files\nloaded with @include.\n\nFinally, files included with @include are treated as if they had \u2018@namespace \"awk\"\u2019 at their beginning. See Changing The", "doc_id": "58ad1cec-7e26-4634-9e99-bcea093f36ee", "embedding": null, "doc_hash": "51964923cadf5fc598b67a073af8a7e7a05b8cfe7b9384013d1c7d83a32cbeb9", "extra_info": null, "node_info": {"start": 0, "end": 3865, "_node_type": "1"}, "relationships": {"1": "f0d773b1-8620-45e2-826e-be237ae7d0fe", "3": "c52f800e-9b4d-42db-a310-3fe88ff2e778"}}, "__type__": "1"}, "c52f800e-9b4d-42db-a310-3fe88ff2e778": {"__data__": {"text": "they had \u2018@namespace \"awk\"\u2019 at their beginning. See Changing The Namespace\n[Changing-The-Namespace.html], for more information.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Loading Dynamic Extensions into Your Program [Loading-Shared-Libraries.html], Previous: gawk\u2019s Exit Status\n[Exit-Status.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c52f800e-9b4d-42db-a310-3fe88ff2e778", "embedding": null, "doc_hash": "2bcc378fdf1f22649fe141da91c58d815fc75f30c7f364af8b151f116cf480cd", "extra_info": null, "node_info": {"start": 3801, "end": 4299, "_node_type": "1"}, "relationships": {"1": "f0d773b1-8620-45e2-826e-be237ae7d0fe", "2": "58ad1cec-7e26-4634-9e99-bcea093f36ee"}}, "__type__": "1"}, "93df3978-bf3e-4ca2-9d32-f60058b37e6f": {"__data__": {"text": "Previous: Assignment Expressions [Assignment-Ops.html], Up: Operators: Doing Something with Values [All-Operators.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.2.4 INCREMENT AND DECREMENT OPERATORS\n\nIncrement and decrement operators increase or decrease the value of a variable by one. An assignment operator can do the same\nthing, so the increment operators add no power to the awk language; however, they are convenient abbreviations for very common\noperations.\n\nThe operator used for adding one is written \u2018++\u2019. It can be used to increment a variable either before or after taking its value.\nTo pre-increment a variable v, write \u2018++v\u2019. This adds one to the value of v\u2014that new value is also the value of the expression.\n(The assignment expression \u2018v += 1\u2019 is completely equivalent.) Writing the \u2018++\u2019 after the variable specifies post-increment. This\nincrements the variable value just the same; the difference is that the value of the increment expression itself is the variable\u2019s\nold value. Thus, if foo has the value four, then the expression \u2018foo++\u2019 has the value four, but it changes the value of foo to\nfive. In other words, the operator returns the old value of the variable, but with the side effect of incrementing it.\n\nThe post-increment \u2018foo++\u2019 is nearly the same as writing \u2018(foo += 1) - 1\u2019. It is not perfectly equivalent because all numbers in\nawk are floating point\u2014in floating point, \u2018foo + 1 - 1\u2019 does not necessarily equal foo. But the difference is minute as long as\nyou stick to numbers that are fairly small (less than 1012).\n\nFields and array elements are incremented just like variables. (Use \u2018$(i++)\u2019 when you want to do a field reference and a variable\nincrement at the same time. The parentheses are necessary because of the precedence of the field reference operator \u2018$\u2019.)\n\nThe decrement operator \u2018--\u2019 works just like \u2018++\u2019, except that it subtracts one instead of adding it. As with \u2018++\u2019, it can be used\nbefore the lvalue to pre-decrement or after it to post-decrement. Following is a summary of increment and decrement expressions:\n\n++lvalue\n\nIncrement lvalue, returning the new value as the value of the expression.\n\nlvalue++\n\nIncrement lvalue, returning the old value of lvalue as the value of the expression.\n\n--lvalue\n\nDecrement lvalue, returning the new value as the value of the expression. (This expression is like \u2018++lvalue\u2019, but instead of\nadding, it subtracts.)\n\nlvalue--\n\nDecrement lvalue, returning the old value of lvalue as the value of the expression. (This expression is like \u2018lvalue++\u2019, but\ninstead of adding, it subtracts.)\n\nOperator Evaluation Order\n\n> Doctor, it hurts when I do this!\n> Then don\u2019t do that!\n\n\u2014 Groucho Marx\n\nWhat happens for something like the following?\n\nb = 6\nprint b += b++\n\n\nOr something even stranger?\n\nb = 6\nb += ++b + b++\nprint b\n\n\nIn other words, when do the various side effects prescribed by the postfix operators (\u2018b++\u2019) take effect? When side effects happen\nis implementation-defined. In other words, it is up to the particular version of awk. The result for the first example may be 12\nor 13, and for the second, it may be 22 or 23.\n\nIn short, doing things like this is not recommended and definitely not anything that you can rely upon for portability. You should\navoid such things in your own programs.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Assignment Expressions [Assignment-Ops.html], Up: Operators: Doing Something with Values [All-Operators.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "93df3978-bf3e-4ca2-9d32-f60058b37e6f", "embedding": null, "doc_hash": "cb02520948b3602f65fac4831b465e0be13d22c2cba034d4b7cece2fa14cd89d", "extra_info": null, "node_info": {"start": 0, "end": 3749, "_node_type": "1"}, "relationships": {"1": "9961e50b-c328-40b3-b0bc-d749de739153"}}, "__type__": "1"}, "1efdddff-8acd-42fd-9447-b27d95039767": {"__data__": {"text": "Next: Summary [Functions-Summary.html], Previous: User-Defined Functions [User_002ddefined.html], Up: Functions [Functions.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n9.3 INDIRECT FUNCTION CALLS\n\nThis section describes an advanced, gawk-specific extension.\n\nOften, you may wish to defer the choice of function to call until runtime. For example, you may have different kinds of records,\neach of which should be processed differently.\n\nNormally, you would have to use a series of if-else statements to decide which function to call. By using indirect function calls,\nyou can specify the name of the function to call as a string variable, and then call the function. Let\u2019s look at an example.\n\nSuppose you have a file with your test scores for the classes you are taking, and you wish to get the sum and the average of your\ntest scores. The first field is the class name. The following fields are the functions to call to process the data, up to a\n\u201cmarker\u201d field \u2018data:\u2019. Following the marker, to the end of the record, are the various numeric test scores.\n\nHere is the initial file:\n\nBiology_101 sum average data: 87.0 92.4 78.5 94.9\nChemistry_305 sum average data: 75.2 98.3 94.7 88.2\nEnglish_401 sum average data: 100.0 95.6 87.1 93.4\n\n\nTo process the data, you might write initially:\n\n{\n    class = $1\n    for (i = 2; $i != \"data:\"; i++) {\n        if ($i == \"sum\")\n            sum()   # processes the whole record\n        else if ($i == \"average\")\n            average()\n        \u2026           # and so on\n    }\n}\n\n\nThis style of programming works, but can be awkward. With indirect function calls, you tell gawk to use the value of a variable as\nthe name of the function to call.\n\nThe syntax is similar to that of a regular function call: an identifier immediately followed by an opening parenthesis, any\narguments, and then a closing parenthesis, with the addition of a leading \u2018@\u2019 character:\n\nthe_function = \"sum\"\nresult = @the_function()   # calls the sum() function\n\n\nHere is a full program that processes the previously shown data, using indirect function calls:\n\n# indirectcall.awk --- Demonstrate indirect function calls\n\n# average --- return the average of the values in fields $first - $last\n\nfunction average(first, last,   sum, i)\n{\n    sum = 0;\n    for (i = first; i <= last; i++)\n        sum += $i\n\n    return sum / (last - first + 1)\n}\n\n# sum --- return the sum of the values in fields $first - $last\n\nfunction sum(first, last,   ret, i)\n{\n    ret = 0;\n    for (i = first; i <= last; i++)\n        ret += $i\n\n    return ret\n}\n\n\nThese two functions expect to work on fields; thus, the parameters first and last indicate where in the fields to start and end.\nOtherwise, they perform the expected computations and are not unusual:\n\n# For each record, print the class name and the requested statistics\n{\n    class_name = $1\n    gsub(/_/, \" \", class_name)  # Replace _ with spaces\n\n    # find start\n    for (i = 1; i <= NF; i++) {\n        if ($i == \"data:\") {\n            start = i + 1\n            break\n ", "doc_id": "1efdddff-8acd-42fd-9447-b27d95039767", "embedding": null, "doc_hash": "1b92dd3a66858035c8eed0f640158114b629a96d01cf256fd2a2de66f9930aaa", "extra_info": null, "node_info": {"start": 0, "end": 3167, "_node_type": "1"}, "relationships": {"1": "a720d204-8b5e-408c-8d9c-d031c4e867a5", "3": "0b376168-1a32-49ae-9b11-22c8d54a5b48"}}, "__type__": "1"}, "0b376168-1a32-49ae-9b11-22c8d54a5b48": {"__data__": {"text": "start = i + 1\n            break\n        }\n    }\n\n    printf(\"%s:\\n\", class_name)\n    for (i = 2; $i != \"data:\"; i++) {\n        the_function = $i\n        printf(\"\\t%s: <%s>\\n\", $i, @the_function(start, NF) \"\")\n    }\n    print \"\"\n}\n\n\nThis is the main processing for each record. It prints the class name (with underscores replaced with spaces). It then finds the\nstart of the actual data, saving it in start. The last part of the code loops through each function name (from $2 up to the\nmarker, \u2018data:\u2019), calling the function named by the field. The indirect function call itself occurs as a parameter in the call to\nprintf. (The printf format string uses \u2018%s\u2019 as the format specifier so that we can use functions that return strings, as well as\nnumbers. Note that the result from the indirect call is concatenated with the empty string, in order to force it to be a string\nvalue.)\n\nHere is the result of running the program:\n\n$ gawk -f indirectcall.awk class_data1\n-| Biology 101:\n-|     sum: <352.8>\n-|     average: <88.2>\n-|\n-| Chemistry 305:\n-|     sum: <356.4>\n-|     average: <89.1>\n-|\n-| English 401:\n-|     sum: <376.1>\n-|     average: <94.025>\n\n\nThe ability to use indirect function calls is more powerful than you may think at first. The C and C++ languages provide \u201cfunction\npointers,\u201d which are a mechanism for calling a function chosen at runtime. One of the most well-known uses of this ability is the\nC qsort() function, which sorts an array using the famous \u201cquicksort\u201d algorithm (see the Wikipedia article\n[https://en.wikipedia.org/wiki/Quicksort] for more information). To use this function, you supply a pointer to a comparison\nfunction. This mechanism allows you to sort arbitrary data in an arbitrary fashion.\n\nWe can do something similar using gawk, like this:\n\n# quicksort.awk --- Quicksort algorithm, with user-supplied\n#                   comparison function\n\n# quicksort --- C.A.R. Hoare's quicksort algorithm. See Wikipedia\n#               or almost any algorithms or computer science text.\n\nfunction quicksort(data, left, right, less_than,    i, last)\n{\n    if (left >= right)  # do nothing if array contains fewer\n        return          # than two elements\n\n    quicksort_swap(data, left, int((left + right) / 2))\n    last = left\n    for (i = left + 1; i <= right; i++)\n        if (@less_than(data[i], data[left]))\n            quicksort_swap(data, ++last, i)\n    quicksort_swap(data, left, last)\n    quicksort(data, left, last - 1, less_than)\n    quicksort(data, last + 1, right, less_than)\n}\n\n# quicksort_swap --- helper function for quicksort, should really be inline\n\nfunction quicksort_swap(data, i, j,      temp)\n{\n    temp = data[i]\n    data[i] = data[j]\n    data[j] = temp\n}\n\n\nThe quicksort() function receives the data array, the starting and ending indices to sort (left and", "doc_id": "0b376168-1a32-49ae-9b11-22c8d54a5b48", "embedding": null, "doc_hash": "cb39d4d9eb1cd95b50e2e1250b4e500c3e25d58961ba6abc02c6de930f19f302", "extra_info": null, "node_info": {"start": 3152, "end": 5963, "_node_type": "1"}, "relationships": {"1": "a720d204-8b5e-408c-8d9c-d031c4e867a5", "2": "1efdddff-8acd-42fd-9447-b27d95039767", "3": "a5e10307-f5df-44ea-a7b3-29fab8307477"}}, "__type__": "1"}, "a5e10307-f5df-44ea-a7b3-29fab8307477": {"__data__": {"text": "function receives the data array, the starting and ending indices to sort (left and right), and the name of a\nfunction that performs a \u201cless than\u201d comparison. It then implements the quicksort algorithm.\n\nTo make use of the sorting function, we return to our previous example. The first thing to do is write some comparison functions:\n\n# num_lt --- do a numeric less than comparison\n\nfunction num_lt(left, right)\n{\n    return ((left + 0) < (right + 0))\n}\n\n\n\n\n# num_ge --- do a numeric greater than or equal to comparison\n\nfunction num_ge(left, right)\n{\n    return ((left + 0) >= (right + 0))\n}\n\n\nThe num_ge() function is needed to perform a descending sort; when used to perform a \u201cless than\u201d test, it actually does the\nopposite (greater than or equal to), which yields data sorted in descending order.\n\nNext comes a sorting function. It is parameterized with the starting and ending field numbers and the comparison function. It\nbuilds an array with the data and calls quicksort() appropriately, and then formats the results as a single string:\n\n# do_sort --- sort the data according to `compare'\n#             and return it as a string\n\nfunction do_sort(first, last, compare,      data, i, retval)\n{\n    delete data\n    for (i = 1; first <= last; first++) {\n        data[i] = $first\n        i++\n    }\n\n    quicksort(data, 1, i-1, compare)\n\n    retval = data[1]\n    for (i = 2; i in data; i++)\n        retval = retval \" \" data[i]\n\n    return retval\n}\n\n\nFinally, the two sorting functions call do_sort(), passing in the names of the two comparison functions:\n\n# sort --- sort the data in ascending order and return it as a string\n\nfunction sort(first, last)\n{\n    return do_sort(first, last, \"num_lt\")\n}\n\n\n\n\n\n\n# rsort --- sort the data in descending order and return it as a string\n\nfunction rsort(first, last)\n{\n    return do_sort(first, last, \"num_ge\")\n}\n\n\nHere is an extended version of the data file:\n\nBiology_101 sum average sort rsort data: 87.0 92.4 78.5 94.9\nChemistry_305 sum average sort rsort data: 75.2 98.3 94.7 88.2\nEnglish_401 sum average sort rsort data: 100.0 95.6 87.1 93.4\n\n\nFinally, here are the results when the enhanced program is run:\n\n$ gawk -f quicksort.awk -f indirectcall.awk class_data2\n-| Biology 101:\n-|     sum: <352.8>\n-|     average: <88.2>\n-|     sort: <78.5 87.0 92.4 94.9>\n-|     rsort: <94.9 92.4 87.0 78.5>\n-|\n-| Chemistry 305:\n-|     sum: <356.4>\n-|     average: <89.1>\n-|     sort: <75.2 88.2 94.7 98.3>\n-|     rsort: <98.3 94.7 88.2 75.2>\n-|\n-| English 401:\n-|     sum: <376.1>\n-|     average: <94.025>\n-|     sort: <87.1 93.4 95.6 100.0>\n-|     rsort: <100.0 95.6 93.4 87.1>\n\n\nAnother example where indirect functions calls are useful can be found in processing arrays. This is described in Traversing\nArrays of Arrays", "doc_id": "a5e10307-f5df-44ea-a7b3-29fab8307477", "embedding": null, "doc_hash": "f37d343c688283220d84505716cc48ab35de852cf5350a61d40d3ae21c609006", "extra_info": null, "node_info": {"start": 5910, "end": 8669, "_node_type": "1"}, "relationships": {"1": "a720d204-8b5e-408c-8d9c-d031c4e867a5", "2": "0b376168-1a32-49ae-9b11-22c8d54a5b48", "3": "aa3451a6-1e97-4532-ab28-c92ad4881d82"}}, "__type__": "1"}, "aa3451a6-1e97-4532-ab28-c92ad4881d82": {"__data__": {"text": "be found in processing arrays. This is described in Traversing\nArrays of Arrays [Walking-Arrays.html].\n\nRemember that you must supply a leading \u2018@\u2019 in front of an indirect function call.\n\nStarting with version 4.1.2 of gawk, indirect function calls may also be used with built-in functions and with extension functions\n(see Writing Extensions for gawk [Dynamic-Extensions.html]). There are some limitations when calling built-in functions\nindirectly, as follows.\n\n * You cannot pass a regular expression constant to a built-in function through an indirect function call. This applies to the\n   sub(), gsub(), gensub(), match(), split() and patsplit() functions. However, you can pass a strongly typed regexp constant (see\n   Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]).\n * If calling sub() or gsub(), you may only pass two arguments, since those functions are unusual in that they update their third\n   argument. This means that $0 will be updated.\n * You cannot indirectly call built-in functions that can take $0 as a default parameter; you must supply an argument instead. For\n   example, you must pass an argument to length() if calling it indirectly.\n * Calling a built-in function indirectly with the wrong number of arguments for that function causes a fatal error. For example,\n   calling length() with two arguments. These errors are found at runtime instead of when gawk parses your program, since gawk\n   doesn\u2019t know until runtime if you have passed the correct number of arguments or not.\n\ngawk does its best to make indirect function calls efficient. For example, in the following case:\n\nfor (i = 1; i <= n; i++)\n    @the_function()\n\n\ngawk looks up the actual function to call only once.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Functions-Summary.html], Previous: User-Defined Functions [User_002ddefined.html], Up: Functions [Functions.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "aa3451a6-1e97-4532-ab28-c92ad4881d82", "embedding": null, "doc_hash": "236bc9f0be194f392704957f5b491d92d4c1b8608c59b6c92d5f9f59fb6bd351", "extra_info": null, "node_info": {"start": 8660, "end": 10702, "_node_type": "1"}, "relationships": {"1": "a720d204-8b5e-408c-8d9c-d031c4e867a5", "2": "a5e10307-f5df-44ea-a7b3-29fab8307477"}}, "__type__": "1"}, "f61634a6-585b-4616-b38f-929497e9d44c": {"__data__": {"text": "Next: Be Careful Comparing Values [Comparing-FP-Values.html], Up: Floating-Point Arithmetic Is Not Exact\n[Inexactness-of-computations.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.1.1 MANY NUMBERS CANNOT BE REPRESENTED EXACTLY\n\nSo, before you start to write any code, you should think about what you really want and what\u2019s really happening. Consider the two\nnumbers in the following example:\n\nx = 0.875             # 1/2 + 1/4 + 1/8\ny = 0.425\n\n\nUnlike the number in y, the number stored in x is exactly representable in binary because it can be written as a finite sum of one\nor more fractions whose denominators are all powers of two. When gawk reads a floating-point number from program source, it\nautomatically rounds that number to whatever precision your machine supports. If you try to print the numeric content of a\nvariable using an output format string of \"%.17g\", it may not produce the same number as you assigned to it:\n\n$ gawk 'BEGIN { x = 0.875; y = 0.425\n>               printf(\"%0.17g, %0.17g\\n\", x, y) }'\n-| 0.875, 0.42499999999999999\n\n\nOften the error is so small you do not even notice it, and if you do, you can always specify how much precision you would like in\nyour output. Usually this is a format string like \"%.15g\", which, when used in the previous example, produces an output identical\nto the input.", "doc_id": "f61634a6-585b-4616-b38f-929497e9d44c", "embedding": null, "doc_hash": "9e2d3ed03d302c4e178f81774e73924bdb98e39ab61ec787b53eefec42946ee4", "extra_info": null, "node_info": {"start": 0, "end": 1484, "_node_type": "1"}, "relationships": {"1": "855ae1d1-ac7e-4c73-923f-5b773fa837dc"}}, "__type__": "1"}, "59b661fc-7b42-4837-8be6-bfb6a94471f4": {"__data__": {"text": "Next: Getting the Accuracy You Need [Getting-Accuracy.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.1 FLOATING-POINT ARITHMETIC IS NOT EXACT\n\nBinary floating-point representations and arithmetic are inexact. Simple values like 0.1 cannot be precisely represented using\nbinary floating-point numbers, and the limited precision of floating-point numbers means that slight changes in the order of\noperations or the precision of intermediate storage can change the result. To make matters worse, with arbitrary-precision\nfloating-point arithmetic, you can set the precision before starting a computation, but then you cannot be sure of the number of\nsignificant decimal places in the final result.\n\n * Many Numbers Cannot Be Represented Exactly [Inexact-representation.html]\n * Be Careful Comparing Values [Comparing-FP-Values.html]\n * Errors Accumulate [Errors-accumulate.html]\n * Floating Point Values They Didn\u2019t Talk About In School [Strange-values.html]", "doc_id": "59b661fc-7b42-4837-8be6-bfb6a94471f4", "embedding": null, "doc_hash": "e5c2905cfca6f8980c772961b08f621f22e0502f2631156d30557651bc531a17", "extra_info": null, "node_info": {"start": 0, "end": 1181, "_node_type": "1"}, "relationships": {"1": "6a99ce7c-a48c-4fc6-8a53-c3d09aa7be01"}}, "__type__": "1"}, "9c149185-cc02-4ec7-8766-19350ab1aff0": {"__data__": {"text": "Previous: Summary [Input-Summary.html], Up: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.15 EXERCISES\n\n 1. Using the FIELDWIDTHS variable (see Reading Fixed-Width Data [Constant-Size.html]), write a program to read election data,\n    where each record represents one voter\u2019s votes. Come up with a way to define which columns are associated with each ballot\n    item, and print the total votes, including abstentions, for each item.", "doc_id": "9c149185-cc02-4ec7-8766-19350ab1aff0", "embedding": null, "doc_hash": "04f3698d5fb718f4864eb8a4143423fe82080170dd9252c75c729bfc071fda46", "extra_info": null, "node_info": {"start": 0, "end": 622, "_node_type": "1"}, "relationships": {"1": "1247ba68-4d2d-4184-8f8b-eff0cc551aaf"}}, "__type__": "1"}, "f34b606e-84f2-4ad1-b1d7-30363ad8948c": {"__data__": {"text": "Next: Customized Output Wrappers [Output-Wrappers.html], Previous: Registering An Extension Version String\n[Extension-Version-String.html], Up: Registration Functions [Registration-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6.4 CUSTOMIZED INPUT PARSERS\n\nBy default, gawk reads text files as its input. It uses the value of RS to find the end of an input record, and then uses FS (or\nFIELDWIDTHS or FPAT) to split it into fields (see Reading Input Files [Reading-Files.html]). Additionally, it sets the value of RT\n(see Predefined Variables [Built_002din-Variables.html]).\n\nIf you want, you can provide your own custom input parser. An input parser\u2019s job is to return a record to the gawk\nrecord-processing code, along with indicators for the value and length of the data to be used for RT, if any.\n\nTo provide an input parser, you must first provide two functions (where XXX is a prefix name for your extension):\n\nawk_bool_t XXX_can_take_file(const awk_input_buf_t *iobuf);\n\nThis function examines the information available in iobuf (which we discuss shortly). Based on the information there, it decides\nif the input parser should be used for this file. If so, it should return true. Otherwise, it should return false. It should not\nchange any state (variable values, etc.) within gawk.\n\nawk_bool_t XXX_take_control_of(awk_input_buf_t *iobuf);\n\nWhen gawk decides to hand control of the file over to the input parser, it calls this function. This function in turn must fill in\ncertain fields in the awk_input_buf_t structure and ensure that certain conditions are true. It should then return true. If an\nerror of some kind occurs, it should not fill in any fields and should return false; then gawk will not use the input parser. The\ndetails are presented shortly.\n\nYour extension should package these functions inside an awk_input_parser_t, which looks like this:\n\ntypedef struct awk_input_parser {\n    const char *name;   /* name of parser */\n    awk_bool_t (*can_take_file)(const awk_input_buf_t *iobuf);\n    awk_bool_t (*take_control_of)(awk_input_buf_t *iobuf);\n    awk_const struct awk_input_parser *awk_const next;   /* for gawk */\n} awk_input_parser_t;\n\n\nThe fields are:\n\nconst char *name;\n\nThe name of the input parser. This is a regular C string.\n\nawk_bool_t (*can_take_file)(const awk_input_buf_t *iobuf);\n\nA pointer to your XXX_can_take_file() function.\n\nawk_bool_t (*take_control_of)(awk_input_buf_t *iobuf);\n\nA pointer to your XXX_take_control_of() function.\n\nawk_const struct input_parser *awk_const next;\n\nThis is for use by gawk; therefore it is marked awk_const so that the extension cannot modify it.\n\nThe steps are as follows:\n\n 1. Create a static awk_input_parser_t variable and initialize it appropriately.\n 2. When your extension is loaded, register your input parser with gawk using the register_input_parser() API function (described\n    next).\n\nAn awk_input_buf_t looks like this:\n\ntypedef struct awk_input {\n    const char *name;       /* filename */\n    int fd;                 /* file descriptor */\n#define INVALID_HANDLE (-1)\n    void *opaque;           /* private data for input parsers */\n    int (*get_record)(char **out, struct awk_input *iobuf,\n                  ", "doc_id": "f34b606e-84f2-4ad1-b1d7-30363ad8948c", "embedding": null, "doc_hash": "6f4f7960282ba660903fc8c1bfc81814dbd78630ea9ff3b37beb80c067d6e643", "extra_info": null, "node_info": {"start": 0, "end": 3367, "_node_type": "1"}, "relationships": {"1": "7499da42-0943-43bf-b821-3ddcdd9cdfc2", "3": "ebce6e2e-da3c-48f9-94a2-32672b56d7e4"}}, "__type__": "1"}, "ebce6e2e-da3c-48f9-94a2-32672b56d7e4": {"__data__": {"text": "                     int *errcode, char **rt_start, size_t *rt_len,\n                      const awk_fieldwidth_info_t **field_width);\n    ssize_t (*read_func)();\n    void (*close_func)(struct awk_input *iobuf);\n    struct stat sbuf;       /* stat buf */\n} awk_input_buf_t;\n\n\nThe fields can be divided into two categories: those for use (initially, at least) by XXX_can_take_file(), and those for use by\nXXX_take_control_of(). The first group of fields and their uses are as follows:\n\nconst char *name;\n\nThe name of the file.\n\nint fd;\n\nA file descriptor for the file. gawk attempts to open the file for reading using the open() system call. If it was able to open\nthe file, then fd will not be equal to INVALID_HANDLE. Otherwise, it will.\n\nAn extension can decide that it doesn\u2019t want to use the open file descriptor provided by gawk. In such a case it can close the\nfile and set fd to INVALID_HANDLE, or it can leave it alone and keep it\u2019s own file descriptor in private data pointed to by the\nopaque pointer (see further in this list). In any case, if the file descriptor is valid, it should not just overwrite the value\nwith something else; doing so would cause a resource leak.\n\nstruct stat sbuf;\n\nIf the file descriptor is valid, then gawk will have filled in this structure via a call to the fstat() system call. Otherwise, if\nthe lstat() system call is available, it will use that. If lstat() is not available, then it uses stat().\n\nGetting the file\u2019s information allows extensions to check the type of the file even if it could not be opened. This occurs, for\nexample, on Windows systems when trying to use open() on a directory.\n\nIf gawk was not able to get the file information, then sbuf will be zeroed out. In particular, extension code can check if\n\u2018sbuf.st_mode == 0\u2019. If that\u2019s true, then there is no information in sbuf.\n\nThe XXX_can_take_file() function should examine these fields and decide if the input parser should be used for the file. The\ndecision can be made based upon gawk state (the value of a variable defined previously by the extension and set by awk code), the\nname of the file, whether or not the file descriptor is valid, the information in the struct stat, or any combination of these\nfactors.\n\nOnce XXX_can_take_file() has returned true, and gawk has decided to use your input parser, it calls XXX_take_control_of(). That\nfunction then fills either the get_record field or the read_func field in the awk_input_buf_t. It must also ensure that fd is not\nset to INVALID_HANDLE. The following list describes the fields that may be filled by XXX_take_control_of():\n\nvoid *opaque;\n\nThis is used to hold any state information needed by the input parser for this file. It is \u201copaque\u201d to gawk. The input parser is\nnot required to use this pointer.\n\nint\u00a0(*get_record)(char\u00a0**out, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0struct\u00a0awk_input *iobuf, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int *errcode, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0char\n**rt_start, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size_t *rt_len, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const awk_fieldwidth_info_t **field_width);\n\nThis function pointer should point to a function that creates the input records. Said function is the core of the input parser.\nIts behavior is described in the text following this list.\n\nssize_t (*read_func)(int, void *, size_t);\n\nThis function pointer should point to a function that has the same behavior as the standard POSIX read() system call. It is an\nalternative to the get_record pointer. Its behavior is also described in the text following this", "doc_id": "ebce6e2e-da3c-48f9-94a2-32672b56d7e4", "embedding": null, "doc_hash": "8b8367d3c3a55eb585e1bb9c2f9b63f6f493bc763be02388d800a740bc23d990", "extra_info": null, "node_info": {"start": 3368, "end": 6835, "_node_type": "1"}, "relationships": {"1": "7499da42-0943-43bf-b821-3ddcdd9cdfc2", "2": "f34b606e-84f2-4ad1-b1d7-30363ad8948c", "3": "3006f7ae-77e1-43f2-b8c6-28fa0e7bbb46"}}, "__type__": "1"}, "3006f7ae-77e1-43f2-b8c6-28fa0e7bbb46": {"__data__": {"text": "to the get_record pointer. Its behavior is also described in the text following this list.\n\nvoid (*close_func)(struct awk_input *iobuf);\n\nThis function pointer should point to a function that does the \u201cteardown.\u201d It should release any resources allocated by\nXXX_take_control_of(). It may also close the file. If it does so, it should set the fd field to INVALID_HANDLE.\n\nIf fd is still not INVALID_HANDLE after the call to this function, gawk calls the regular close() system call.\n\nHaving a \u201cteardown\u201d function is optional. If your input parser does not need it, do not set this field. Then, gawk calls the\nregular close() system call on the file descriptor, so it should be valid.\n\nThe XXX_get_record() function does the work of creating input records. The parameters are as follows:\n\nchar **out\n\nThis is a pointer to a char * variable that is set to point to the record. gawk makes its own copy of the data, so your extension\nmust manage this storage.\n\nstruct awk_input *iobuf\n\nThis is the awk_input_buf_t for the file. Two of its fields should be used by your extension: fd for reading data, and opaque for\nmanaging any private state.\n\nint *errcode\n\nIf an error occurs, *errcode should be set to an appropriate code from <errno.h>.\n\nchar **rt_start size_t *rt_len\n\nIf the concept of a \u201crecord terminator\u201d makes sense, then *rt_start should be set to point to the data to be used for RT, and\n*rt_len should be set to the length of the data. Otherwise, *rt_len should be set to zero. Here too, gawk makes its own copy of\nthis data, so your extension must manage this storage.\n\nconst awk_fieldwidth_info_t **field_width\n\nIf field_width is not NULL, then *field_width will be initialized to NULL, and the function may set it to point to a structure\nsupplying field width information to override the default field parsing mechanism. Note that this structure will not be copied by\ngawk; it must persist at least until the next call to get_record or close_func. Note also that field_width is NULL when getline is\nassigning the results to a variable, thus field parsing is not needed.\n\nIf the parser sets *field_width, then gawk uses this layout to parse the input record, and the PROCINFO[\"FS\"] value will be \"API\"\nwhile this record is active in $0. The awk_fieldwidth_info_t data structure is described below.\n\nThe return value is the length of the buffer pointed to by *out, or EOF if end-of-file was reached or an error occurred.\n\nIt is guaranteed that errcode is a valid pointer, so there is no need to test for a NULL value. gawk sets *errcode to zero, so\nthere is no need to set it unless an error occurs.\n\nIf an error does occur, the function should return EOF and set *errcode to a value greater than zero. In that case, if *errcode\ndoes not equal zero, gawk automatically updates the ERRNO variable based on the value of *errcode. (In general, setting \u2018*errcode\n= errno\u2019 should do the right thing.)\n\nAs an alternative to supplying a function that returns an input record, you may instead supply a function that simply reads bytes,\nand let gawk parse the data into records. If you do so, the data should be returned in the multibyte encoding of the current\nlocale. Such a function should follow the same behavior as the read() system call, and you fill in the read_func pointer with its\naddress in the awk_input_buf_t structure.\n\nBy default, gawk sets the read_func pointer to point to the read() system call. So your extension need not set this field\nexplicitly.\n\n> NOTE: You must choose one method or the other: either a function that returns a record, or one that returns raw data. In\n> particular, if you supply a function to get a record, gawk will call", "doc_id": "3006f7ae-77e1-43f2-b8c6-28fa0e7bbb46", "embedding": null, "doc_hash": "7801a13c2895a7022839666a31911011cb19950264bdba7724cc8db30e550fd0", "extra_info": null, "node_info": {"start": 6765, "end": 10428, "_node_type": "1"}, "relationships": {"1": "7499da42-0943-43bf-b821-3ddcdd9cdfc2", "2": "ebce6e2e-da3c-48f9-94a2-32672b56d7e4", "3": "4e2a00cd-3b40-4934-a4d9-ebe85fe03235"}}, "__type__": "1"}, "4e2a00cd-3b40-4934-a4d9-ebe85fe03235": {"__data__": {"text": "particular, if you supply a function to get a record, gawk will call it, and will never call the raw read function.\n\ngawk ships with a sample extension that reads directories, returning records for each entry in a directory (see Reading\nDirectories [Extension-Sample-Readdir.html]). You may wish to use that code as a guide for writing your own input parser.\n\nWhen writing an input parser, you should think about (and document) how it is expected to interact with awk code. You may want it\nto always be called, and to take effect as appropriate (as the readdir extension does). Or you may want it to take effect based\nupon the value of an awk variable, as the XML extension from the gawkextlib project does (see The gawkextlib Project\n[gawkextlib.html]). In the latter case, code in a BEGINFILE rule can look at FILENAME and ERRNO to decide whether or not to\nactivate your input parser (see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]).\n\nIf you would like to override the default field parsing mechanism for a given record, then you must populate an\nawk_fieldwidth_info_t structure, which looks like this:\n\ntypedef struct {\n        awk_bool_t     use_chars; /* false ==> use bytes */\n        size_t         nf;        /* number of fields in record (NF) */\n        struct awk_field_info {\n                size_t skip;      /* amount to skip before field starts */\n                size_t len;       /* length of field */\n        } fields[1];              /* actual dimension should be nf */\n} awk_fieldwidth_info_t;\n\n\nThe fields are:\n\nawk_bool_t use_chars;\n\nSet this to awk_true if the field lengths are specified in terms of potentially multi-byte characters, and set it to awk_false if\nthe lengths are in terms of bytes. Performance will be better if the values are supplied in terms of bytes.\n\nsize_t nf;\n\nSet this to the number of fields in the input record, i.e. NF.\n\nstruct awk_field_info fields[nf];\n\nThis is a variable-length array whose actual dimension should be nf. For each field, the skip element should be set to the number\nof characters or bytes, as controlled by the use_chars flag, to skip before the start of this field. The len element provides the\nlength of the field. The values in fields[0] provide the information for $1, and so on through the fields[nf-1] element containing\nthe information for $NF.\n\nA convenience macro awk_fieldwidth_info_size(numfields) is provided to calculate the appropriate size of a variable-length\nawk_fieldwidth_info_t structure containing numfields fields. This can be used as an argument to malloc() or in a union to allocate\nspace statically. Please refer to the readdir_test sample extension for an example.\n\nYou register your input parser with the following function:\n\nvoid register_input_parser(awk_input_parser_t *input_parser);\n\nRegister the input parser pointed to by input_parser with gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Customized Output Wrappers [Output-Wrappers.html], Previous: Registering An Extension Version String\n[Extension-Version-String.html], Up: Registration Functions [Registration-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4e2a00cd-3b40-4934-a4d9-ebe85fe03235", "embedding": null, "doc_hash": "7a678734a362a5f2d8f9602acf1395370a345c3a8d0e0a3a531f1155a69ec56e", "extra_info": null, "node_info": {"start": 10431, "end": 13697, "_node_type": "1"}, "relationships": {"1": "7499da42-0943-43bf-b821-3ddcdd9cdfc2", "2": "3006f7ae-77e1-43f2-b8c6-28fa0e7bbb46"}}, "__type__": "1"}, "0fa89834-5a93-4e98-8204-99da953af5ae": {"__data__": {"text": "Next: Exercises [Input-Exercises.html], Previous: Directories on the Command Line [Command_002dline-directories.html], Up: Reading\nInput Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.14 SUMMARY\n\n * Input is split into records based on the value of RS. The possibilities are as follows:\n   \n   Value of RSRecords are split on \u2026awk / gawk Any single characterThat characterawk The empty string (\"\")Runs of two or more\n   newlinesawk A regexpText that matches the regexpgawk\n\n * FNR indicates how many records have been read from the current input file; NR indicates how many records have been read in\n   total.\n * gawk sets RT to the text matched by RS.\n * After splitting the input into records, awk further splits the records into individual fields, named $1, $2, and so on. $0 is\n   the whole record, and NF indicates how many fields there are. The default way to split fields is between whitespace characters.\n * Fields may be referenced using a variable, as in $NF. Fields may also be assigned values, which causes the value of $0 to be\n   recomputed when it is later referenced. Assigning to a field with a number greater than NF creates the field and rebuilds the\n   record, using OFS to separate the fields. Incrementing NF does the same thing. Decrementing NF throws away fields and rebuilds\n   the record.\n * Field splitting is more complicated than record splitting:\n   \n   Field separator valueFields are split \u2026awk / gawk FS == \" \"On runs of whitespaceawk FS == any single characterOn that\n   characterawk FS == regexpOn text matching the regexpawk FS == \"\"Such that each individual character is a separate fieldgawk\n   FIELDWIDTHS == list of columnsBased on character positiongawk FPAT == regexpOn the text surrounding text matching the\n   regexpgawk\n\n * Using \u2018FS = \"\\n\"\u2019 causes the entire record to be a single field (assuming that newlines separate records).\n * FS may be set from the command line using the -F option. This can also be done using command-line variable assignment.\n * Use PROCINFO[\"FS\"] to see how fields are being split.\n * Use getline in its various forms to read additional records from the default input stream, from a file, or from a pipe or\n   coprocess.\n * Use PROCINFO[file, \"READ_TIMEOUT\"] to cause reads to time out for file.\n * Directories on the command line are fatal for standard awk; gawk ignores them if not in POSIX mode.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Exercises [Input-Exercises.html], Previous: Directories on the Command Line [Command_002dline-directories.html], Up: Reading\nInput Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "0fa89834-5a93-4e98-8204-99da953af5ae", "embedding": null, "doc_hash": "f0f9ac2c17a6872607ce4373c2fbc49a8b8372b6d9d4627b78a4c20380f6c534", "extra_info": null, "node_info": {"start": 0, "end": 2901, "_node_type": "1"}, "relationships": {"1": "6992e214-471e-4752-bf56-63c3d3143eb8"}}, "__type__": "1"}, "3b366dd3-16f8-4505-9fde-31a7428219ba": {"__data__": {"text": "Previous: Other Freely Available awk Implementations [Other-Versions.html], Up: Installing gawk [Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nB.6 SUMMARY\n\n * The gawk distribution is available from the GNU Project\u2019s main distribution site, ftp.gnu.org. The canonical build recipe is:\n   \n   wget https://ftp.gnu.org/gnu/gawk/gawk-5.2.2.tar.gz\n   tar -xvpzf gawk-5.2.2.tar.gz\n   cd gawk-5.2.2\n   ./configure && make && make check\n   \n   \n   > NOTE: Because of the \u2018https://\u2019 URL, you may have to supply the --no-check-certificate option to wget to download the file.\n\n * gawk may be built on non-POSIX systems as well. The currently supported systems are MS-Windows using MSYS, MSYS2, MinGW, and\n   Cygwin, and OpenVMS. Instructions for each system are included in this appendix.\n * Bug reports should be sent via email to \u201cbug dash gawk at gnu dot org\u201d. Bug reports should be in English and should include the\n   version of gawk, how it was compiled, and a short program and data file that demonstrate the problem.\n * Non-bug emails should be sent to \u201chelp dash gawk at gnu dot org\u201d. Repeatedly sending non-bug emails to the bug list will get\n   you blacklisted from it.\n * There are a number of other freely available awk implementations. Many are POSIX-compliant; others are less so.", "doc_id": "3b366dd3-16f8-4505-9fde-31a7428219ba", "embedding": null, "doc_hash": "013771f1540a76006cd8dd8be24bf7ec483351dcb98b56316c0fda87751968c2", "extra_info": null, "node_info": {"start": 0, "end": 1452, "_node_type": "1"}, "relationships": {"1": "22586eaa-3ea8-484e-8d59-6270bdf1d36a"}}, "__type__": "1"}, "215e7bef-f1b1-4977-be95-91a2ebb27bd1": {"__data__": {"text": "Next: Implementation Notes [Notes.html], Previous: The Evolution of the awk Language [Language-History.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nAPPENDIX B INSTALLING GAWK\n\nThis appendix provides instructions for installing gawk on the various platforms that are supported by the developers. The primary\ndeveloper supports GNU/Linux (and Unix), whereas the other ports are contributed. See Reporting Problems and Bugs [Bugs.html] for\nthe email addresses of the people who maintain the respective ports.\n\n * The gawk Distribution [Gawk-Distribution.html]\n * Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html]\n * Installation on Other Operating Systems [Non_002dUnix-Installation.html]\n * Reporting Problems and Bugs [Bugs.html]\n * Other Freely Available awk Implementations [Other-Versions.html]\n * Summary [Installation-summary.html]", "doc_id": "215e7bef-f1b1-4977-be95-91a2ebb27bd1", "embedding": null, "doc_hash": "533cd90323b91c9522ee85727a39eb4a37c00f0ce74f8aa1063e0977200a2e1a", "extra_info": null, "node_info": {"start": 0, "end": 1054, "_node_type": "1"}, "relationships": {"1": "6aa86a7d-9968-4eda-90b9-0ba1c9fb3c2b"}}, "__type__": "1"}, "401e04d1-039e-4fc0-86d4-a9260e67f4c7": {"__data__": {"text": "Next: C Code for chdir() and stat() [Internal-File-Ops.html], Up: Example: Some File Functions [Extension-Example.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.6.1 USING CHDIR() AND STAT()\n\nThis section shows how to use the new functions at the awk level once they\u2019ve been integrated into the running gawk interpreter.\nUsing chdir() is very straightforward. It takes one argument, the new directory to change to:\n\n@load \"filefuncs\"\n\u2026\nnewdir = \"/home/arnold/funstuff\"\nret = chdir(newdir)\nif (ret < 0) {\n    printf(\"could not change to %s: %s\\n\", newdir, ERRNO) > \"/dev/stderr\"\n    exit 1\n}\n\u2026\n\n\nThe return value is negative if the chdir() failed, and ERRNO (see Predefined Variables [Built_002din-Variables.html]) is set to a\nstring indicating the error.\n\nUsing stat() is a bit more complicated. The C stat() function fills in a structure that has a fair amount of information. The\nright way to model this in awk is to fill in an associative array with the appropriate information:\n\nfile = \"/home/arnold/.profile\"\nret = stat(file, fdata)\nif (ret < 0) {\n    printf(\"could not stat %s: %s\\n\",\n             file, ERRNO) > \"/dev/stderr\"\n    exit 1\n}\nprintf(\"size of %s is %d bytes\\n\", file, fdata[\"size\"])\n\n\nThe stat() function always clears the data array, even if the stat() fails. It fills in the following elements:\n\n\"name\"\n\nThe name of the file that was stat()ed.\n\n\"dev\" \"ino\"\n\nThe file\u2019s device and inode numbers, respectively.\n\n\"mode\"\n\nThe file\u2019s mode, as a numeric value. This includes both the file\u2019s type and its permissions.\n\n\"nlink\"\n\nThe number of hard links (directory entries) the file has.\n\n\"uid\" \"gid\"\n\nThe numeric user and group ID numbers of the file\u2019s owner.\n\n\"size\"\n\nThe size in bytes of the file.\n\n\"blocks\"\n\nThe number of disk blocks the file actually occupies. This may not be a function of the file\u2019s size if the file has holes.\n\n\"atime\" \"mtime\" \"ctime\"\n\nThe file\u2019s last access, modification, and inode update times, respectively. These are numeric timestamps, suitable for formatting\nwith strftime() (see Time Functions [Time-Functions.html]).\n\n\"pmode\"\n\nThe file\u2019s \u201cprintable mode.\u201d This is a string representation of the file\u2019s type and permissions, such as is produced by \u2018ls\n-l\u2019\u2014for example, \"drwxr-xr-x\".\n\n\"type\"\n\nA printable string representation of the file\u2019s type. The value is one of the following:\n\n\"blockdev\" \"chardev\"\n\nThe file is a block or character device (\u201cspecial file\u201d).\n\n\"directory\"\n\nThe file is a directory.\n\n\"fifo\"\n\nThe file is a named pipe (also known as a FIFO).\n\n\"file\"\n\nThe file is just a regular file.\n\n\"socket\"\n\nThe file is an AF_UNIX (\u201cUnix domain\u201d) socket in the filesystem.\n\n\"symlink\"\n\nThe file is a symbolic link.\n\n\"devbsize\"\n\nThe size of a block for the element indexed by \"blocks\". This information is derived from either the DEV_BSIZE constant defined in\n<sys/param.h> on most systems, or the S_BLKSIZE constant in <sys/stat.h> on BSD systems. For some other systems, a priori\nknowledge is used to provide a value. Where no value can be determined, it", "doc_id": "401e04d1-039e-4fc0-86d4-a9260e67f4c7", "embedding": null, "doc_hash": "fc6a2fad2041983d798667051e7b113530b6d7a2b1bdeda74a9dc6f1418d9e43", "extra_info": null, "node_info": {"start": 0, "end": 3157, "_node_type": "1"}, "relationships": {"1": "93aebee2-17f9-4135-ac31-07138482737c", "3": "b0ed5bba-5dfa-4a43-9142-24dcc62ed67d"}}, "__type__": "1"}, "b0ed5bba-5dfa-4a43-9142-24dcc62ed67d": {"__data__": {"text": "is used to provide a value. Where no value can be determined, it defaults to 512.\n\nSeveral additional elements may be present, depending upon the operating system and the type of the file. You can test for them in\nyour awk program by using the in operator (see Referring to an Array Element [Reference-to-Elements.html]):\n\n\"blksize\"\n\nThe preferred block size for I/O to the file. This field is not present on all POSIX-like systems in the C stat structure.\n\n\"linkval\"\n\nIf the file is a symbolic link, this element is the name of the file the link points to (i.e., the value of the link).\n\n\"rdev\" \"major\" \"minor\"\n\nIf the file is a block or character device file, then these values represent the numeric device number and the major and minor\ncomponents of that number, respectively.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: C Code for chdir() and stat() [Internal-File-Ops.html], Up: Example: Some File Functions [Extension-Example.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b0ed5bba-5dfa-4a43-9142-24dcc62ed67d", "embedding": null, "doc_hash": "23a721076b3ff514822e3b69c007fe4949b0e91e39ea09e706d14e80930d47dd", "extra_info": null, "node_info": {"start": 3093, "end": 4185, "_node_type": "1"}, "relationships": {"1": "93aebee2-17f9-4135-ac31-07138482737c", "2": "401e04d1-039e-4fc0-86d4-a9260e67f4c7"}}, "__type__": "1"}, "638ba149-6239-45ef-85a4-f3665b1c36ce": {"__data__": {"text": "Next: Integrating the Extensions [Using-Internal-File-Ops.html], Previous: Using chdir() and stat()\n[Internal-File-Description.html], Up: Example: Some File Functions [Extension-Example.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.6.2 C CODE FOR CHDIR() AND STAT()\n\nHere is the C code for these extensions.111\n\nThe file includes a number of standard header files, and then includes the gawkapi.h header file, which provides the API\ndefinitions. Those are followed by the necessary variable declarations to make use of the API macros and boilerplate code (see\nBoilerplate Code [Extension-API-Boilerplate.html]):\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <stdio.h>\n#include <assert.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n\n#include \"gawkapi.h\"\n\n#include \"gettext.h\"\n#define _(msgid)  gettext(msgid)\n#define N_(msgid) msgid\n\n#include \"gawkfts.h\"\n#include \"stack.h\"\n\nstatic const gawk_api_t *api;    /* for convenience macros to work */\nstatic awk_ext_id_t ext_id;\nstatic awk_bool_t init_filefuncs(void);\nstatic awk_bool_t (*init_func)(void) = init_filefuncs;\nstatic const char *ext_version = \"filefuncs extension: version 1.0\";\n\nint plugin_is_GPL_compatible;\n\n\nBy convention, for an awk function foo(), the C function that implements it is called do_foo(). The function should have two\narguments. The first is an int, usually called nargs, that represents the number of actual arguments for the function. The second\nis a pointer to an awk_value_t structure, usually named result:\n\n/*  do_chdir --- provide dynamically loaded chdir() function for gawk */\n\nstatic awk_value_t *\ndo_chdir(int nargs, awk_value_t *result, struct awk_ext_func *unused)\n\n\n{\n    awk_value_t newdir;\n    int ret = -1;\n\n    assert(result != NULL);\n\n\nThe newdir variable represents the new directory to change to, which is retrieved with get_argument(). Note that the first\nargument is numbered zero.\n\nIf the argument is retrieved successfully, the function calls the chdir() system call. Otherwise, if the chdir() fails, it updates\nERRNO:\n\n    if (get_argument(0, AWK_STRING, & newdir)) {\n        ret = chdir(newdir.str_value.str);\n        if (ret < 0)\n            update_ERRNO_int(errno);\n    }\n\n\nFinally, the function returns the return value to the awk level:\n\n    return make_number(ret, result);\n}\n\n\nThe stat() extension is more involved. First comes a function that turns a numeric mode into a printable representation (e.g.,\noctal 0644 becomes \u2018-rw-r--r--\u2019). This is omitted here for brevity:\n\n/* format_mode --- turn a stat mode field into something readable */\n\nstatic char *\nformat_mode(unsigned long fmode)\n{\n    \u2026\n}\n\n\nNext comes a function for reading symbolic links, which is also omitted here for brevity:\n\n/* read_symlink --- read a symbolic link into an allocated buffer.\n   \u2026 */\n\nstatic char *\nread_symlink(const char *fname, size_t bufsize, ssize_t *linksize)\n{\n    \u2026\n}\n\n\nTwo helper functions simplify entering values", "doc_id": "638ba149-6239-45ef-85a4-f3665b1c36ce", "embedding": null, "doc_hash": "29262c53eb943e3b6818b3e6ad6e801e42d37b3744a7f86008cfb7c7e182988c", "extra_info": null, "node_info": {"start": 0, "end": 3166, "_node_type": "1"}, "relationships": {"1": "d931a88f-6e21-4528-8676-46fa98e95b9b", "3": "15db7b38-2a9c-40f6-9f5f-80819271e42d"}}, "__type__": "1"}, "15db7b38-2a9c-40f6-9f5f-80819271e42d": {"__data__": {"text": "   \u2026\n}\n\n\nTwo helper functions simplify entering values in the array that will contain the result of the stat():\n\n/* array_set --- set an array element */\n\nstatic void\narray_set(awk_array_t array, const char *sub, awk_value_t *value)\n{\n    awk_value_t index;\n\n    set_array_element(array,\n                      make_const_string(sub, strlen(sub), & index),\n                      value);\n\n}\n\n/* array_set_numeric --- set an array element with a number */\n\nstatic void\narray_set_numeric(awk_array_t array, const char *sub, double num)\n{\n    awk_value_t tmp;\n\n    array_set(array, sub, make_number(num, & tmp));\n}\n\n\nThe following function does most of the work to fill in the awk_array_t result array with values obtained from a valid struct\nstat. This work is done in a separate function to support the stat() function for gawk and also to support the fts() extension,\nwhich is included in the same file but whose code is not shown here (see File-Related Functions\n[Extension-Sample-File-Functions.html]).\n\nThe first part of the function is variable declarations, including a table to map file types to strings:\n\n/* fill_stat_array --- do the work to fill an array with stat info */\n\nstatic int\nfill_stat_array(const char *name, awk_array_t array, struct stat *sbuf)\n{\n    char *pmode;    /* printable mode */\n    const char *type = \"unknown\";\n    awk_value_t tmp;\n    static struct ftype_map {\n        unsigned int mask;\n        const char *type;\n    } ftype_map[] = {\n        { S_IFREG, \"file\" },\n        { S_IFBLK, \"blockdev\" },\n        { S_IFCHR, \"chardev\" },\n        { S_IFDIR, \"directory\" },\n#ifdef S_IFSOCK\n        { S_IFSOCK, \"socket\" },\n#endif\n#ifdef S_IFIFO\n        { S_IFIFO, \"fifo\" },\n#endif\n#ifdef S_IFLNK\n        { S_IFLNK, \"symlink\" },\n#endif\n#ifdef S_IFDOOR /* Solaris weirdness */\n        { S_IFDOOR, \"door\" },\n#endif\n    };\n    int j, k;\n\n\nThe destination array is cleared, and then code fills in various elements based on values in the struct stat:\n\n    /* empty out the array */\n    clear_array(array);\n\n    /* fill in the array */\n    array_set(array, \"name\", make_const_string(name, strlen(name),\n                                               & tmp));\n    array_set_numeric(array, \"dev\", sbuf->st_dev);\n    array_set_numeric(array, \"ino\", sbuf->st_ino);\n    array_set_numeric(array, \"mode\", sbuf->st_mode);\n    array_set_numeric(array, \"nlink\", sbuf->st_nlink);\n    array_set_numeric(array, \"uid\", sbuf->st_uid);\n    array_set_numeric(array, \"gid\", sbuf->st_gid);\n    array_set_numeric(array, \"size\",", "doc_id": "15db7b38-2a9c-40f6-9f5f-80819271e42d", "embedding": null, "doc_hash": "a854df0c5b4ff172ae40b04c2607cd73236920848131ef6abbf113697b74ba01", "extra_info": null, "node_info": {"start": 3121, "end": 5641, "_node_type": "1"}, "relationships": {"1": "d931a88f-6e21-4528-8676-46fa98e95b9b", "2": "638ba149-6239-45ef-85a4-f3665b1c36ce", "3": "1fed45a6-83e6-4c77-a75e-ead7c91d4766"}}, "__type__": "1"}, "1fed45a6-83e6-4c77-a75e-ead7c91d4766": {"__data__": {"text": "   array_set_numeric(array, \"size\", sbuf->st_size);\n    array_set_numeric(array, \"blocks\", sbuf->st_blocks);\n    array_set_numeric(array, \"atime\", sbuf->st_atime);\n    array_set_numeric(array, \"mtime\", sbuf->st_mtime);\n    array_set_numeric(array, \"ctime\", sbuf->st_ctime);\n\n    /* for block and character devices, add rdev,\n       major and minor numbers */\n    if (S_ISBLK(sbuf->st_mode) || S_ISCHR(sbuf->st_mode)) {\n        array_set_numeric(array, \"rdev\", sbuf->st_rdev);\n        array_set_numeric(array, \"major\", major(sbuf->st_rdev));\n        array_set_numeric(array, \"minor\", minor(sbuf->st_rdev));\n    }\n\n\nThe latter part of the function makes selective additions to the destination array, depending upon the availability of certain\nmembers and/or the type of the file. It then returns zero, for success:\n\n#ifdef HAVE_STRUCT_STAT_ST_BLKSIZE\n    array_set_numeric(array, \"blksize\", sbuf->st_blksize);\n#endif\n\n\n\n\n    pmode = format_mode(sbuf->st_mode);\n    array_set(array, \"pmode\", make_const_string(pmode, strlen(pmode),\n                                                & tmp));\n\n    /* for symbolic links, add a linkval field */\n    if (S_ISLNK(sbuf->st_mode)) {\n        char *buf;\n        ssize_t linksize;\n\n        if ((buf = read_symlink(name, sbuf->st_size,\n                    & linksize)) != NULL)\n            array_set(array, \"linkval\",\n                      make_malloced_string(buf, linksize, & tmp));\n        else\n            warning(ext_id, _(\"stat: unable to read symbolic link `%s'\"),\n                    name);\n    }\n\n    /* add a type field */\n    type = \"unknown\";   /* shouldn't happen */\n    for (j = 0, k = sizeof(ftype_map)/sizeof(ftype_map[0]); j < k; j++) {\n        if ((sbuf->st_mode & S_IFMT) == ftype_map[j].mask) {\n            type = ftype_map[j].type;\n            break;\n        }\n    }\n\n    array_set(array, \"type\", make_const_string(type, strlen(type), & tmp));\n\n    return 0;\n}\n\n\nThe third argument to stat() was not discussed previously. This argument is optional. If present, it causes do_stat() to use the\nstat() system call instead of the lstat() system call. This is done by using a function pointer: statfunc. statfunc is initialized\nto point to lstat() (instead of stat()) to get the file information, in case the file is a symbolic link. However, if the third\nargument is included, statfunc is set to point to stat(),", "doc_id": "1fed45a6-83e6-4c77-a75e-ead7c91d4766", "embedding": null, "doc_hash": "8aa3c742427be66dfb47b78986d06e4bfe857832c18ce93646ce8c4e0305ef99", "extra_info": null, "node_info": {"start": 5657, "end": 8020, "_node_type": "1"}, "relationships": {"1": "d931a88f-6e21-4528-8676-46fa98e95b9b", "2": "15db7b38-2a9c-40f6-9f5f-80819271e42d", "3": "6309964c-c094-4688-9552-1ca97439e588"}}, "__type__": "1"}, "6309964c-c094-4688-9552-1ca97439e588": {"__data__": {"text": "However, if the third\nargument is included, statfunc is set to point to stat(), instead.\n\nHere is the do_stat() function, which starts with variable declarations and argument checking:\n\n/* do_stat --- provide a stat() function for gawk */\n\nstatic awk_value_t *\ndo_stat(int nargs, awk_value_t *result, struct awk_ext_func *unused)\n{\n    awk_value_t file_param, array_param;\n    char *name;\n    awk_array_t array;\n    int ret;\n    struct stat sbuf;\n    /* default is lstat() */\n    int (*statfunc)(const char *path, struct stat *sbuf) = lstat;\n\n    assert(result != NULL);\n\n\nThen comes the actual work. First, the function gets the arguments. Next, it gets the information for the file. If the called\nfunction (lstat() or stat()) returns an error, the code sets ERRNO and returns:\n\n    /* file is first arg, array to hold results is second */\n    if (   ! get_argument(0, AWK_STRING, & file_param)\n        || ! get_argument(1, AWK_ARRAY, & array_param)) {\n        warning(ext_id, _(\"stat: bad parameters\"));\n        return make_number(-1, result);\n    }\n\n    if (nargs == 3) {\n        statfunc = stat;\n    }\n\n    name = file_param.str_value.str;\n    array = array_param.array_cookie;\n\n    /* always empty out the array */\n    clear_array(array);\n\n    /* stat the file; if error, set ERRNO and return */\n    ret = statfunc(name, & sbuf);\n\n\n    if (ret < 0) {\n        update_ERRNO_int(errno);\n        return make_number(ret, result);\n    }\n\n\nThe tedious work is done by fill_stat_array(), shown earlier. When done, the function returns the result from fill_stat_array():\n\n    ret = fill_stat_array(name, array, & sbuf);\n\n    return make_number(ret, result);\n}\n\n\nFinally, it\u2019s necessary to provide the \u201cglue\u201d that loads the new function(s) into gawk.\n\nThe filefuncs extension also provides an fts() function, which we omit here (see File-Related Functions\n[Extension-Sample-File-Functions.html]). For its sake, there is an initialization function:\n\n/* init_filefuncs --- initialization routine */\n\nstatic awk_bool_t\ninit_filefuncs(void)\n{\n    \u2026\n}\n\n\nWe are almost done. We need an array of awk_ext_func_t structures for loading each function into gawk:\n\nstatic awk_ext_func_t func_table[] = {\n    { \"chdir\", do_chdir, 1, 1, awk_false, NULL },\n    { \"stat\",  do_stat, 3, 2, awk_false, NULL },\n    \u2026\n};\n\n\nEach extension must have a routine named dl_load() to load everything that needs to be loaded. It is simplest to use the\ndl_load_func() macro in gawkapi.h:\n\n/* define the dl_load() function using the boilerplate macro */\n\ndl_load_func(func_table, filefuncs, \"\")\n\n\nAnd that\u2019s it!\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(111)\n\nThis version is edited slightly for presentation. See extension/filefuncs.c in the gawk distribution for the complete version.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Integrating the Extensions [Using-Internal-File-Ops.html], Previous: Using chdir() and stat()\n[Internal-File-Description.html], Up: Example: Some File Functions", "doc_id": "6309964c-c094-4688-9552-1ca97439e588", "embedding": null, "doc_hash": "fac3a1ee777ea6782b894c2a2015cdd75677e3775827b47e9f1ed1fd043c3b57", "extra_info": null, "node_info": {"start": 7985, "end": 11138, "_node_type": "1"}, "relationships": {"1": "d931a88f-6e21-4528-8676-46fa98e95b9b", "2": "1fed45a6-83e6-4c77-a75e-ead7c91d4766", "3": "06d252cb-34c7-414c-a7c2-44364dc6c59c"}}, "__type__": "1"}, "06d252cb-34c7-414c-a7c2-44364dc6c59c": {"__data__": {"text": "stat()\n[Internal-File-Description.html], Up: Example: Some File Functions [Extension-Example.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "06d252cb-34c7-414c-a7c2-44364dc6c59c", "embedding": null, "doc_hash": "5a554763b136b63d87de7cc201ca13f51085f980ffa5d8d3877548b4dbad9251", "extra_info": null, "node_info": {"start": 11132, "end": 11289, "_node_type": "1"}, "relationships": {"1": "d931a88f-6e21-4528-8676-46fa98e95b9b", "2": "6309964c-c094-4688-9552-1ca97439e588"}}, "__type__": "1"}, "0438e4ff-9fa8-424d-a2cd-ffbcb192d005": {"__data__": {"text": "Next: Namespace Example [Namespace-Example.html], Previous: Namespace and Component Naming Rules [Naming-Rules.html], Up:\nNamespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.6 INTERNAL NAME MANAGEMENT\n\nFor backwards compatibility, all identifiers in the awk namespace are stored internally as unadorned identifiers (that is, without\na leading \u2018awk::\u2019). This is mainly relevant when using such identifiers as indices for SYMTAB, FUNCTAB, and\nPROCINFO[\"identifiers\"] (see Built-in Variables That Convey Information [Auto_002dset.html]), and for use in indirect function\ncalls (see Indirect Function Calls [Indirect-Calls.html]).\n\nIn program code, to refer to variables and functions in the awk namespace from another namespace, you must still use the \u2018awk::\u2019\nprefix. For example:\n\n@namespace \"awk\"          This is the default namespace\n\nBEGIN {\n    Title = \"My Report\"   Qualified name is awk::Title\n}\n\n@namespace \"report\"       Now in report namespace\n\nfunction compute()        This is really report::compute()\n{\n    print awk::Title      But would be SYMTAB[\"Title\"]\n    \u2026\n}\n", "doc_id": "0438e4ff-9fa8-424d-a2cd-ffbcb192d005", "embedding": null, "doc_hash": "ae37f70d4b8e10b1532c0f4c27c99f147afcdc5a719c37f0d190cfa27bbe9ce4", "extra_info": null, "node_info": {"start": 0, "end": 1258, "_node_type": "1"}, "relationships": {"1": "8ec6d3b2-0708-47ec-8a1e-cc2cebad9d30"}}, "__type__": "1"}, "d187bf28-9762-49aa-a240-3b0d67eca27e": {"__data__": {"text": "Next: Debugging awk Programs [Debugger.html], Previous: Advanced Features of gawk [Advanced-Features.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13 INTERNATIONALIZATION WITH GAWK\n\n> Moon\u2026 Gorgeous\u2026 MEDITATION!\n\n\u2014 Pretty Guardian Sailor Moon Eternal, The Movie\n\n> It probably sounded better in Japanese.\n\n\u2014 Malka Robbins\n\nOnce upon a time, computer makers wrote software that worked only in English. Eventually, hardware and software vendors noticed\nthat if their systems worked in the native languages of non-English-speaking countries, they were able to sell more systems. As a\nresult, internationalization and localization of programs and software systems became a common practice.\n\nFor many years, the ability to provide internationalization was largely restricted to programs written in C and C++. This chapter\ndescribes the underlying library gawk uses for internationalization, as well as how gawk makes internationalization features\navailable at the awk program level. Having internationalization available at the awk level gives software developers additional\nflexibility\u2014they are no longer forced to write in C or C++ when internationalization is a requirement.\n\n * Internationalization and Localization [I18N-and-L10N.html]\n * GNU gettext [Explaining-gettext.html]\n * Internationalizing awk Programs [Programmer-i18n.html]\n * Translating awk Programs [Translator-i18n.html]\n * A Simple Internationalization Example [I18N-Example.html]\n * gawk Can Speak Your Language [Gawk-I18N.html]\n * Summary [I18N-Summary.html]", "doc_id": "d187bf28-9762-49aa-a240-3b0d67eca27e", "embedding": null, "doc_hash": "0771543bfdff61342d022949e7bacdaa5f1ca73fce7beffa95756aa58e6c90dd", "extra_info": null, "node_info": {"start": 0, "end": 1718, "_node_type": "1"}, "relationships": {"1": "a86fdcff-98e5-425a-bf0e-0b2c58c08848"}}, "__type__": "1"}, "18b4f325-fca0-466e-ae67-1737070e9a43": {"__data__": {"text": "Previous: Regexp Operators in awk [Regexp-Operator-Details.html], Up: Regular Expression Operators [Regexp-Operators.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n3.3.2 SOME NOTES ON INTERVAL EXPRESSIONS\n\nInterval expressions were not traditionally available in awk. They were added as part of the POSIX standard to make awk and egrep\nconsistent with each other.\n\nInitially, because old programs may use \u2018{\u2019 and \u2018}\u2019 in regexp constants, gawk did not match interval expressions in regexps.\n\nHowever, beginning with version 4.0, gawk does match interval expressions by default. This is because compatibility with POSIX has\nbecome more important to most gawk users than compatibility with old programs.\n\nFor programs that use \u2018{\u2019 and \u2018}\u2019 in regexp constants, it is good practice to always escape them with a backslash. Then the regexp\nconstants are valid and work the way you want them to, using any version of awk.17\n\nWhen \u2018{\u2019 and \u2018}\u2019 appear in regexp constants in a way that cannot be interpreted as an interval expression (such as /q{a}/), then\nthey stand for themselves.\n\nAs mentioned, interval expressions were not traditionally available in awk. In March of 2019, BWK awk (finally) acquired them.\nStarting with version 5.2, gawk\u2019s --traditional option no longer disables interval expressions in regular expressions.\n\nPOSIX says that interval expressions containing repetition counts greater than 255 produce unspecified results.\n\nIn the manual for GNU grep, Paul Eggert notes the following:\n\n> Interval expressions may be implemented internally via repetition. For example, \u2018^(a|bc){2,4}$\u2019 might be implemented as\n> \u2018^(a|bc)(a|bc)((a|bc)(a|bc)?)?$\u2019. A large repetition count may exhaust memory or greatly slow matching. Even small counts can\n> cause problems if cascaded; for example, \u2018grep -E \".*{10,}{10,}{10,}{10,}{10,}\"\u2019 is likely to overflow a stack. Fortunately,\n> regular expressions like these are typically artificial, and cascaded repetitions do not conform to POSIX so cannot be used in\n> portable programs anyway.\n\nThis same caveat applies to gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(17)\n\nUse two backslashes if you\u2019re using a string constant with a regexp operator or function.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Regexp Operators in awk [Regexp-Operator-Details.html], Up: Regular Expression Operators [Regexp-Operators.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "18b4f325-fca0-466e-ae67-1737070e9a43", "embedding": null, "doc_hash": "c8d3ed10f314bf6f2587b5ec0b814e9ef42e9e9389ad4444e26801c58ebc27f7", "extra_info": null, "node_info": {"start": 0, "end": 2770, "_node_type": "1"}, "relationships": {"1": "2c6d9045-7bfb-4af6-8784-b44ef7dfdbc0"}}, "__type__": "1"}, "a41bf46e-5368-4517-917a-5ca82f78ad11": {"__data__": {"text": "Previous: When to Use awk [When.html], Up: Getting Started with awk [Getting-Started.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.9 SUMMARY\n\n * Programs in awk consist of pattern\u2013action pairs.\n * An action without a pattern always runs. The default action for a pattern without one is \u2018{ print $0 }\u2019.\n * Use either \u2018awk 'program' files\u2019 or \u2018awk -f program-file files\u2019 to run awk.\n * You may use the special \u2018#!\u2019 header line to create awk programs that are directly executable.\n * Comments in awk programs start with \u2018#\u2019 and continue to the end of the same line.\n * Be aware of quoting issues when writing awk programs as part of a larger shell script (or MS-Windows batch file).\n * You may use backslash continuation to continue a source line. Lines are automatically continued after a comma, open brace,\n   question mark, colon, \u2018||\u2019, \u2018&&\u2019, do, and else.", "doc_id": "a41bf46e-5368-4517-917a-5ca82f78ad11", "embedding": null, "doc_hash": "79817fba08af00f44c19b66ee52b6581c575e32a7351e212758f58073fda9d4c", "extra_info": null, "node_info": {"start": 0, "end": 1011, "_node_type": "1"}, "relationships": {"1": "97e1c587-8e14-4ef7-9d60-0f7f75f162b1"}}, "__type__": "1"}, "db4385a9-2d32-44dd-a819-41c1f4b11f14": {"__data__": {"text": "Next: Regular Expressions [Regexp.html], Previous: Getting Started with awk [Getting-Started.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2 RUNNING AWK AND GAWK\n\nThis chapter covers how to run awk, both POSIX-standard and gawk-specific command-line options, and what awk and gawk do with\nnonoption arguments. It then proceeds to cover how gawk searches for source files, reading standard input along with other files,\ngawk\u2019s environment variables, gawk\u2019s exit status, using include files, and obsolete and undocumented options and/or features.\n\nMany of the options and features described here are discussed in more detail later in the Web page; feel free to skip over things\nin this chapter that don\u2019t interest you right now.\n\n * Invoking awk [Command-Line.html]\n * Command-Line Options [Options.html]\n * Other Command-Line Arguments [Other-Arguments.html]\n * Naming Standard Input [Naming-Standard-Input.html]\n * The Environment Variables gawk Uses [Environment-Variables.html]\n * gawk\u2019s Exit Status [Exit-Status.html]\n * Including Other Files into Your Program [Include-Files.html]\n * Loading Dynamic Extensions into Your Program [Loading-Shared-Libraries.html]\n * Obsolete Options and/or Features [Obsolete.html]\n * Undocumented Options and Features [Undocumented.html]\n * Summary [Invoking-Summary.html]", "doc_id": "db4385a9-2d32-44dd-a819-41c1f4b11f14", "embedding": null, "doc_hash": "9e5f213ee93557b408a952534c7c9e3c6bfc3933298909be6667115e910553fc", "extra_info": null, "node_info": {"start": 0, "end": 1500, "_node_type": "1"}, "relationships": {"1": "3eef13e9-eb6c-4807-bf82-b336d290311e"}}, "__type__": "1"}, "c9969dcc-0cd3-4cbe-9a0b-2476d0a448c0": {"__data__": {"text": "Previous: Undocumented Options and Features [Undocumented.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.11 SUMMARY\n\n * gawk parses arguments on the command line, left to right, to determine if they should be treated as options or as non-option\n   arguments.\n * gawk recognizes several options which control its operation, as described in Command-Line Options [Options.html]. All options\n   begin with \u2018-\u2019.\n * Any argument that is not recognized as an option is treated as a non-option argument, even if it begins with \u2018-\u2019.\n   * However, when an option itself requires an argument, and the option is separated from that argument on the command line by at\n     least one space, the space is ignored, and the argument is considered to be related to the option. Thus, in the invocation,\n     \u2018gawk -F x\u2019, the \u2018x\u2019 is treated as belonging to the -F option, not as a separate non-option argument.\n * Once gawk finds a non-option argument, it stops looking for options. Therefore, all following arguments are also non-option\n   arguments, even if they resemble recognized options.\n * If no -e or -f options are present, gawk expects the program text to be in the first non-option argument.\n * All non-option arguments, except program text provided in the first non-option argument, are placed in ARGV as explained in\n   Using ARGC and ARGV [ARGC-and-ARGV.html], and are processed as described in Other Command-Line Arguments\n   [Other-Arguments.html]. Adjusting ARGC and ARGV affects how awk processes input.\n * The three standard options for all versions of awk are -f, -F, and -v. gawk supplies these and many others, as well as\n   corresponding GNU-style long options.\n * Nonoption command-line arguments are usually treated as file names, unless they have the form \u2018var=value\u2019, in which case they\n   are taken as variable assignments to be performed at that point in processing the input.\n * You can use a single minus sign (\u2018-\u2019) to refer to standard input on the command line. gawk also lets you use the special file\n   name /dev/stdin.\n * gawk pays attention to a number of environment variables. AWKPATH, AWKLIBPATH, and POSIXLY_CORRECT are the most important ones.\n * gawk\u2019s exit status conveys information to the program that invoked it. Use the exit statement from within an awk program to set\n   the exit status.\n * gawk allows you to include other awk source files into your program using the @include statement and/or the -i and -f\n   command-line options.\n * gawk allows you to load additional functions written in C or C++ using the @load statement and/or the -l option. (This advanced\n   feature is described later, in Writing Extensions for gawk [Dynamic-Extensions.html].)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Undocumented Options and Features [Undocumented.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c9969dcc-0cd3-4cbe-9a0b-2476d0a448c0", "embedding": null, "doc_hash": "d6e2b1141b0eb4e2f98decf7011f37896f9b22752ceab9c5a2fa4ea1bcf6da4e", "extra_info": null, "node_info": {"start": 0, "end": 3187, "_node_type": "1"}, "relationships": {"1": "3ee7e499-0038-42e4-87ed-0f4f26479bef"}}, "__type__": "1"}, "05173fa6-1961-48ec-b958-3755d2b06dfa": {"__data__": {"text": "Previous: Quoting Strings to Pass to the Shell [Shell-Quoting.html], Up: General Programming [General-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.10 CHECKING WHETHER A VALUE IS NUMERIC\n\nA frequent programming question is how to ascertain whether a value is numeric. This can be solved by using this example function\nisnumeric(), which employs the trick of converting a string value to user input by using the split() function:\n\n# isnumeric --- check whether a value is numeric\n\nfunction isnumeric(x,  f)\n{\n    switch (typeof(x)) {\n    case \"strnum\":\n    case \"number\":\n        return 1\n    case \"string\":\n        return (split(x, f, \" \") == 1) && (typeof(f[1]) == \"strnum\")\n    default:\n        return 0\n    }\n}\n\n\nPlease note that leading or trailing white space is disregarded in deciding whether a value is numeric or not, so if it matters to\nyou, you may want to add an additional check for that.\n\nTraditionally, it has been recommended to check for numeric values using the test \u2018x+0 == x\u2019. This function is superior in two\nways: it will not report that unassigned variables contain numeric values; and it recognizes string values with numeric contents\nwhere CONVFMT does not yield the original string. On the other hand, it uses the typeof() function (see Getting Type Information\n[Type-Functions.html]), which is specific to gawk.", "doc_id": "05173fa6-1961-48ec-b958-3755d2b06dfa", "embedding": null, "doc_hash": "03ce317a675d233e3788db8ed17f9b322cefc9b063e0f32c078b1b474f4a90e4", "extra_info": null, "node_info": {"start": 0, "end": 1505, "_node_type": "1"}, "relationships": {"1": "16362345-c3b1-4967-ad23-cf9c2f62bb42"}}, "__type__": "1"}, "d306aaa9-5ed9-464c-814c-13cb60cf9b05": {"__data__": {"text": "Next: Managing the Time of Day [Getlocaltime-Function.html], Previous: Translating Between Characters and Numbers\n[Ordinal-Functions.html], Up: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.6 MERGING AN ARRAY INTO A STRING\n\nWhen doing string processing, it is often useful to be able to join all the strings in an array into one long string. The\nfollowing function, join(), accomplishes this task. It is used later in several of the application programs (see Practical awk\nPrograms [Sample-Programs.html]).\n\nGood function design is important; this function needs to be general, but it should also have a reasonable default behavior. It is\ncalled with an array as well as the beginning and ending indices of the elements in the array to be merged. This assumes that the\narray indices are numeric\u2014a reasonable assumption, as the array was likely created with split() (see String-Manipulation Functions\n[String-Functions.html]):\n\n# join.awk --- join an array into a string\n\nfunction join(array, start, end, sep,    result, i)\n{\n    if (sep == \"\")\n       sep = \" \"\n    else if (sep == SUBSEP) # magic value\n       sep = \"\"\n    result = array[start]\n    for (i = start + 1; i <= end; i++)\n        result = result sep array[i]\n    return result\n}\n\n\nAn optional additional argument is the separator to use when joining the strings back together. If the caller supplies a nonempty\nvalue, join() uses it; if it is not supplied, it has a null value. In this case, join() uses a single space as a default separator\nfor the strings. If the value is equal to SUBSEP, then join() joins the strings with no separator between them. SUBSEP serves as a\n\u201cmagic\u201d value to indicate that there should be no separation between the component strings.70\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(70)\n\nIt would be nice if awk had an assignment operator for concatenation. The lack of an explicit operator for concatenation makes\nstring operations more difficult than they really need to be.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Managing the Time of Day [Getlocaltime-Function.html], Previous: Translating Between Characters and Numbers\n[Ordinal-Functions.html], Up: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "d306aaa9-5ed9-464c-814c-13cb60cf9b05", "embedding": null, "doc_hash": "4842c0840b3f20228e97e526357cad4ae80e0369bb6d8b6f777c7157de056376", "extra_info": null, "node_info": {"start": 0, "end": 2644, "_node_type": "1"}, "relationships": {"1": "d6cacf12-9c6c-418c-b193-276197f63716"}}, "__type__": "1"}, "02134d43-c540-429f-af7f-737ab56f8824": {"__data__": {"text": "Next: Generating Word-Usage Counts [Word-Sorting.html], Previous: Transliterating Characters [Translate-Program.html], Up: A Grab\nBag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.4 PRINTING MAILING LABELS\n\nHere is a \u201creal-world\u201d77 program. This script reads lists of names and addresses and generates mailing labels. Each page of labels\nhas 20 labels on it, two across and 10 down. The addresses are guaranteed to be no more than five lines of data. Each address is\nseparated from the next by a blank line.\n\nThe basic idea is to read 20 labels\u2019 worth of data. Each line of each label is stored in the line array. The single rule takes\ncare of filling the line array and printing the page when 20 labels have been read.\n\nThe BEGIN rule simply sets RS to the empty string, so that awk splits records at blank lines (see How Input Is Split into Records\n[Records.html]). It sets MAXLINES to 100, because 100 is the maximum number of lines on the page (20 * 5 = 100).\n\nMost of the work is done in the printpage() function. The label lines are stored sequentially in the line array. But they have to\nprint horizontally: line[1] next to line[6], line[2] next to line[7], and so on. Two loops accomplish this. The outer loop,\ncontrolled by i, steps through every 10 lines of data; this is each row of labels. The inner loop, controlled by j, goes through\nthe lines within the row. As j goes from 0 to 4, \u2018i+j\u2019 is the jth line in the row, and \u2018i+j+5\u2019 is the entry next to it. The output\nends up looking something like this:\n\nline 1          line 6\nline 2          line 7\nline 3          line 8\nline 4          line 9\nline 5          line 10\n\u2026\n\n\nThe printf format string \u2018%-41s\u2019 left-aligns the data and prints it within a fixed-width field.\n\nAs a final note, an extra blank line is printed at lines 21 and 61, to keep the output lined up on the labels. This is dependent\non the particular brand of labels in use when the program was written. You will also note that there are two blank lines at the\ntop and two blank lines at the bottom.\n\nThe END rule arranges to flush the final page of labels; there may not have been an even multiple of 20 labels in the data:\n\n# labels.awk --- print mailing labels\n\n# Each label is 5 lines of data that may have blank lines.\n# The label sheets have 2 blank lines at the top and 2 at\n# the bottom.\n\nBEGIN    { RS = \"\" ; MAXLINES = 100 }\n\nfunction printpage(    i, j)\n{\n    if (Nlines <= 0)\n        return\n\n    printf \"\\n\\n\"        # header\n\n    for (i = 1; i <= Nlines; i += 10) {\n        if (i == 21 || i == 61)\n            print \"\"\n        for (j = 0; j < 5; j++) {\n            if (i + j > MAXLINES)\n                break\n            printf \"   %-41s %s\\n\", line[i+j], line[i+j+5]\n        }\n        print \"\"\n    }\n\n    printf \"\\n\\n\"        # footer\n\n    delete line\n}\n\n# main rule\n{\n    if (Count >= 20) {\n       ", "doc_id": "02134d43-c540-429f-af7f-737ab56f8824", "embedding": null, "doc_hash": "42fad09637f31c36d63ca25fd0fb4a043f6964c40760cff27fac8bb37a582cb6", "extra_info": null, "node_info": {"start": 0, "end": 3040, "_node_type": "1"}, "relationships": {"1": "1b179977-1acb-4a75-98d6-e25b919d590b", "3": "2fce8277-cbc2-47e1-9200-b9c35ef6170d"}}, "__type__": "1"}, "2fce8277-cbc2-47e1-9200-b9c35ef6170d": {"__data__": {"text": "   if (Count >= 20) {\n        printpage()\n        Count = 0\n        Nlines = 0\n    }\n    n = split($0, a, \"\\n\")\n    for (i = 1; i <= n; i++)\n        line[++Nlines] = a[i]\n    for (; i <= 5; i++)\n        line[++Nlines] = \"\"\n    Count++\n}\n\nEND {\n    printpage()\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(77)\n\n\u201cReal world\u201d is defined as \u201ca program actually used to get something done.\u201d\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Generating Word-Usage Counts [Word-Sorting.html], Previous: Transliterating Characters [Translate-Program.html], Up: A Grab\nBag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2fce8277-cbc2-47e1-9200-b9c35ef6170d", "embedding": null, "doc_hash": "b4c1927a4b3db3eb8c475b458af0e6ec7418442831e62ab3711145967f7ce414", "extra_info": null, "node_info": {"start": 3011, "end": 3871, "_node_type": "1"}, "relationships": {"1": "1b179977-1acb-4a75-98d6-e25b919d590b", "2": "02134d43-c540-429f-af7f-737ab56f8824"}}, "__type__": "1"}, "c88dcc84-1fc3-491e-a318-b3e3a730c1ff": {"__data__": {"text": "Next: Installing gawk [Installation.html], Previous: Writing Extensions for gawk [Dynamic-Extensions.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nPART IV:\nAPPENDICES\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n * The Evolution of the awk Language\n * Installing gawk [Installation.html]\n * Implementation Notes [Notes.html]\n * Basic Programming Concepts [Basic-Concepts.html]\n * Glossary [Glossary.html]\n * GNU General Public License [Copying.html]\n * GNU Free Documentation License [GNU-Free-Documentation-License.html]\n * Index [Index.html]\n\n\nAPPENDIX A THE EVOLUTION OF THE AWK LANGUAGE\n\nThis Web page describes the GNU implementation of awk, which follows the POSIX specification. Many longtime awk users learned awk\nprogramming with the original awk implementation in Version 7 Unix. (This implementation was the basis for awk in Berkeley Unix,\nthrough 4.3-Reno. Subsequent versions of Berkeley Unix, and, for a while, some systems derived from 4.4BSD-Lite, used various\nversions of gawk for their awk.) This chapter briefly describes the evolution of the awk language, with cross-references to other\nparts of the Web page where you can find more information.\n\n * Major Changes Between V7 and SVR3.1 [V7_002fSVR3_002e1.html]\n * Changes Between SVR3.1 and SVR4 [SVR4.html]\n * Changes Between SVR4 and POSIX awk [POSIX.html]\n * Extensions in Brian Kernighan\u2019s awk [BTL.html]\n * Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html]\n * History of gawk Features [Feature-History.html]\n * Common Extensions Summary [Common-Extensions.html]\n * Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html]\n * Major Contributors to gawk [Contributors.html]\n * Summary [History-summary.html]", "doc_id": "c88dcc84-1fc3-491e-a318-b3e3a730c1ff", "embedding": null, "doc_hash": "9f34ee717c30bc78259c832d593733a7313250fc9d885536feb4509faf6b87bc", "extra_info": null, "node_info": {"start": 0, "end": 1980, "_node_type": "1"}, "relationships": {"1": "948f44bb-9dca-4a2e-a9cb-441ab6dbf7a4"}}, "__type__": "1"}, "7d43579c-faad-4b25-b482-37199e6e0fb6": {"__data__": {"text": "Next: Using Dynamic Regexps [Computed-Regexps.html], Previous: Using Bracket Expressions [Bracket-Expressions.html], Up: Regular\nExpressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.5 HOW MUCH TEXT MATCHES?\n\nConsider the following:\n\necho aaaabcd | awk '{ sub(/a+/, \"<A>\"); print }'\n\n\nThis example uses the sub() function to make a change to the input record. (sub() replaces the first instance of any text matched\nby the first argument with the string provided as the second argument; see String-Manipulation Functions [String-Functions.html].)\nHere, the regexp /a+/ indicates \u201cone or more \u2018a\u2019 characters,\u201d and the replacement text is \u2018<A>\u2019.\n\nThe input contains four \u2018a\u2019 characters. awk (and POSIX) regular expressions always match the leftmost, longest sequence of input\ncharacters that can match. Thus, all four \u2018a\u2019 characters are replaced with \u2018<A>\u2019 in this example:\n\n$ echo aaaabcd | awk '{ sub(/a+/, \"<A>\"); print }'\n-| <A>bcd\n\n\nFor simple match/no-match tests, this is not so important. But when doing text matching and substitutions with the match(), sub(),\ngsub(), and gensub() functions, it is very important. Understanding this principle is also important for regexp-based record and\nfield splitting (see How Input Is Split into Records [Records.html], and also see Specifying How Fields Are Separated\n[Field-Separators.html]).", "doc_id": "7d43579c-faad-4b25-b482-37199e6e0fb6", "embedding": null, "doc_hash": "cb4ff3af1b5a93e61bd276931a1cab4e05a84f73fcf54d2d2c6732754bd05957", "extra_info": null, "node_info": {"start": 0, "end": 1505, "_node_type": "1"}, "relationships": {"1": "c0396be3-5c9c-48cb-9a6d-232504d68760"}}, "__type__": "1"}, "79f22da6-55bd-4779-97e8-149b6c62b39d": {"__data__": {"text": "Previous: Summary [Library-Functions-Summary.html], Up: A Library of awk Functions [Library-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.9 EXERCISES\n\n 1. In Checking for Zero-Length Files [Empty-Files.html], we presented the zerofile.awk program, which made use of gawk\u2019s ARGIND\n    variable. Can this problem be solved without relying on ARGIND? If so, how?\n 2. As a related challenge, revise that code to handle the case where an intervening value in ARGV is a variable assignment.", "doc_id": "79f22da6-55bd-4779-97e8-149b6c62b39d", "embedding": null, "doc_hash": "afb21cf33fd67f891971a1025e6fd12cd7eb1c43ad090af334a134b80dd95e13", "extra_info": null, "node_info": {"start": 0, "end": 650, "_node_type": "1"}, "relationships": {"1": "6cd7999c-a22f-4b66-934e-3a55df869ad6"}}, "__type__": "1"}, "18c193f3-15c9-4efa-9f45-94578bb2236a": {"__data__": {"text": "Next: Exercises [Library-Exercises.html], Previous: Traversing Arrays of Arrays [Walking-Arrays.html], Up: A Library of awk\nFunctions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.8 SUMMARY\n\n * Reading programs is an excellent way to learn Good Programming. The functions and programs provided in this chapter and the\n   next are intended to serve that purpose.\n * When writing general-purpose library functions, put some thought into how to name any global variables so that they won\u2019t\n   conflict with variables from a user\u2019s program.\n * The functions presented here fit into the following categories: General problems\n   \n   Number-to-string conversion, testing assertions, rounding, random number generation, converting characters to numbers, joining\n   strings, getting easily usable time-of-day information, and reading a whole file in one shot\n   \n   Managing data files\n   \n   Noting data file boundaries, rereading the current file, checking for readable files, checking for zero-length files, and\n   treating assignments as file names\n   \n   Processing command-line options\n   \n   An awk version of the standard C getopt() function\n   \n   Reading the user and group databases\n   \n   Two sets of routines that parallel the C library versions\n   \n   Traversing arrays of arrays\n   \n   Two functions that traverse an array of arrays to any depth", "doc_id": "18c193f3-15c9-4efa-9f45-94578bb2236a", "embedding": null, "doc_hash": "64ec37805b5149674bef56ecec979fce6120ddc34e7a3f3bd882e8b81ab4cb0a", "extra_info": null, "node_info": {"start": 0, "end": 1527, "_node_type": "1"}, "relationships": {"1": "a2470cfa-30cc-4fbe-8229-568ba6b1fa4c"}}, "__type__": "1"}, "181773aa-2718-4e08-8e7e-5c3f15e0cdae": {"__data__": {"text": "Next: Practical awk Programs [Sample-Programs.html], Previous: Functions [Functions.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nPART II:\nPROBLEM SOLVING WITH AWK\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n * A Library of awk Functions\n * Practical awk Programs [Sample-Programs.html]\n\n\n10 A LIBRARY OF AWK FUNCTIONS\n\nUser-Defined Functions [User_002ddefined.html] describes how to write your own awk functions. Writing functions is important,\nbecause it allows you to encapsulate algorithms and program tasks in a single place. It simplifies programming, making program\ndevelopment more manageable and making programs more readable.\n\nIn their seminal 1976 book, Software Tools,64 Brian Kernighan and P.J. Plauger wrote:\n\n> Good Programming is not learned from generalities, but by seeing how significant programs can be made clean, easy to read, easy\n> to maintain and modify, human-engineered, efficient and reliable, by the application of common sense and good programming\n> practices. Careful study and imitation of good programs leads to better writing.\n\nIn fact, they felt this idea was so important that they placed this statement on the cover of their book. Because we believe\nstrongly that their statement is correct, this chapter and Practical awk Programs [Sample-Programs.html], provide a good-sized\nbody of code for you to read and, we hope, to learn from.\n\nThis chapter presents a library of useful awk functions. Many of the sample programs presented later in this Web page use these\nfunctions. The functions are presented here in a progression from simple to complex.\n\nExtracting Programs from Texinfo Source Files [Extract-Program.html] presents a program that you can use to extract the source\ncode for these example library functions and programs from the Texinfo source for this Web page. (This has already been done as\npart of the gawk distribution.)\n\nIf you have written one or more useful, general-purpose awk functions and would like to contribute them to the awk user community,\nsee How to Contribute [How-To-Contribute.html], for more information.\n\nThe programs in this chapter and in Practical awk Programs [Sample-Programs.html], freely use gawk-specific features. Rewriting\nthese programs for different implementations of awk is pretty straightforward:\n\n * Diagnostic error messages are sent to /dev/stderr. Use \u2018| \"cat 1>&2\"\u2019 instead of \u2018> \"/dev/stderr\"\u2019 if your system does not have\n   a /dev/stderr, or if you cannot use gawk.\n * Finally, some of the programs choose to ignore upper- and lowercase distinctions in their input. They do so by assigning one to\n   IGNORECASE. You can achieve almost the same effect65 by adding the following rule to the beginning of the program:\n   \n   # ignore case\n   { $0 = tolower($0) }\n   \n   \n   Also, verify that all regexp and string constants used in comparisons use only lowercase letters.\n\n * Naming Library Function Global Variables [Library-Names.html]\n * General Programming [General-Functions.html]\n * Data file Management [Data-File-Management.html]\n * Processing Command-Line Options [Getopt-Function.html]\n * Reading the User Database [Passwd-Functions.html]\n * Reading the Group Database [Group-Functions.html]\n * Traversing Arrays of Arrays [Walking-Arrays.html]\n * Summary [Library-Functions-Summary.html]\n * Exercises [Library-Exercises.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(64)\n\nSadly, over 35 years later, many of the lessons taught by this book have yet to be learned by a vast number of practicing\nprogrammers.\n\n(65)\n\nThe effects are not identical. Output of the transformed record will be in all lowercase, while IGNORECASE preserves the original\ncontents of", "doc_id": "181773aa-2718-4e08-8e7e-5c3f15e0cdae", "embedding": null, "doc_hash": "078108f5fb924327875b346d0679cd87b9fd25232f2b52e51fcbf86ad579a19e", "extra_info": null, "node_info": {"start": 0, "end": 4043, "_node_type": "1"}, "relationships": {"1": "6d8e9914-dbe9-4712-bc91-b963609ab752", "3": "5d35c348-c827-4d40-9a89-373d23e5a727"}}, "__type__": "1"}, "5d35c348-c827-4d40-9a89-373d23e5a727": {"__data__": {"text": "will be in all lowercase, while IGNORECASE preserves the original\ncontents of the input record.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Practical awk Programs [Sample-Programs.html], Previous: Functions [Functions.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "5d35c348-c827-4d40-9a89-373d23e5a727", "embedding": null, "doc_hash": "6b3e1a6430cd0e7a3512a978f29b3d99de6803fc939d5c863effcf51ad7c2a63", "extra_info": null, "node_info": {"start": 3966, "end": 4382, "_node_type": "1"}, "relationships": {"1": "6d8e9914-dbe9-4712-bc91-b963609ab752", "2": "181773aa-2718-4e08-8e7e-5c3f15e0cdae"}}, "__type__": "1"}, "b60fc15d-5062-4866-ac15-c262ef81d3b8": {"__data__": {"text": "Next: General Programming [General-Functions.html], Up: A Library of awk Functions [Library-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.1 NAMING LIBRARY FUNCTION GLOBAL VARIABLES\n\nDue to the way the awk language evolved, variables are either global (usable by the entire program) or local (usable just by a\nspecific function). There is no intermediate state analogous to static variables in C.\n\nLibrary functions often need to have global variables that they can use to preserve state information between calls to the\nfunction\u2014for example, getopt()\u2019s variable _opti (see Processing Command-Line Options [Getopt-Function.html]). Such variables are\ncalled private, as the only functions that need to use them are the ones in the library.\n\nWhen writing a library function, you should try to choose names for your private variables that will not conflict with any\nvariables used by either another library function or a user\u2019s main program. For example, a name like i or j is not a good choice,\nbecause user programs often use variable names like these for their own purposes.\n\nThe example programs shown in this chapter all start the names of their private variables with an underscore (\u2018_\u2019). Users\ngenerally don\u2019t use leading underscores in their variable names, so this convention immediately decreases the chances that the\nvariable names will be accidentally shared with the user\u2019s program.\n\nIn addition, several of the library functions use a prefix that helps indicate what function or set of functions use the\nvariables\u2014for example, _pw_byname() in the user database routines (see Reading the User Database [Passwd-Functions.html]). This\nconvention is recommended, as it even further decreases the chance of inadvertent conflict among variable names. Note that this\nconvention is used equally well for variable names and for private function names.66\n\nAs a final note on variable naming, if a function makes global variables available for use by a main program, it is a good\nconvention to start those variables\u2019 names with a capital letter\u2014for example, getopt()\u2019s Opterr and Optind variables (see\nProcessing Command-Line Options [Getopt-Function.html]). The leading capital letter indicates that it is global, while the fact\nthat the variable name is not all capital letters indicates that the variable is not one of awk\u2019s predefined variables, such as\nFS.\n\nIt is also important that all variables in library functions that do not need to save state are, in fact, declared local.67 If\nthis is not done, the variables could accidentally be used in the user\u2019s program, leading to bugs that are very difficult to track\ndown:\n\nfunction lib_func(x, y,    l1, l2)\n{\n    \u2026\n    # some_var should be local but by oversight is not\n    use variable some_var\n    \u2026\n}\n\n\nA different convention, common in the Tcl community, is to use a single associative array to hold the values needed by the library\nfunction(s), or \u201cpackage.\u201d This significantly decreases the number of actual global names in use. For example, the functions\ndescribed in Reading the User Database [Passwd-Functions.html] might have used array elements PW_data[\"inited\"], PW_data[\"total\"],\nPW_data[\"count\"], and PW_data[\"awklib\"], instead of _pw_inited, _pw_awklib, _pw_total, and _pw_count.\n\nThe conventions presented in this section are exactly that: conventions. You are not required to write your programs this way\u2014we\nmerely recommend that you do so.\n\nBeginning with version 5.0, gawk provides a powerful mechanism for solving the problems described in this section: namespaces.\nNamespaces and their use are described in detail in Namespaces in gawk [Namespaces.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(66)\n\nAlthough all the library routines could have been rewritten to use this convention, this was not done, in order to show how", "doc_id": "b60fc15d-5062-4866-ac15-c262ef81d3b8", "embedding": null, "doc_hash": "09390fd912da221736d67f8312e5028bee6ddd986af8702ecac16b35ab341d87", "extra_info": null, "node_info": {"start": 0, "end": 4070, "_node_type": "1"}, "relationships": {"1": "2aac128c-fe5b-4ccd-98b9-c78f40dec500", "3": "6c98a2c2-e6c6-43cf-9b7f-8f49f3088572"}}, "__type__": "1"}, "6c98a2c2-e6c6-43cf-9b7f-8f49f3088572": {"__data__": {"text": "have been rewritten to use this convention, this was not done, in order to show how our\nown awk programming style has evolved and to provide some basis for this discussion.\n\n(67)\n\ngawk\u2019s --dump-variables command-line option is useful for verifying this.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: General Programming [General-Functions.html], Up: A Library of awk Functions [Library-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6c98a2c2-e6c6-43cf-9b7f-8f49f3088572", "embedding": null, "doc_hash": "c7348e6d83a299df14b9882e9115bd0fdf610a045c27795df13e6b6405f89dd2", "extra_info": null, "node_info": {"start": 3987, "end": 4540, "_node_type": "1"}, "relationships": {"1": "2aac128c-fe5b-4ccd-98b9-c78f40dec500", "2": "b60fc15d-5062-4866-ac15-c262ef81d3b8"}}, "__type__": "1"}, "23fa3ffc-6239-4eb9-bfa2-dfa12da8d59a": {"__data__": {"text": "Next: Summary [Debugging-Summary.html], Previous: Readline Support [Readline-Support.html], Up: Debugging awk Programs\n[Debugger.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14.5 LIMITATIONS\n\nWe hope you find the gawk debugger useful and enjoyable to work with, but as with any program, especially in its early releases,\nit still has some limitations. A few that it\u2019s worth being aware of are:\n\n * At this point, the debugger does not give a detailed explanation of what you did wrong when you type in something it doesn\u2019t\n   like. Rather, it just responds \u2018syntax error\u2019. When you do figure out what your mistake was, though, you\u2019ll feel like a real\n   guru.\n * If you perused the dump of opcodes in Miscellaneous Commands [Miscellaneous-Debugger-Commands.html] (or if you are already\n   familiar with gawk internals), you will realize that much of the internal manipulation of data in gawk, as in many\n   interpreters, is done on a stack. Op_push, Op_pop, and the like are the \u201cbread and butter\u201d of most gawk code.\n   \n   Unfortunately, as of now, the gawk debugger does not allow you to examine the stack\u2019s contents. That is, the intermediate\n   results of expression evaluation are on the stack, but cannot be printed. Rather, only variables that are defined in the\n   program can be printed. Of course, a workaround for this is to use more explicit variables at the debugging stage and then\n   change back to obscure, perhaps more optimal code later.\n\n * There is no way to look \u201cinside\u201d the process of compiling regular expressions to see if you got it right. As an awk programmer,\n   you are expected to know the meaning of /[^[:alnum:][:blank:]]/.\n * The gawk debugger is designed to be used by running a program (with all its parameters) on the command line, as described in\n   How to Start the Debugger [Debugger-Invocation.html]. There is no way (as of now) to attach or \u201cbreak into\u201d a running program.\n   This seems reasonable for a language that is used mainly for quickly executing, short programs.\n * The gawk debugger only accepts source code supplied with the -f option. If you have a shell script that provides an awk program\n   as a command line parameter, and you need to use the debugger, you can write the script to a temporary file, and use that as\n   the program, with the -f option. This might look like this:\n   \n   cat << \\EOF > /tmp/script.$$\n   \u2026                                  Your program here\n   EOF\n   gawk -D -f /tmp/script.$$\n   rm /tmp/script.$$\n   \n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Debugging-Summary.html], Previous: Readline Support [Readline-Support.html], Up: Debugging awk Programs\n[Debugger.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "23fa3ffc-6239-4eb9-bfa2-dfa12da8d59a", "embedding": null, "doc_hash": "7fdec655d3e77165cce13657266988e05f247f32dac7eddc4d18485d8f2b83a1", "extra_info": null, "node_info": {"start": 0, "end": 2968, "_node_type": "1"}, "relationships": {"1": "6fc356bf-bb76-4f35-b3fe-51ec2cc8608b"}}, "__type__": "1"}, "37fa4639-8e15-4ce1-b839-358c7d68cca8": {"__data__": {"text": "Next: Readline Support [Readline-Support.html], Previous: Sample gawk Debugging Session [Sample-Debugging-Session.html], Up:\nDebugging awk Programs [Debugger.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14.3 MAIN DEBUGGER COMMANDS\n\nThe gawk debugger command set can be divided into the following categories:\n\n * Breakpoint control\n * Execution control\n * Viewing and changing data\n * Working with the stack\n * Getting information\n * Miscellaneous\n\nEach of these are discussed in the following subsections. In the following descriptions, commands that may be abbreviated show the\nabbreviation on a second description line. A debugger command name may also be truncated if that partial name is unambiguous. The\ndebugger has the built-in capability to automatically repeat the previous command just by hitting Enter. This works for the\ncommands list, next, nexti, step, stepi, and continue executed without any argument.\n\n * Control of Breakpoints [Breakpoint-Control.html]\n * Control of Execution [Debugger-Execution-Control.html]\n * Viewing and Changing Data [Viewing-And-Changing-Data.html]\n * Working with the Stack [Execution-Stack.html]\n * Obtaining Information About the Program and the Debugger State [Debugger-Info.html]\n * Miscellaneous Commands [Miscellaneous-Debugger-Commands.html]", "doc_id": "37fa4639-8e15-4ce1-b839-358c7d68cca8", "embedding": null, "doc_hash": "9d6bfff230544efb7bbdffbb2d92b1f75a9cacc6f46be6fb7ad7056ec2cffff2", "extra_info": null, "node_info": {"start": 0, "end": 1445, "_node_type": "1"}, "relationships": {"1": "33ed1d90-38d5-4f4c-98fd-9544e23ad651"}}, "__type__": "1"}, "71664224-91e2-4536-8190-64a601c386b3": {"__data__": {"text": "Next: Obsolete Options and/or Features [Obsolete.html], Previous: Including Other Files into Your Program [Include-Files.html],\nUp: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.8 LOADING DYNAMIC EXTENSIONS INTO YOUR PROGRAM\n\nThis section describes a feature that is specific to gawk.\n\nThe @load keyword can be used to read external awk extensions (stored as system shared libraries). This allows you to link in\ncompiled code that may offer superior performance and/or give you access to extended capabilities not supported by the awk\nlanguage. The AWKLIBPATH variable is used to search for the extension. Using @load is completely equivalent to using the -l\ncommand-line option.\n\nIf the extension is not initially found in AWKLIBPATH, another search is conducted after appending the platform\u2019s default shared\nlibrary suffix to the file name. For example, on GNU/Linux systems, the suffix \u2018.so\u2019 is used:\n\n$ gawk '@load \"ordchr\"; BEGIN {print chr(65)}'\n-| A\n\n\nThis is equivalent to the following example:\n\n$ gawk -lordchr 'BEGIN {print chr(65)}'\n-| A\n\n\nFor command-line usage, the -l option is more convenient, but @load is useful for embedding inside an awk source file that\nrequires access to an extension.\n\nWriting Extensions for gawk [Dynamic-Extensions.html], describes how to write extensions (in C or C++) that can be loaded with\neither @load or the -l option. It also describes the ordchr extension.", "doc_id": "71664224-91e2-4536-8190-64a601c386b3", "embedding": null, "doc_hash": "25faa7d5b8878f0a9593ccfc24c566f2d6ba123ebead42f0c0f001fdb3b498c9", "extra_info": null, "node_info": {"start": 0, "end": 1597, "_node_type": "1"}, "relationships": {"1": "b2891faa-4c8d-4ea7-b703-205e30eba003"}}, "__type__": "1"}, "bb30c329-ff71-4344-96da-13d3fe073dfb": {"__data__": {"text": "Previous: How awk Converts Between Strings and Numbers [Strings-And-Numbers.html], Up: Conversion of Strings and Numbers\n[Conversion.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.4.2 LOCALES CAN INFLUENCE CONVERSION\n\nWhere you are can matter when it comes to converting between numbers and strings. The local character set and language\u2014the\nlocale\u2014can affect numeric formats. In particular, for awk programs, it affects the decimal point character and the\nthousands-separator character. The \"C\" locale, and most English-language locales, use the period character (\u2018.\u2019) as the decimal\npoint and don\u2019t have a thousands separator. However, many (if not most) European and non-English locales use the comma (\u2018,\u2019) as\nthe decimal point character. European locales often use either a space or a period as the thousands separator, if they have one.\n\nThe POSIX standard says that awk always uses the period as the decimal point when reading the awk program source code, and for\ncommand-line variable assignments (see Other Command-Line Arguments [Other-Arguments.html]). However, when interpreting input\ndata, for print and printf output, and for number-to-string conversion, the local decimal point character is used. (d.c.) In all\ncases, numbers in source code and in input data cannot have a thousands separator. Here are some examples indicating the\ndifference in behavior, on a GNU/Linux system:\n\n$ export POSIXLY_CORRECT=1                        Force POSIX behavior\n$ gawk 'BEGIN { printf \"%g\\n\", 3.1415927 }'\n-| 3.14159\n$ LC_ALL=en_DK.utf-8 gawk 'BEGIN { printf \"%g\\n\", 3.1415927 }'\n-| 3,14159\n$ echo 4,321 | gawk '{ print $1 + 1 }'\n-| 5\n$ echo 4,321 | LC_ALL=en_DK.utf-8 gawk '{ print $1 + 1 }'\n-| 5,321\n\n\nThe en_DK.utf-8 locale is for English in Denmark, where the comma acts as the decimal point separator. In the normal \"C\" locale,\ngawk treats \u20184,321\u2019 as 4, while in the Danish locale, it\u2019s treated as the full number including the fractional part, 4.321.\n\nSome earlier versions of gawk fully complied with this aspect of the standard. However, many users in non-English locales\ncomplained about this behavior, because their data used a period as the decimal point, so the default behavior was restored to use\na period as the decimal point character. You can use the --use-lc-numeric option (see Command-Line Options [Options.html]) to\nforce gawk to use the locale\u2019s decimal point character. (gawk also uses the locale\u2019s decimal point character when in POSIX mode,\neither via --posix or the POSIXLY_CORRECT environment variable, as shown previously.)\n\nTable 6.1 describes the cases in which the locale\u2019s decimal point character is used and when a period is used. Some of these\nfeatures have not been described yet.\n\nFeatureDefault--posix or --use-lc-numeric %'gUse localeUse locale %gUse periodUse locale InputUse periodUse locale strtonum()Use\nperiodUse locale\n\nTable 6.1: Locale decimal point versus a period\n\nFinally, modern-day formal standards and the IEEE standard floating-point representation can have an unusual but important effect\non the way gawk converts some special string values to numbers. The details are presented in Standards Versus Existing Practice\n[POSIX-Floating-Point-Problems.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: How awk Converts Between Strings and Numbers [Strings-And-Numbers.html], Up: Conversion of Strings and Numbers\n[Conversion.html] \u00a0 [Contents [index.html#SEC_Contents]][Index", "doc_id": "bb30c329-ff71-4344-96da-13d3fe073dfb", "embedding": null, "doc_hash": "706a577a823bddea98f76b2b590e0a033dcea62105a15a60194712af7a530c7e", "extra_info": null, "node_info": {"start": 0, "end": 3682, "_node_type": "1"}, "relationships": {"1": "ae018603-54e0-476f-96d9-6a1f9e02e1b4", "3": "066a9cfd-e1af-448e-a48d-06be18cf3882"}}, "__type__": "1"}, "066a9cfd-e1af-448e-a48d-06be18cf3882": {"__data__": {"text": "\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "066a9cfd-e1af-448e-a48d-06be18cf3882", "embedding": null, "doc_hash": "b6a3076ff069d56e788ce6ba29ceb58e88335ad01c38b57cc3815840cbe72c3b", "extra_info": null, "node_info": {"start": 3638, "end": 3696, "_node_type": "1"}, "relationships": {"1": "ae018603-54e0-476f-96d9-6a1f9e02e1b4", "2": "bb30c329-ff71-4344-96da-13d3fe073dfb"}}, "__type__": "1"}, "eeb008ed-da15-4129-973f-233b52bb579a": {"__data__": {"text": "Next: Summary [Expressions-Summary.html], Previous: Operator Precedence (How Operators Nest) [Precedence.html], Up: Expressions\n[Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.6 WHERE YOU ARE MAKES A DIFFERENCE\n\nModern systems support the notion of locales: a way to tell the system about the local character set and language. The ISO C\nstandard defines a default \"C\" locale, which is an environment that is typical of what many C programmers are used to.\n\nOnce upon a time, the locale setting used to affect regexp matching, but this is no longer true (see Regexp Ranges and Locales: A\nLong Sad Story [Ranges-and-Locales.html]).\n\nLocales can affect record splitting. For the normal case of \u2018RS = \"\\n\"\u2019, the locale is largely irrelevant. For other\nsingle-character record separators, setting \u2018LC_ALL=C\u2019 in the environment will give you much better performance when reading\nrecords. Otherwise, gawk has to make several function calls, per input character, to find the record terminator.\n\nLocales can affect how dates and times are formatted (see Time Functions [Time-Functions.html]). For example, a common way to\nabbreviate the date September 4, 2015, in the United States is \u201c9/4/15.\u201d In many countries in Europe, however, it is abbreviated\n\u201c4.9.15.\u201d Thus, the \u2018%x\u2019 specification in a \"US\" locale might produce \u20189/4/15\u2019, while in a \"EUROPE\" locale, it might produce\n\u20184.9.15\u2019.\n\nAccording to POSIX, string comparison is also affected by locales (similar to regular expressions). The details are presented in\nString Comparison Based on Locale Collating Order [POSIX-String-Comparison.html].\n\nFinally, the locale affects the value of the decimal point character used when gawk parses input data. This is discussed in detail\nin Conversion of Strings and Numbers [Conversion.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Expressions-Summary.html], Previous: Operator Precedence (How Operators Nest) [Precedence.html], Up: Expressions\n[Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "eeb008ed-da15-4129-973f-233b52bb579a", "embedding": null, "doc_hash": "fdfb81965015ec94f4490ca6565fce8905773a6bc25d6c1c81c7c06ee007d5be", "extra_info": null, "node_info": {"start": 0, "end": 2281, "_node_type": "1"}, "relationships": {"1": "3f9f5894-60ab-4eab-a06d-374d870d35a8"}}, "__type__": "1"}, "d863ef37-1a06-4bfd-a032-96c1175e3c91": {"__data__": {"text": "Next: Executable awk Programs [Executable-Scripts.html], Previous: Running awk Without Input Files [Read-Terminal.html], Up: How\nto Run awk Programs [Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.3 RUNNING LONG PROGRAMS\n\nSometimes awk programs are very long. In these cases, it is more convenient to put the program into a separate file. In order to\ntell awk to use that file for its program, you type:\n\nawk -f source-file input-file1 input-file2 \u2026\n\n\nThe -f instructs the awk utility to get the awk program from the file source-file (see Command-Line Options [Options.html]). Any\nfile name can be used for source-file. For example, you could put the program:\n\nBEGIN { print \"Don't Panic!\" }\n\n\ninto the file advice. Then this command:\n\nawk -f advice\n\n\ndoes the same thing as this one:\n\nawk 'BEGIN { print \"Don\\47t Panic!\" }'\n\n\nThis was explained earlier (see Running awk Without Input Files [Read-Terminal.html]). Note that you don\u2019t usually need single\nquotes around the file name that you specify with -f, because most file names don\u2019t contain any of the shell\u2019s special characters.\nNotice that in advice, the awk program did not have single quotes around it. The quotes are only needed for programs that are\nprovided on the awk command line. (Also, placing the program in a file allows us to use a literal single quote in the program\ntext, instead of the magic \u2018\\47\u2019.)\n\nIf you want to clearly identify an awk program file as such, you can add the extension .awk to the file name. This doesn\u2019t affect\nthe execution of the awk program but it does make \u201chousekeeping\u201d easier.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Executable awk Programs [Executable-Scripts.html], Previous: Running awk Without Input Files [Read-Terminal.html], Up: How\nto Run awk Programs [Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d863ef37-1a06-4bfd-a032-96c1175e3c91", "embedding": null, "doc_hash": "be902029a8e3c78131a70d8ca0dd8a3448c351caab929765d99e4593bad9ef73", "extra_info": null, "node_info": {"start": 0, "end": 2104, "_node_type": "1"}, "relationships": {"1": "4e11668a-f651-4175-97f0-60ac4ba12c45"}}, "__type__": "1"}, "f875f121-3ade-4f5d-a20c-d53952072431": {"__data__": {"text": "Previous: Arbitrary Precision Arithmetic is On Parole! [MPFR-On-Parole.html], Up: Arbitrary-Precision Arithmetic Features in gawk\n[MPFR-features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.3.2 ARBITRARY PRECISION INTRODUCTION\n\nBy default, gawk uses the double-precision floating-point values supplied by the hardware of the system it runs on. However, if it\nwas compiled to do so, and the -M command-line option is supplied, gawk uses the GNU MPFR [http://www.mpfr.org] and GNU MP\n[https://gmplib.org] (GMP) libraries for arbitrary-precision arithmetic on numbers. You can see if MPFR support is available like\nso:\n\n$ gawk --version\n-| GNU Awk 5.2.1, API 3.2, PMA Avon 8-g1, (GNU MPFR 4.1.0, GNU MP 6.2.1)\n-| Copyright (C) 1989, 1991-2022 Free Software Foundation.\n\u2026\n\n\n(You may see different version numbers than what\u2019s shown here. That\u2019s OK; what\u2019s important is to see that GNU MPFR and GNU MP are\nlisted in the output.)\n\nAdditionally, there are a few elements available in the PROCINFO array to provide information about the MPFR and GMP libraries\n(see Built-in Variables That Convey Information [Auto_002dset.html]).\n\nThe MPFR library provides precise control over precisions and rounding modes, and gives correctly rounded, reproducible,\nplatform-independent results. With the -M command-line option, all floating-point arithmetic operators and numeric functions can\nyield results to any desired precision level supported by MPFR.\n\nTwo predefined variables, PREC and ROUNDMODE, provide control over the working precision and the rounding mode. The precision and\nthe rounding mode are set globally for every operation to follow. See Setting the Precision [Setting-precision.html] and Setting\nthe Rounding Mode [Setting-the-rounding-mode.html] for more information.", "doc_id": "f875f121-3ade-4f5d-a20c-d53952072431", "embedding": null, "doc_hash": "21e27b23985fa499595f37c6d81bb2663b7dfefa0bdd09485b4450ad9cb631e5", "extra_info": null, "node_info": {"start": 0, "end": 1924, "_node_type": "1"}, "relationships": {"1": "da650e2f-8f7a-4fee-892a-8f8d3ef30ce7"}}, "__type__": "1"}, "448ca447-c83d-4c92-913f-75fbf25089f2": {"__data__": {"text": "Next: Arbitrary Precision Introduction [MPFR-Intro.html], Up: Arbitrary-Precision Arithmetic Features in gawk [MPFR-features.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.3.1 ARBITRARY PRECISION ARITHMETIC IS ON PAROLE!\n\nAs of version 5.2, arbitrary precision arithmetic in gawk is \u201con parole.\u201d The primary gawk maintainer is no longer maintaining it.\nFortunately, a volunteer from the development team has agreed to take it over.\n\nThis feature is on parole because its inclusion was a mistake. It has led to endless bug reports, misuse of the feature and public\nabuse of the maintainer, for no real increased value.\n\nIf the situation with support changes, the feature will be removed from gawk.\n\nIf you use this feature, you should consider finding a different toolset with which to accomplish your goals.97\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(97)\n\nOf course, you can always continue to use a version of gawk that still supports arbitrary precision arithmetic. It simply will be\nunmaintained.", "doc_id": "448ca447-c83d-4c92-913f-75fbf25089f2", "embedding": null, "doc_hash": "6400d9c2edef75d2dc35a97cebb1e59fcefcbb12f87e92f3464cc3336e585c11", "extra_info": null, "node_info": {"start": 0, "end": 1257, "_node_type": "1"}, "relationships": {"1": "e4ed39b9-a2eb-47eb-bc4f-c0bb6ff9356a"}}, "__type__": "1"}, "7b92f493-2006-4e2c-82bc-2b924f6def6a": {"__data__": {"text": "Next: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html], Previous: Other Stuff to Know [Math-Definitions.html], Up:\nArithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.3 ARBITRARY-PRECISION ARITHMETIC FEATURES IN GAWK\n\nThis section briefly describes arbitrary-precision arithmetic in gawk.\n\n * Arbitrary Precision Arithmetic is On Parole! [MPFR-On-Parole.html]\n * Arbitrary Precision Introduction [MPFR-Intro.html]", "doc_id": "7b92f493-2006-4e2c-82bc-2b924f6def6a", "embedding": null, "doc_hash": "056517676313f8ff0c90091997b1b673afb34dd3bf222465c3ffafb9f962157e", "extra_info": null, "node_info": {"start": 0, "end": 667, "_node_type": "1"}, "relationships": {"1": "f4f8b74f-197d-4844-a837-e12b5b2635cd"}}, "__type__": "1"}, "cadf3bc9-cf31-4026-9535-bb1b477a7dd1": {"__data__": {"text": "Previous: Using gawk In The Cygwin Environment [Cygwin.html], Up: Installation on MS-Windows [PC-Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.1.5 USING GAWK IN THE MSYS ENVIRONMENT\n\nIn the MSYS environment under MS-Windows, gawk automatically uses binary mode for reading and writing files. Thus, there is no\nneed to use the BINMODE variable.\n\nThis can cause problems with other Unix-like components that have been ported to MS-Windows that expect gawk to do automatic\ntranslation of \"\\r\\n\", because it won\u2019t.\n\nUnder MSYS2, compilation using the standard \u2018./configure && make\u2019 recipe works \u201cout of the box.\u201d", "doc_id": "cadf3bc9-cf31-4026-9535-bb1b477a7dd1", "embedding": null, "doc_hash": "109772ec0a974c37db2aab2f8856a5e4c6464a2b5d4c1728cf7278e8754f5174", "extra_info": null, "node_info": {"start": 0, "end": 777, "_node_type": "1"}, "relationships": {"1": "65042908-4328-43fb-bda2-95eff76438fd"}}, "__type__": "1"}, "336ea24a-b915-431f-95d2-cb924fb19198": {"__data__": {"text": "Previous: Where To Send Non-bug Questions [Asking-for-help.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.4.6 REPORTING PROBLEMS WITH NON-UNIX PORTS\n\nIf you find bugs in one of the non-Unix ports of gawk, send an email to the bug list, with a copy to the person who maintains that\nport. The maintainers are named in the following list, as well as in the README file in the gawk distribution. Information in the\nREADME file should be considered authoritative if it conflicts with this Web page.\n\nThe people maintaining the various gawk ports are:\n\nUnix and POSIX systemsArnold Robbins, \u201carnold at skeeve dot com\u201d MS-Windows with MinGWEli Zaretskii, \u201celiz at gnu dot org\u201d\nOpenVMSJohn Malmberg, \u201cwb8tyw at qsl dot net\u201d z/OS (OS/390)Daniel Richard G. \u201cskunk at iSKUNK dot ORG\u201d\n\nIf your bug is also reproducible under Unix, send a copy of your report to the \u201cbug dash gawk at gnu dot org\u201d email list as well.", "doc_id": "336ea24a-b915-431f-95d2-cb924fb19198", "embedding": null, "doc_hash": "a201d2664cd7c8357f54170f06afd803faac1a9f1952c9f6ba06c377140ecb53", "extra_info": null, "node_info": {"start": 0, "end": 1101, "_node_type": "1"}, "relationships": {"1": "d8d35861-d6a7-4567-84a4-ec7b3f4d24e8"}}, "__type__": "1"}, "717232eb-77de-4ae3-8776-2b45f48df2c5": {"__data__": {"text": "Next: How to Contribute [How-To-Contribute.html], Previous: Typographical Conventions [Conventions.html], Up: Preface\n[Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nTHE GNU PROJECT AND THIS BOOK\n\nThe Free Software Foundation (FSF) is a nonprofit organization dedicated to the production and distribution of freely\ndistributable software. It was founded by Richard M. Stallman, the author of the original Emacs editor. GNU Emacs is the most\nwidely used version of Emacs today.\n\nThe GNU6 Project is an ongoing effort on the part of the Free Software Foundation to create a complete, freely distributable,\nPOSIX-compliant computing environment. The FSF uses the GNU General Public License (GPL) to ensure that its software\u2019s source code\nis always available to the end user. A copy of the GPL is included in this Web page for your reference (see GNU General Public\nLicense [Copying.html]). The GPL applies to the C language source code for gawk. To find out more about the FSF and the GNU\nProject online, see the GNU Project\u2019s home page [https://www.gnu.org]. This Web page may also be read from GNU\u2019s website\n[https://www.gnu.org/software/gawk/manual/].\n\nA shell, an editor (Emacs), highly portable optimizing C, C++, and Objective-C compilers, a symbolic debugger and dozens of large\nand small utilities (such as gawk), have all been completed and are freely available. The GNU operating system kernel (the HURD),\nhas been released but remains in an early stage of development.\n\nUntil the GNU operating system is more fully developed, you should consider using GNU/Linux, a freely distributable, Unix-like\noperating system for Intel, Power Architecture, Sun SPARC, IBM S/390, and other systems.7 Many GNU/Linux distributions are\navailable for download from the Internet.\n\nThe Web page you are reading is actually free\u2014at least, the information in it is free to anyone. The machine-readable source code\nfor the Web page comes with gawk. (Take a moment to check the Free Documentation License in GNU Free Documentation License\n[GNU-Free-Documentation-License.html].)\n\nThe Web page itself has gone through multiple previous editions. Paul Rubin wrote the very first draft of The GAWK Manual; it was\naround 40 pages long. Diane Close and Richard Stallman improved it, yielding a version that was around 90 pages and barely\ndescribed the original, \u201cold\u201d version of awk.\n\nI started working with that version in the fall of 1988. As work on it progressed, the FSF published several preliminary versions\n(numbered 0.x). In 1996, edition 1.0 was released with gawk 3.0.0. The FSF published the first two editions under the title The\nGNU Awk User\u2019s Guide.\n\nThis edition maintains the basic structure of the previous editions. For FSF edition 4.0, the content was thoroughly reviewed and\nupdated. All references to gawk versions prior to 4.0 were removed. Of significant note for that edition was the addition of\nDebugging awk Programs [Debugger.html].\n\nFor FSF edition 5.0, the content has been reorganized into parts, and the major new additions are Arithmetic and\nArbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html], and Writing Extensions for gawk\n[Dynamic-Extensions.html].\n\nThis Web page will undoubtedly continue to evolve. If you find an error in the Web page, please report it! See Reporting Problems\nand Bugs [Bugs.html] for information on submitting problem reports electronically.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(6)\n\nGNU stands for \u201cGNU\u2019s Not Unix.\u201d\n\n(7)\n\nThe terminology \u201cGNU/Linux\u201d is explained in the Glossary [Glossary.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: How to Contribute", "doc_id": "717232eb-77de-4ae3-8776-2b45f48df2c5", "embedding": null, "doc_hash": "37e6891bc88f0cf58264573fab9a2aebae432960d7ce646d6145e7423b2e7e73", "extra_info": null, "node_info": {"start": 0, "end": 3986, "_node_type": "1"}, "relationships": {"1": "f5ccf084-2d0f-4597-a824-4515a303f172", "3": "1ae6912c-7d80-4ac3-9bb8-50876b12b95c"}}, "__type__": "1"}, "1ae6912c-7d80-4ac3-9bb8-50876b12b95c": {"__data__": {"text": "[Glossary.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: How to Contribute [How-To-Contribute.html], Previous: Typographical Conventions [Conventions.html], Up: Preface\n[Preface.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "1ae6912c-7d80-4ac3-9bb8-50876b12b95c", "embedding": null, "doc_hash": "ccbcb4194d7d54c48ac958d13ac79a3fb6d360183ea6f0126f8754357818ddf4", "extra_info": null, "node_info": {"start": 3813, "end": 4154, "_node_type": "1"}, "relationships": {"1": "f5ccf084-2d0f-4597-a824-4515a303f172", "2": "717232eb-77de-4ae3-8776-2b45f48df2c5"}}, "__type__": "1"}, "fc0b1161-83c0-47d5-b885-8635993105b5": {"__data__": {"text": "Next: Arbitrary-Precision Arithmetic Features in gawk [MPFR-features.html], Previous: A General Description of Computer Arithmetic\n[Computer-Arithmetic.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.2 OTHER STUFF TO KNOW\n\nThe rest of this chapter uses a number of terms. Here are some informal definitions that should help you work your way through the\nmaterial here:\n\nAccuracy\n\nA floating-point calculation\u2019s accuracy is how close it comes to the real (paper and pencil) value.\n\nError\n\nThe difference between what the result of a computation \u201cshould be\u201d and what it actually is. It is best to minimize error as much\nas possible.\n\nExponent\n\nThe order of magnitude of a value; some number of bits in a floating-point value store the exponent.\n\nInf\n\nA special value representing infinity. Operations involving another number and infinity produce infinity.\n\nNaN\n\n\u201cNot a number.\u201d A special value that results from attempting a calculation that has no answer as a real number. See Floating Point\nValues They Didn\u2019t Talk About In School [Strange-values.html], for more information about infinity and not-a-number values.\n\nNormalized\n\nHow the significand (see later in this list) is usually stored. The value is adjusted so that the first bit is one, and then that\nleading one is assumed instead of physically stored. This provides one extra bit of precision.\n\nPrecision\n\nThe number of bits used to represent a floating-point number. The more bits, the more digits you can represent. Binary and decimal\nprecisions are related approximately, according to the formula:\n\nprec = 3.322 * dps\n\n\nHere, prec denotes the binary precision (measured in bits) and dps (short for decimal places) is the decimal digits.\n\nRounding mode\n\nHow numbers are rounded up or down when necessary. More details are provided later.\n\nSignificand\n\nA floating-point value consists of the significand multiplied by 10 to the power of the exponent. For example, in 1.2345e67, the\nsignificand is 1.2345.\n\nStability\n\nFrom the Wikipedia article on numerical stability [https://en.wikipedia.org/wiki/Numerical_stability]: \u201cCalculations that can be\nproven not to magnify approximation errors are called numerically stable.\u201d\n\nSee the Wikipedia article on accuracy and precision [https://en.wikipedia.org/wiki/Accuracy_and_precision] for more information on\nsome of those terms.\n\nOn modern systems, floating-point hardware uses the representation and operations defined by the IEEE 754 standard. Three of the\nstandard IEEE 754 types are 32-bit single precision, 64-bit double precision, and 128-bit quadruple precision. The standard also\nspecifies extended precision formats to allow greater precisions and larger exponent ranges. (awk uses only the 64-bit\ndouble-precision format.)\n\nTable 16.3 lists the precision and exponent field values for the basic IEEE 754 binary formats.\n\nNameTotal bitsPrecisionMinimum exponentMaximum exponent Single3224\u2212126+127 Double6453\u22121022+1023 Quadruple128113\u221216382+16383\n\nTable 16.3: Basic IEEE format values\n\n> NOTE: The precision numbers include the implied leading one that gives them one extra bit of significand.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Arbitrary-Precision Arithmetic Features in gawk [MPFR-features.html], Previous: A General Description of Computer Arithmetic\n[Computer-Arithmetic.html], Up: Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "fc0b1161-83c0-47d5-b885-8635993105b5", "embedding": null, "doc_hash": "b657d7a5e5590e0dea8582d8b03c5112b4bfb43de6b8a27adbf837691ce4b215", "extra_info": null, "node_info": {"start": 0, "end": 3809, "_node_type": "1"}, "relationships": {"1": "ff835e5b-9684-4a39-9b52-b0e698ce8eac"}}, "__type__": "1"}, "36163756-e56b-4bd4-af24-ffbf51b0642d": {"__data__": {"text": "Next: Constructor Functions [Constructor-Functions.html], Previous: General-Purpose Data Types [General-Data-Types.html], Up: API\nDescription [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.3 MEMORY ALLOCATION FUNCTIONS AND CONVENIENCE MACROS\n\nThe API provides a number of memory allocation functions for allocating memory that can be passed to gawk, as well as a number of\nconvenience macros. This subsection presents them all as function prototypes, in the way that extension code would use them:\n\nvoid *gawk_malloc(size_t size);\n\nCall the correct version of malloc() to allocate storage that may be passed to gawk.\n\nvoid *gawk_calloc(size_t nmemb, size_t size);\n\nCall the correct version of calloc() to allocate storage that may be passed to gawk.\n\nvoid *gawk_realloc(void *ptr, size_t size);\n\nCall the correct version of realloc() to allocate storage that may be passed to gawk.\n\nvoid gawk_free(void *ptr);\n\nCall the correct version of free() to release storage that was allocated with gawk_malloc(), gawk_calloc(), or gawk_realloc().\n\nThe API has to provide these functions because it is possible for an extension to be compiled and linked against a different\nversion of the C library than was used for the gawk executable.104 If gawk were to use its version of free() when the memory came\nfrom an unrelated version of malloc(), unexpected behavior would likely result.\n\nThree convenience macros may be used for allocating storage from gawk_malloc(), gawk_calloc, and gawk_realloc(). If the allocation\nfails, they cause gawk to exit with a fatal error message. They should be used as if they were procedure calls that do not return\na value:\n\n#define emalloc(pointer, type, size, message) \u2026\n\nThe arguments to this macro are as follows:\n\npointer\n\nThe pointer variable to point at the allocated storage.\n\ntype\n\nThe type of the pointer variable. This is used to create a cast for the call to gawk_malloc().\n\nsize\n\nThe total number of bytes to be allocated.\n\nmessage\n\nA message to be prefixed to the fatal error message. Typically this is the name of the function using the macro.\n\nFor example, you might allocate a string value like so:\n\nawk_value_t result;\nchar *message;\nconst char greet[] = \"Don't Panic!\";\n\nemalloc(message, char *, sizeof(greet), \"myfunc\");\nstrcpy(message, greet);\nmake_malloced_string(message, strlen(message), & result);\n\n\n\n\n#define ezalloc(pointer, type, size, message) \u2026\n\nThis is like emalloc(), but it calls gawk_calloc() instead of gawk_malloc(). The arguments are the same as for the emalloc()\nmacro, but this macro guarantees that the memory returned is initialized to zero.\n\n#define erealloc(pointer, type, size, message) \u2026\n\nThis is like emalloc(), but it calls gawk_realloc() instead of gawk_malloc(). The arguments are the same as for the emalloc()\nmacro.\n\nTwo additional functions allocate MPFR and GMP objects for use by extension functions that need to create and then return such\nvalues.\n\n> NOTE: These functions are obsolete. Extension functions that need local MPFR and GMP values should simply allocate them on the\n> stack and clear them, as any other code would.\n\nThe functions are:\n\nvoid *get_mpfr_ptr();\n\nAllocate and initialize an MPFR object and return a pointer to it. If the allocation fails, gawk exits with a fatal \u201cout of\nmemory\u201d error. If gawk was compiled without MPFR support, calling this function causes a fatal error.\n\nvoid *get_mpz_ptr();\n\nAllocate and initialize a GMP object and return a pointer to it. If the", "doc_id": "36163756-e56b-4bd4-af24-ffbf51b0642d", "embedding": null, "doc_hash": "02e2b349893a995511ebc5198e2c4fbaa67ae8ffd0a98028f8817e5b54898c66", "extra_info": null, "node_info": {"start": 0, "end": 3650, "_node_type": "1"}, "relationships": {"1": "e076e46b-e267-4222-ba81-432160b97335", "3": "483a7573-810c-4bb0-bed4-dac31d05c186"}}, "__type__": "1"}, "483a7573-810c-4bb0-bed4-dac31d05c186": {"__data__": {"text": "and initialize a GMP object and return a pointer to it. If the allocation fails, gawk exits with a fatal \u201cout of memory\u201d\nerror. If gawk was compiled without MPFR support, calling this function causes a fatal error.\n\nBoth of these functions return \u2018void *\u2019, since the gawkapi.h header file should not have dependency upon <mpfr.h> (and <gmp.h>,\nwhich is included from <mpfr.h>). The actual return values are of types mpfr_ptr and mpz_ptr respectively, and you should cast the\nreturn values appropriately before assigning the results to variables of the correct types.\n\nThe memory allocated by these functions should be freed with gawk_free().\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(104)\n\nThis is more common on MS-Windows systems, but it can happen on Unix-like systems as well.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Constructor Functions [Constructor-Functions.html], Previous: General-Purpose Data Types [General-Data-Types.html], Up: API\nDescription [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "483a7573-810c-4bb0-bed4-dac31d05c186", "embedding": null, "doc_hash": "df23ec71ce60eb916782b6f5e7e4892f8e1ab988a1082f79f9b78881bae11388", "extra_info": null, "node_info": {"start": 3588, "end": 4838, "_node_type": "1"}, "relationships": {"1": "e076e46b-e267-4222-ba81-432160b97335", "2": "36163756-e56b-4bd4-af24-ffbf51b0642d"}}, "__type__": "1"}, "701bb856-5753-4dd2-b143-ea53ec4d0264": {"__data__": {"text": "Previous: Obtaining Information About the Program and the Debugger State [Debugger-Info.html], Up: Main Debugger Commands\n[List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.3.6 MISCELLANEOUS COMMANDS\n\nThere are a few more commands that do not fit into the previous categories, as follows:\n\ndump [filename]\n\nDump byte code of the program to standard output or to the file named in filename. This prints a representation of the internal\ninstructions that gawk executes to implement the awk commands in a program. This can be very enlightening, as the following\npartial dump of Davide Brini\u2019s obfuscated code (see And Now for Something Completely Different [Signature-Program.html])\ndemonstrates:\n\ngawk> dump\n-|        # BEGIN\n-|\n-| [  1:0xfcd340] Op_rule           : [in_rule = BEGIN] [source_file = brini.awk]\n\n\n-| [  1:0xfcc240] Op_push_i         : \"~\" [MALLOC|STRING|STRCUR]\n-| [  1:0xfcc2a0] Op_push_i         : \"~\" [MALLOC|STRING|STRCUR]\n-| [  1:0xfcc280] Op_match          :\n-| [  1:0xfcc1e0] Op_store_var      : O\n-| [  1:0xfcc2e0] Op_push_i         : \"==\" [MALLOC|STRING|STRCUR]\n-| [  1:0xfcc340] Op_push_i         : \"==\" [MALLOC|STRING|STRCUR]\n-| [  1:0xfcc320] Op_equal          :\n-| [  1:0xfcc200] Op_store_var      : o\n-| [  1:0xfcc380] Op_push           : o\n-| [  1:0xfcc360] Op_plus_i         : 0 [MALLOC|NUMCUR|NUMBER]\n-| [  1:0xfcc220] Op_push_lhs       : o [do_reference = true]\n-| [  1:0xfcc300] Op_assign_plus    :\n-| [   :0xfcc2c0] Op_pop            :\n-| [  1:0xfcc400] Op_push           : O\n-| [  1:0xfcc420] Op_push_i         : \"\" [MALLOC|STRING|STRCUR]\n-| [   :0xfcc4a0] Op_no_op          :\n-| [  1:0xfcc480] Op_push           : O\n-| [   :0xfcc4c0] Op_concat         : [expr_count = 3] [concat_flag = 0]\n-| [  1:0xfcc3c0] Op_store_var      : x\n-| [  1:0xfcc440] Op_push_lhs       : X [do_reference = true]\n-| [  1:0xfcc3a0] Op_postincrement  :\n-| [  1:0xfcc4e0] Op_push           : x\n-| [  1:0xfcc540] Op_push           : o\n-| [  1:0xfcc500] Op_plus           :\n-| [  1:0xfcc580] Op_push           : o\n-| [ ", "doc_id": "701bb856-5753-4dd2-b143-ea53ec4d0264", "embedding": null, "doc_hash": "471a03bd0bf367f9d892ed225d6d35c2ec417ece5764ee1b9c5e6e99a5e7ddf2", "extra_info": null, "node_info": {"start": 0, "end": 2205, "_node_type": "1"}, "relationships": {"1": "8d95b184-7a57-49ea-9f97-0078434cbb3a", "3": "22f00626-d5d7-4e22-b391-756b11dd6058"}}, "__type__": "1"}, "22f00626-d5d7-4e22-b391-756b11dd6058": {"__data__": {"text": "Op_push           : o\n-| [  1:0xfcc560] Op_plus           :\n-| [  1:0xfcc460] Op_leq            :\n-| [   :0xfcc5c0] Op_jmp_false      : [target_jmp = 0xfcc5e0]\n-| [  1:0xfcc600] Op_push_i         : \"%c\" [MALLOC|STRING|STRCUR]\n-| [   :0xfcc660] Op_no_op          :\n-| [  1:0xfcc520] Op_assign_concat  : c\n-| [   :0xfcc620] Op_jmp            : [target_jmp = 0xfcc440]\n\u2026\n-| [     2:0xfcc5a0] Op_K_printf         : [expr_count = 17] [redir_type = \"\"]\n-| [      :0xfcc140] Op_no_op            :\n-| [      :0xfcc1c0] Op_atexit           :\n-| [      :0xfcc640] Op_stop             :\n-| [      :0xfcc180] Op_no_op            :\n-| [      :0xfcd150] Op_after_beginfile  :\n\n\n-| [      :0xfcc160] Op_no_op            :\n-| [      :0xfcc1a0] Op_after_endfile    :\ngawk>\n\n\nexit\n\nExit the debugger. See the entry for \u2018quit\u2019, later in this list.\n\nhelp h\n\nPrint a list of all of the gawk debugger commands with a short summary of their usage. \u2018help command\u2019 prints the information about\nthe command command.\n\nlist [- | + | n | filename:n | n\u2013m | function] l [- | + | n | filename:n | n\u2013m | function]\n\nPrint the specified lines (default 15) from the current source file or the file named filename. The possible arguments to list are\nas follows:\n\n- (Minus)\n\nPrint lines before the lines last printed.\n\n+\n\nPrint lines after the lines last printed. list without any argument does the same thing.\n\nn\n\nPrint lines centered around line number n.\n\nn\u2013m\n\nPrint lines from n to m.\n\nfilename:n\n\nPrint lines centered around line number n in source file filename. This command may change the current source file.\n\nfunction\n\nPrint lines centered around the beginning of the function function. This command may change the current source file.\n\nquit q\n\nExit the debugger. Debugging is great fun, but sometimes we all have to tend to other obligations in life, and sometimes we find\nthe bug and are free to go on to the next one! As we saw earlier, if you are running a program, the debugger warns you when you\ntype \u2018q\u2019 or \u2018quit\u2019, to make sure you really want to quit.\n\ntrace [on | off]\n\nTurn on or off continuous printing of the instructions that are about to be executed, along with the awk lines they implement. The\ndefault is off.\n\nIt is to be hoped that most of the \u201copcodes\u201d in these instructions are fairly self-explanatory, and using stepi and nexti while\ntrace is on will make them into familiar friends.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Obtaining Information About the Program and the Debugger State [Debugger-Info.html], Up: Main Debugger Commands\n[List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "22f00626-d5d7-4e22-b391-756b11dd6058", "embedding": null, "doc_hash": "327564e2021bceb1c63cc9cb8fe4811ecd7df00f43e950e8e3f9cb5fc1ebe74a", "extra_info": null, "node_info": {"start": 2178, "end": 4902, "_node_type": "1"}, "relationships": {"1": "8d95b184-7a57-49ea-9f97-0078434cbb3a", "2": "701bb856-5753-4dd2-b143-ea53ec4d0264"}}, "__type__": "1"}, "986bcf5a-42bb-4d94-8961-263af023c5e3": {"__data__": {"text": "Next: Summary [Programs-Summary.html], Previous: Reinventing Wheels for Fun and Profit [Clones.html], Up: Practical awk Programs\n[Sample-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n11.3 A GRAB BAG OF AWK PROGRAMS\n\nThis section is a large \u201cgrab bag\u201d of miscellaneous programs. We hope you find them both interesting and enjoyable.\n\n * Finding Duplicated Words in a Document [Dupword-Program.html]\n * An Alarm Clock Program [Alarm-Program.html]\n * Transliterating Characters [Translate-Program.html]\n * Printing Mailing Labels [Labels-Program.html]\n * Generating Word-Usage Counts [Word-Sorting.html]\n * Removing Duplicates from Unsorted Text [History-Sorting.html]\n * Extracting Programs from Texinfo Source Files [Extract-Program.html]\n * A Simple Stream Editor [Simple-Sed.html]\n * An Easy Way to Use Library Functions [Igawk-Program.html]\n * Finding Anagrams from a Dictionary [Anagram-Program.html]\n * And Now for Something Completely Different [Signature-Program.html]", "doc_id": "986bcf5a-42bb-4d94-8961-263af023c5e3", "embedding": null, "doc_hash": "b0062cab4ee2cd60ae7e7b0166fb8b10f4407f60756067e428b6c47d7f407b7a", "extra_info": null, "node_info": {"start": 0, "end": 1136, "_node_type": "1"}, "relationships": {"1": "5a1eb26d-5e27-4361-bf52-8f7632cc278f"}}, "__type__": "1"}, "1a4aab45-0f42-43cc-a4c5-2d09c6d924db": {"__data__": {"text": "Next: FS Versus FPAT: A Subtle Difference [FS-versus-FPAT.html], Up: Defining Fields by Content [Splitting-By-Content.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.7.1 MORE ON CSV FILES\n\nManuel Collado notes that in addition to commas, a CSV field can also contains quotes, that have to be escaped by doubling them.\nThe previously described regexps fail to accept quoted fields with both commas and quotes inside. He suggests that the simplest\nFPAT expression that recognizes this kind of fields is /([^,]*)|(\"([^\"]|\"\")+\")/. He provides the following input data to test\nthese variants:\n\np,\"q,r\",s\np,\"q\"\"r\",s\np,\"q,\"\"r\",s\np,\"\",s\np,,s\n\n\nAnd here is his test program:\n\nBEGIN {\n     fp[0] = \"([^,]+)|(\\\"[^\\\"]+\\\")\"\n     fp[1] = \"([^,]*)|(\\\"[^\\\"]+\\\")\"\n     fp[2] = \"([^,]*)|(\\\"([^\\\"]|\\\"\\\")+\\\")\"\n     FPAT = fp[fpat+0]\n}\n\n\n\n\n\n\n{\n     print \"<\" $0 \">\"\n     printf(\"NF = %s \", NF)\n     for (i = 1; i <= NF; i++) {\n         printf(\"<%s>\", $i)\n     }\n     print \"\"\n}\n\n\nWhen run on the third variant, it produces:\n\n$ gawk -v fpat=2 -f test-csv.awk sample.csv\n-| <p,\"q,r\",s>\n-| NF = 3 <p><\"q,r\"><s>\n-| <p,\"q\"\"r\",s>\n-| NF = 3 <p><\"q\"\"r\"><s>\n-| <p,\"q,\"\"r\",s>\n-| NF = 3 <p><\"q,\"\"r\"><s>\n-| <p,\"\",s>\n-| NF = 3 <p><\"\"><s>\n-| <p,,s>\n-| NF = 3 <p><><s>\n\n\nIn general, using FPAT to do your own CSV parsing is like having a bed with a blanket that\u2019s not quite big enough. There\u2019s always\na corner that isn\u2019t covered. We recommend, instead, that you use Manuel Collado\u2019s CSVMODE library for gawk\n[http://mcollado.z15.es/xgawk/].", "doc_id": "1a4aab45-0f42-43cc-a4c5-2d09c6d924db", "embedding": null, "doc_hash": "e4fae9451601eb79e705aaea42d7fc21601b3cd7ba0ad5dcc77a1425e9c26d04", "extra_info": null, "node_info": {"start": 0, "end": 1656, "_node_type": "1"}, "relationships": {"1": "90052333-1eef-4abb-bc36-93f2d90bb153"}}, "__type__": "1"}, "eb71eff4-f9d8-40b3-bd30-ac641a328c6e": {"__data__": {"text": "Next: awk Statements Versus Lines [Statements_002fLines.html], Previous: An Example with Two Rules [Two-Rules.html], Up: Getting\nStarted with awk [Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.5 A MORE COMPLEX EXAMPLE\n\nNow that we\u2019ve mastered some simple tasks, let\u2019s look at what typical awk programs do. This example shows how awk can be used to\nsummarize, select, and rearrange the output of another utility. It uses features that haven\u2019t been covered yet, so don\u2019t worry if\nyou don\u2019t understand all the details:\n\nls -l | awk '$6 == \"Nov\" { sum += $5 }\n             END { print sum }'\n\n\nThis command prints the total number of bytes in all the files in the current directory that were last modified in November (of\nany year).\n\nAs a reminder, the output of \u2018ls\u00a0-l\u2019 gives you a listing of the files in a directory, including each file\u2019s size and the date the\nfile was last modified. The first field contains read-write permissions, the second field contains the number of links to the\nfile, and the third field identifies the file\u2019s owner. The fourth field identifies the file\u2019s group. The fifth field contains the\nfile\u2019s size in bytes. The sixth, seventh, and eighth fields contain the month, day, and time, respectively, that the file was last\nmodified. Finally, the ninth field contains the file name.\n\nThe \u2018$6 == \"Nov\"\u2019 in our awk program is an expression that tests whether the sixth field of the output from \u2018ls\u00a0-l\u2019 matches the\nstring \u2018Nov\u2019. Each time a line has the string \u2018Nov\u2019 for its sixth field, awk performs the action \u2018sum += $5\u2019. This adds the fifth\nfield (the file\u2019s size) to the variable sum. As a result, when awk has finished reading all the input lines, sum is the total of\nthe sizes of the files whose lines matched the pattern. (This works because awk variables are automatically initialized to zero.)\n\nAfter the last line of output from ls has been processed, the END rule executes and prints the value of sum. In this example, the\nvalue of sum is 80600.\n\nThese more advanced awk techniques are covered in later sections (see Actions [Action-Overview.html]). Before you can move on to\nmore advanced awk programming, you have to know how awk interprets your input and displays your output. By manipulating fields and\nusing print statements, you can produce some very useful and impressive-looking reports.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: awk Statements Versus Lines [Statements_002fLines.html], Previous: An Example with Two Rules [Two-Rules.html], Up: Getting\nStarted with awk [Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "eb71eff4-f9d8-40b3-bd30-ac641a328c6e", "embedding": null, "doc_hash": "422d6099cfafbbbdb406ddbd2317cffa23848d9b4788454099dc18816a5acdd7", "extra_info": null, "node_info": {"start": 0, "end": 2859, "_node_type": "1"}, "relationships": {"1": "c4c57fc5-89e2-4169-9240-4622f377a3d6"}}, "__type__": "1"}, "f207701a-6ba2-47d6-b5ea-d6cfbd4b1ebd": {"__data__": {"text": "Next: Arrays of Arrays [Arrays-of-Arrays.html], Previous: The delete Statement [Delete.html], Up: Arrays in awk [Arrays.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.5 MULTIDIMENSIONAL ARRAYS\n\nA multidimensional array is an array in which an element is identified by a sequence of indices instead of a single index. For\nexample, a two-dimensional array requires two indices. The usual way (in many languages, including awk) to refer to an element of\na two-dimensional array named grid is with grid[x,y].\n\nMultidimensional arrays are supported in awk through concatenation of indices into one string. awk converts the indices into\nstrings (see Conversion of Strings and Numbers [Conversion.html]) and concatenates them together, with a separator between them.\nThis creates a single string that describes the values of the separate indices. The combined string is used as a single index into\nan ordinary, one-dimensional array. The separator used is the value of the built-in variable SUBSEP.\n\nFor example, suppose we evaluate the expression \u2018foo[5,12] = \"value\"\u2019 when the value of SUBSEP is \"@\". The numbers 5 and 12 are\nconverted to strings and concatenated with an \u2018@\u2019 between them, yielding \"5@12\"; thus, the array element foo[\"5@12\"] is set to\n\"value\".\n\nOnce the element\u2019s value is stored, awk has no record of whether it was stored with a single index or a sequence of indices. The\ntwo expressions \u2018foo[5,12]\u2019 and \u2018foo[5\u00a0SUBSEP\u00a012]\u2019 are always equivalent.\n\nThe default value of SUBSEP is the string \"\\034\", which contains a nonprinting character that is unlikely to appear in an awk\nprogram or in most input data. The usefulness of choosing an unlikely character comes from the fact that index values that contain\na string matching SUBSEP can lead to combined strings that are ambiguous. Suppose that SUBSEP is \"@\"; then \u2018foo[\"a@b\",\u00a0\"c\"]\u2019 and\n\u2018foo[\"a\",\u00a0\"b@c\"]\u2019 are indistinguishable because both are actually stored as \u2018foo[\"a@b@c\"]\u2019.\n\nTo test whether a particular index sequence exists in a multidimensional array, use the same operator (in) that is used for\nsingle-dimensional arrays. Write the whole sequence of indices in parentheses, separated by commas, as the left operand:\n\nif ((subscript1, subscript2, \u2026) in array)\n    \u2026\n\n\nHere is an example that treats its input as a two-dimensional array of fields; it rotates this array 90 degrees clockwise and\nprints the result. It assumes that all lines have the same number of elements:\n\n{\n     if (max_nf < NF)\n          max_nf = NF\n     max_nr = NR\n     for (x = 1; x <= NF; x++)\n          vector[x, NR] = $x\n}\n\nEND {\n     for (x = 1; x <= max_nf; x++) {\n          for (y = max_nr; y >= 1; --y)\n               printf(\"%s \", vector[x, y])\n          printf(\"\\n\")\n     }\n}\n\n\nWhen given the input:\n\n1 2 3 4 5 6\n2 3 4 5 6 1\n3 4 5 6 1 2\n4 5 6 1 2 3\n\n\nthe program produces the following output:\n\n4 3 2 1\n5 4 3 2\n6 5 4 3\n1 6 5 4\n2 1 6 5\n3 2 1 6\n\n\n * Scanning Multidimensional Arrays [Multiscanning.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Arrays of Arrays [Arrays-of-Arrays.html], Previous: The delete Statement", "doc_id": "f207701a-6ba2-47d6-b5ea-d6cfbd4b1ebd", "embedding": null, "doc_hash": "2c164980a04dbaa11e10f40b62b93bfb084ec45c1a43ff4afc89068fec49ece4", "extra_info": null, "node_info": {"start": 0, "end": 3318, "_node_type": "1"}, "relationships": {"1": "d4855309-2bce-4c87-aa16-06c788af0e60", "3": "489fb18e-b4b1-454c-a67d-7d7fb59740fb"}}, "__type__": "1"}, "489fb18e-b4b1-454c-a67d-7d7fb59740fb": {"__data__": {"text": "of Arrays [Arrays-of-Arrays.html], Previous: The delete Statement [Delete.html], Up: Arrays in awk [Arrays.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "489fb18e-b4b1-454c-a67d-7d7fb59740fb", "embedding": null, "doc_hash": "690708afed80fda76e5bfa64c7512cac9b488200affec3a48ffff369b1e45ace", "extra_info": null, "node_info": {"start": 3253, "end": 3424, "_node_type": "1"}, "relationships": {"1": "d4855309-2bce-4c87-aa16-06c788af0e60", "2": "f207701a-6ba2-47d6-b5ea-d6cfbd4b1ebd"}}, "__type__": "1"}, "7a819d31-6b54-493f-95a0-f448d9ce1fd6": {"__data__": {"text": "Next: Explicit Input with getline [Getline.html], Previous: Checking How gawk Is Splitting Records [Testing-field-creation.html],\nUp: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.9 MULTIPLE-LINE RECORDS\n\nIn some databases, a single line cannot conveniently hold all the information in one entry. In such cases, you can use multiline\nrecords. The first step in doing this is to choose your data format.\n\nOne technique is to use an unusual character or string to separate records. For example, you could use the formfeed character\n(written \u2018\\f\u2019 in awk, as in C) to separate them, making each record a page of the file. To do this, just set the variable RS to\n\"\\f\" (a string containing the formfeed character). Any other character could equally well be used, as long as it won\u2019t be part of\nthe data in a record.\n\nAnother technique is to have blank lines separate records. By a special dispensation, an empty string as the value of RS indicates\nthat records are separated by one or more blank lines. When RS is set to the empty string, each record always ends at the first\nblank line encountered. The next record doesn\u2019t start until the first nonblank line that follows. No matter how many blank lines\nappear in a row, they all act as one record separator. (Blank lines must be completely empty; lines that contain only whitespace\ndo not count.)\n\nYou can achieve the same effect as \u2018RS = \"\"\u2019 by assigning the string \"\\n\\n+\" to RS. This regexp matches the newline at the end of\nthe record and one or more blank lines after the record. In addition, a regular expression always matches the longest possible\nsequence when there is a choice (see How Much Text Matches? [Leftmost-Longest.html]). So, the next record doesn\u2019t start until the\nfirst nonblank line that follows\u2014no matter how many blank lines appear in a row, they are considered one record separator.\n\nHowever, there is an important difference between \u2018RS = \"\"\u2019 and \u2018RS = \"\\n\\n+\"\u2019. In the first case, leading newlines in the input\ndata file are ignored, and if a file ends without extra blank lines after the last record, the final newline is removed from the\nrecord. In the second case, this special processing is not done. (d.c.)\n\nNow that the input is separated into records, the second step is to separate the fields in the records. One way to do this is to\ndivide each of the lines into fields in the normal manner. This happens by default as the result of a special feature. When RS is\nset to the empty string and FS is set to a single character, the newline character always acts as a field separator. This is in\naddition to whatever field separations result from FS.\n\n> NOTE: When FS is the null string (\"\") or a regexp, this special feature of RS does not apply. It does apply to the default field\n> separator of a single space: \u2018FS = \"\u00a0\"\u2019.\n> \n> Note that language in the POSIX specification implies that this special feature should apply when FS is a regexp. However, Unix\n> awk has never behaved that way, nor has gawk. This is essentially a bug in POSIX.\n\nThe original motivation for this special exception was probably to provide useful behavior in the default case (i.e., FS is equal\nto \"\u00a0\"). This feature can be a problem if you really don\u2019t want the newline character to separate fields, because there is no way\nto prevent it. However, you can work around this by using the split() function to break up the record manually (see\nString-Manipulation Functions [String-Functions.html]). If you have a single-character field separator, you can work around the\nspecial feature in a different way, by making FS into a regexp for that single character. For example, if the field separator is a\npercent character, instead of \u2018FS = \"%\"\u2019, use \u2018FS = \"[%]\"\u2019.\n\nAnother way to separate fields is to put", "doc_id": "7a819d31-6b54-493f-95a0-f448d9ce1fd6", "embedding": null, "doc_hash": "ae7086b112df79d1f0d8da083fe8be223d9b5fa33dbc5b0164f87226f46c9131", "extra_info": null, "node_info": {"start": 0, "end": 3947, "_node_type": "1"}, "relationships": {"1": "f6ee9b93-564a-4d76-bff9-b401196b8cc6", "3": "adba7a17-5f9c-4fc4-9443-5b8a7db8f4bf"}}, "__type__": "1"}, "adba7a17-5f9c-4fc4-9443-5b8a7db8f4bf": {"__data__": {"text": "= \"[%]\"\u2019.\n\nAnother way to separate fields is to put each field on a separate line: to do this, just set the variable FS to the string \"\\n\".\n(This single-character separator matches a single newline.) A practical example of a data file organized this way might be a\nmailing list, where blank lines separate the entries. Consider a mailing list in a file named addresses, which looks like this:\n\nJane Doe\n123 Main Street\nAnywhere, SE 12345-6789\n\nJohn Smith\n456 Tree-lined Avenue\nSmallville, MW 98765-4321\n\u2026\n\n\nA simple program to process this file is as follows:\n\n# addrs.awk --- simple mailing list program\n\n# Records are separated by blank lines.\n# Each line is one field.\nBEGIN { RS = \"\" ; FS = \"\\n\" }\n\n{\n      print \"Name is:\", $1\n      print \"Address is:\", $2\n      print \"City and State are:\", $3\n      print \"\"\n}\n\n\nRunning the program produces the following output:\n\n$ awk -f addrs.awk addresses\n-| Name is: Jane Doe\n-| Address is: 123 Main Street\n-| City and State are: Anywhere, SE 12345-6789\n-|\n-| Name is: John Smith\n-| Address is: 456 Tree-lined Avenue\n-| City and State are: Smallville, MW 98765-4321\n-|\n\u2026\n\n\nSee Printing Mailing Labels [Labels-Program.html] for a more realistic program dealing with address lists. The following list\nsummarizes how records are split, based on the value of RS:\n\nRS == \"\\n\"\n\nRecords are separated by the newline character (\u2018\\n\u2019). In effect, every line in the data file is a separate record, including\nblank lines. This is the default.\n\nRS == any single character\n\nRecords are separated by each occurrence of the character. Multiple successive occurrences delimit empty records.\n\nRS == \"\"\n\nRecords are separated by runs of blank lines. When FS is a single character, then the newline character always serves as a field\nseparator, in addition to whatever value FS may have. Leading and trailing newlines in a file are ignored.\n\nRS == regexp\n\nRecords are separated by occurrences of characters that match regexp. Leading and trailing matches of regexp delimit empty\nrecords. (This is a gawk extension; it is not specified by the POSIX standard.)\n\nIf not in compatibility mode (see Command-Line Options [Options.html]), gawk sets RT to the input text that matched the value\nspecified by RS. But if the input file ended without any text that matches RS, then gawk sets RT to the null string.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Explicit Input with getline [Getline.html], Previous: Checking How gawk Is Splitting Records [Testing-field-creation.html],\nUp: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "adba7a17-5f9c-4fc4-9443-5b8a7db8f4bf", "embedding": null, "doc_hash": "c6579527d4edf505dba5ecc2a41e7dc00e982e5387e2205ceff7841206d0dd76", "extra_info": null, "node_info": {"start": 3896, "end": 6591, "_node_type": "1"}, "relationships": {"1": "f6ee9b93-564a-4d76-bff9-b401196b8cc6", "2": "7a819d31-6b54-493f-95a0-f448d9ce1fd6"}}, "__type__": "1"}, "f1db27d0-7bdd-45c8-b176-2d67b88afa16": {"__data__": {"text": "Up: Multidimensional Arrays [Multidimensional.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.5.1 SCANNING MULTIDIMENSIONAL ARRAYS\n\nThere is no special for statement for scanning a \u201cmultidimensional\u201d array. There cannot be one, because, in truth, awk does not\nhave multidimensional arrays or elements\u2014there is only a multidimensional way of accessing an array.\n\nHowever, if your program has an array that is always accessed as multidimensional, you can get the effect of scanning it by\ncombining the scanning for statement (see Scanning All Elements of an Array [Scanning-an-Array.html]) with the built-in split()\nfunction (see String-Manipulation Functions [String-Functions.html]). It works in the following manner:\n\nfor (combined in array) {\n    split(combined, separate, SUBSEP)\n    \u2026\n}\n\n\nThis sets the variable combined to each concatenated combined index in the array, and splits it into the individual indices by\nbreaking it apart where the value of SUBSEP appears. The individual indices then become the elements of the array separate.\n\nThus, if a value is previously stored in array[1, \"foo\"], then an element with index \"1\\034foo\" exists in array. (Recall that the\ndefault value of SUBSEP is the character with code 034.) Sooner or later, the for statement finds that index and does an iteration\nwith the variable combined set to \"1\\034foo\". Then the split() function is called as follows:\n\nsplit(\"1\\034foo\", separate, \"\\034\")\n\n\nThe result is to set separate[1] to \"1\" and separate[2] to \"foo\". Presto! The original sequence of separate indices is recovered.", "doc_id": "f1db27d0-7bdd-45c8-b176-2d67b88afa16", "embedding": null, "doc_hash": "8195a8eaab912dba795dd961683198735525de3805f5514e7f07de446b95caa5", "extra_info": null, "node_info": {"start": 0, "end": 1720, "_node_type": "1"}, "relationships": {"1": "3160e92b-bacc-473a-bce1-834307053fd1"}}, "__type__": "1"}, "c3762752-511f-49dc-9786-9f8971fc3261": {"__data__": {"text": "Next: Using This Book [This-Manual.html], Previous: History of awk and gawk [History.html], Up: Preface [Preface.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA ROSE BY ANY OTHER NAME\n\nThe awk language has evolved over the years. Full details are provided in The Evolution of the awk Language\n[Language-History.html]. The language described in this Web page is often referred to as \u201cnew awk.\u201d By analogy, the original\nversion of awk is referred to as \u201cold awk.\u201d\n\nOn most current systems, when you run the awk utility you get some version of new awk.4 If your system\u2019s standard awk is the old\none, you will see something like this if you try the following test program:\n\n$ awk 1 /dev/null\nerror\u2192 awk: syntax error near line 1\nerror\u2192 awk: bailing out near line 1\n\n\nIn this case, you should find a version of new awk, or just install gawk!\n\nThroughout this Web page, whenever we refer to a language feature that should be available in any complete implementation of POSIX\nawk, we simply use the term awk. When referring to a feature that is specific to the GNU implementation, we use the term gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(4)\n\nOnly Solaris systems still use an old awk for the default awk utility. A more modern awk lives in /usr/xpg6/bin on these systems.", "doc_id": "c3762752-511f-49dc-9786-9f8971fc3261", "embedding": null, "doc_hash": "eb7b9e530848f079f9dd5c75b97a3187c4c5c6c9c0296895cbeb0c76d6a76d85", "extra_info": null, "node_info": {"start": 0, "end": 1527, "_node_type": "1"}, "relationships": {"1": "73c47245-f800-4b9f-ba2e-2505a918834b"}}, "__type__": "1"}, "aa336a1e-7b2b-4f21-b5ee-ea82fa6256b7": {"__data__": {"text": "Next: Summary [Namespace-Summary.html], Previous: Namespace Example [Namespace-Example.html], Up: Namespaces in gawk\n[Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.8 NAMESPACES AND OTHER GAWK FEATURES\n\nThis section looks briefly at how the namespace facility interacts with other important gawk features.\n\nThe profiler and pretty-printer (see Profiling Your awk Programs [Profiling.html]) have been enhanced to understand namespaces and\nthe namespace naming rules presented in Namespace and Component Naming Rules [Naming-Rules.html]. In particular, the output groups\nfunctions in the same namespace together, and has @namespace directives in front of rules as necessary. This allows component\nnames to be simple identifiers, instead of using qualified identifiers everywhere.\n\nInteraction with the debugger (see Introduction to the gawk Debugger [Debugging.html]) has not had to change (at least as of this\nwriting). Some of the internal byte codes changed in order to accommodate namespaces, and the debugger\u2019s dump command was adjusted\nto match.\n\nThe extension API (see Writing Extensions for gawk [Dynamic-Extensions.html]) has always allowed for placing functions into a\ndifferent namespace, although this was not previously implemented. However, the symbol lookup and symbol update routines did not\nhave provision for including a namespace. That has now been corrected (see Variable Access and Update by Name\n[Symbol-table-by-name.html]). See Enabling In-Place File Editing [Extension-Sample-Inplace.html], for a nice example of an\nextension that leverages a namespace shared by cooperating awk and C code.", "doc_id": "aa336a1e-7b2b-4f21-b5ee-ea82fa6256b7", "embedding": null, "doc_hash": "7bcff92a8f23ea4ddb82c87c1947b9bf24c75fdd5a2f46e5c330901ba7eb9bfb", "extra_info": null, "node_info": {"start": 0, "end": 1779, "_node_type": "1"}, "relationships": {"1": "a0d2dacd-1a29-445e-b976-b1ea94046b05"}}, "__type__": "1"}, "46d90144-2268-4281-a199-62c4808e7d89": {"__data__": {"text": "Next: Namespaces and Other gawk Features [Namespace-And-Features.html], Previous: Internal Name Management\n[Internal-Name-Management.html], Up: Namespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.7 NAMESPACE EXAMPLE\n\nThe following example is a revised version of the suite of routines developed in Reading the User Database\n[Passwd-Functions.html]. See there for an explanation of how the code works.\n\nThe formulation here, due mainly to Andrew Schorr, is rather elegant. All of the implementation functions and variables are in the\npasswd namespace, whereas the main interface functions are defined in the awk namespace.\n\n# ns_passwd.awk --- access password file information\n\n@namespace \"passwd\"\n\nBEGIN {\n    # tailor this to suit your system\n    Awklib = \"/usr/local/libexec/awk/\"\n}\n\nfunction Init(    oldfs, oldrs, olddol0, pwcat, using_fw, using_fpat)\n{\n    if (Inited)\n        return\n\n    oldfs = FS\n    oldrs = RS\n    olddol0 = $0\n    using_fw = (PROCINFO[\"FS\"] == \"FIELDWIDTHS\")\n    using_fpat = (PROCINFO[\"FS\"] == \"FPAT\")\n    FS = \":\"\n    RS = \"\\n\"\n\n    pwcat = Awklib \"pwcat\"\n    while ((pwcat | getline) > 0) {\n        Byname[$1] = $0\n        Byuid[$3] = $0\n        Bycount[++Total] = $0\n    }\n    close(pwcat)\n    Count = 0\n    Inited = 1\n    FS = oldfs\n    if (using_fw)\n        FIELDWIDTHS = FIELDWIDTHS\n    else if (using_fpat)\n        FPAT = FPAT\n    RS = oldrs\n    $0 = olddol0\n}\n\nfunction awk::getpwnam(name)\n{\n    Init()\n    return Byname[name]\n}\n\nfunction awk::getpwuid(uid)\n{\n    Init()\n    return Byuid[uid]\n}\n\nfunction awk::getpwent()\n{\n    Init()\n    if (Count < Total)\n        return Bycount[++Count]\n    return \"\"\n}\n\nfunction awk::endpwent()\n{\n    Count = 0\n}\n\n\nAs you can see, this version also follows the convention mentioned in Naming Library Function Global Variables\n[Library-Names.html], whereby global variable and function names start with a capital letter.\n\nHere is a simple test program. Since it\u2019s in a separate file, unadorned identifiers are sought for in the awk namespace:\n\nBEGIN {\n    while ((p = getpwent()) != \"\")\n        print p\n}\n\n\nHere\u2019s what happens when it\u2019s run:\n\n$ gawk -f ns_passwd.awk -f testpasswd.awk\n-| root:x:0:0:root:/root:/bin/bash\n-| daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\n-| bin:x:2:2:bin:/bin:/usr/sbin/nologin\n-| sys:x:3:3:sys:/dev:/usr/sbin/nologin\n\u2026\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Namespaces and Other gawk Features [Namespace-And-Features.html], Previous: Internal Name Management\n[Internal-Name-Management.html], Up: Namespaces in gawk [Namespaces.html] \u00a0 [Contents", "doc_id": "46d90144-2268-4281-a199-62c4808e7d89", "embedding": null, "doc_hash": "1bc576a7a3c992b3d115e6da2e8420d6c808a9fc35b53b85aaed8fb29b60b92b", "extra_info": null, "node_info": {"start": 0, "end": 2831, "_node_type": "1"}, "relationships": {"1": "fdaa8371-c635-4ba0-93e8-44ce88dec4d5", "3": "db5fc5e9-2c47-40f8-ae4f-ceaffdc356f2"}}, "__type__": "1"}, "db5fc5e9-2c47-40f8-ae4f-ceaffdc356f2": {"__data__": {"text": "Up: Namespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "db5fc5e9-2c47-40f8-ae4f-ceaffdc356f2", "embedding": null, "doc_hash": "f032f766183121aebd96ebc9c572a6a6bbe4a0a20b1d572b8925b3e37f31e4aa", "extra_info": null, "node_info": {"start": 2779, "end": 2878, "_node_type": "1"}, "relationships": {"1": "fdaa8371-c635-4ba0-93e8-44ce88dec4d5", "2": "46d90144-2268-4281-a199-62c4808e7d89"}}, "__type__": "1"}, "9f1f5d14-7989-458b-9cd6-27cbaa641a0e": {"__data__": {"text": "Previous: Namespaces and Other gawk Features [Namespace-And-Features.html], Up: Namespaces in gawk [Namespaces.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.9 SUMMARY\n\n * Standard awk provides a single namespace for all global identifiers (scalars, arrays, and functions). This is limiting when one\n   wants to develop libraries of reusable functions or function suites.\n * gawk provides multiple namespaces by using qualified names: names consisting of a namespace name, a double colon, ::, and a\n   component name. Namespace names might still possibly conflict, but this is true of any language providing namespaces, modules,\n   or packages.\n * The default namespace is awk. The rules for namespace and component names are provided in Namespace and Component Naming Rules\n   [Naming-Rules.html]. The rules are designed in such a way as to make namespace-aware code continue to look and work naturally\n   while still providing the necessary power and flexibility.\n * Other parts of gawk have been extended as necessary to integrate namespaces smoothly with their operation. This applies most\n   notably to the profiler / pretty-printer (see Profiling Your awk Programs [Profiling.html]) and to the extension facility (see\n   Writing Extensions for gawk [Dynamic-Extensions.html]).\n * Overall, the namespace facility was designed and implemented such that backwards compatibility is paramount. Programs that\n   don\u2019t use namespaces should see absolutely no difference in behavior when run by a namespace-capable version of gawk.", "doc_id": "9f1f5d14-7989-458b-9cd6-27cbaa641a0e", "embedding": null, "doc_hash": "dc3c57915bd030e9a5ccba31c74785d74b07663f0c41845e3870c5214761c207", "extra_info": null, "node_info": {"start": 0, "end": 1684, "_node_type": "1"}, "relationships": {"1": "9b7c0b02-7130-4b04-837a-dff39d1ce218"}}, "__type__": "1"}, "08bafc7d-0800-43d2-90be-6621c509b0a0": {"__data__": {"text": "Next: Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html], Previous: Debugging awk\nPrograms [Debugger.html], Up: General Introduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15 NAMESPACES IN GAWK\n\nThis chapter describes a feature that is specific to gawk.\n\n> CAUTION: This feature described in this chapter is new. It is entirely possible, and even likely, that there are dark corners\n> (if not bugs) still lurking within the implementation. If you find any such, please report them (See Reporting Problems and Bugs\n> [Bugs.html]).\n\n * Standard awk\u2019s Single Namespace [Global-Namespace.html]\n * Qualified Names [Qualified-Names.html]\n * The Default Namespace [Default-Namespace.html]\n * Changing The Namespace [Changing-The-Namespace.html]\n * Namespace and Component Naming Rules [Naming-Rules.html]\n * Internal Name Management [Internal-Name-Management.html]\n * Namespace Example [Namespace-Example.html]\n * Namespaces and Other gawk Features [Namespace-And-Features.html]\n * Summary [Namespace-Summary.html]", "doc_id": "08bafc7d-0800-43d2-90be-6621c509b0a0", "embedding": null, "doc_hash": "baa0570a85d093492c5c77a64743264200f0178b20cf6074c4d65783fe332f5b", "extra_info": null, "node_info": {"start": 0, "end": 1217, "_node_type": "1"}, "relationships": {"1": "662b19ef-7a43-4585-98ba-b25073dfb6c4"}}, "__type__": "1"}, "1927e4b0-fccb-4800-9ff5-d021a266544c": {"__data__": {"text": "Next: Internal Name Management [Internal-Name-Management.html], Previous: Changing The Namespace [Changing-The-Namespace.html],\nUp: Namespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.5 NAMESPACE AND COMPONENT NAMING RULES\n\nA number of rules apply to the namespace and component names, as follows.\n\n * It is a syntax error to use qualified names for function parameter names.\n * It is a syntax error to use any standard awk reserved word (such as if or for), or the name of any standard built-in function\n   (such as sin() or gsub()) as either part of a qualified name. Thus, the following produces a syntax error:\n   \n   @namespace \"example\"\n   \n   function gsub(str, pat, result) { \u2026 }\n   \n\n * Outside the awk namespace, the names of the additional gawk built-in functions (such as gensub() or strftime()) may be used as\n   component names. The same set of names may be used as namespace names, although this has the potential to be confusing.\n * The additional gawk built-in functions may still be called from outside the awk namespace by qualifying them. For example,\n   awk::systime(). Here is a somewhat silly example demonstrating this rule and the previous one:\n   \n   BEGIN {\n       print \"in awk namespace, systime() =\", systime()\n   }\n   \n   @namespace \"testing\"\n   \n   function systime()\n   {\n       print \"in testing namespace, systime() =\", awk::systime()\n   }\n   \n   BEGIN {\n       systime()\n   }\n   \n   \n   When run, it produces output like this:\n   \n   $ gawk -f systime.awk\n   -| in awk namespace, systime() = 1500488503\n   -| in testing namespace, systime() = 1500488503\n   \n\n * gawk pre-defined variable names may be used: NF::NR is valid, if possibly not all that useful.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Internal Name Management [Internal-Name-Management.html], Previous: Changing The Namespace [Changing-The-Namespace.html],\nUp: Namespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "1927e4b0-fccb-4800-9ff5-d021a266544c", "embedding": null, "doc_hash": "c0cee8a88f4b9ec20c0dadde3614f423cf808286e0f13f6e6b8b7e74e7bbed44", "extra_info": null, "node_info": {"start": 0, "end": 2234, "_node_type": "1"}, "relationships": {"1": "0b9ec1dc-863a-45b5-b3d8-6d42ae491643"}}, "__type__": "1"}, "679a572e-1bfb-4b1b-8ae1-9653f51c7681": {"__data__": {"text": "Next: The Environment Variables gawk Uses [Environment-Variables.html], Previous: Other Command-Line Arguments\n[Other-Arguments.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.4 NAMING STANDARD INPUT\n\nOften, you may wish to read standard input together with other files. For example, you may wish to read one file, read standard\ninput coming from a pipe, and then read another file.\n\nThe way to name the standard input, with all versions of awk, is to use a single, standalone minus sign or dash, \u2018-\u2019. For example:\n\nsome_command | awk -f myprog.awk file1 - file2\n\n\nHere, awk first reads file1, then it reads the output of some_command, and finally it reads file2.\n\nYou may also use \"-\" to name standard input when reading files with getline (see Using getline from a File\n[Getline_002fFile.html]). And, you can even use \"-\" with the -f option to read program source code from standard input (see\nCommand-Line Options [Options.html]).\n\nIn addition, gawk allows you to specify the special file name /dev/stdin, both on the command line and with getline. Some other\nversions of awk also support this, but it is not standard. (Some operating systems provide a /dev/stdin file in the filesystem;\nhowever, gawk always processes this file name itself.)", "doc_id": "679a572e-1bfb-4b1b-8ae1-9653f51c7681", "embedding": null, "doc_hash": "e2633d6546382fe81ad92c70afa7809ea2647166a26a42cc5cf44eeb91fefa2a", "extra_info": null, "node_info": {"start": 0, "end": 1445, "_node_type": "1"}, "relationships": {"1": "78f3e08f-5050-4fc7-ac86-8800ea2339b9"}}, "__type__": "1"}, "8885b49d-1484-43c9-9ebc-71c5b9fbb1ab": {"__data__": {"text": "Next: Why Generated Files Are Kept In Git [Derived-Files.html], Previous: Adding New Features [Adding-Code.html], Up: Making\nAdditions to gawk [Additions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.2.3 PORTING GAWK TO A NEW OPERATING SYSTEM\n\nIf you want to port gawk to a new operating system, there are several steps:\n\n 1. Follow the guidelines in the previous section concerning coding style, submission of diffs, and so on.\n 2. Be prepared to sign the appropriate paperwork. In order for the FSF to distribute your code, you must either place your code\n    in the public domain and submit a signed statement to that effect, or assign the copyright in your code to the FSF. Both of\n    these actions are easy to do and many people have done so already. If you have questions, please contact me, or \u201cgnu at gnu\n    dot org\u201d.\n 3. When doing a port, bear in mind that your code must coexist peacefully with the rest of gawk and the other ports. Avoid\n    gratuitous changes to the system-independent parts of the code. If at all possible, avoid sprinkling \u2018#ifdef\u2019s just for your\n    port throughout the code.\n    \n    If the changes needed for a particular system affect too much of the code, I probably will not accept them. In such a case,\n    you can, of course, distribute your changes on your own, as long as you comply with the GPL (see GNU General Public License\n    [Copying.html]).\n\n 4. A number of the files that come with gawk are maintained by other people. Thus, you should not change them unless it is for a\n    very good reason; i.e., changes are not out of the question, but changes to these files are scrutinized extra carefully. These\n    are all the files in the support directory within the gawk distribution. See there.\n 5. A number of other files are provided by the GNU Autotools (Autoconf, Automake, and GNU gettext). You should not change them\n    either, unless it is for a very good reason. The files are ABOUT-NLS, config.guess, config.rpath, config.sub, depcomp,\n    INSTALL, install-sh, missing, mkinstalldirs, and ylwrap.\n 6. Be willing to continue to maintain the port. Non-Unix operating systems are supported by volunteers who maintain the code\n    needed to compile and run gawk on their systems. If no-one volunteers to maintain a port, it becomes unsupported and it may be\n    necessary to remove it from the distribution.\n 7. Supply an appropriate gawkmisc.??? file. Each port has its own gawkmisc.??? that implements certain operating system specific\n    functions. This is cleaner than a plethora of \u2018#ifdef\u2019s scattered throughout the code. The gawkmisc.c in the main source\n    directory includes the appropriate gawkmisc.??? file from each subdirectory. Be sure to update it as well.\n    \n    Each port\u2019s gawkmisc.??? file has a suffix reminiscent of the machine or operating system for the port\u2014for example,\n    pc/gawkmisc.pc and vms/gawkmisc.vms. The use of separate suffixes, instead of plain gawkmisc.c, makes it possible to move\n    files from a port\u2019s subdirectory into the main subdirectory, without accidentally destroying the real gawkmisc.c file.\n    (Currently, this is only an issue for the PC operating system ports.)\n\n 8. Supply a Makefile as well as any other C source and header files that are necessary for your operating system. All your code\n    should be in a separate subdirectory, with a name that is the same as, or reminiscent of, either your operating system or the\n    computer system. If possible, try to structure things so that it is not necessary to", "doc_id": "8885b49d-1484-43c9-9ebc-71c5b9fbb1ab", "embedding": null, "doc_hash": "41a7d1f3e3b4ff753569bfee407e043d653bd35f44caffdeb9698f4670962043", "extra_info": null, "node_info": {"start": 0, "end": 3678, "_node_type": "1"}, "relationships": {"1": "fdc92f9d-cf67-46c4-9424-3ddf3d09168e", "3": "f1ed8dbc-273f-4019-97a5-875834980b7a"}}, "__type__": "1"}, "f1ed8dbc-273f-4019-97a5-875834980b7a": {"__data__": {"text": " computer system. If possible, try to structure things so that it is not necessary to move files out of the subdirectory into\n    the main source directory. If that is not possible, then be sure to avoid using names for your files that duplicate the names\n    of files in the main source directory.\n 9. Update the documentation. Please write a section (or sections) for this Web page describing the installation and compilation\n    steps needed to compile and/or install gawk for your system.\n\nFollowing these steps makes it much easier to integrate your changes into gawk and have them coexist happily with other operating\nsystems\u2019 code that is already there.\n\nIn the code that you supply and maintain, feel free to use a coding style and brace layout that suits your taste.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Why Generated Files Are Kept In Git [Derived-Files.html], Previous: Adding New Features [Adding-Code.html], Up: Making\nAdditions to gawk [Additions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f1ed8dbc-273f-4019-97a5-875834980b7a", "embedding": null, "doc_hash": "d31ec7bee49a721a970b73b410b3bd0b01e9e4a1ebe269f5a5a83cc74549eb2d", "extra_info": null, "node_info": {"start": 3593, "end": 4720, "_node_type": "1"}, "relationships": {"1": "fdc92f9d-cf67-46c4-9424-3ddf3d09168e", "2": "8885b49d-1484-43c9-9ebc-71c5b9fbb1ab"}}, "__type__": "1"}, "4aade879-ed3e-43be-9a84-ea172767c765": {"__data__": {"text": "Next: The nextfile Statement [Nextfile-Statement.html], Previous: The continue Statement [Continue-Statement.html], Up: Control\nStatements in Actions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.8 THE NEXT STATEMENT\n\nThe next statement forces awk to immediately stop processing the current record and go on to the next record. This means that no\nfurther rules are executed for the current record, and the rest of the current rule\u2019s action isn\u2019t executed.\n\nContrast this with the effect of the getline function (see Explicit Input with getline [Getline.html]). That also causes awk to\nread the next record immediately, but it does not alter the flow of control in any way (i.e., the rest of the current action\nexecutes with a new input record).\n\nAt the highest level, awk program execution is a loop that reads an input record and then tests each rule\u2019s pattern against it. If\nyou think of this loop as a for statement whose body contains the rules, then the next statement is analogous to a continue\nstatement. It skips to the end of the body of this implicit loop and executes the increment (which reads another record).\n\nFor example, suppose an awk program works only on records with four fields, and it shouldn\u2019t fail when given bad input. To avoid\ncomplicating the rest of the program, write a \u201cweed out\u201d rule near the beginning, in the following manner:\n\nNF != 4 {\n    printf(\"%s:%d: skipped: NF != 4\\n\", FILENAME, FNR) > \"/dev/stderr\"\n    next\n}\n\n\nBecause of the next statement, the program\u2019s subsequent rules won\u2019t see the bad record. The error message is redirected to the\nstandard error output stream, as error messages should be. For more detail, see Special File names in gawk [Special-Files.html].\n\nIf the next statement causes the end of the input to be reached, then the code in any END rules is executed. See The BEGIN and END\nSpecial Patterns [BEGIN_002fEND.html].\n\nThe next statement is not allowed inside BEGINFILE and ENDFILE rules. See The BEGINFILE and ENDFILE Special Patterns\n[BEGINFILE_002fENDFILE.html].\n\nAccording to the POSIX standard, the behavior is undefined if the next statement is used in a BEGIN or END rule. gawk treats it as\na syntax error. Although POSIX does not disallow it, most other awk implementations don\u2019t allow the next statement inside function\nbodies (see User-Defined Functions [User_002ddefined.html]). Just as with any other next statement, a next statement inside a\nfunction body reads the next record and starts processing it with the first rule in the program.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The nextfile Statement [Nextfile-Statement.html], Previous: The continue Statement [Continue-Statement.html], Up: Control\nStatements in Actions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4aade879-ed3e-43be-9a84-ea172767c765", "embedding": null, "doc_hash": "697f4764167d55b183a2b15f37d04b01b961884258414d91b70f5bcadbef144b", "extra_info": null, "node_info": {"start": 0, "end": 3043, "_node_type": "1"}, "relationships": {"1": "9307e053-4e56-496f-80ff-61de31159145"}}, "__type__": "1"}, "7e542d59-9a36-40c6-85d7-e6a05758c108": {"__data__": {"text": "Next: The exit Statement [Exit-Statement.html], Previous: The next Statement [Next-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.9 THE NEXTFILE STATEMENT\n\nThe nextfile statement is similar to the next statement. However, instead of abandoning processing of the current record, the\nnextfile statement instructs awk to stop processing the current data file.\n\nUpon execution of the nextfile statement, FILENAME is updated to the name of the next data file listed on the command line, FNR is\nreset to one, and processing starts over with the first rule in the program. If the nextfile statement causes the end of the input\nto be reached, then the code in any END rules is executed. An exception to this is when nextfile is invoked during execution of\nany statement in an END rule; in this case, it causes the program to stop immediately. See The BEGIN and END Special Patterns\n[BEGIN_002fEND.html].\n\nThe nextfile statement is useful when there are many data files to process but it isn\u2019t necessary to process every record in every\nfile. Without nextfile, in order to move on to the next data file, a program would have to continue scanning the unwanted records.\nThe nextfile statement accomplishes this much more efficiently.\n\nIn gawk, execution of nextfile causes additional things to happen: any ENDFILE rules are executed if gawk is not currently in an\nEND rule, ARGIND is incremented, and any BEGINFILE rules are executed. (ARGIND hasn\u2019t been introduced yet. See Predefined\nVariables [Built_002din-Variables.html].)\n\nThere is an additional, special, use case with gawk. nextfile is useful inside a BEGINFILE rule to skip over a file that would\notherwise cause gawk to exit with a fatal error. In this special case, ENDFILE rules are not executed. See The BEGINFILE and\nENDFILE Special Patterns [BEGINFILE_002fENDFILE.html].\n\nAlthough it might seem that \u2018close(FILENAME)\u2019 would accomplish the same as nextfile, this isn\u2019t true. close() is reserved for\nclosing files, pipes, and coprocesses that are opened with redirections. It is not related to the main processing that awk does\nwith the files listed in ARGV.\n\n> NOTE: For many years, nextfile was a common extension. In September 2012, it was accepted for inclusion into the POSIX standard.\n> See the Austin Group website [http://austingroupbugs.net/view.php?id=607].\n\nThe current version of BWK awk and mawk also support nextfile. However, they don\u2019t allow the nextfile statement inside function\nbodies (see User-Defined Functions [User_002ddefined.html]). gawk does; a nextfile inside a function body reads the first record\nfrom the next file and starts processing it with the first rule in the program, just as any other nextfile statement.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The exit Statement [Exit-Statement.html], Previous: The next Statement [Next-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "7e542d59-9a36-40c6-85d7-e6a05758c108", "embedding": null, "doc_hash": "db0495c1a7f3036858f89af42133ad7836dbde468598d931d7f88417dad03c29", "extra_info": null, "node_info": {"start": 0, "end": 3257, "_node_type": "1"}, "relationships": {"1": "57425ccf-afb6-472e-8749-93bf84d1bd04"}}, "__type__": "1"}, "94d834a4-bcfe-4413-ae7f-eccba3cdd30d": {"__data__": {"text": "Next: Reporting Problems and Bugs [Bugs.html], Previous: Compiling and Installing gawk on Unix-Like Systems\n[Unix-Installation.html], Up: Installing gawk [Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nB.3 INSTALLATION ON OTHER OPERATING SYSTEMS\n\nThis section describes how to install gawk on various non-Unix systems.\n\n * Installation on MS-Windows [PC-Installation.html]\n * Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html]", "doc_id": "94d834a4-bcfe-4413-ae7f-eccba3cdd30d", "embedding": null, "doc_hash": "0ad76a0ffbd2103fc1346acf2be713c5938ce355809bd436567bcd66b4d85e80", "extra_info": null, "node_info": {"start": 0, "end": 609, "_node_type": "1"}, "relationships": {"1": "2d5375c3-8565-4c20-95b4-0d7a357d6a1b"}}, "__type__": "1"}, "992eda31-2b7e-4ca3-9621-ee11f13aec9f": {"__data__": {"text": "Next: Changing the Contents of a Field [Changing-Fields.html], Previous: Examining Fields [Fields.html], Up: Reading Input Files\n[Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.3 NONCONSTANT FIELD NUMBERS\n\nA field number need not be a constant. Any expression in the awk language can be used after a \u2018$\u2019 to refer to a field. The value\nof the expression specifies the field number. If the value is a string, rather than a number, it is converted to a number.\nConsider this example:\n\nawk '{ print $NR }'\n\n\nRecall that NR is the number of records read so far: one in the first record, two in the second, and so on. So this example prints\nthe first field of the first record, the second field of the second record, and so on. For the twentieth record, field number 20\nis printed; most likely, the record has fewer than 20 fields, so this prints a blank line. Here is another example of using\nexpressions as field numbers:\n\nawk '{ print $(2*2) }' mail-list\n\n\nawk evaluates the expression \u2018(2*2)\u2019 and uses its value as the number of the field to print. The \u2018*\u2019 represents multiplication, so\nthe expression \u20182*2\u2019 evaluates to four. The parentheses are used so that the multiplication is done before the \u2018$\u2019 operation; they\nare necessary whenever there is a binary operator21 in the field-number expression. This example, then, prints the type of\nrelationship (the fourth field) for every line of the file mail-list. (All of the awk operators are listed, in order of decreasing\nprecedence, in Operator Precedence (How Operators Nest) [Precedence.html].)\n\nIf the field number you compute is zero, you get the entire record. Thus, \u2018$(2-2)\u2019 has the same value as $0. Negative field\nnumbers are not allowed; trying to reference one usually terminates the program. (The POSIX standard does not define what happens\nwhen you reference a negative field number. gawk notices this and terminates your program. Other awk implementations may behave\ndifferently.)\n\nAs mentioned in Examining Fields [Fields.html], awk stores the current record\u2019s number of fields in the built-in variable NF (also\nsee Predefined Variables [Built_002din-Variables.html]). Thus, the expression $NF is not a special feature\u2014it is the direct\nconsequence of evaluating NF and using its value as a field number.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(21)\n\nA binary operator, such as \u2018*\u2019 for multiplication, is one that takes two operands. The distinction is required because awk also\nhas unary (one-operand) and ternary (three-operand) operators.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Changing the Contents of a Field [Changing-Fields.html], Previous: Examining Fields [Fields.html], Up: Reading Input Files\n[Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "992eda31-2b7e-4ca3-9621-ee11f13aec9f", "embedding": null, "doc_hash": "00de344ccbd3192df63f2536b6b1caa6e0afe6d4781a69f8d6d0eaa3aab24365", "extra_info": null, "node_info": {"start": 0, "end": 3117, "_node_type": "1"}, "relationships": {"1": "5abdbc24-8c45-463b-bd90-72ce5c7ed801"}}, "__type__": "1"}, "5d1c5802-ddbf-4bef-9d55-d8699830bb6c": {"__data__": {"text": "Next: Boolean Typed Values [Boolean-Typed-Values.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.1 ALLOWING NONDECIMAL INPUT DATA\n\nIf you run gawk with the --non-decimal-data option, you can have nondecimal values in your input data:\n\n$ echo 0123 123 0x123 |\n> gawk --non-decimal-data '{ printf \"%d, %d, %d\\n\", $1, $2, $3 }'\n-| 83, 123, 291\n\n\nFor this feature to work, write your program so that gawk treats your data as numeric:\n\n$ echo 0123 123 0x123 | gawk '{ print $1, $2, $3 }'\n-| 0123 123 0x123\n\n\nThe print statement treats its expressions as strings. Although the fields can act as numbers when necessary, they are still\nstrings, so print does not try to treat them numerically. You need to add zero to a field to force it to be treated as a number.\nFor example:\n\n$ echo 0123 123 0x123 | gawk --non-decimal-data '\n> { print $1, $2, $3\n>   print $1 + 0, $2 + 0, $3 + 0 }'\n-| 0123 123 0x123\n-| 83 123 291\n\n\nBecause it is common to have decimal data with leading zeros, and because using this facility could lead to surprising results,\nthe default is to leave it disabled. If you want it, you must explicitly request it.\n\n> CAUTION: Use of this option is not recommended. It can break old programs very badly. Instead, use the strtonum() function to\n> convert your data (see String-Manipulation Functions [String-Functions.html]). This makes your programs easier to write and\n> easier to read, and leads to less surprising results.\n> \n> This option may disappear in a future version of gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Boolean Typed Values [Boolean-Typed-Values.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "5d1c5802-ddbf-4bef-9d55-d8699830bb6c", "embedding": null, "doc_hash": "158d00aa86bdb8971b17b945fcbe554a865b95f391c0de1bd81681b051402a70", "extra_info": null, "node_info": {"start": 0, "end": 2008, "_node_type": "1"}, "relationships": {"1": "cda3d6ce-4a08-4381-b89a-54cb8073e206"}}, "__type__": "1"}, "ab9de956-5e53-4adf-8a98-864569b75922": {"__data__": {"text": "Next: Regular Expression Constants [Regexp-Constants.html], Previous: Numeric and String Constants [Scalar-Constants.html], Up:\nConstant Expressions [Constants.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.1.2 OCTAL AND HEXADECIMAL NUMBERS\n\nIn awk, all numbers are in decimal (i.e., base 10). Many other programming languages allow you to specify numbers in other bases,\noften octal (base 8) and hexadecimal (base 16). In octal, the numbers go 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, and so on. Just as\n\u201811\u2019 in decimal is 1 times 10 plus 1, so \u201811\u2019 in octal is 1 times 8 plus 1. This equals 9 in decimal. In hexadecimal, there are 16\ndigits. Because the everyday decimal number system only has ten digits (\u20180\u2019\u2013\u20189\u2019), the letters \u2018a\u2019 through \u2018f\u2019 represent the rest.\n(Case in the letters is usually irrelevant; hexadecimal \u2018a\u2019 and \u2018A\u2019 have the same value.) Thus, \u201811\u2019 in hexadecimal is 1 times 16\nplus 1, which equals 17 in decimal.\n\nJust by looking at plain \u201811\u2019, you can\u2019t tell what base it\u2019s in. So, in C, C++, and other languages derived from C, there is a\nspecial notation to signify the base. Octal numbers start with a leading \u20180\u2019, and hexadecimal numbers start with a leading \u20180x\u2019 or\n\u20180X\u2019:\n\n11\n\nDecimal value 11\n\n011\n\nOctal 11, decimal value 9\n\n0x11\n\nHexadecimal 11, decimal value 17\n\nThis example shows the difference:\n\n$ gawk 'BEGIN { printf \"%d, %d, %d\\n\", 011, 11, 0x11 }'\n-| 9, 11, 17\n\n\nBeing able to use octal and hexadecimal constants in your programs is most useful when working with data that cannot be\nrepresented conveniently as characters or as regular numbers, such as binary data of various sorts.\n\ngawk allows the use of octal and hexadecimal constants in your program text. However, such numbers in the input data are not\ntreated differently; doing so by default would break old programs. (If you really need to do this, use the --non-decimal-data\ncommand-line option; see Allowing Nondecimal Input Data [Nondecimal-Data.html].) If you have octal or hexadecimal data, you can\nuse the strtonum() function (see String-Manipulation Functions [String-Functions.html]) to convert the data into a number. Most of\nthe time, you will want to use octal or hexadecimal constants when working with the built-in bit-manipulation functions; see\nBit-Manipulation Functions [Bitwise-Functions.html] for more information.\n\nUnlike in some early C implementations, \u20188\u2019 and \u20189\u2019 are not valid in octal constants. For example, gawk treats \u2018018\u2019 as decimal\n18:\n\n$ gawk 'BEGIN { print \"021 is\", 021 ; print 018 }'\n-| 021 is 17\n-| 18\n\n\nOctal and hexadecimal source code constants are a gawk extension. If gawk is in compatibility mode (see Command-Line Options\n[Options.html]), they are not available.\n\nA Constant\u2019s Base Does Not Affect Its Value\n\nOnce a numeric constant has been converted internally into a number, gawk no longer remembers what the original form of the\nconstant was; the internal value is always used. This has particular consequences for conversion of numbers to strings:\n\n$ gawk 'BEGIN { printf \"0x11 is <%s>\\n\", 0x11 }'\n-| 0x11 is <17>\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Regular Expression Constants", "doc_id": "ab9de956-5e53-4adf-8a98-864569b75922", "embedding": null, "doc_hash": "7255ddf648c873933a168f00d49d0de360aae68bd282e25ebc46afea4c688199", "extra_info": null, "node_info": {"start": 0, "end": 3375, "_node_type": "1"}, "relationships": {"1": "c8e64605-0526-446a-8b29-d359d8b7ad16", "3": "91db5b7f-c830-4eda-8931-d0dae5774a38"}}, "__type__": "1"}, "91db5b7f-c830-4eda-8931-d0dae5774a38": {"__data__": {"text": "is <17>\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Regular Expression Constants [Regexp-Constants.html], Previous: Numeric and String Constants [Scalar-Constants.html], Up:\nConstant Expressions [Constants.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "91db5b7f-c830-4eda-8931-d0dae5774a38", "embedding": null, "doc_hash": "60d7c0b925c6bc50927938d24e333cf03cbd62b1cbe0b8996de01bbd31a7f427", "extra_info": null, "node_info": {"start": 3199, "end": 3565, "_node_type": "1"}, "relationships": {"1": "c8e64605-0526-446a-8b29-d359d8b7ad16", "2": "ab9de956-5e53-4adf-8a98-864569b75922"}}, "__type__": "1"}, "3191bc0d-8c6d-4f8b-b345-edaaddfa8a61": {"__data__": {"text": "Next: Summary [Output-Summary.html], Previous: Closing Input and Output Redirections [Close-Files-And-Pipes.html], Up: Printing\nOutput [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.10 ENABLING NONFATAL OUTPUT\n\nThis section describes a gawk-specific feature.\n\nIn standard awk, output with print or printf to a nonexistent file, or some other I/O error (such as filling up the disk) is a\nfatal error.\n\n$ gawk 'BEGIN { print \"hi\" > \"/no/such/file\" }'\nerror\u2192 gawk: cmd. line:1: fatal: can't redirect to `/no/such/file' (No\nerror\u2192 such file or directory)\n\n\ngawk makes it possible to detect that an error has occurred, allowing you to possibly recover from the error, or at least print an\nerror message of your choosing before exiting. You can do this in one of two ways:\n\n * For all output files, by assigning any value to PROCINFO[\"NONFATAL\"].\n * On a per-file basis, by assigning any value to PROCINFO[filename, \"NONFATAL\"]. Here, filename is the name of the file to which\n   you wish output to be nonfatal.\n\nOnce you have enabled nonfatal output, you must check ERRNO after every relevant print or printf statement to see if something\nwent wrong. It is also a good idea to initialize ERRNO to zero before attempting the output. For example:\n\n$ gawk '\n> BEGIN {\n>     PROCINFO[\"NONFATAL\"] = 1\n>     ERRNO = 0\n>     print \"hi\" > \"/no/such/file\"\n>     if (ERRNO) {\n>         print(\"Output failed:\", ERRNO) > \"/dev/stderr\"\n>         exit 1\n>     }\n> }'\nerror\u2192 Output failed: No such file or directory\n\n\nHere, gawk did not produce a fatal error; instead it let the awk program code detect the problem and handle it.\n\nThis mechanism works also for standard output and standard error. For standard output, you may use PROCINFO[\"-\", \"NONFATAL\"] or\nPROCINFO[\"/dev/stdout\", \"NONFATAL\"]. For standard error, use PROCINFO[\"/dev/stderr\", \"NONFATAL\"].\n\nWhen attempting to open a TCP/IP socket (see Using gawk for Network Programming [TCP_002fIP-Networking.html]), gawk tries multiple\ntimes. The GAWK_SOCK_RETRIES environment variable (see Other Environment Variables [Other-Environment-Variables.html]) allows you\nto override gawk\u2019s builtin default number of attempts. However, once nonfatal I/O is enabled for a given socket, gawk only retries\nonce, relying on awk-level code to notice that there was a problem.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Output-Summary.html], Previous: Closing Input and Output Redirections [Close-Files-And-Pipes.html], Up: Printing\nOutput [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3191bc0d-8c6d-4f8b-b345-edaaddfa8a61", "embedding": null, "doc_hash": "6db624f240b04d589b39b9d086444ba5a1e4ec0b134f1f9a0aebde8d5ac4ba37", "extra_info": null, "node_info": {"start": 0, "end": 2804, "_node_type": "1"}, "relationships": {"1": "2b74c845-f2eb-4823-98ca-62f1cf7a0229"}}, "__type__": "1"}, "e438b15c-fd86-45b3-8637-09895c26345a": {"__data__": {"text": "Previous: Extension API Design [Extension-Design.html], Up: Implementation Notes [Notes.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nC.6 SUMMARY\n\n * gawk\u2019s extensions can be disabled with either the --traditional option or with the --posix option. The --parsedebug option is\n   available if gawk is compiled with \u2018-DDEBUG\u2019.\n * The source code for gawk is maintained in a publicly accessible Git repository. Anyone may check it out and view the source.\n * Contributions to gawk are welcome. Following the steps outlined in this chapter will make it easier to integrate your\n   contributions into the code base. This applies both to new feature contributions and to ports to additional operating systems.\n * gawk has some limits\u2014generally those that are imposed by the machine architecture.\n * The extension API design was intended to solve a number of problems with the previous extension mechanism, enable features\n   needed by the xgawk project, and provide binary compatibility going forward.\n * The previous extension mechanism is no longer supported and was removed from the code base with the 4.2 release.", "doc_id": "e438b15c-fd86-45b3-8637-09895c26345a", "embedding": null, "doc_hash": "beae4d03306dd8e1bbce94618beca233cfc8cc90ed7419426cecc147c13b87bd", "extra_info": null, "node_info": {"start": 0, "end": 1264, "_node_type": "1"}, "relationships": {"1": "a5892a70-c3b5-4131-b3e8-3e4ea6b1c8d2"}}, "__type__": "1"}, "3bb7a5f5-7dc8-489e-a283-b12ebb04408a": {"__data__": {"text": "Next: Basic Programming Concepts [Basic-Concepts.html], Previous: Installing gawk [Installation.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nAPPENDIX C IMPLEMENTATION NOTES\n\nThis appendix contains information mainly of interest to implementers and maintainers of gawk. Everything in it applies\nspecifically to gawk and not to other implementations.\n\n * Downward Compatibility and Debugging [Compatibility-Mode.html]\n * Making Additions to gawk [Additions.html]\n * Probable Future Extensions [Future-Extensions.html]\n * Some Limitations of the Implementation [Implementation-Limitations.html]\n * Extension API Design [Extension-Design.html]\n * Summary [Notes-summary.html]", "doc_id": "3bb7a5f5-7dc8-489e-a283-b12ebb04408a", "embedding": null, "doc_hash": "b8e6ef916efc71059dab0083cd41c96e8100e6569fb06916567510e2103dfc11", "extra_info": null, "node_info": {"start": 0, "end": 864, "_node_type": "1"}, "relationships": {"1": "15301fe8-6386-4313-91c0-e0e3766c0da3"}}, "__type__": "1"}, "aec84650-5157-41ad-8f74-764067e6cfe6": {"__data__": {"text": "Next: Using Uninitialized Variables as Subscripts [Uninitialized-Subscripts.html], Previous: The Basics of Arrays\n[Array-Basics.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.2 USING NUMBERS TO SUBSCRIPT ARRAYS\n\nAn important aspect to remember about arrays is that array subscripts are always strings. When a numeric value is used as a\nsubscript, it is converted to a string value before being used for subscripting (see Conversion of Strings and Numbers\n[Conversion.html]). This means that the value of the predefined variable CONVFMT can affect how your program accesses elements of\nan array. For example:\n\nxyz = 12.153\ndata[xyz] = 1\nCONVFMT = \"%2.2f\"\nif (xyz in data)\n    printf \"%s is in data\\n\", xyz\nelse\n    printf \"%s is not in data\\n\", xyz\n\n\nThis prints \u201812.15 is not in data\u2019. The first statement gives xyz a numeric value. Assigning to data[xyz] subscripts data with the\nstring value \"12.153\" (using the default conversion value of CONVFMT, \"%.6g\"). Thus, the array element data[\"12.153\"] is assigned\nthe value one. The program then changes the value of CONVFMT. The test \u2018(xyz in data)\u2019 generates a new string value from xyz\u2014this\ntime \"12.15\"\u2014because the value of CONVFMT only allows two significant digits. This test fails, because \"12.15\" is different from\n\"12.153\".\n\nAccording to the rules for conversions (see Conversion of Strings and Numbers [Conversion.html]), integer values always convert to\nstrings as integers, no matter what the value of CONVFMT may happen to be. So the usual case of the following works:\n\nfor (i = 1; i <= maxsub; i++)\n    do something with array[i]\n\n\nThe \u201cinteger values always convert to strings as integers\u201d rule has an additional consequence for array indexing. Octal and\nhexadecimal constants (see Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html]) are converted internally into numbers, and\ntheir original form is forgotten. This means, for example, that array[17], array[021], and array[0x11] all refer to the same\nelement!\n\nAs with many things in awk, the majority of the time things work as you would expect them to. But it is useful to have a precise\nknowledge of the actual rules, as they can sometimes have a subtle effect on your programs.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using Uninitialized Variables as Subscripts [Uninitialized-Subscripts.html], Previous: The Basics of Arrays\n[Array-Basics.html], Up: Arrays in awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "aec84650-5157-41ad-8f74-764067e6cfe6", "embedding": null, "doc_hash": "35f22f2b13115b7d8bc5d03ff4ab23f91ff24bca641213fd3515b1d2d57026c1", "extra_info": null, "node_info": {"start": 0, "end": 2749, "_node_type": "1"}, "relationships": {"1": "2ebf010e-dc5c-433a-b882-f8de385a9695"}}, "__type__": "1"}, "3bb5a027-b6ad-4f01-bb49-0762e20fe1e7": {"__data__": {"text": "Next: String-Manipulation Functions [String-Functions.html], Previous: Generating Boolean Values [Boolean-Functions.html], Up:\nBuilt-in Functions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.3 NUMERIC FUNCTIONS\n\nThe following list describes all of the built-in functions that work with numbers. Optional parameters are enclosed in square\nbrackets\u00a0([\u00a0]):\n\natan2(y, x) \u00b6\n\nReturn the arctangent of y / x in radians. You can use \u2018pi = atan2(0, -1)\u2019 to retrieve the value of pi.\n\ncos(x) \u00b6\n\nReturn the cosine of x, with x in radians.\n\nexp(x) \u00b6\n\nReturn the exponential of x (e ^ x) or report an error if x is out of range. The range of values x can have depends on your\nmachine\u2019s floating-point representation.\n\nint(x) \u00b6\n\nReturn the nearest integer to x, located between x and zero and truncated toward zero. For example, int(3) is 3, int(3.9) is 3,\nint(-3.9) is \u22123, and int(-3) is \u22123 as well.\n\nlog(x) \u00b6\n\nReturn the natural logarithm of x, if x is positive; otherwise, return NaN (\u201cnot a number\u201d) on IEEE 754 systems. Additionally,\ngawk prints a warning message when x is negative.\n\nrand() \u00b6\n\nReturn a random number. The values of rand() are uniformly distributed between zero and one. The value could be zero but is never\none.44\n\nOften random integers are needed instead. Following is a user-defined function that can be used to obtain a random nonnegative\ninteger less than n:\n\nfunction randint(n)\n{\n    return int(n * rand())\n}\n\n\nThe multiplication produces a random number greater than or equal to zero and less than n. Using int(), this result is made into\nan integer between zero and n \u2212 1, inclusive.\n\nThe following example uses a similar function to produce random integers between one and n. This program prints a new random\nnumber for each input record:\n\n# Function to roll a simulated die.\nfunction roll(n) { return 1 + int(rand() * n) }\n\n# Roll 3 six-sided dice and\n# print total number of points.\n{\n    printf(\"%d points\\n\", roll(6) + roll(6) + roll(6))\n}\n\n\n> CAUTION: In most awk implementations, including gawk, rand() starts generating numbers from the same starting number, or seed,\n> each time you run awk.45 Thus, a program generates the same results each time you run it. The numbers are random within one awk\n> run but predictable from run to run. This is convenient for debugging, but if you want a program to do different things each\n> time it is used, you must change the seed to a value that is different in each run. To do this, use srand().\n\nsin(x) \u00b6\n\nReturn the sine of x, with x in radians.\n\nsqrt(x) \u00b6\n\nReturn the positive square root of x. gawk prints a warning message if x is negative. Thus, sqrt(4) is 2.\n\nsrand([x]) \u00b6\n\nSet the starting point, or seed, for generating random numbers to the value x.\n\nEach seed value leads to a particular sequence of random numbers.46 Thus, if the seed is set to the same value a second time, the\nsame sequence of random numbers is produced again.\n\n> CAUTION: Different awk implementations use different random-number generators internally. Don\u2019t expect the same awk program to\n> produce the same series of random numbers when executed by different versions of awk.\n\nIf the argument x is omitted, as in \u2018srand()\u2019, then the current date and time of day are used for a seed. This is the way to get\nrandom numbers that are truly unpredictable.\n\nThe return value of srand() is the previous seed. This makes it easy to keep track", "doc_id": "3bb5a027-b6ad-4f01-bb49-0762e20fe1e7", "embedding": null, "doc_hash": "5169df85cfd3c523c4e00f43c3d8fd42daf1cee7f248f01f7035237d523f5605", "extra_info": null, "node_info": {"start": 0, "end": 3554, "_node_type": "1"}, "relationships": {"1": "fb8b32ec-a884-4ff7-ad1c-3c204ee8d271", "3": "555a95e7-21c5-400f-9f98-cc1e4989687b"}}, "__type__": "1"}, "555a95e7-21c5-400f-9f98-cc1e4989687b": {"__data__": {"text": "return value of srand() is the previous seed. This makes it easy to keep track of the seeds in case you need to consistently\nreproduce sequences of random numbers.\n\nPOSIX does not specify the initial seed; it differs among awk implementations.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(44)\n\nThe C version of rand() on many Unix systems is known to produce fairly poor sequences of random numbers. However, nothing\nrequires that an awk implementation use the C rand() to implement the awk version of rand(). In fact, for many years, gawk used\nthe BSD random() function, which is considerably better than rand(), to produce random numbers. From version 4.1.4, courtesy of\nNelson H.F. Beebe, gawk uses the Bayes-Durham shuffle buffer algorithm which considerably extends the period of the random number\ngenerator, and eliminates short-range and long-range correlations that might exist in the original generator.\n\n(45)\n\nmawk uses a different seed each time.\n\n(46)\n\nComputer-generated random numbers really are not truly random. They are technically known as pseudorandom. This means that\nalthough the numbers in a sequence appear to be random, you can in fact generate the same sequence of random numbers over and over\nagain.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: String-Manipulation Functions [String-Functions.html], Previous: Generating Boolean Values [Boolean-Functions.html], Up:\nBuilt-in Functions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "555a95e7-21c5-400f-9f98-cc1e4989687b", "embedding": null, "doc_hash": "b18521b8eeeb1172a691d720295cf4dd86106526de86366ecb86bc21c307db55", "extra_info": null, "node_info": {"start": 3476, "end": 5159, "_node_type": "1"}, "relationships": {"1": "fb8b32ec-a884-4ff7-ad1c-3c204ee8d271", "2": "3bb5a027-b6ad-4f01-bb49-0762e20fe1e7"}}, "__type__": "1"}, "90ec1747-210d-48d5-953d-ba68b2873bae": {"__data__": {"text": "Next: Using printf Statements for Fancier Printing [Printf.html], Previous: Output Separators [Output-Separators.html], Up:\nPrinting Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.4 CONTROLLING NUMERIC OUTPUT WITH PRINT\n\nWhen printing numeric values with the print statement, awk internally converts each number to a string of characters and prints\nthat string. awk uses the sprintf() function to do this conversion (see String-Manipulation Functions [String-Functions.html]).\nFor now, it suffices to say that the sprintf() function accepts a format specification that tells it how to format numbers (or\nstrings), and that there are a number of different ways in which numbers can be formatted. The different format specifications are\ndiscussed more fully in Format-Control Letters [Control-Letters.html].\n\nThe predefined variable OFMT contains the format specification that print uses with sprintf() when it wants to convert a number to\na string for printing. The default value of OFMT is \"%.6g\". The way print prints numbers can be changed by supplying a different\nformat specification for the value of OFMT, as shown in the following example:\n\n$ awk 'BEGIN {\n>   OFMT = \"%.0f\"  # print numbers as integers (rounds)\n>   print 17.23, 17.54 }'\n-| 17 18\n\n\nAccording to the POSIX standard, awk\u2019s behavior is undefined if OFMT contains anything but a floating-point conversion\nspecification. (d.c.)", "doc_id": "90ec1747-210d-48d5-953d-ba68b2873bae", "embedding": null, "doc_hash": "ec6ef59f6735ccaa158a4d185243675f5c71bb1e268ff56023c356d63066733b", "extra_info": null, "node_info": {"start": 0, "end": 1566, "_node_type": "1"}, "relationships": {"1": "898989b8-ac70-44cb-af04-a0534985c99d"}}, "__type__": "1"}, "9f6345e8-8309-45f7-b8e4-784b2badcdb3": {"__data__": {"text": "Next: Undocumented Options and Features [Undocumented.html], Previous: Loading Dynamic Extensions into Your Program\n[Loading-Shared-Libraries.html], Up: Running awk and gawk [Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.9 OBSOLETE OPTIONS AND/OR FEATURES\n\nThis section describes features and/or command-line options from previous releases of gawk that either are not available in the\ncurrent version or are still supported but deprecated (meaning that they will not be in a future release).\n\nThe arbitrary precision arithmetic feature is deprecated as of gawk version 5.2. Use of -M/--bignum produces a warning message.\nThe feature will be removed in the release of 2024.", "doc_id": "9f6345e8-8309-45f7-b8e4-784b2badcdb3", "embedding": null, "doc_hash": "4d205325bd7c131b5edaaedbd53e6906b9715db0a70d01b122087df4e1982c83", "extra_info": null, "node_info": {"start": 0, "end": 841, "_node_type": "1"}, "relationships": {"1": "9f1d1b55-585f-4e7c-805b-417f7053e529"}}, "__type__": "1"}, "730279df-8057-4fe0-83e5-2ac247609e6a": {"__data__": {"text": "Next: Goals For A New Mechanism [Extension-New-Mechanism-Goals.html], Up: Extension API Design [Extension-Design.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nC.5.1 PROBLEMS WITH THE OLD MECHANISM\n\nThe old extension mechanism had several problems:\n\n * It depended heavily upon gawk internals. Any time the NODE structure120 changed, an extension would have to be recompiled.\n   Furthermore, to really write extensions required understanding something about gawk\u2019s internal functions. There was some\n   documentation in this Web page, but it was quite minimal.\n * Being able to call into gawk from an extension required linker facilities that are common on Unix-derived systems but that did\n   not work on MS-Windows systems; users wanting extensions on MS-Windows had to statically link them into gawk, even though\n   MS-Windows supports dynamic loading of shared objects.\n * The API would change occasionally as gawk changed; no compatibility between versions was ever offered or planned for.\n\nDespite the drawbacks, the xgawk project developers forked gawk and developed several significant extensions. They also enhanced\ngawk\u2019s facilities relating to file inclusion and shared object access.\n\nA new API was desired for a long time, but only in 2012 did the gawk maintainer and the xgawk developers finally start working on\nit together. More information about the xgawk project is provided in The gawkextlib Project [gawkextlib.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(120)\n\nA critical central data structure inside gawk.", "doc_id": "730279df-8057-4fe0-83e5-2ac247609e6a", "embedding": null, "doc_hash": "2a7f70c236edaa9e4ffba05a039f8d21e0de6b8be9f2aafc3bb3ae12b40b4b24", "extra_info": null, "node_info": {"start": 0, "end": 1786, "_node_type": "1"}, "relationships": {"1": "6023ebb6-0bf9-4356-a084-41a779f44df9"}}, "__type__": "1"}, "a26e3599-1ca0-40cd-a4d8-1da5889c5f1e": {"__data__": {"text": "Next: Running awk Without Input Files [Read-Terminal.html], Up: How to Run awk Programs [Running-gawk.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.1 ONE-SHOT THROWAWAY AWK PROGRAMS\n\nOnce you are familiar with awk, you will often type in simple programs the moment you want to use them. Then you can write the\nprogram as the first argument of the awk command, like this:\n\nawk 'program' input-file1 input-file2 \u2026\n\n\nwhere program consists of a series of patterns and actions, as described earlier.\n\nThis command format instructs the shell, or command interpreter, to start awk and use the program to process records in the input\nfile(s). There are single quotes around program so the shell won\u2019t interpret any awk characters as special shell characters. The\nquotes also cause the shell to treat all of program as a single argument for awk, and allow program to be more than one line long.\n\nThis format is also useful for running short or medium-sized awk programs from shell scripts, because it avoids the need for a\nseparate file for the awk program. A self-contained shell script is more reliable because there are no other files to misplace.\n\nLater in this chapter, in Some Simple Examples [Very-Simple.html], we\u2019ll see examples of several short, self-contained programs.", "doc_id": "a26e3599-1ca0-40cd-a4d8-1da5889c5f1e", "embedding": null, "doc_hash": "98f6a2d2a9dcc1c675c9d0bf03aefc5cf92dcb3c40dec8c3a53e22880110c30b", "extra_info": null, "node_info": {"start": 0, "end": 1428, "_node_type": "1"}, "relationships": {"1": "ca0f3a20-5daf-4428-bd50-e4d0d7b39da7"}}, "__type__": "1"}, "3a638184-ea50-40c1-8a14-53737ee43c32": {"__data__": {"text": "Next: Compiling gawk Dynamic Extensions on OpenVMS [OpenVMS-Dynamic-Extensions.html], Up: Compiling and Installing gawk on OpenVMS\n[OpenVMS-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.2.1 COMPILING GAWK ON OPENVMS\n\nTo compile gawk under OpenVMS, there is a DCL command procedure that issues all the necessary CC and LINK commands. There is also\na Makefile for use with the MMS and MMK utilities. From the source directory, use either:\n\n$ @[.vms]vmsbuild.com\n\n\nor:\n\n$ MMS/DESCRIPTION=[.vms]descrip.mms gawk\n\n\nor:\n\n$ MMK/DESCRIPTION=[.vms]descrip.mms gawk\n\n\nNote that the vmsbuild.com method of building is no longer being maintained and is planned to be removed in the future.\n\nMMK is an open source, free, near-clone of MMS and can better handle ODS-5 volumes with upper- and lowercase file names. MMK is\navailable from https://github.com/endlesssoftware/mmk [https://github.com/endlesssoftware/mmk].\n\nWith ODS-5 volumes and extended parsing enabled, the case of the target parameter may need to be exact.\n\ngawk has been tested using these VMS Software, Inc. Community editions:\n\n * HP C V7.3-010 on OpenVMS Alpha V8.4-2L1.\n * HP C V7.3-020 on OpenVMS IA64 V8.4-2L3.116\n\nDue to HPE cancelling the Hobbyist licensing program, no more testing is being done on older releases of OpenVMS.\n\nSee The OpenVMS GNV Project [OpenVMS-GNV.html] for information on building gawk as a PCSI kit that is compatible with the GNV\nproduct.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(116)\n\nThe IA64 architecture is also known as \u201cItanium.\u201d", "doc_id": "3a638184-ea50-40c1-8a14-53737ee43c32", "embedding": null, "doc_hash": "0dbd826cc6e37bb601fb80c05249ae8a05f55392a121c3bb77f5e26ddf1a1383", "extra_info": null, "node_info": {"start": 0, "end": 1792, "_node_type": "1"}, "relationships": {"1": "b0723038-4d6c-4c60-8233-06a87e2be3f7"}}, "__type__": "1"}, "f6eaedfc-4a90-4eb3-bd22-2220bd8a2e7c": {"__data__": {"text": "Next: Installing gawk on OpenVMS [OpenVMS-Installation-Details.html], Previous: Compiling gawk on OpenVMS\n[OpenVMS-Compilation.html], Up: Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.2.2 COMPILING GAWK DYNAMIC EXTENSIONS ON OPENVMS\n\nThe extensions that have been ported to OpenVMS can be built using one of the following commands:\n\n$ MMS/DESCRIPTION=[.vms]descrip.mms extensions\n\n\nor:\n\n$ MMK/DESCRIPTION=[.vms]descrip.mms extensions\n\n\ngawk uses AWKLIBPATH as either an environment variable or a logical name to find the dynamic extensions.\n\nDynamic extensions need to be compiled with the same compiler options for floating-point, pointer size, and symbol name handling\nas were used to compile gawk itself. Alpha and Itanium should use IEEE floating point. The pointer size is 32 bits, and the symbol\nname handling should be exact case with CRC shortening for symbols longer than 32 bits.\n\n/name=(as_is,short)\n/float=ieee/ieee_mode=denorm_results\n\n\nCompile-time macros need to be defined before the first OpenVMS-supplied header file is included, as follows:\n\n#if (__CRTL_VER >= 70200000)\n#define _LARGEFILE 1\n#endif\n\n#ifdef __CRTL_VER\n#if __CRTL_VER >= 80200000\n#define _USE_STD_STAT 1\n#endif\n#endif\n\n\nIf you are writing your own extensions to run on OpenVMS, you must supply these definitions yourself. The config.h file created\nwhen building gawk on OpenVMS does this for you; if instead you use that file or a similar one, then you must remember to include\nit before any OpenVMS-supplied header files.", "doc_id": "f6eaedfc-4a90-4eb3-bd22-2220bd8a2e7c", "embedding": null, "doc_hash": "d7d48c2df475be5e57c26cb32d4c4424a5570c8ede5de23e03eec137ee5dd73c", "extra_info": null, "node_info": {"start": 0, "end": 1725, "_node_type": "1"}, "relationships": {"1": "d93dc380-6baf-4642-8c5f-edf54bcfbb9e"}}, "__type__": "1"}, "175f8362-4da2-4329-b3b5-e7e8946382f7": {"__data__": {"text": "Previous: Running gawk on OpenVMS [OpenVMS-Running.html], Up: Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.2.5 THE OPENVMS GNV PROJECT\n\nThe OpenVMS GNV package provides a build environment similar to POSIX with ports of a collection of open source tools. The gawk\nfound in the GNV base kit is an older port. Currently, the GNV project is being reorganized to supply individual PCSI packages for\neach component. See https://sourceforge.net/p/gnv/wiki/InstallingGNVPackages/\n[https://sourceforge.net/p/gnv/wiki/InstallingGNVPackages/].\n\nThe normal build procedure for gawk produces a program that is suitable for use with GNV.\n\nThe file vms/gawk_build_steps.txt in the distribution documents the procedure for building an OpenVMS PCSI kit that is compatible\nwith GNV.", "doc_id": "175f8362-4da2-4329-b3b5-e7e8946382f7", "embedding": null, "doc_hash": "9f6c7c0e6ca2185f72738758470bb8af00d2de4a660978def0a4ef69257c68b7", "extra_info": null, "node_info": {"start": 0, "end": 985, "_node_type": "1"}, "relationships": {"1": "19c5f721-61c6-4781-9e85-214a3a526f6b"}}, "__type__": "1"}, "09042f83-755c-4784-8d61-202d3d72df5e": {"__data__": {"text": "Next: Running gawk on OpenVMS [OpenVMS-Running.html], Previous: Compiling gawk Dynamic Extensions on OpenVMS\n[OpenVMS-Dynamic-Extensions.html], Up: Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.2.3 INSTALLING GAWK ON OPENVMS\n\nTo use gawk, all you need is a \u201cforeign\u201d command, which is a DCL symbol whose value begins with a dollar sign. For example:\n\n$ GAWK :== $disk1:[gnubin]gawk\n\n\nSubstitute the actual location of gawk.exe for \u2018$disk1:[gnubin]\u2019. The symbol should be placed in the login.com of any user who\nwants to run gawk, so that it is defined every time the user logs on. Alternatively, the symbol may be placed in the system-wide\nsylogin.com procedure, which allows all users to run gawk.\n\nIf your gawk was installed by a PCSI kit into the GNV$GNU: directory tree, the program will be known as GNV$GNU:[bin]gnv$gawk.exe\nand the help file will be GNV$GNU:[vms_help]gawk.hlp.\n\nThe PCSI kit also installs a GNV$GNU:[vms_bin]gawk_verb.cld file that can be used to add gawk and awk as DCL commands.\n\nFor just the current process you can use:\n\n$ set command gnv$gnu:[vms_bin]gawk_verb.cld\n\n\nOr the system manager can use GNV$GNU:[vms_bin]gawk_verb.cld to add the gawk and awk commands to the system-wide \u2018DCLTABLES\u2019.\n\nThe DCL syntax is documented in the gawk.hlp file.\n\nOptionally, the gawk.hlp entry can be loaded into an OpenVMS help library:\n\n$ LIBRARY/HELP sys$help:helplib [.vms]gawk.hlp\n\n\n(You may want to substitute a site-specific help library rather than the standard OpenVMS library \u2018HELPLIB\u2019.) After loading the\nhelp text, the command:\n\n$ HELP GAWK\n\n\nprovides information about both the gawk implementation and the awk programming language.\n\nThe logical name \u2018AWK_LIBRARY\u2019 can designate a default location for awk program files. For the -f option, if the specified file\nname has no device or directory path information in it, gawk looks in the current directory first, then in the directory specified\nby the translation of \u2018AWK_LIBRARY\u2019 if the file is not found. If, after searching in both directories, the file still is not\nfound, gawk appends the suffix \u2018.awk\u2019 to the file name and retries the file search. If \u2018AWK_LIBRARY\u2019 has no definition, a default\nvalue of \u2018SYS$LIBRARY:\u2019 is used for it.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Running gawk on OpenVMS [OpenVMS-Running.html], Previous: Compiling gawk Dynamic Extensions on OpenVMS\n[OpenVMS-Dynamic-Extensions.html], Up: Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "09042f83-755c-4784-8d61-202d3d72df5e", "embedding": null, "doc_hash": "809a1ef974ae8c21e4daf808c00cb7a2e1cd74cef5e0764e3297a7141ba176c7", "extra_info": null, "node_info": {"start": 0, "end": 2838, "_node_type": "1"}, "relationships": {"1": "c818cace-def7-4dc6-ad58-3060cc7d4c45"}}, "__type__": "1"}, "8261f1ff-c8d1-4fc6-bbb9-c9781ddb5663": {"__data__": {"text": "Previous: Installation on MS-Windows [PC-Installation.html], Up: Installation on Other Operating Systems\n[Non_002dUnix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.2 COMPILING AND INSTALLING GAWK ON OPENVMS\n\nThis subsection describes how to compile and install gawk under OpenVMS.\n\n * Compiling gawk on OpenVMS [OpenVMS-Compilation.html]\n * Compiling gawk Dynamic Extensions on OpenVMS [OpenVMS-Dynamic-Extensions.html]\n * Installing gawk on OpenVMS [OpenVMS-Installation-Details.html]\n * Running gawk on OpenVMS [OpenVMS-Running.html]\n * The OpenVMS GNV Project [OpenVMS-GNV.html]", "doc_id": "8261f1ff-c8d1-4fc6-bbb9-c9781ddb5663", "embedding": null, "doc_hash": "53b834a14c099a881983b5dd847e6cd983576622761492243666197c38937836", "extra_info": null, "node_info": {"start": 0, "end": 751, "_node_type": "1"}, "relationships": {"1": "cc889666-1378-4e6d-a13a-3ae3f87d846b"}}, "__type__": "1"}, "f1f87439-ed50-425e-83e3-e82c625a2fa0": {"__data__": {"text": "Next: The OpenVMS GNV Project [OpenVMS-GNV.html], Previous: Installing gawk on OpenVMS [OpenVMS-Installation-Details.html], Up:\nCompiling and Installing gawk on OpenVMS [OpenVMS-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.2.4 RUNNING GAWK ON OPENVMS\n\nCommand-line parsing and quoting conventions are significantly different on OpenVMS, so examples in this Web page or from other\nsources often need minor changes. They are minor though, and all awk programs should run correctly.\n\nHere are a couple of trivial tests:\n\n$ gawk -- \"BEGIN {print \"\"Hello, World!\"\"}\"\n$ gawk -\"W\" version\n! could also be -\"W version\" or \"-W version\"\n\n\nNote that uppercase and mixed-case text must be quoted.\n\nThe OpenVMS port of gawk includes a DCL-style interface in addition to the original shell-style interface (see the help entry for\ndetails). One side effect of dual command-line parsing is that if there is only a single parameter (as in the quoted program\nstring), the command becomes ambiguous. To work around this, the normally optional -- flag is required to force Unix-style parsing\nrather than DCL parsing. If any other dash-type options (or multiple parameters such as data files to process) are present, there\nis no ambiguity and -- can be omitted.\n\nThe exit value is a Unix-style value and is encoded into an OpenVMS exit status value when the program exits.\n\nThe OpenVMS severity bits will be set based on the exit value. A failure is indicated by 1, and OpenVMS sets the ERROR status. A\nfatal error is indicated by 2, and OpenVMS sets the FATAL status. All other values will have the SUCCESS status. The exit value is\nencoded to comply with OpenVMS coding standards and will have the C_FACILITY_NO of 0x350000 with the constant 0xA000 added to the\nnumber shifted over by 3 bits to make room for the severity codes.\n\nTo extract the actual gawk exit code from the OpenVMS status, use:\n\nunix_status = (vms_status .and. %x7f8) / 8\n\n\nA C program that uses exec() to call gawk will get the original Unix-style exit value.\n\nOpenVMS reports time values in GMT unless one of the SYS$TIMEZONE_RULE or TZ logical names is set.\n\nThe default search path, when looking for awk program files specified by the -f option, is \"SYS$DISK:[],AWK_LIBRARY:\". The logical\nname AWKPATH can be used to override this default. The format of AWKPATH is a comma-separated list of directory specifications.\nWhen defining it, the value should be quoted so that it retains a single translation and not a multitranslation RMS searchlist.\n\nThis restriction also applies to running gawk under GNV, as redirection is always to a DCL command.\n\nIf you are redirecting data to an OpenVMS command or utility, the current implementation requires setting up an OpenVMS foreign\ncommand that runs a command file before invoking gawk. (This restriction may be removed in a future release of gawk on OpenVMS.)\n\nWithout this command file, the input data will also appear prepended to the output data.\n\nThis also allows simulating POSIX commands that are not found on OpenVMS or the use of GNV utilities.\n\nThe example below is for gawk redirecting data to the OpenVMS sort command.\n\n$ sort = \"@device:[dir]vms_gawk_sort.com\"\n\n\nThe command file needs to be of the format in the example below.\n\nThe first line inhibits the passed input data from also showing up in the output. It must be in the format in the example.\n\nThe next line creates a foreign command that overrides the outer foreign command which prevents an infinite recursion of command\nfiles.\n\nThe next to the last command redirects sys$input to be sys$command, in order to", "doc_id": "f1f87439-ed50-425e-83e3-e82c625a2fa0", "embedding": null, "doc_hash": "c0f667040ee45247c281e7d5de99f6c483969534773170d07467b7874a234504", "extra_info": null, "node_info": {"start": 0, "end": 3749, "_node_type": "1"}, "relationships": {"1": "b84ab6df-93d7-4a4c-9d56-f89f29438f82", "3": "0b5a7135-3cdb-4361-a1c6-a6b30cec5a1d"}}, "__type__": "1"}, "0b5a7135-3cdb-4361-a1c6-a6b30cec5a1d": {"__data__": {"text": "next to the last command redirects sys$input to be sys$command, in order to pick up the data that is being redirected to the\ncommand.\n\nThe last line runs the actual command. It must be the last command as the data redirected from gawk will be read when the command\nfile ends.\n\n$!'f$verify(0,0)'\n$ sort := sort\n$ define/user sys$input sys$command:\n$ sort sys$input: sys$output:\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The OpenVMS GNV Project [OpenVMS-GNV.html], Previous: Installing gawk on OpenVMS [OpenVMS-Installation-Details.html], Up:\nCompiling and Installing gawk on OpenVMS [OpenVMS-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "0b5a7135-3cdb-4361-a1c6-a6b30cec5a1d", "embedding": null, "doc_hash": "a7bc83e9b02726f19afabb9e2071c83e84b74e662e27b5d9c8ef2b5cc788bcef", "extra_info": null, "node_info": {"start": 3674, "end": 4440, "_node_type": "1"}, "relationships": {"1": "b84ab6df-93d7-4a4c-9d56-f89f29438f82", "2": "f1f87439-ed50-425e-83e3-e82c625a2fa0"}}, "__type__": "1"}, "9705bc65-4811-4a59-abc9-1c598a43af71": {"__data__": {"text": "Next: Other Command-Line Arguments [Other-Arguments.html], Previous: Invoking awk [Command-Line.html], Up: Running awk and gawk\n[Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.2 COMMAND-LINE OPTIONS\n\nOptions begin with a dash and consist of a single character. GNU-style long options consist of two dashes and a keyword. The\nkeyword can be abbreviated, as long as the abbreviation allows the option to be uniquely identified. If the option takes an\nargument, either the keyword is immediately followed by an equals sign (\u2018=\u2019) and the argument\u2019s value, or the keyword and the\nargument\u2019s value are separated by whitespace (spaces or TABs). If a particular option with a value is given more than once, it is\n(usually) the last value that counts.\n\nEach long option for gawk has a corresponding POSIX-style short option. The long and short options are interchangeable in all\ncontexts. The following list describes options mandated by the POSIX standard:\n\n-F fs \u00b6 --field-separator fs\n\nSet the FS variable to fs (see Specifying How Fields Are Separated [Field-Separators.html]).\n\n-f source-file \u00b6 --file source-file\n\nRead the awk program source from source-file instead of in the first nonoption argument. This option may be given multiple times;\nthe awk program consists of the concatenation of the contents of each specified source-file.\n\nFiles named with -f are treated as if they had \u2018@namespace \"awk\"\u2019 at their beginning. See Changing The Namespace\n[Changing-The-Namespace.html], for more information on this advanced feature.\n\n-v var=val \u00b6 --assign var=val\n\nSet the variable var to the value val before execution of the program begins. Such variable values are available inside the BEGIN\nrule (see Other Command-Line Arguments [Other-Arguments.html]).\n\nThe -v option can only set one variable, but it can be used more than once, setting another variable each time, like this: \u2018awk\n-v\u00a0foo=1 -v\u00a0bar=2 \u2026\u2019.\n\n> CAUTION: Using -v to set the values of the built-in variables may lead to surprising results. awk will reset the values of those\n> variables as it needs to, possibly ignoring any initial value you may have given.\n\n-W gawk-opt \u00b6\n\nProvide an implementation-specific option. This is the POSIX convention for providing implementation-specific options. These\noptions also have corresponding GNU-style long options. Note that the long options may be abbreviated, as long as the\nabbreviations remain unique. The full list of gawk-specific options is provided next.\n\n-- \u00b6\n\nSignal the end of the command-line options. The following arguments are not treated as options even if they begin with \u2018-\u2019. This\ninterpretation of -- follows the POSIX argument parsing conventions.\n\nThis is useful if you have file names that start with \u2018-\u2019, or in shell scripts, if you have file names that will be specified by\nthe user that could start with \u2018-\u2019. It is also useful for passing options on to the awk program; see Processing Command-Line\nOptions [Getopt-Function.html].\n\nThe following list describes gawk-specific options:\n\n-b \u00b6 --characters-as-bytes\n\nCause gawk to treat all input data as single-byte characters. In addition, all output written with print or printf is treated as\nsingle-byte characters.\n\nNormally, gawk follows the POSIX standard and attempts to process its input data according to the current locale (see Where You\nAre Makes a Difference [Locales.html]). This can often involve converting multibyte characters into wide characters (internally),\nand can lead to problems or confusion if the input data does not contain valid multibyte characters. This option is an easy way to\ntell gawk, \u201cHands off my data!\u201d\n\n-c \u00b6 --traditional\n\nSpecify compatibility mode, in which the", "doc_id": "9705bc65-4811-4a59-abc9-1c598a43af71", "embedding": null, "doc_hash": "cd48d03c4abc57806ba30b6ba341aed0bf4067ed3c07d39c5151affb5f47a99c", "extra_info": null, "node_info": {"start": 0, "end": 3842, "_node_type": "1"}, "relationships": {"1": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b", "3": "57235d4f-039a-4d4c-b936-9b9a96eaf022"}}, "__type__": "1"}, "57235d4f-039a-4d4c-b936-9b9a96eaf022": {"__data__": {"text": "\u00b6 --traditional\n\nSpecify compatibility mode, in which the GNU extensions to the awk language are disabled, so that gawk behaves just like BWK awk.\nSee Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html], which summarizes the extensions. Also see Downward Compatibility and\nDebugging [Compatibility-Mode.html].\n\n-C \u00b6 --copyright\n\nPrint the short version of the General Public License and then exit.\n\n-d[file] \u00b6 --dump-variables[=file]\n\nPrint a sorted list of global variables, their types, and final values to file. If no file is provided, print this list to a file\nnamed awkvars.out in the current directory. No space is allowed between the -d and file, if file is supplied.\n\nHaving a list of all global variables is a good way to look for typographical errors in your programs. You would also use this\noption if you have a large program with a lot of functions, and you want to be sure that your functions don\u2019t inadvertently use\nglobal variables that you meant to be local. (This is a particularly easy mistake to make with simple variable names like i, j,\netc.)\n\n-D[file] \u00b6 --debug[=file]\n\nEnable debugging of awk programs (see Introduction to the gawk Debugger [Debugging.html]). By default, the debugger reads commands\ninteractively from the keyboard (standard input). The optional file argument allows you to specify a file with a list of commands\nfor the debugger to execute noninteractively. No space is allowed between the -D and file, if file is supplied.\n\n-e program-text \u00b6 --source program-text\n\nProvide program source code in the program-text. This option allows you to mix source code in files with source code that you\nenter on the command line. This is particularly useful when you have library functions that you want to use from your command-line\nprograms (see The AWKPATH Environment Variable [AWKPATH-Variable.html]).\n\nNote that gawk treats each string as if it ended with a newline character (even if it doesn\u2019t). This makes building the total\nprogram easier.\n\n> CAUTION: Prior to version 5.0, there was no requirement that each program-text be a full syntactic unit. I.e., the following\n> worked:\n> \n> $ gawk -e 'BEGIN { a = 5 ;' -e 'print a }'\n> -| 5\n> \n> \n> However, this is no longer true. If you have any scripts that rely upon this feature, you should revise them.\n> \n> This is because each program-text is treated as if it had \u2018@namespace \"awk\"\u2019 at its beginning. See Changing The Namespace\n> [Changing-The-Namespace.html], for more information.\n\n-E file \u00b6 --exec file\n\nSimilar to -f, read awk program text from file. There are two differences from -f:\n\n * This option terminates option processing; anything else on the command line is passed on directly to the awk program.\n * Command-line variable assignments of the form \u2018var=value\u2019 are disallowed.\n\nThis option is particularly necessary for World Wide Web CGI applications that pass arguments through the URL; using this option\nprevents a malicious (or other) user from passing in options, assignments, or awk source code (via -e) to the CGI application.11\nThis option should be used with \u2018#!\u2019 scripts (see Executable awk Programs [Executable-Scripts.html]), like so:\n\n#! /usr/local/bin/gawk -E\n\nawk program here \u2026\n\n\n-g \u00b6 --gen-pot\n\nAnalyze the source program and generate a GNU gettext portable object template file on standard output for all string constants\nthat have been marked for translation. See Internationalization with gawk [Internationalization.html], for information about this\noption.\n\n-h \u00b6 --help\n\nPrint a \u201cusage\u201d message summarizing the short- and long-style options that gawk accepts and then exit.\n\n-i source-file \u00b6 --include source-file\n\nRead an awk source library from source-file. This option is completely equivalent to using the @include directive inside your\nprogram. It is very similar to the -f", "doc_id": "57235d4f-039a-4d4c-b936-9b9a96eaf022", "embedding": null, "doc_hash": "0be671925126a8ffd63dfe46d6c41a31d6921393e1dac278c4153ed8a2400071", "extra_info": null, "node_info": {"start": 3792, "end": 7599, "_node_type": "1"}, "relationships": {"1": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b", "2": "9705bc65-4811-4a59-abc9-1c598a43af71", "3": "a4603b1b-3248-4602-98f3-aa2d6773813a"}}, "__type__": "1"}, "a4603b1b-3248-4602-98f3-aa2d6773813a": {"__data__": {"text": "to using the @include directive inside your\nprogram. It is very similar to the -f option, but there are two important differences. First, when -i is used, the program source\nis not loaded if it has been previously loaded, whereas with -f, gawk always loads the file. Second, because this option is\nintended to be used with code libraries, gawk does not recognize such files as constituting main program input. Thus, after\nprocessing an -i argument, gawk still expects to find the main source code via the -f option or on the command line.\n\nFiles named with -i are treated as if they had \u2018@namespace \"awk\"\u2019 at their beginning. See Changing The Namespace\n[Changing-The-Namespace.html], for more information.\n\n-I \u00b6 --trace\n\nPrint the internal byte code names as they are executed when running the program. The trace is printed to standard error. Each \u201cop\ncode\u201d is preceded by a + sign in the output.\n\n-l ext \u00b6 --load ext\n\nLoad a dynamic extension named ext. Extensions are stored as system shared libraries. This option searches for the library using\nthe AWKLIBPATH environment variable. The correct library suffix for your platform will be supplied by default, so it need not be\nspecified in the extension name. The extension initialization routine should be named dl_load(). An alternative is to use the\n@load keyword inside the program to load a shared library. This advanced feature is described in detail in Writing Extensions for\ngawk [Dynamic-Extensions.html].\n\n-L[value] \u00b6 --lint[=value]\n\nWarn about constructs that are dubious or nonportable to other awk implementations. No space is allowed between the -L and value,\nif value is supplied. Some warnings are issued when gawk first reads your program. Others are issued at runtime, as your program\nexecutes. The optional argument may be one of the following:\n\nfatal\n\nCause lint warnings become fatal errors. This may be drastic, but its use will certainly encourage the development of cleaner awk\nprograms.\n\ninvalid\n\nOnly issue warnings about things that are actually invalid are issued. (This is not fully implemented yet.)\n\nno-ext\n\nDisable warnings about gawk extensions.\n\nSome warnings are only printed once, even if the dubious constructs they warn about occur multiple times in your awk program.\nThus, when eliminating problems pointed out by --lint, you should take care to search for all occurrences of each inappropriate\nconstruct. As awk programs are usually short, doing so is not burdensome.\n\n-M \u00b6 --bignum\n\nSelect arbitrary-precision arithmetic on numbers. This option has no effect if gawk is not compiled to use the GNU MPFR and MP\nlibraries (see Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html]).\n\nAs of version 5.2, the arbitrary precision arithmetic features in gawk are \u201con parole.\u201d The primary maintainer is no longer\nwilling to support this feature, but another member of the development team has stepped up to take it over. As long as this\nsituation remains stable, MPFR will be supported. If it changes, the MPFR support will be removed from gawk.\n\n-n \u00b6 --non-decimal-data\n\nEnable automatic interpretation of octal and hexadecimal values in input data (see Allowing Nondecimal Input Data\n[Nondecimal-Data.html]).\n\n> CAUTION: This option can severely break old programs. Use with care. Also note that this option may disappear in a future\n> version of gawk.\n\n-N \u00b6 --use-lc-numeric\n\nForce the use of the locale\u2019s decimal point character when parsing numeric input data (see Where You Are Makes a Difference\n[Locales.html]).\n\n-o[file] \u00b6 --pretty-print[=file]\n\nEnable pretty-printing of awk programs. Implies --no-optimize. By default, the output program is created in a file named\nawkprof.out (see Profiling Your awk Programs [Profiling.html]). The optional file argument allows you to specify a different", "doc_id": "a4603b1b-3248-4602-98f3-aa2d6773813a", "embedding": null, "doc_hash": "1d1c2c84e8fe8ff1a0ee8d96a8b21b88027920f95ebe5cab0cc319a49636e354", "extra_info": null, "node_info": {"start": 7583, "end": 11407, "_node_type": "1"}, "relationships": {"1": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b", "2": "57235d4f-039a-4d4c-b936-9b9a96eaf022", "3": "b5ac4d9f-d1c6-4bef-a292-aff2a2ba2c7d"}}, "__type__": "1"}, "b5ac4d9f-d1c6-4bef-a292-aff2a2ba2c7d": {"__data__": {"text": "awk Programs [Profiling.html]). The optional file argument allows you to specify a different file\nname for the output. No space is allowed between the -o and file, if file is supplied.\n\n> NOTE: In the past, this option would also execute your program. This is no longer the case.\n\n-O \u00b6 --optimize\n\nEnable gawk\u2019s default optimizations on the internal representation of the program. At the moment, this includes just simple\nconstant folding.\n\nOptimization is enabled by default. This option remains primarily for backwards compatibility. However, it may be used to cancel\nthe effect of an earlier -s option (see later in this list).\n\n-p[file] \u00b6 --profile[=file]\n\nEnable profiling of awk programs (see Profiling Your awk Programs [Profiling.html]). Implies --no-optimize. By default, profiles\nare created in a file named awkprof.out. The optional file argument allows you to specify a different file name for the profile\nfile. No space is allowed between the -p and file, if file is supplied.\n\nThe profile contains execution counts for each statement in the program in the left margin, and function call counts for each\nfunction.\n\n-P \u00b6 --posix\n\nOperate in strict POSIX mode. This disables all gawk extensions (just like --traditional) and disables all extensions not allowed\nby POSIX. See Common Extensions Summary [Common-Extensions.html] for a summary of the extensions in gawk that are disabled by this\noption. Also, the following additional restrictions apply:\n\n * \n * Newlines are not allowed after \u2018?\u2019 or \u2018:\u2019 (see Conditional Expressions [Conditional-Exp.html]).\n * Specifying \u2018-Ft\u2019 on the command line does not set the value of FS to be a single TAB character (see Specifying How Fields Are\n   Separated [Field-Separators.html]).\n * The locale\u2019s decimal point character is used for parsing input data (see Where You Are Makes a Difference [Locales.html]).\n\nIf you supply both --traditional and --posix on the command line, --posix takes precedence. gawk issues a warning if both options\nare supplied.\n\n-r \u00b6 --re-interval\n\nAllow interval expressions (see Regular Expression Operators [Regexp-Operators.html]) in regexps. This is now gawk\u2019s default\nbehavior. Nevertheless, this option remains for backward compatibility.\n\n-s \u00b6 --no-optimize\n\nDisable gawk\u2019s default optimizations on the internal representation of the program.\n\n-S \u00b6 --sandbox\n\nDisable the system() function, input redirections with getline, output redirections with print and printf, and dynamic extensions.\nAlso, disallow adding file names to ARGV that were not there when gawk started running. This is particularly useful when you want\nto run awk scripts from questionable sources and need to make sure the scripts can\u2019t access your system (other than the specified\ninput data files).\n\n-t \u00b6 --lint-old\n\nWarn about constructs that are not available in the original version of awk from Version 7 Unix (see Major Changes Between V7 and\nSVR3.1 [V7_002fSVR3_002e1.html]).\n\n-V \u00b6 --version\n\nPrint version information for this particular copy of gawk. This allows you to determine if your copy of gawk is up to date with\nrespect to whatever the Free Software Foundation is currently distributing. It is also useful for bug reports (see Reporting\nProblems and Bugs [Bugs.html]).\n\n--\n\nMark the end of all options. Any command-line arguments following -- are placed in ARGV, even if they start with a minus sign.\n\nIn compatibility mode, as long as program text has been supplied, any other options are flagged as invalid with a warning message\nbut are otherwise ignored.\n\nIn compatibility mode, as a special case, if the value of fs supplied to the -F option is \u2018t\u2019, then FS is set to the TAB character\n(\"\\t\"). This is true only for --traditional and not for --posix (see Specifying How Fields Are Separated", "doc_id": "b5ac4d9f-d1c6-4bef-a292-aff2a2ba2c7d", "embedding": null, "doc_hash": "47fe0e452658d2e020d03f6c8953efeaab208d736f3eed2f5d3fbdbc31fdc1b8", "extra_info": null, "node_info": {"start": 11396, "end": 15162, "_node_type": "1"}, "relationships": {"1": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b", "2": "a4603b1b-3248-4602-98f3-aa2d6773813a", "3": "bf0b3627-d13c-46c1-bf3e-25a4082ad525"}}, "__type__": "1"}, "bf0b3627-d13c-46c1-bf3e-25a4082ad525": {"__data__": {"text": "for --traditional and not for --posix (see Specifying How Fields Are Separated [Field-Separators.html]).\n\nThe -f option may be used more than once on the command line. If it is, awk reads its program source from all of the named files,\nas if they had been concatenated together into one big file. This is useful for creating libraries of awk functions. These\nfunctions can be written once and then retrieved from a standard place, instead of having to be included in each individual\nprogram. The -i option is similar in this regard. (As mentioned in Function Definition Syntax [Definition-Syntax.html], function\nnames must be unique.)\n\nWith standard awk, library functions can still be used, even if the program is entered at the keyboard, by specifying \u2018-f\n/dev/tty\u2019. After typing your program, type Ctrl-d (the end-of-file character) to terminate it. (You may also use \u2018-f -\u2019 to read\nprogram source from the standard input, but then you will not be able to also use the standard input as a source of data.)\n\nBecause it is clumsy using the standard awk mechanisms to mix source file and command-line awk programs, gawk provides the -e\noption. This does not require you to preempt the standard input for your source code, and it allows you to easily mix command-line\nand library source code (see The AWKPATH Environment Variable [AWKPATH-Variable.html]). As with -f, the -e and -i options may also\nbe used multiple times on the command line.\n\nIf no -f option (or -e option for gawk) is specified, then awk uses the first nonoption command-line argument as the text of the\nprogram source code. Arguments on the command line that follow the program text are entered into the ARGV array; awk does not\ncontinue to parse the command line looking for options.\n\nIf the environment variable POSIXLY_CORRECT exists, then gawk behaves in strict POSIX mode, exactly as if you had supplied\n--posix. Many GNU programs look for this environment variable to suppress extensions that conflict with POSIX, but gawk behaves\ndifferently: it suppresses all extensions, even those that do not conflict with POSIX, and behaves in strict POSIX mode. If --lint\nis supplied on the command line and gawk turns on POSIX mode because of POSIXLY_CORRECT, then it issues a warning message\nindicating that POSIX mode is in effect. You would typically set this variable in your shell\u2019s startup file. For a\nBourne-compatible shell (such as Bash), you would add these lines to the .profile file in your home directory:\n\nPOSIXLY_CORRECT=true\nexport POSIXLY_CORRECT\n\n\nFor a C shell-compatible shell,12 you would add this line to the .login file in your home directory:\n\nsetenv POSIXLY_CORRECT true\n\n\nHaving POSIXLY_CORRECT set is not recommended for daily use, but it is good for testing the portability of your programs to other\nenvironments.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(11)\n\nFor more detail, please see Section 4.4 of RFC 3875 [http://www.ietf.org/rfc/rfc3875]. Also see the explanatory note sent to the\ngawk bug mailing list [https://lists.gnu.org/archive/html/bug-gawk/2014-11/msg00022.html].\n\n(12)\n\nNot recommended.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Other Command-Line Arguments [Other-Arguments.html], Previous: Invoking awk [Command-Line.html], Up: Running awk and gawk\n[Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "bf0b3627-d13c-46c1-bf3e-25a4082ad525", "embedding": null, "doc_hash": "6951dca5e90b080ffe1b30b39917f14d3caf5883d56f9442a97e36e79c84c7a9", "extra_info": null, "node_info": {"start": 15164, "end": 18706, "_node_type": "1"}, "relationships": {"1": "d0e98af0-b1ad-422b-b0ef-ac14dc99547b", "2": "b5ac4d9f-d1c6-4bef-a292-aff2a2ba2c7d"}}, "__type__": "1"}, "0ee1e1f7-d8d7-452c-825e-d7d81afc1f01": {"__data__": {"text": "Next: Merging an Array into a String [Join-Function.html], Previous: The Cliff Random Number Generator\n[Cliff-Random-Function.html], Up: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.5 TRANSLATING BETWEEN CHARACTERS AND NUMBERS\n\nOne commercial implementation of awk supplies a built-in function, ord(), which takes a character and returns the numeric value\nfor that character in the machine\u2019s character set. If the string passed to ord() has more than one character, only the first one\nis used.\n\nThe inverse of this function is chr() (from the function of the same name in Pascal), which takes a number and returns the\ncorresponding character. Both functions are written very nicely in awk; there is no real reason to build them into the awk\ninterpreter:\n\n# ord.awk --- do ord and chr\n\n# Global identifiers:\n#    _ord_:        numerical values indexed by characters\n#    _ord_init:    function to initialize _ord_\n\nBEGIN    { _ord_init() }\n\nfunction _ord_init(    low, high, i, t)\n{\n    low = sprintf(\"%c\", 7) # BEL is ascii 7\n    if (low == \"\\a\") {    # regular ascii\n        low = 0\n        high = 127\n    } else if (sprintf(\"%c\", 128 + 7) == \"\\a\") {\n        # ascii, mark parity\n        low = 128\n        high = 255\n    } else {        # ebcdic(!)\n        low = 0\n        high = 255\n    }\n\n    for (i = low; i <= high; i++) {\n        t = sprintf(\"%c\", i)\n        _ord_[t] = i\n    }\n}\n\n\nSome explanation of the numbers used by _ord_init() is worthwhile. The most prominent character set in use today is ASCII.68\nAlthough an 8-bit byte can hold 256 distinct values (from 0 to 255), ASCII only defines characters that use the values from 0 to\n127.69 In the now distant past, at least one minicomputer manufacturer used ASCII, but with mark parity, meaning that the leftmost\nbit in the byte is always 1. This means that on those systems, characters have numeric values from 128 to 255. Finally, large\nmainframe systems use the EBCDIC character set, which uses all 256 values. There are other character sets in use on some older\nsystems, but they are not really worth worrying about:\n\nfunction ord(str,    c)\n{\n    # only first character is of interest\n    c = substr(str, 1, 1)\n    return _ord_[c]\n}\n\nfunction chr(c)\n{\n    # force c to be numeric by adding 0\n    return sprintf(\"%c\", c + 0)\n}\n\n#### test code ####\n# BEGIN {\n#    for (;;) {\n#        printf(\"enter a character: \")\n#        if (getline var <= 0)\n#            break\n#        printf(\"ord(%s) = %d\\n\", var, ord(var))\n#    }\n# }\n\n\nAn obvious improvement to these functions is to move the code for the _ord_init function into the body of the BEGIN rule. It was\nwritten this way initially for ease of development. There is a \u201ctest program\u201d in a BEGIN rule, to test the function. It is\ncommented out for production", "doc_id": "0ee1e1f7-d8d7-452c-825e-d7d81afc1f01", "embedding": null, "doc_hash": "557e81037416979e028f13da9efe1b614656e49a5d98b8cf0fe85785c17a5789", "extra_info": null, "node_info": {"start": 0, "end": 2966, "_node_type": "1"}, "relationships": {"1": "fa3bafa5-624d-45c2-950e-b6a22aaab9b4", "3": "c21e6f30-5945-4966-9b43-106313626095"}}, "__type__": "1"}, "c21e6f30-5945-4966-9b43-106313626095": {"__data__": {"text": "in a BEGIN rule, to test the function. It is\ncommented out for production use.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(68)\n\nThis is changing; many systems use Unicode, a very large character set that includes ASCII as a subset. On systems with full\nUnicode support, a character can occupy up to 32 bits, making simple tests such as used here prohibitively expensive.\n\n(69)\n\nASCII has been extended in many countries to use the values from 128 to 255 for country-specific characters. If your system uses\nthese extensions, you can simplify _ord_init() to loop from 0 to 255.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Merging an Array into a String [Join-Function.html], Previous: The Cliff Random Number Generator\n[Cliff-Random-Function.html], Up: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "c21e6f30-5945-4966-9b43-106313626095", "embedding": null, "doc_hash": "a9f51228274a7fb6f59a4e48f2b8e8b5c12d3ca525a3431d74840ee61a5620ae", "extra_info": null, "node_info": {"start": 2893, "end": 3944, "_node_type": "1"}, "relationships": {"1": "fa3bafa5-624d-45c2-950e-b6a22aaab9b4", "2": "0ee1e1f7-d8d7-452c-825e-d7d81afc1f01"}}, "__type__": "1"}, "bc3752c1-8037-4a6c-936e-72541936477f": {"__data__": {"text": "Next: Naming Standard Input [Naming-Standard-Input.html], Previous: Command-Line Options [Options.html], Up: Running awk and gawk\n[Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.3 OTHER COMMAND-LINE ARGUMENTS\n\nAny additional arguments on the command line are normally treated as input files to be processed in the order specified. However,\nan argument that has the form var=value, assigns the value value to the variable var\u2014it does not specify a file at all. (See\nAssigning Variables on the Command Line [Assignment-Options.html].) In the following example, \u2018count=1\u2019 is a variable assignment,\nnot a file name:\n\nawk -f program.awk file1 count=1 file2\n\n\nAs a side point, should you really need to have awk process a file named count=1 (or any file whose name looks like a variable\nassignment), precede the file name with \u2018./\u2019, like so:\n\nawk -f program.awk file1 ./count=1 file2\n\n\nAll the command-line arguments are made available to your awk program in the ARGV array (see Predefined Variables\n[Built_002din-Variables.html]). Command-line options and the program text (if present) are omitted from ARGV. All other arguments,\nincluding variable assignments, are included. As each element of ARGV is processed, gawk sets ARGIND to the index in ARGV of the\ncurrent element. (gawk makes the full command line, including program text and options, available in PROCINFO[\"argv\"]; see\nBuilt-in Variables That Convey Information [Auto_002dset.html].)\n\nChanging ARGC and ARGV in your awk program lets you control how awk processes the input files; this is described in more detail in\nUsing ARGC and ARGV [ARGC-and-ARGV.html].\n\nThe distinction between file name arguments and variable-assignment arguments is made when awk is about to open the next input\nfile. At that point in execution, it checks the file name to see whether it is really a variable assignment; if so, awk sets the\nvariable instead of reading a file.\n\nTherefore, the variables actually receive the given values after all previously specified files have been read. In particular, the\nvalues of variables assigned in this fashion are not available inside a BEGIN rule (see The BEGIN and END Special Patterns\n[BEGIN_002fEND.html]), because such rules are run before awk begins scanning the argument list.\n\nThe variable values given on the command line are processed for escape sequences (see Escape Sequences [Escape-Sequences.html]).\n(d.c.)\n\nIn some very early implementations of awk, when a variable assignment occurred before any file names, the assignment would happen\nbefore the BEGIN rule was executed. awk\u2019s behavior was thus inconsistent; some command-line assignments were available inside the\nBEGIN rule, while others were not. Unfortunately, some applications came to depend upon this \u201cfeature.\u201d When awk was changed to be\nmore consistent, the -v option was added to accommodate applications that depended upon the old behavior.\n\nThe variable assignment feature is most useful for assigning to variables such as RS, OFS, and ORS, which control input and output\nformats, before scanning the data files. It is also useful for controlling state if multiple passes are needed over a data file.\nFor example:\n\nawk 'pass == 1  { pass 1 stuff }\n     pass == 2  { pass 2 stuff }' pass=1 mydata pass=2 mydata\n\n\nGiven the variable assignment feature, the -F option for setting the value of FS is not strictly necessary. It remains for\nhistorical compatibility.\n\nQuoting Shell Variables On The awk Command Line\n\nSmall awk programs are often embedded in larger shell scripts, so it\u2019s worthwhile to understand some shell basics. Consider the\nfollowing:\n\nf=\"\"\nawk '{ print(\"hi\") }' $f\n\n\nIn this case, awk reads from standard input instead of trying to open any command line files. To the unwary, this looks like awk\nis", "doc_id": "bc3752c1-8037-4a6c-936e-72541936477f", "embedding": null, "doc_hash": "a3e36c8892fce40987651620556ecba8072843829c4f1d0cc39a571b72225724", "extra_info": null, "node_info": {"start": 0, "end": 3937, "_node_type": "1"}, "relationships": {"1": "417c75c9-fba8-4430-9602-44342cda31ae", "3": "d2459874-dab9-4d78-88b3-82007e824175"}}, "__type__": "1"}, "d2459874-dab9-4d78-88b3-82007e824175": {"__data__": {"text": "to open any command line files. To the unwary, this looks like awk\nis hanging.\n\nHowever awk doesn\u2019t see an explicit empty string. When a variable expansion is the null string, and it\u2019s not quoted, the shell\nsimply removes it from the command line. To demonstrate:\n\n$ f=\"\"\n$ awk 'BEGIN { print ARGC }' $f\n-| 1\n$ awk 'BEGIN { print ARGC }' \"$f\"\n-| 2\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Naming Standard Input [Naming-Standard-Input.html], Previous: Command-Line Options [Options.html], Up: Running awk and gawk\n[Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d2459874-dab9-4d78-88b3-82007e824175", "embedding": null, "doc_hash": "256a872a49f3a198f354b0e23320dde80d666732188a6258fbb77a25867116f8", "extra_info": null, "node_info": {"start": 3868, "end": 4559, "_node_type": "1"}, "relationships": {"1": "417c75c9-fba8-4430-9602-44342cda31ae", "2": "bc3752c1-8037-4a6c-936e-72541936477f"}}, "__type__": "1"}, "30017663-ea88-4057-965e-0722f850f7e8": {"__data__": {"text": "Previous: The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html], Up: The Environment Variables gawk Uses\n[Environment-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n2.5.3 OTHER ENVIRONMENT VARIABLES\n\nA number of other environment variables affect gawk\u2019s behavior, but they are more specialized. Those in the following list are\nmeant to be used by regular users:\n\nGAWK_MSEC_SLEEP\n\nSpecifies the interval between connection retries, in milliseconds. On systems that do not support the usleep() system call, the\nvalue is rounded up to an integral number of seconds.\n\nGAWK_PERSIST_FILE\n\nSpecifies the backing file to use for persistent storage of gawk\u2019s variables and arrays. See Preserving Data Between Runs\n[Persistent-Memory.html].\n\nGAWK_READ_TIMEOUT\n\nSpecifies the time, in milliseconds, for gawk to wait for input before returning with an error. See Reading Input with a Timeout\n[Read-Timeout.html].\n\nGAWK_SOCK_RETRIES\n\nControls the number of times gawk attempts to retry a two-way TCP/IP (socket) connection before giving up. See Using gawk for\nNetwork Programming [TCP_002fIP-Networking.html]. Note that when nonfatal I/O is enabled (see Enabling Nonfatal Output\n[Nonfatal.html]), gawk only tries to open a TCP/IP socket once.\n\nPMA_VERBOSITY\n\nControls the verbosity of the persistent memory allocator. See Preserving Data Between Runs [Persistent-Memory.html].\n\nPOSIXLY_CORRECT\n\nCauses gawk to switch to POSIX-compatibility mode, disabling all traditional and GNU extensions. See Command-Line Options\n[Options.html].\n\nThe environment variables in the following list are meant for use by the gawk developers for testing and tuning. They are subject\nto change. The variables are:\n\nAWKBUFSIZE\n\nThis variable only affects gawk on POSIX-compliant systems. With a value of \u2018exact\u2019, gawk uses the size of each input file as the\nsize of the memory buffer to allocate for I/O. Otherwise, the value should be a number, and gawk uses that number as the size of\nthe buffer to allocate. (When this variable is not set, gawk uses the smaller of the file\u2019s size and the \u201cdefault\u201d blocksize,\nwhich is usually the filesystem\u2019s I/O blocksize.)\n\nAWK_HASH\n\nIf this variable exists with a value of \u2018gst\u2019, gawk switches to using the hash function from GNU Smalltalk for managing arrays.\nWith a value of \u2018fnv1a\u2019, gawk uses the FNV1-A hash function [http://www.isthe.com/chongo/tech/comp/fnv/index.html]. These\nfunctions may be marginally faster than the standard function.\n\nAWKREADFUNC\n\nIf this variable exists, gawk switches to reading source files one line at a time, instead of reading in blocks. This exists for\ndebugging problems on filesystems on non-POSIX operating systems where I/O is performed in records, not in blocks.\n\nGAWK_MSG_SRC\n\nIf this variable exists, gawk includes the file name and line number within the gawk source code from which warning and/or fatal\nmessages are generated. Its purpose is to help isolate the source of a message, as there are multiple places that produce the same\nwarning or error message.\n\nGAWK_LOCALE_DIR\n\nSpecifies the location of compiled message object files for gawk itself. This is passed to the bindtextdomain() function when gawk\nstarts up.\n\nGAWK_NO_DFA\n\nIf this variable exists, gawk does not use the DFA regexp matcher for \u201cdoes it match\u201d kinds of tests. This can cause gawk to be\nslower. Its purpose is to help isolate differences between the two regexp", "doc_id": "30017663-ea88-4057-965e-0722f850f7e8", "embedding": null, "doc_hash": "748cedb2febbab5ab48756ff760126fd84c6ecded5eb808fc0c1fcc47c467fe3", "extra_info": null, "node_info": {"start": 0, "end": 3557, "_node_type": "1"}, "relationships": {"1": "5b996906-7614-46a6-97fe-c5c952f20a77", "3": "c822843e-a34f-4356-9de4-ffe8dab2a5b9"}}, "__type__": "1"}, "c822843e-a34f-4356-9de4-ffe8dab2a5b9": {"__data__": {"text": "be\nslower. Its purpose is to help isolate differences between the two regexp matchers that gawk uses internally. (There aren\u2019t\nsupposed to be differences, but occasionally theory and practice don\u2019t coordinate with each other.)\n\nGAWK_STACKSIZE\n\nThis specifies the amount by which gawk should grow its internal evaluation stack, when needed.\n\nINT_CHAIN_MAX\n\nThis specifies intended maximum number of items gawk will maintain on a hash chain for managing arrays indexed by integers.\n\nSTR_CHAIN_MAX\n\nThis specifies intended maximum number of items gawk will maintain on a hash chain for managing arrays indexed by strings.\n\nTIDYMEM\n\nIf this variable exists, gawk uses the mtrace() library calls from the GNU C library to help track down possible memory leaks.\nThis cannot be used together with the persistent memory allocator.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html], Up: The Environment Variables gawk Uses\n[Environment-Variables.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c822843e-a34f-4356-9de4-ffe8dab2a5b9", "embedding": null, "doc_hash": "6c7378347b2db9737ac08b36fdd8827eaf569d610b19209a3f3d52cf2544037d", "extra_info": null, "node_info": {"start": 3481, "end": 4638, "_node_type": "1"}, "relationships": {"1": "5b996906-7614-46a6-97fe-c5c952f20a77", "2": "30017663-ea88-4057-965e-0722f850f7e8"}}, "__type__": "1"}, "5cfdfe85-811d-43f8-91ab-dd115cb47998": {"__data__": {"text": "Next: When to Use awk [When.html], Previous: awk Statements Versus Lines [Statements_002fLines.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.7 OTHER FEATURES OF AWK\n\nThe awk language provides a number of predefined, or built-in, variables that your programs can use to get information from awk.\nThere are other variables your program can set as well to control how awk processes your data.\n\nIn addition, awk provides a number of built-in functions for doing common computational and string-related operations. gawk\nprovides built-in functions for working with timestamps, performing bit manipulation, for runtime string translation\n(internationalization), determining the type of a variable, and array sorting.\n\nAs we develop our presentation of the awk language, we will introduce most of the variables and many of the functions. They are\ndescribed systematically in Predefined Variables [Built_002din-Variables.html] and in Built-in Functions [Built_002din.html].", "doc_id": "5cfdfe85-811d-43f8-91ab-dd115cb47998", "embedding": null, "doc_hash": "c8c12fb21db39554712c0e39ee69d18bed63c204d4602d97ff25e0b5f1a801d5", "extra_info": null, "node_info": {"start": 0, "end": 1173, "_node_type": "1"}, "relationships": {"1": "d96d28dc-bce7-40df-a39f-714cc7a2ce6d"}}, "__type__": "1"}, "9af725bc-b605-4edb-b913-7849cc6e0591": {"__data__": {"text": "Next: Special Files for Network Communications [Special-Network.html], Up: Special File names in gawk [Special-Files.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.8.1 ACCESSING OTHER OPEN FILES WITH GAWK\n\nBesides the /dev/stdin, /dev/stdout, and /dev/stderr special file names mentioned earlier, gawk provides syntax for accessing any\nother inherited open file:\n\n/dev/fd/N\n\nThe file associated with file descriptor N. Such a file must be opened by the program initiating the awk execution (typically the\nshell). Unless special pains are taken in the shell from which gawk is invoked, only descriptors 0, 1, and 2 are available.\n\nThe file names /dev/stdin, /dev/stdout, and /dev/stderr are essentially aliases for /dev/fd/0, /dev/fd/1, and /dev/fd/2,\nrespectively. However, those names are more self-explanatory.\n\nNote that using close() on a file name of the form \"/dev/fd/N\", for file descriptor numbers above two, does actually close the\ngiven file descriptor.", "doc_id": "9af725bc-b605-4edb-b913-7849cc6e0591", "embedding": null, "doc_hash": "c399804beff4201cbffb9b96d3eb992c136d22eabd970706513de73c66a9ccbf", "extra_info": null, "node_info": {"start": 0, "end": 1116, "_node_type": "1"}, "relationships": {"1": "f24e87a3-6a82-4e7c-8a31-9c7982f6019d"}}, "__type__": "1"}, "7e69eac5-5163-477f-91f9-1fa3229f665d": {"__data__": {"text": "Next: Summary [Installation-summary.html], Previous: Reporting Problems and Bugs [Bugs.html], Up: Installing gawk\n[Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nB.5 OTHER FREELY AVAILABLE AWK IMPLEMENTATIONS\n\n> It\u2019s kind of fun to put comments like this in your awk code:\n> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Do C++ comments work? answer: yes! of course\n\n\u2014 Michael Brennan\n\nThere are a number of other freely available awk implementations. This section briefly describes where to get them:\n\nUnix awk\n\nBrian Kernighan, one of the original designers of Unix awk, has made his implementation of awk freely available. You can retrieve\nit from GitHub:\n\ngit clone https://github.com/onetrueawk/awk bwkawk\n\n\nThis command creates a copy of the Git [https://git-scm.com] repository in a directory named bwkawk. If you omit the last argument\nfrom the git command line, the repository copy is created in a directory named awk.\n\nThis version requires an ISO C (1990 standard) compiler; the C compiler from GCC (the GNU Compiler Collection) works quite nicely.\n\nTo build it, review the settings in the makefile, and then just run make. Note that the result of compilation is named a.out; you\nwill have to rename it to something reasonable.\n\nSee Common Extensions Summary [Common-Extensions.html] for a list of extensions in this awk that are not in POSIX awk.\n\nAs a side note, Dan Bornstein has created a Git repository tracking all the versions of BWK awk that he could find. It\u2019s available\nat https://github.com/danfuzz/one-true-awk [https://github.com/danfuzz/one-true-awk].\n\nmawk\n\nMichael Brennan wrote an independent implementation of awk, called mawk. It is available under the GPL (see GNU General Public\nLicense [Copying.html]), just as gawk is.\n\nThe original distribution site for the mawk source code no longer has it. A copy is available at\nhttp://www.skeeve.com/gawk/mawk1.3.3.tar.gz [http://www.skeeve.com/gawk/mawk1.3.3.tar.gz].\n\nIn 2009, Thomas Dickey took on mawk maintenance. Basic information is available on the project\u2019s web page\n[http://www.invisible-island.net/mawk]. The download URL is http://invisible-island.net/datafiles/release/mawk.tar.gz\n[http://invisible-island.net/datafiles/release/mawk.tar.gz].\n\nOnce you have it, gunzip may be used to decompress this file. Installation is similar to gawk\u2019s (see Compiling and Installing gawk\non Unix-Like Systems [Unix-Installation.html]).\n\nSee Common Extensions Summary [Common-Extensions.html] for a list of extensions in mawk that are not in POSIX awk.\n\nmawk 2.0\n\nIn 2016, Michael Brennan resumed mawk development. His development snapshots are available via Git from the project\u2019s GitHub page\n[https://github.com/mikebrennan000/mawk-2].\n\nawka\n\nWritten by Andrew Sumner, awka translates awk programs into C, compiles them, and links them with a library of functions that\nprovide the core awk functionality. It also has a number of extensions.\n\nBoth the awk translator and the library are released under the GPL.\n\nTo get awka, go to https://sourceforge.net/projects/awka [https://sourceforge.net/projects/awka].\n\nThe project seems to be frozen; no new code changes have been made since approximately 2001.\n\nRevive Awka\n\nThis project, available at https://github.com/noyesno/awka [https://github.com/noyesno/awka], intends to fix bugs in awka and add\nmore features.\n\npawk\n\nNelson H.F. Beebe at the University of Utah has modified BWK", "doc_id": "7e69eac5-5163-477f-91f9-1fa3229f665d", "embedding": null, "doc_hash": "2354d8420ccab6a5106f6eba93f1a2894bce0f89c08b8bcca7972062a111d14c", "extra_info": null, "node_info": {"start": 0, "end": 3530, "_node_type": "1"}, "relationships": {"1": "bdfd4d76-fbd4-48bc-9326-c29669419284", "3": "fb047dde-bbf3-4c26-b9d3-cd55d983e164"}}, "__type__": "1"}, "fb047dde-bbf3-4c26-b9d3-cd55d983e164": {"__data__": {"text": "H.F. Beebe at the University of Utah has modified BWK awk to provide timing and profiling information. It is different from\ngawk with the --profile option (see Profiling Your awk Programs [Profiling.html]) in that it uses CPU-based profiling, not\nline-count profiling. You may find it at either ftp://ftp.math.utah.edu/pub/pawk/pawk-20030606.tar.gz\n[ftp://ftp.math.utah.edu/pub/pawk/pawk-20030606.tar.gz] or http://www.math.utah.edu/pub/pawk/pawk-20030606.tar.gz\n[http://www.math.utah.edu/pub/pawk/pawk-20030606.tar.gz].\n\nBusyBox awk \u00b6\n\nBusyBox is a GPL-licensed program providing small versions of many applications within a single executable. It is aimed at\nembedded systems. It includes a full implementation of POSIX awk. When building it, be careful not to do \u2018make install\u2019 as it will\noverwrite copies of other applications in your /usr/local/bin. For more information, see the project\u2019s home page\n[https://busybox.net].\n\nThe OpenSolaris POSIX awk\n\nThe versions of awk in /usr/xpg4/bin and /usr/xpg6/bin on Solaris are more or less POSIX-compliant. They are based on the awk from\nMortice Kern Systems for PCs. We were able to make this code compile and work under GNU/Linux with 1\u20132 hours of work. Making it\nmore generally portable (using GNU Autoconf and/or Automake) would take more work, and this has not been done, at least to our\nknowledge.\n\nThe source code used to be available from the OpenSolaris website. However, that project was ended and the website shut down.\nFortunately, the Illumos project [https://wiki.illumos.org/display/illumos/illumos+Home] makes this implementation available. You\ncan view the files one at a time from https://github.com/joyent/illumos-joyent/blob/master/usr/src/cmd/awk_xpg4\n[https://github.com/joyent/illumos-joyent/blob/master/usr/src/cmd/awk_xpg4].\n\nfrawk\n\nThis is a language for writing short programs. \u201cTo a first approximation, it is an implementation of the AWK language; many common\nawk programs produce equivalent output when passed to frawk.\u201d However, it has a number of important additional features. The code\nis available at https://github.com/ezrosent/frawk [https://github.com/ezrosent/frawk].\n\ngoawk\n\nThis is an awk interpreter written in the Go programming language [https://golang.org/]. It implements POSIX awk, with a few minor\nextensions. Source code is available from https://github.com/benhoyt/goawk [https://github.com/benhoyt/goawk]. The author wrote a\nnice article [https://benhoyt.com/writings/goawk/] describing the implementation.\n\nAWKgo\n\nThis is an awk to Go translator. It was written by the author of goawk. (See the previous entry in this list.) Source code is\navailable from https://github.com/benhoyt/goawk/tree/master/awkgo [https://github.com/benhoyt/goawk/tree/master/awkgo]. The\nauthor\u2019s article about it is at https://benhoyt.com/writings/awkgo/ [https://benhoyt.com/writings/awkgo/].\n\njawk\n\nThis is an interpreter for awk written in Java. It claims to be a full interpreter, although because it uses Java facilities for\nI/O and for regexp matching, the language it supports is different from POSIX awk. More information is available on the project\u2019s\nhome page [http://jawk.sourceforge.net].\n\nHoijui\u2019s jawk\n\nThis project, available", "doc_id": "fb047dde-bbf3-4c26-b9d3-cd55d983e164", "embedding": null, "doc_hash": "7fe9ebc64056f5b792bd6c2cca59e2d0835d852071622f93a9c25898f78b1a4c", "extra_info": null, "node_info": {"start": 3487, "end": 6703, "_node_type": "1"}, "relationships": {"1": "bdfd4d76-fbd4-48bc-9326-c29669419284", "2": "7e69eac5-5163-477f-91f9-1fa3229f665d", "3": "2e18a7f7-8685-481c-ad32-15c5060da519"}}, "__type__": "1"}, "2e18a7f7-8685-481c-ad32-15c5060da519": {"__data__": {"text": "jawk\n\nThis project, available at https://github.com/hoijui/Jawk [https://github.com/hoijui/Jawk], is another awk interpreter written in\nJava. It uses modern Java build tools.\n\nLibmawk \u00b6\n\nThis is an embeddable awk interpreter derived from mawk. For more information, see http://repo.hu/projects/libmawk/\n[http://repo.hu/projects/libmawk/].\n\nMircea Neacsu\u2019s Embeddable awk\n\nMircea Neacsu has created an embeddable awk interpreter, based on BWK awk. It\u2019s available at https://github.com/neacsum/awk\n[https://github.com/neacsum/awk].\n\npawk \u00b6\n\nThis is a Python module that claims to bring awk-like features to Python. See https://github.com/alecthomas/pawk\n[https://github.com/alecthomas/pawk] for more information. (This is not related to Nelson Beebe\u2019s modified version of BWK awk,\ndescribed earlier.)\n\nawkcc \u00b6\n\nThis is an early adaptation of Unix awk that translates awk into C code. It was done by J. Christopher Ramming at Bell Labs, circa\n1988. It\u2019s available at https://github.com/nokia/awkcc [https://github.com/nokia/awkcc]. Bringing this up to date would be an\ninteresting software engineering exercise.\n\nQSE\u00a0awk \u00b6\n\nThis is an embeddable awk interpreter. For more information, see https://code.google.com/p/qse/ [https://code.google.com/p/qse/].\n\nQTawk \u00b6\n\nThis is an independent implementation of awk distributed under the GPL. It has a large number of extensions over standard awk and\nmay not be 100% syntactically compatible with it. See http://www.quiktrim.org/QTawk.html [http://www.quiktrim.org/QTawk.html] for\nmore information, including the manual. The download link there is out of date; see http://www.quiktrim.org/#AdditionalResources\n[http://www.quiktrim.org/#AdditionalResources] for the latest download link.\n\nThe project may also be frozen; no new code changes have been made since approximately 2014.\n\ncppawk \u00b6\n\nQuoting from the web page, \u201ccppawk is a tiny shell script that is used like awk. It invokes the C preprocessor (GNU cpp) on the\nAwk code and calls Awk on the result.\u201d This program may be of use if the way gawk\u2019s @include facility works doesn\u2019t suit your\nneeds. For more information, see https://www.kylheku.com/cgit/cppawk/ [https://www.kylheku.com/cgit/cppawk/].\n\nOther versions\n\nSee also the \u201cVersions and implementations\u201d section of the Wikipedia article\n[https://en.wikipedia.org/wiki/Awk_language#Versions_and_implementations] on awk for information on additional versions.\n\nAn interesting collection of library functions is available at https://github.com/e36freak/awk-libs\n[https://github.com/e36freak/awk-libs].\n\nAn interesting collection of gawk extensions is available https://github.com/su8/gawk-extensions\n[https://github.com/su8/gawk-extensions].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Installation-summary.html], Previous: Reporting Problems and Bugs [Bugs.html], Up: Installing gawk\n[Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2e18a7f7-8685-481c-ad32-15c5060da519", "embedding": null, "doc_hash": "4966c03a9bb37ee0fcfd61ef837217c2a5e0976352e8f1efd545d5413c337988", "extra_info": null, "node_info": {"start": 6718, "end": 9735, "_node_type": "1"}, "relationships": {"1": "bdfd4d76-fbd4-48bc-9326-c29669419284", "2": "fb047dde-bbf3-4c26-b9d3-cd55d983e164"}}, "__type__": "1"}, "42abe211-7a4c-43e6-a293-72269d32952b": {"__data__": {"text": "Previous: Summary [Output-Summary.html], Up: Printing Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.12 EXERCISES\n\n 1. Rewrite the program:\n    \n    awk 'BEGIN { print \"Month Crates\"\n                 print \"----- ------\" }\n               { print $1, \"     \", $2 }' inventory-shipped\n    \n    \n    from Output Separators [Output-Separators.html], by using a new value of OFS.\n\n 2. Use the printf statement to line up the headings and table data for the inventory-shipped example that was covered in The\n    print Statement [Print.html].\n 3. What happens if you forget the double quotes when redirecting output, as follows:\n    \n    BEGIN { print \"Serious error detected!\" > /dev/stderr }\n    ", "doc_id": "42abe211-7a4c-43e6-a293-72269d32952b", "embedding": null, "doc_hash": "5c18ee82369978b77da792d168bd3be565e7ec59e30fc03578782157f03479a5", "extra_info": null, "node_info": {"start": 0, "end": 862, "_node_type": "1"}, "relationships": {"1": "83b5ff1f-0194-4c2c-a2fe-41d5047ff345"}}, "__type__": "1"}, "a5dd6794-73db-4562-bba0-5afa4c327de7": {"__data__": {"text": "Next: Controlling Numeric Output with print [OFMT.html], Previous: print Statement Examples [Print-Examples.html], Up: Printing\nOutput [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.3 OUTPUT SEPARATORS\n\nAs mentioned previously, a print statement contains a list of items separated by commas. In the output, the items are normally\nseparated by single spaces. However, this doesn\u2019t need to be the case; a single space is simply the default. Any string of\ncharacters may be used as the output field separator by setting the predefined variable OFS. The initial value of this variable is\nthe string \"\u00a0\" (i.e., a single space).\n\nThe output from an entire print statement is called an output record. Each print statement outputs one output record, and then\noutputs a string called the output record separator (or ORS). The initial value of ORS is the string \"\\n\" (i.e., a newline\ncharacter). Thus, each print statement normally makes a separate line.\n\nIn order to change how output fields and records are separated, assign new values to the variables OFS and ORS. The usual place to\ndo this is in the BEGIN rule (see The BEGIN and END Special Patterns [BEGIN_002fEND.html]), so that it happens before any input is\nprocessed. It can also be done with assignments on the command line, before the names of the input files, or using the -v\ncommand-line option (see Command-Line Options [Options.html]). The following example prints the first and second fields of each\ninput record, separated by a semicolon, with a blank line added after each newline:\n\n$ awk 'BEGIN { OFS = \";\"; ORS = \"\\n\\n\" }\n>            { print $1, $2 }' mail-list\n-| Amelia;555-5553\n-|\n-| Anthony;555-3412\n-|\n-| Becky;555-7685\n-|\n-| Bill;555-1675\n-|\n-| Broderick;555-0542\n-|\n-| Camilla;555-2912\n-|\n-| Fabius;555-1234\n-|\n-| Julie;555-6699\n-|\n-| Martin;555-6480\n-|\n-| Samuel;555-3430\n-|\n-| Jean-Paul;555-2127\n-|\n\n\nIf the value of ORS does not contain a newline, the program\u2019s output runs together on a single line.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Controlling Numeric Output with print [OFMT.html], Previous: print Statement Examples [Print-Examples.html], Up: Printing\nOutput [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a5dd6794-73db-4562-bba0-5afa4c327de7", "embedding": null, "doc_hash": "048cc057e095e5f2ef60a6504684c199178b261c3d21a5dd8803915b72119855", "extra_info": null, "node_info": {"start": 0, "end": 2480, "_node_type": "1"}, "relationships": {"1": "4328b76e-d908-4fd3-8862-7cd38b6179ba"}}, "__type__": "1"}, "ce2a35d8-06c9-4645-be80-cd30b4ca1a90": {"__data__": {"text": "Next: Exercises [Output-Exercises.html], Previous: Enabling Nonfatal Output [Nonfatal.html], Up: Printing Output [Printing.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.11 SUMMARY\n\n * The print statement prints comma-separated expressions. Each expression is separated by the value of OFS and terminated by the\n   value of ORS. OFMT provides the conversion format for numeric values for the print statement.\n * The printf statement provides finer-grained control over output, with format-control letters for different data types and\n   various flags that modify the behavior of the format-control letters.\n * Output from both print and printf may be redirected to files, pipes, and coprocesses.\n * gawk provides special file names for access to standard input, output, and error, and for network communications.\n * Use close() to close open file, pipe, and coprocess redirections. For coprocesses, it is possible to close only one direction\n   of the communications.\n * Normally errors with print or printf are fatal. gawk lets you make output errors be nonfatal either for all files or on a\n   per-file basis. You must then check for errors after every relevant output statement.", "doc_id": "ce2a35d8-06c9-4645-be80-cd30b4ca1a90", "embedding": null, "doc_hash": "7fb0b4636653a39ac3b153398a4e157accd5dd934c80293b49b93efd8a422ca8", "extra_info": null, "node_info": {"start": 0, "end": 1335, "_node_type": "1"}, "relationships": {"1": "2a0dc2c1-773e-46e4-a6b5-3e440d506e9d"}}, "__type__": "1"}, "25fdc0ec-39e5-4e01-a5c3-f3c38a8c83a3": {"__data__": {"text": "Next: Customized Two-way Processors [Two_002dway-processors.html], Previous: Customized Input Parsers [Input-Parsers.html], Up:\nRegistration Functions [Registration-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6.5 CUSTOMIZED OUTPUT WRAPPERS\n\nAn output wrapper is the mirror image of an input parser. It allows an extension to take over the output to a file opened with the\n\u2018>\u2019 or \u2018>>\u2019 I/O redirection operators (see Redirecting Output of print and printf [Redirection.html]).\n\nThe output wrapper is very similar to the input parser structure:\n\ntypedef struct awk_output_wrapper {\n    const char *name;   /* name of the wrapper */\n    awk_bool_t (*can_take_file)(const awk_output_buf_t *outbuf);\n    awk_bool_t (*take_control_of)(awk_output_buf_t *outbuf);\n    awk_const struct awk_output_wrapper *awk_const next;  /* for gawk */\n} awk_output_wrapper_t;\n\n\nThe members are as follows:\n\nconst char *name;\n\nThis is the name of the output wrapper.\n\nawk_bool_t (*can_take_file)(const awk_output_buf_t *outbuf);\n\nThis points to a function that examines the information in the awk_output_buf_t structure pointed to by outbuf. It should return\ntrue if the output wrapper wants to take over the file, and false otherwise. It should not change any state (variable values,\netc.) within gawk.\n\nawk_bool_t (*take_control_of)(awk_output_buf_t *outbuf);\n\nThe function pointed to by this field is called when gawk decides to let the output wrapper take control of the file. It should\nfill in appropriate members of the awk_output_buf_t structure, as described next, and return true if successful, false otherwise.\n\nawk_const struct output_wrapper *awk_const next;\n\nThis is for use by gawk; therefore it is marked awk_const so that the extension cannot modify it.\n\nThe awk_output_buf_t structure looks like this:\n\ntypedef struct awk_output_buf {\n    const char *name;   /* name of output file */\n    const char *mode;   /* mode argument to fopen */\n    FILE *fp;           /* stdio file pointer */\n    awk_bool_t redirected;  /* true if a wrapper is active */\n    void *opaque;       /* for use by output wrapper */\n    size_t (*gawk_fwrite)(const void *buf, size_t size, size_t count,\n                FILE *fp, void *opaque);\n    int (*gawk_fflush)(FILE *fp, void *opaque);\n    int (*gawk_ferror)(FILE *fp, void *opaque);\n    int (*gawk_fclose)(FILE *fp, void *opaque);\n} awk_output_buf_t;\n\n\nHere too, your extension will define XXX_can_take_file() and XXX_take_control_of() functions that examine and update data members\nin the awk_output_buf_t. The data members are as follows:\n\nconst char *name;\n\nThe name of the output file.\n\nconst char *mode;\n\nThe mode string (as would be used in the second argument to fopen()) with which the file was opened.\n\nFILE *fp;\n\nThe FILE pointer from <stdio.h>. gawk opens the file before attempting to find an output wrapper.\n\nawk_bool_t redirected;\n\nThis field must be set to true by the XXX_take_control_of() function.\n\nvoid *opaque;\n\nThis pointer is opaque to gawk. The extension should use it to store a pointer to any private data associated with the file.\n\nsize_t", "doc_id": "25fdc0ec-39e5-4e01-a5c3-f3c38a8c83a3", "embedding": null, "doc_hash": "eb17e75a55cb8c6771469cf4227b2e7ece17297a2bdc89077c7bdb69a88653d3", "extra_info": null, "node_info": {"start": 0, "end": 3254, "_node_type": "1"}, "relationships": {"1": "6111774e-9a8e-4603-84b4-3cf77d512be8", "3": "768df622-0abc-4a65-bd4d-f6ad161c2f4f"}}, "__type__": "1"}, "768df622-0abc-4a65-bd4d-f6ad161c2f4f": {"__data__": {"text": "use it to store a pointer to any private data associated with the file.\n\nsize_t (*gawk_fwrite)(const void *buf, size_t size, size_t count, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0FILE *fp, void *opaque); int\n(*gawk_fflush)(FILE *fp, void *opaque); int (*gawk_ferror)(FILE *fp, void *opaque); int (*gawk_fclose)(FILE *fp, void *opaque);\n\nThese pointers should be set to point to functions that perform the equivalent function as the <stdio.h> functions do, if\nappropriate. gawk uses these function pointers for all output. gawk initializes the pointers to point to internal \u201cpass-through\u201d\nfunctions that just call the regular <stdio.h> functions, so an extension only needs to redefine those functions that are\nappropriate for what it does.\n\nThe XXX_can_take_file() function should make a decision based upon the name and mode fields, and any additional state (such as awk\nvariable values) that is appropriate. gawk attempts to open the named file for writing. The fp member will be NULL only if it\nfails.\n\nWhen gawk calls XXX_take_control_of(), that function should fill in the other fields as appropriate, except for fp, which it\nshould just use normally if it\u2019s not NULL.\n\nYou register your output wrapper with the following function:\n\nvoid register_output_wrapper(awk_output_wrapper_t *output_wrapper);\n\nRegister the output wrapper pointed to by output_wrapper with gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Customized Two-way Processors [Two_002dway-processors.html], Previous: Customized Input Parsers [Input-Parsers.html], Up:\nRegistration Functions [Registration-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "768df622-0abc-4a65-bd4d-f6ad161c2f4f", "embedding": null, "doc_hash": "079cce50fbd80268e0daa283b35cde97a3d6610d3b222e067e3edafb1dc4e548", "extra_info": null, "node_info": {"start": 3175, "end": 4904, "_node_type": "1"}, "relationships": {"1": "6111774e-9a8e-4603-84b4-3cf77d512be8", "2": "25fdc0ec-39e5-4e01-a5c3-f3c38a8c83a3"}}, "__type__": "1"}, "eebe3aa5-df7c-4e3c-a942-45285444a307": {"__data__": {"text": "Next: Compiling gawk for PC Operating Systems [PC-Compiling.html], Up: Installation on MS-Windows [PC-Installation.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.1.1 INSTALLING A PREPARED DISTRIBUTION FOR MS-WINDOWS SYSTEMS\n\nThe only supported binary distribution for MS-Windows systems is that provided by Eli Zaretskii\u2019s \u201cezwinports\u201d\n[https://sourceforge.net/projects/ezwinports/] project. Install the compiled gawk from there. Note that to run that port, you need\nto have the libgcc_s_dw2-1.dll file installed on your system. This file is part of the GCC distribution, and should reside either\nin the same directory where you install gawk.exe or somewhere on your system\u2019s Path. You can download this file from the MinGW\nsite [https://osdn.net/projects/mingw/releases]; look under the \u201cMinGW.org Compiler Collection (GCC)\u201d for the LibGCC-1.DLL\ndownload.", "doc_id": "eebe3aa5-df7c-4e3c-a942-45285444a307", "embedding": null, "doc_hash": "724a1bcc25dbd866528489b912f5201f7f23a3f2a109f0376cd2189539ef4ed0", "extra_info": null, "node_info": {"start": 0, "end": 1011, "_node_type": "1"}, "relationships": {"1": "34a6c6a0-5c88-4b5e-9c40-4df866e76e71"}}, "__type__": "1"}, "fedfebe7-ebca-4776-b74a-c316c98e3e64": {"__data__": {"text": "Next: Using gawk on PC Operating Systems [PC-Using.html], Previous: Installing a Prepared Distribution for MS-Windows Systems\n[PC-Binary-Installation.html], Up: Installation on MS-Windows [PC-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.1.2 COMPILING GAWK FOR PC OPERATING SYSTEMS\n\ngawk can be compiled for Windows32 using MinGW (Windows32). The file README_d/README.pc in the gawk distribution contains\nadditional notes, and pc/Makefile contains important information on compilation options.\n\nTo build gawk for Windows32, copy the files in the pc directory (except for ChangeLog) to the directory with the rest of the gawk\nsources, then invoke make with the appropriate target name as an argument to build gawk. The Makefile copied from the pc directory\ncontains a configuration section with comments and may need to be edited in order to work with your make utility.\n\nThe Makefile supports a number of targets for building various Windows32 versions. A list of targets is printed if the make\ncommand is given without a target. As an example, to build a native MS-Windows binary of gawk using the MinGW tools, type \u2018make\nmingw32\u2019.", "doc_id": "fedfebe7-ebca-4776-b74a-c316c98e3e64", "embedding": null, "doc_hash": "6b13d8de7de1cd69ff6c90cac6e6093c4e222e45054f3deae69cd3e05b2cfdd9", "extra_info": null, "node_info": {"start": 0, "end": 1301, "_node_type": "1"}, "relationships": {"1": "db4856d7-42df-4494-bb35-936cb19923bc"}}, "__type__": "1"}, "74f2fc39-7912-48e4-87fb-5c6cc2fde8bb": {"__data__": {"text": "Next: Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html], Up: Installation on Other Operating Systems\n[Non_002dUnix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.1 INSTALLATION ON MS-WINDOWS\n\nThis section covers installation and usage of gawk on Intel architecture machines running any version of MS-Windows. In this\nsection, the term \u201cWindows32\u201d refers to any of Microsoft Windows 95/98/ME/NT/2000/XP/Vista/7/8/10/11.\n\nSee also the README_d/README.pc file in the distribution.\n\n * Installing a Prepared Distribution for MS-Windows Systems [PC-Binary-Installation.html]\n * Compiling gawk for PC Operating Systems [PC-Compiling.html]\n * Using gawk on PC Operating Systems [PC-Using.html]\n * Using gawk In The Cygwin Environment [Cygwin.html]\n * Using gawk In The MSYS Environment [MSYS.html]", "doc_id": "74f2fc39-7912-48e4-87fb-5c6cc2fde8bb", "embedding": null, "doc_hash": "621a3102d0d875388204b9c0f647da931c3cbdc9b283221eded4469335d11e1e", "extra_info": null, "node_info": {"start": 0, "end": 977, "_node_type": "1"}, "relationships": {"1": "bf621a8b-ad3b-4370-8940-c3e63aa2fdc8"}}, "__type__": "1"}, "474591a1-f4ad-42fc-905e-d8f3c2829dba": {"__data__": {"text": "Next: Using gawk In The Cygwin Environment [Cygwin.html], Previous: Compiling gawk for PC Operating Systems [PC-Compiling.html],\nUp: Installation on MS-Windows [PC-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.3.1.3 USING GAWK ON PC OPERATING SYSTEMS\n\nInformation in this section applies to the MinGW port of gawk. See Using gawk In The Cygwin Environment [Cygwin.html] for\ninformation about the Cygwin port.\n\nUnder MS-Windows, the MinGW environment supports both the \u2018|&\u2019 operator and TCP/IP networking (see Using gawk for Network\nProgramming [TCP_002fIP-Networking.html]).\n\nThe MS-Windows version of gawk searches for program files as described in The AWKPATH Environment Variable\n[AWKPATH-Variable.html]. However, semicolons (rather than colons) separate elements in the AWKPATH variable. If AWKPATH is not set\nor is empty, then the default search path is \u2018.;c:/lib/awk;c:/gnu/lib/awk\u2019.\n\nUnder MS-Windows, gawk (and many other text programs) silently translates end-of-line \u2018\\r\\n\u2019 to \u2018\\n\u2019 on input and \u2018\\n\u2019 to \u2018\\r\\n\u2019\non output. A special BINMODE variable (c.e.) allows control over these translations and is interpreted as follows:\n\n * If BINMODE is \"r\" or one, then binary mode is set on read (i.e., no translations on reads).\n * If BINMODE is \"w\" or two, then binary mode is set on write (i.e., no translations on writes).\n * If BINMODE is \"rw\" or \"wr\" or three, binary mode is set for both read and write.\n * BINMODE=non-null-string is the same as \u2018BINMODE=3\u2019 (i.e., no translations on reads or writes). However, gawk issues a warning\n   message if the string is not one of \"rw\" or \"wr\".\n\nThe modes for standard input and standard output are set one time only (after the command line is read, but before processing any\nof the awk program). Setting BINMODE for standard input or standard output is accomplished by using an appropriate \u2018-v BINMODE=N\u2019\noption on the command line. BINMODE is set at the time a file or pipe is opened and cannot be changed midstream.\n\nOn POSIX-compatible systems, this variable\u2019s value has no effect. Thus, if you think your program will run on multiple different\nsystems and that you may need to use BINMODE, you should simply set it (in the program or on the command line) unconditionally,\nand not worry about the operating system on which your program is running.\n\nThe name BINMODE was chosen to match mawk (see Other Freely Available awk Implementations [Other-Versions.html]). mawk and gawk\nhandle BINMODE similarly; however, mawk adds a \u2018-W BINMODE=N\u2019 option and an environment variable that can set BINMODE, RS, and\nORS. The files binmode[1-3].awk (under gnu/lib/awk in some of the prepared binary distributions) have been chosen to match mawk\u2019s\n\u2018-W BINMODE=N\u2019 option. These can be changed or discarded; in particular, the setting of RS giving the fewest \u201csurprises\u201d is open\nto debate. mawk uses \u2018RS = \"\\r\\n\"\u2019 if binary mode is set on read, which is appropriate for files with the MS-DOS-style\nend-of-line.\n\nTo illustrate, the following examples set binary mode on writes for standard output and other files, and set ORS as the \u201cusual\u201d\nMS-DOS-style end-of-line:\n\ngawk -v BINMODE=2 -v ORS=\"\\r\\n\" \u2026\n\n\nor:\n\ngawk -v BINMODE=w -f binmode2.awk \u2026\n\n\nThese give the same result as the \u2018-W", "doc_id": "474591a1-f4ad-42fc-905e-d8f3c2829dba", "embedding": null, "doc_hash": "2d428a41976e56221c0fe35762c011a921c3a933feb79ae6638b615c1ec1946a", "extra_info": null, "node_info": {"start": 0, "end": 3387, "_node_type": "1"}, "relationships": {"1": "0211de59-b806-4626-9915-f5dbac44700b", "3": "6089e2ac-2767-4893-b2d8-cda7f867d53f"}}, "__type__": "1"}, "6089e2ac-2767-4893-b2d8-cda7f867d53f": {"__data__": {"text": "binmode2.awk \u2026\n\n\nThese give the same result as the \u2018-W BINMODE=2\u2019 option in mawk. The following changes the record separator to \"\\r\\n\" and sets\nbinary mode on reads, but does not affect the mode on standard input:\n\ngawk -v RS=\"\\r\\n\" -e \"BEGIN { BINMODE = 1 }\" \u2026\n\n\nor:\n\ngawk -f binmode1.awk \u2026\n\n\nWith proper quoting, in the first example the setting of RS can be moved into the BEGIN rule.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using gawk In The Cygwin Environment [Cygwin.html], Previous: Compiling gawk for PC Operating Systems [PC-Compiling.html],\nUp: Installation on MS-Windows [PC-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6089e2ac-2767-4893-b2d8-cda7f867d53f", "embedding": null, "doc_hash": "06b076f87812dbb1392629943ce387ae1cff1b769a9de3ee8526e97c336b4edb", "extra_info": null, "node_info": {"start": 3333, "end": 4095, "_node_type": "1"}, "relationships": {"1": "0211de59-b806-4626-9915-f5dbac44700b", "2": "474591a1-f4ad-42fc-905e-d8f3c2829dba"}}, "__type__": "1"}, "46c124ee-9496-49c7-816d-514227bce8fc": {"__data__": {"text": "Next: Summary [Floating-point-summary.html], Previous: How To Check If MPFR Is Available [Checking-for-MPFR.html], Up: Arithmetic\nand Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n16.7 STANDARDS VERSUS EXISTING PRACTICE\n\nHistorically, awk has converted any nonnumeric-looking string to the numeric value zero, when required. Furthermore, the original\ndefinition of the language and the original POSIX standards specified that awk only understands decimal numbers (base 10), and not\noctal (base 8) or hexadecimal numbers (base 16).\n\nChanges in the language of the 2001 and 2004 POSIX standards can be interpreted to imply that awk should support additional\nfeatures. These features are:\n\n * Interpretation of floating-point data values specified in hexadecimal notation (e.g., 0xDEADBEEF). (Note: data values, not\n   source code constants.)\n * Support for the special IEEE 754 floating-point values \u201cnot a number\u201d (NaN), positive infinity (\u201cinf\u201d), and negative infinity\n   (\u201c\u2212inf\u201d). In particular, the format for these values is as specified by the ISO 1999 C standard, which ignores case and can\n   allow implementation-dependent additional characters after the \u2018nan\u2019 and allow either \u2018inf\u2019 or \u2018infinity\u2019.\n\nThe first problem is that both of these are clear changes to historical practice:\n\n * The gawk maintainer feels that supporting hexadecimal floating-point values, in particular, is ugly, and was never intended by\n   the original designers to be part of the language.\n * Allowing completely alphabetic strings to have valid numeric values is also a very severe departure from historical practice.\n\nThe second problem is that the gawk maintainer feels that this interpretation of the standard, which required a certain amount of\n\u201clanguage lawyering\u201d to arrive at in the first place, was not even intended by the standard developers. In other words, \u201cWe see\nhow you got where you are, but we don\u2019t think that that\u2019s where you want to be.\u201d\n\nRecognizing these issues, but attempting to provide compatibility with the earlier versions of the standard, the 2008 POSIX\nstandard added explicit wording to allow, but not require, that awk support hexadecimal floating-point values and special values\nfor \u201cnot a number\u201d and infinity.\n\nAlthough the gawk maintainer continues to feel that providing those features is inadvisable, nevertheless, on systems that support\nIEEE floating point, it seems reasonable to provide some way to support NaN and infinity values. The solution implemented in gawk\nis as follows:\n\n * With the --posix command-line option, gawk becomes \u201chands off.\u201d String values are passed directly to the system library\u2019s\n   strtod() function, and if it successfully returns a numeric value, that is what\u2019s used.102 By definition, the results are not\n   portable across different systems. They are also a little surprising:\n   \n   $ echo nanny | gawk --posix '{ print $1 + 0 }'\n   -| nan\n   $ echo 0xDeadBeef | gawk --posix '{ print $1 + 0 }'\n   -| 3735928559\n   \n\n * Without --posix, gawk interprets the four string values \u2018+inf\u2019, \u2018-inf\u2019, \u2018+nan\u2019, and \u2018-nan\u2019 specially, producing the\n   corresponding special numeric values. The leading sign acts a signal to gawk (and the user) that the value is really numeric.\n   Hexadecimal floating point is not supported (unless you also use --non-decimal-data, which is not recommended). For example:\n   \n   $ echo nanny | gawk '{ print $1 + 0 }'\n   -| 0\n   $ echo +nan | gawk '{", "doc_id": "46c124ee-9496-49c7-816d-514227bce8fc", "embedding": null, "doc_hash": "411c929b7dd81206f1eb69c69115bc6ced99bab073a80320aaaf6384532c2e74", "extra_info": null, "node_info": {"start": 0, "end": 3656, "_node_type": "1"}, "relationships": {"1": "29e7cba9-9fca-4377-8a45-4f6099e630b0", "3": "f253845d-28f1-4350-9258-922fe38ffdbc"}}, "__type__": "1"}, "f253845d-28f1-4350-9258-922fe38ffdbc": {"__data__": {"text": "0 }'\n   -| 0\n   $ echo +nan | gawk '{ print $1 + 0 }'\n   -| +nan\n   $ echo 0xDeadBeef | gawk '{ print $1 + 0 }'\n   -| 0\n   \n   \n   gawk ignores case in the four special values. Thus, \u2018+nan\u2019 and \u2018+NaN\u2019 are the same.\n\nBesides handling input, gawk also needs to print \u201ccorrect\u201d values on output when a value is either NaN or infinity. Starting with\nversion 4.2.2, for such values gawk prints one of the four strings just described: \u2018+inf\u2019, \u2018-inf\u2019, \u2018+nan\u2019, or \u2018-nan\u2019. Similarly,\nin POSIX mode, gawk prints the result of the system\u2019s C printf() function using the %g format string for the value, whatever that\nmay be.\n\n> NOTE: The sign used for NaN values can vary! The result depends upon both the underlying system architecture and the underlying\n> library used to format NaN values. In particular, it\u2019s possible to get different results for the same function call depending\n> upon whether or not gawk is running in MPFR mode (-M) or not. Caveat Emptor!\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(102)\n\nYou asked for it, you got it.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Floating-point-summary.html], Previous: How To Check If MPFR Is Available [Checking-for-MPFR.html], Up: Arithmetic\nand Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "f253845d-28f1-4350-9258-922fe38ffdbc", "embedding": null, "doc_hash": "4928b7e9bdcbdf5b084bb747bc6427912059953be638dc07ece9df58fba6a742", "extra_info": null, "node_info": {"start": 3619, "end": 5155, "_node_type": "1"}, "relationships": {"1": "29e7cba9-9fca-4377-8a45-4f6099e630b0", "2": "46c124ee-9496-49c7-816d-514227bce8fc"}}, "__type__": "1"}, "a9664bb2-0980-4654-aa45-fe6514264b00": {"__data__": {"text": "Previous: Comparison Operators [Comparison-Operators.html], Up: Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.2.3 STRING COMPARISON BASED ON LOCALE COLLATING ORDER\n\nThe POSIX standard used to say that all string comparisons are performed based on the locale\u2019s collating order. This is the order\nin which characters sort, as defined by the locale (for more discussion, see Where You Are Makes a Difference [Locales.html]).\nThis order is usually very different from the results obtained when doing straight byte-by-byte comparison.35\n\nBecause this behavior differs considerably from existing practice, gawk only implemented it when in POSIX mode (see Command-Line\nOptions [Options.html]). Here is an example to illustrate the difference, in an en_US.UTF-8 locale:\n\n$ gawk 'BEGIN { printf(\"ABC < abc = %s\\n\",\n>                     (\"ABC\" < \"abc\" ? \"TRUE\" : \"FALSE\")) }'\n-| ABC < abc = TRUE\n$ gawk --posix 'BEGIN { printf(\"ABC < abc = %s\\n\",\n>                             (\"ABC\" < \"abc\" ? \"TRUE\" : \"FALSE\")) }'\n-| ABC < abc = FALSE\n\n\nFortunately, as of August 2016, comparison based on locale collating order is no longer required for the == and != operators.36\nHowever, comparison based on locales is still required for <, <=, >, and >=. POSIX thus recommends as follows:\n\n> Since the == operator checks whether strings are identical, not whether they collate equally, applications needing to check\n> whether strings collate equally can use:\n> \n> a <= b && a >= b\n\nAs of version 4.2, gawk continues to use locale collating order for <, <=, >, and >= only in POSIX mode.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(35)\n\nTechnically, string comparison is supposed to behave the same way as if the strings were compared with the C strcoll() function.\n\n(36)\n\nSee the Austin Group website [http://austingroupbugs.net/view.php?id=1070].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Comparison Operators [Comparison-Operators.html], Up: Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a9664bb2-0980-4654-aa45-fe6514264b00", "embedding": null, "doc_hash": "2b7c24252354c3143bbd902c5bd9803408b7df42f8d94a7e66e0fc19879b0887", "extra_info": null, "node_info": {"start": 0, "end": 2478, "_node_type": "1"}, "relationships": {"1": "83811f45-c32f-49d4-be0b-a502316923d2"}}, "__type__": "1"}, "d2b72417-7fd9-4677-a504-888f67093d83": {"__data__": {"text": "Next: Extensions in Brian Kernighan\u2019s awk [BTL.html], Previous: Changes Between SVR3.1 and SVR4 [SVR4.html], Up: The Evolution of\nthe awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.3 CHANGES BETWEEN SVR4 AND POSIX AWK\n\nThe POSIX Command Language and Utilities standard for awk (1992) introduced the following changes into the language:\n\n * The use of -W for implementation-specific options (see Command-Line Options [Options.html])\n * The use of CONVFMT for controlling the conversion of numbers to strings (see Conversion of Strings and Numbers\n   [Conversion.html])\n * The concept of a numeric string and tighter comparison rules to go with it (see Variable Typing and Comparison Expressions\n   [Typing-and-Comparison.html])\n * The use of predefined variables as function parameter names is forbidden (see Function Definition Syntax\n   [Definition-Syntax.html])\n * More complete documentation of many of the previously undocumented features of the language\n\nIn 2012, a number of extensions that had been commonly available for many years were finally added to POSIX. They are:\n\n * The fflush() built-in function for flushing buffered output (see Input/Output Functions [I_002fO-Functions.html])\n * The nextfile statement (see The nextfile Statement [Nextfile-Statement.html])\n * The ability to delete all of an array at once with \u2018delete array\u2019 (see The delete Statement [Delete.html])\n\nSee Common Extensions Summary [Common-Extensions.html] for a list of common extensions not permitted by the POSIX standard.\n\nThe 2018 POSIX standard can be found online at https://pubs.opengroup.org/onlinepubs/9699919799/\n[https://pubs.opengroup.org/onlinepubs/9699919799/].", "doc_id": "d2b72417-7fd9-4677-a504-888f67093d83", "embedding": null, "doc_hash": "2bdaf787d9ac3eb0cf262115ea0ccae3ee52e907c5dfa14e3b70f25f33c2c15b", "extra_info": null, "node_info": {"start": 0, "end": 1848, "_node_type": "1"}, "relationships": {"1": "e68eb8c6-67d3-4d36-b473-40c1c827e9b9"}}, "__type__": "1"}, "dec2bcde-2b71-4730-87e5-1780dddddf13": {"__data__": {"text": "Next: History of gawk Features [Feature-History.html], Previous: Extensions in Brian Kernighan\u2019s awk [BTL.html], Up: The Evolution\nof the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.5 EXTENSIONS IN GAWK NOT IN POSIX AWK\n\nThe GNU implementation, gawk, adds a large number of features. They can all be disabled with either the --traditional or --posix\noptions (see Command-Line Options [Options.html]).\n\nA number of features have come and gone over the years. This section summarizes the additional features over POSIX awk that are in\nthe current version of gawk.\n\n * Additional predefined variables:\n   * The ARGIND, BINMODE, ERRNO, FIELDWIDTHS, FPAT, IGNORECASE, LINT, PROCINFO, RT, and TEXTDOMAIN variables (see Predefined\n     Variables [Built_002din-Variables.html])\n * Special files in I/O redirections:\n   * The /dev/stdin, /dev/stdout, /dev/stderr, and /dev/fd/N special file names (see Special File names in gawk\n     [Special-Files.html])\n   * The /inet, /inet4, and /inet6 special files for TCP/IP networking using \u2018|&\u2019 to specify which version of the IP protocol to\n     use (see Using gawk for Network Programming [TCP_002fIP-Networking.html])\n * Changes and/or additions to the language:\n   * The \u2018\\x\u2019 escape sequence (see Escape Sequences [Escape-Sequences.html])\n   * Full support for both POSIX and GNU regexps (see Regular Expressions [Regexp.html])\n   * The ability for FS and for the third argument to split() to be null strings (see Making Each Character a Separate Field\n     [Single-Character-Fields.html])\n   * The ability for RS to be a regexp (see How Input Is Split into Records [Records.html])\n   * The ability to use octal and hexadecimal constants in awk program source code (see Octal and Hexadecimal Numbers\n     [Nondecimal_002dnumbers.html])\n   * The \u2018|&\u2019 operator for two-way I/O to a coprocess (see Two-Way Communications with Another Process [Two_002dway-I_002fO.html])\n   * Indirect function calls (see Indirect Function Calls [Indirect-Calls.html])\n   * Directories on the command line produce a warning and are skipped (see Directories on the Command Line\n     [Command_002dline-directories.html])\n   * Output with print and printf need not be fatal (see Enabling Nonfatal Output [Nonfatal.html])\n * New keywords:\n   * The BEGINFILE and ENDFILE special patterns (see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html])\n   * The switch statement (see The switch Statement [Switch-Statement.html])\n * Changes to standard awk functions:\n   * The optional second argument to close() that allows closing one end of a two-way pipe to a coprocess (see Two-Way\n     Communications with Another Process [Two_002dway-I_002fO.html])\n   * POSIX compliance for gsub() and sub() with --posix\n   * The length() function accepts an array argument and returns the number of elements in the array (see String-Manipulation\n     Functions [String-Functions.html])\n   * The optional third argument to the match() function for capturing text-matching subexpressions within a regexp (see\n     String-Manipulation Functions [String-Functions.html])\n   * Positional specifiers in printf formats for making translations easier (see Rearranging printf Arguments\n     [Printf-Ordering.html])\n   * The split()", "doc_id": "dec2bcde-2b71-4730-87e5-1780dddddf13", "embedding": null, "doc_hash": "823acd1fb339c2666bfb800daa7e297ebdb9ffd49e485b7b7fd4077318d86b63", "extra_info": null, "node_info": {"start": 0, "end": 3427, "_node_type": "1"}, "relationships": {"1": "ab921b73-7166-4243-8f4b-9bc4b023ce5f", "3": "7864c26c-87eb-40c6-aedc-1dd5b32babdb"}}, "__type__": "1"}, "7864c26c-87eb-40c6-aedc-1dd5b32babdb": {"__data__": {"text": "    [Printf-Ordering.html])\n   * The split() function\u2019s additional optional fourth argument, which is an array to hold the text of the field separators (see\n     String-Manipulation Functions [String-Functions.html])\n * Additional functions only in gawk:\n   * The gensub(), patsplit(), and strtonum() functions for more powerful text manipulation (see String-Manipulation Functions\n     [String-Functions.html])\n   * The asort() and asorti() functions for sorting arrays (see Controlling Array Traversal and Array Sorting\n     [Array-Sorting.html])\n   * The mktime(), systime(), and strftime() functions for working with timestamps (see Time Functions [Time-Functions.html])\n   * The and(), compl(), lshift(), or(), rshift(), and xor() functions for bit manipulation (see Bit-Manipulation Functions\n     [Bitwise-Functions.html])\n   * The isarray() function to check if a variable is an array or not (see Getting Type Information [Type-Functions.html])\n   * The bindtextdomain(), dcgettext(), and dcngettext() functions for internationalization (see Internationalizing awk Programs\n     [Programmer-i18n.html])\n * Changes and/or additions in the command-line options:\n   * \n   * The AWKPATH environment variable for specifying a path search for the -f command-line option (see Command-Line Options\n     [Options.html])\n   * The AWKLIBPATH environment variable for specifying a path search for the -l command-line option (see Command-Line Options\n     [Options.html])\n   * The -b, -c, -C, -d, -D, -e, -E, -g, -h, -i, -l, -L, -M, -n, -N, -o, -O, -p, -P, -r, -s, -S, -t, and -V short options. Also,\n     the ability to use GNU-style long-named options that start with --, and the --assign, --bignum, --characters-as-bytes,\n     --copyright, --debug, --dump-variables, --exec, --field-separator, --file, --gen-pot, --help, --include, --lint, --lint-old,\n     --load, --non-decimal-data, --optimize, --no-optimize, --posix, --pretty-print, --profile, --re-interval, --sandbox,\n     --source, --traditional, --use-lc-numeric, and --version long options (see Command-Line Options [Options.html]).\n * Support for the following obsolete systems was removed from the code and the documentation for gawk version 4.0:\n   * Amiga\n   * Atari\n   * BeOS\n   * Cray\n   * MIPS RiscOS\n   * MS-DOS with the Microsoft Compiler\n   * MS-Windows with the Microsoft Compiler\n   * NeXT\n   * SunOS 3.x, Sun 386 (Road Runner)\n   * Tandem (non-POSIX)\n   * Prestandard VAX C compiler for VAX/VMS\n   * GCC for Alpha has not been tested for a while.\n * Support for the following obsolete system was removed from the code for gawk version 4.1:\n   * Ultrix\n * Support for the following systems was removed from the code for gawk version 4.2:\n   * MirBSD\n   * GNU/Linux on Alpha\n * Support for the following systems was removed from the code for gawk version 5.2:\n   * OS/2\n   * DJGPP\n   * VAX/VMS\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: History of gawk Features [Feature-History.html], Previous: Extensions in Brian Kernighan\u2019s awk [BTL.html], Up: The Evolution\nof the awk Language [Language-History.html] \u00a0 [Contents", "doc_id": "7864c26c-87eb-40c6-aedc-1dd5b32babdb", "embedding": null, "doc_hash": "685b185c38b5116283d268cbfb247b3faae610de1171cb084789de478bc5a208", "extra_info": null, "node_info": {"start": 3393, "end": 6574, "_node_type": "1"}, "relationships": {"1": "ab921b73-7166-4243-8f4b-9bc4b023ce5f", "2": "dec2bcde-2b71-4730-87e5-1780dddddf13", "3": "218803b7-f733-4013-93ac-a2df757dce26"}}, "__type__": "1"}, "218803b7-f733-4013-93ac-a2df757dce26": {"__data__": {"text": "Up: The Evolution\nof the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "218803b7-f733-4013-93ac-a2df757dce26", "embedding": null, "doc_hash": "cebd91b07de312920d5807ea3de9e7bdf00868c866793b62cbca1d25f83bbc80", "extra_info": null, "node_info": {"start": 6536, "end": 6656, "_node_type": "1"}, "relationships": {"1": "ab921b73-7166-4243-8f4b-9bc4b023ce5f", "2": "7864c26c-87eb-40c6-aedc-1dd5b32babdb"}}, "__type__": "1"}, "8bf22cc1-ee7e-47a0-b9f3-25599ed5a5a4": {"__data__": {"text": "Next: Other Points About Calling Functions [Function-Caveats.html], Previous: Controlling Variable Scope [Variable-Scope.html],\nUp: Calling User-Defined Functions [Function-Calling.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.3.3 PASSING FUNCTION ARGUMENTS BY VALUE OR BY REFERENCE\n\nIn awk, when you declare a function, there is no way to declare explicitly whether the arguments are passed by value or by\nreference.\n\nInstead, the passing convention is determined at runtime when the function is called, according to the following rule: if the\nargument is an array variable, then it is passed by reference. Otherwise, the argument is passed by value.\n\nPassing an argument by value means that when a function is called, it is given a copy of the value of this argument. The caller\nmay use a variable as the expression for the argument, but the called function does not know this\u2014it only knows what value the\nargument had. For example, if you write the following code:\n\nfoo = \"bar\"\nz = myfunc(foo)\n\n\nthen you should not think of the argument to myfunc() as being \u201cthe variable foo.\u201d Instead, think of the argument as the string\nvalue \"bar\". If the function myfunc() alters the values of its local variables, this has no effect on any other variables. Thus,\nif myfunc() does this:\n\nfunction myfunc(str)\n{\n   print str\n   str = \"zzz\"\n   print str\n}\n\n\nto change its first argument variable str, it does not change the value of foo in the caller. The role of foo in calling myfunc()\nended when its value (\"bar\") was computed. If str also exists outside of myfunc(), the function body cannot alter this outer\nvalue, because it is shadowed during the execution of myfunc() and cannot be seen or changed from there.\n\nHowever, when arrays are the parameters to functions, they are not copied. Instead, the array itself is made available for direct\nmanipulation by the function. This is usually termed call by reference. Changes made to an array parameter inside the body of a\nfunction are visible outside that function.\n\n> NOTE: Changing an array parameter inside a function can be very dangerous if you do not watch what you are doing. For example:\n> \n> function changeit(array, ind, nvalue)\n> {\n>      array[ind] = nvalue\n> }\n> \n> BEGIN {\n>     a[1] = 1; a[2] = 2; a[3] = 3\n>     changeit(a, 2, \"two\")\n>     printf \"a[1] = %s, a[2] = %s, a[3] = %s\\n\",\n>             a[1], a[2], a[3]\n> }\n> \n> \n> prints \u2018a[1] = 1, a[2] = two, a[3] = 3\u2019, because changeit() stores \"two\" in the second element of a.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Other Points About Calling Functions [Function-Caveats.html], Previous: Controlling Variable Scope [Variable-Scope.html],\nUp: Calling User-Defined Functions [Function-Calling.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "8bf22cc1-ee7e-47a0-b9f3-25599ed5a5a4", "embedding": null, "doc_hash": "caabc5d49729d914cf48e46afc311310e4554c4df451afcf0c1ff55eca58f15b", "extra_info": null, "node_info": {"start": 0, "end": 3023, "_node_type": "1"}, "relationships": {"1": "8f399fbb-0356-45c4-9217-614129e8cc11"}}, "__type__": "1"}, "d9ccc57a-faa6-4d7f-96a9-aed7e0b32fe5": {"__data__": {"text": "Next: Reading the Group Database [Group-Functions.html], Previous: Processing Command-Line Options [Getopt-Function.html], Up: A\nLibrary of awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.5 READING THE USER DATABASE\n\nThe PROCINFO array (see Predefined Variables [Built_002din-Variables.html]) provides access to the current user\u2019s real and\neffective user and group ID numbers, and, if available, the user\u2019s supplementary group set. However, because these are numbers,\nthey do not provide very useful information to the average user. There needs to be some way to find the user information\nassociated with the user and group ID numbers. This section presents a suite of functions for retrieving information from the user\ndatabase. See Reading the Group Database [Group-Functions.html] for a similar suite that retrieves information from the group\ndatabase.\n\nThe POSIX standard does not define the file where user information is kept. Instead, it provides the <pwd.h> header file and\nseveral C language subroutines for obtaining user information. The primary function is getpwent(), for \u201cget password entry.\u201d The\n\u201cpassword\u201d comes from the original user database file, /etc/passwd, which stores user information along with the encrypted\npasswords (hence the name).\n\nAlthough an awk program could simply read /etc/passwd directly, this file may not contain complete information about the system\u2019s\nset of users.73 To be sure you are able to produce a readable and complete version of the user database, it is necessary to write\na small C program that calls getpwent(). getpwent() is defined as returning a pointer to a struct passwd. Each time it is called,\nit returns the next entry in the database. When there are no more entries, it returns NULL, the null pointer. When this happens,\nthe C program should call endpwent() to close the database. Following is pwcat, a C program that \u201ccats\u201d the password database:\n\n/*\n * pwcat.c\n *\n * Generate a printable version of the password database.\n */\n#include <stdio.h>\n#include <pwd.h>\n\nint\nmain(int argc, char **argv)\n{\n    struct passwd *p;\n\n    while ((p = getpwent()) != NULL)\n        printf(\"%s:%s:%ld:%ld:%s:%s:%s\\n\",\n            p->pw_name, p->pw_passwd, (long) p->pw_uid,\n            (long) p->pw_gid, p->pw_gecos, p->pw_dir, p->pw_shell);\n\n    endpwent();\n    return 0;\n}\n\n\nIf you don\u2019t understand C, don\u2019t worry about it. The output from pwcat is the user database, in the traditional /etc/passwd format\nof colon-separated fields. The fields are:\n\nLogin name\n\nThe user\u2019s login name.\n\nEncrypted password\n\nThe user\u2019s encrypted password. This may not be available on some systems.\n\nUser-ID\n\nThe user\u2019s numeric user ID number. (On some systems, it\u2019s a C long, and not an int. Thus, we cast it to long for all cases.)\n\nGroup-ID\n\nThe user\u2019s numeric group ID number. (Similar comments about long versus int apply here.)\n\nFull name\n\nThe user\u2019s full name, and perhaps other information associated with the user.\n\nHome directory\n\nThe user\u2019s login (or \u201chome\u201d) directory (familiar to shell programmers as $HOME).\n\nLogin shell\n\nThe program that is run when the user logs in. This is usually a shell, such as Bash.\n\nA few lines representative of pwcat\u2019s output are as follows:\n\n$ pwcat\n-|", "doc_id": "d9ccc57a-faa6-4d7f-96a9-aed7e0b32fe5", "embedding": null, "doc_hash": "3644992cad7ae3c88d4d06482f3372a1bd36608a9cc9a0bd7dd23f722ae092db", "extra_info": null, "node_info": {"start": 0, "end": 3410, "_node_type": "1"}, "relationships": {"1": "3cbc1128-e3a5-43fa-844b-e7f30ba467b7", "3": "dc3f2bb8-6dcf-43d5-bbc7-53e517269d4c"}}, "__type__": "1"}, "dc3f2bb8-6dcf-43d5-bbc7-53e517269d4c": {"__data__": {"text": "pwcat\u2019s output are as follows:\n\n$ pwcat\n-| root:x:0:1:Operator:/:/bin/sh\n-| nobody:*:65534:65534::/:\n-| daemon:*:1:1::/:\n-| sys:*:2:2::/:/bin/csh\n-| bin:*:3:3::/bin:\n-| arnold:xyzzy:2076:10:Arnold Robbins:/home/arnold:/bin/sh\n-| miriam:yxaay:112:10:Miriam Robbins:/home/miriam:/bin/sh\n-| andy:abcca2:113:10:Andy Jacobs:/home/andy:/bin/sh\n\u2026\n\n\nWith that introduction, following is a group of functions for getting user information. There are several functions here,\ncorresponding to the C functions of the same names:\n\n# passwd.awk --- access password file information\n\nBEGIN {\n    # tailor this to suit your system\n    _pw_awklib = \"/usr/local/libexec/awk/\"\n}\n\nfunction _pw_init(    oldfs, oldrs, olddol0, pwcat, using_fw, using_fpat)\n{\n    if (_pw_inited)\n        return\n\n    oldfs = FS\n    oldrs = RS\n    olddol0 = $0\n    using_fw = (PROCINFO[\"FS\"] == \"FIELDWIDTHS\")\n    using_fpat = (PROCINFO[\"FS\"] == \"FPAT\")\n    FS = \":\"\n    RS = \"\\n\"\n\n    pwcat = _pw_awklib \"pwcat\"\n    while ((pwcat | getline) > 0) {\n        _pw_byname[$1] = $0\n        _pw_byuid[$3] = $0\n        _pw_bycount[++_pw_total] = $0\n    }\n    close(pwcat)\n    _pw_count = 0\n    _pw_inited = 1\n    FS = oldfs\n    if (using_fw)\n        FIELDWIDTHS = FIELDWIDTHS\n    else if (using_fpat)\n        FPAT = FPAT\n    RS = oldrs\n    $0 = olddol0\n}\n\n\nThe BEGIN rule sets a private variable to the directory where pwcat is stored. Because it is used to help out an awk library\nroutine, we have chosen to put it in /usr/local/libexec/awk; however, you might want it to be in a different directory on your\nsystem.\n\nThe function _pw_init() fills three copies of the user information into three associative arrays. The arrays are indexed by\nusername (_pw_byname), by user ID number (_pw_byuid), and by order of occurrence (_pw_bycount). The variable _pw_inited is used\nfor efficiency, as _pw_init() needs to be called only once.\n\nBecause this function uses getline to read information from pwcat, it first saves the values of FS, RS, and $0. It notes in the\nvariable using_fw whether field splitting with FIELDWIDTHS is in effect or not. Doing so is necessary, as these functions could be\ncalled from anywhere within a user\u2019s program, and the user may have his or her own way of splitting records and fields. This makes\nit possible to restore the correct field-splitting mechanism later. The test can only be true for gawk. It is false if using FS or\nFPAT, or on some other awk implementation.\n\nThe code that checks for using FPAT, using using_fpat and PROCINFO[\"FS\"], is similar.\n\nThe main part of the function uses a loop to read database lines, split the lines into fields, and then store the lines into each\narray as necessary. When the loop is done, _pw_init() cleans up by", "doc_id": "dc3f2bb8-6dcf-43d5-bbc7-53e517269d4c", "embedding": null, "doc_hash": "60c7c679a4b8122356047a4dba2dc9452dd141fa559baa5e78cf51573c8f1f44", "extra_info": null, "node_info": {"start": 3374, "end": 6104, "_node_type": "1"}, "relationships": {"1": "3cbc1128-e3a5-43fa-844b-e7f30ba467b7", "2": "d9ccc57a-faa6-4d7f-96a9-aed7e0b32fe5", "3": "18060bf3-0d21-4a7a-9556-87f637f86f4a"}}, "__type__": "1"}, "18060bf3-0d21-4a7a-9556-87f637f86f4a": {"__data__": {"text": "as necessary. When the loop is done, _pw_init() cleans up by closing the pipeline, setting _pw_inited to one, and restoring\nFS (and FIELDWIDTHS or FPAT if necessary), RS, and $0. The use of _pw_count is explained shortly.\n\nThe getpwnam() function takes a username as a string argument. If that user is in the database, it returns the appropriate line.\nOtherwise, it relies on the array reference to a nonexistent element to create the element with the null string as its value:\n\nfunction getpwnam(name)\n{\n    _pw_init()\n    return _pw_byname[name]\n}\n\n\nSimilarly, the getpwuid() function takes a user ID number argument. If that user number is in the database, it returns the\nappropriate line. Otherwise, it returns the null string:\n\nfunction getpwuid(uid)\n{\n    _pw_init()\n    return _pw_byuid[uid]\n}\n\n\nThe getpwent() function simply steps through the database, one entry at a time. It uses _pw_count to track its current position in\nthe _pw_bycount array:\n\nfunction getpwent()\n{\n    _pw_init()\n    if (_pw_count < _pw_total)\n        return _pw_bycount[++_pw_count]\n    return \"\"\n}\n\n\nThe endpwent() function resets _pw_count to zero, so that subsequent calls to getpwent() start over again:\n\nfunction endpwent()\n{\n    _pw_count = 0\n}\n\n\nA conscious design decision in this suite is that each subroutine calls _pw_init() to initialize the database arrays. The overhead\nof running a separate process to generate the user database, and the I/O to scan it, are only incurred if the user\u2019s main program\nactually calls one of these functions. If this library file is loaded along with a user\u2019s program, but none of the routines are\never called, then there is no extra runtime overhead. (The alternative is move the body of _pw_init() into a BEGIN rule, which\nalways runs pwcat. This simplifies the code but runs an extra process that may never be needed.)\n\nIn turn, calling _pw_init() is not too expensive, because the _pw_inited variable keeps the program from reading the data more\nthan once. If you are worried about squeezing every last cycle out of your awk program, the check of _pw_inited could be moved out\nof _pw_init() and duplicated in all the other functions. In practice, this is not necessary, as most awk programs are I/O-bound,\nand such a change would clutter up the code.\n\nThe id program in Printing Out User Information [Id-Program.html] uses these functions.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(73)\n\nIt is often the case that password information is stored in a network database.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Reading the Group Database [Group-Functions.html], Previous: Processing Command-Line Options [Getopt-Function.html], Up: A\nLibrary of awk Functions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "18060bf3-0d21-4a7a-9556-87f637f86f4a", "embedding": null, "doc_hash": "a32386dca5e702566c72e945bba88355234f88fd0c3ea49c21c73aa86d6c70d5", "extra_info": null, "node_info": {"start": 6081, "end": 9052, "_node_type": "1"}, "relationships": {"1": "3cbc1128-e3a5-43fa-844b-e7f30ba467b7", "2": "dc3f2bb8-6dcf-43d5-bbc7-53e517269d4c"}}, "__type__": "1"}, "ce6e4dd2-a3dc-4166-9f34-629755229aa0": {"__data__": {"text": "Previous: Predefined Variables [Built_002din-Variables.html], Up: Patterns, Actions, and Variables [Patterns-and-Actions.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7.6 SUMMARY\n\n * Pattern\u2013action pairs make up the basic elements of an awk program. Patterns are either normal expressions, range expressions,\n   or regexp constants; one of the special keywords BEGIN, END, BEGINFILE, or ENDFILE; or empty. The action executes if the\n   current record matches the pattern. Empty (missing) patterns match all records.\n * I/O from BEGIN and END rules has certain constraints. This is also true, only more so, for BEGINFILE and ENDFILE rules. The\n   latter two give you \u201chooks\u201d into gawk\u2019s file processing, allowing you to recover from a file that otherwise would cause a fatal\n   error (such as a file that cannot be opened).\n * Shell variables can be used in awk programs by careful use of shell quoting. It is easier to pass a shell variable into awk by\n   using the -v option and an awk variable.\n * Actions consist of statements enclosed in curly braces. Statements are built up from expressions, control statements, compound\n   statements, input and output statements, and deletion statements.\n * The control statements in awk are if-else, while, for, and do-while. gawk adds the switch statement. There are two flavors of\n   for statement: one for performing general looping, and the other for iterating through an array.\n * break and continue let you exit early or start the next iteration of a loop (or get out of a switch).\n * next and nextfile let you read the next record and start over at the top of your program or skip to the next input file and\n   start over, respectively.\n * The exit statement terminates your program. When executed from an action (or function body), it transfers control to the END\n   statements. From an END statement body, it exits immediately. You may pass an optional numeric value to be used as awk\u2019s exit\n   status.\n * Some predefined variables provide control over awk, mainly for I/O. Other variables convey information from awk to your\n   program.\n * ARGC and ARGV make the command-line arguments available to your program. Manipulating them from a BEGIN rule lets you control\n   how awk will process the provided data files.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Predefined Variables [Built_002din-Variables.html], Up: Patterns, Actions, and Variables [Patterns-and-Actions.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ce6e4dd2-a3dc-4166-9f34-629755229aa0", "embedding": null, "doc_hash": "adb5558518a6c6a231c1d74118d5bf423e7baf2c43921b87cbc213ee61debcba", "extra_info": null, "node_info": {"start": 0, "end": 2738, "_node_type": "1"}, "relationships": {"1": "af5de915-c5ea-4076-9b7c-d9784e7e281b"}}, "__type__": "1"}, "ccfddc33-4448-42c9-914c-d0712d037306": {"__data__": {"text": "Next: Using Shell Variables in Programs [Using-Shell-Variables.html], Up: Patterns, Actions, and Variables\n[Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7.1 PATTERN ELEMENTS\n\nPatterns in awk control the execution of rules\u2014a rule is executed when its pattern matches the current input record. The following\nis a summary of the types of awk patterns:\n\n/regular expression/\n\nA regular expression. It matches when the text of the input record fits the regular expression. (See Regular Expressions\n[Regexp.html].)\n\nexpression\n\nA single expression. It matches when its value is nonzero (if a number) or non-null (if a string). (See Expressions as Patterns\n[Expression-Patterns.html].)\n\nbegpat, endpat\n\nA pair of patterns separated by a comma, specifying a range of records. The range includes both the initial record that matches\nbegpat and the final record that matches endpat. (See Specifying Record Ranges with Patterns [Ranges.html].)\n\nBEGIN END\n\nSpecial patterns for you to supply startup or cleanup actions for your awk program. (See The BEGIN and END Special Patterns\n[BEGIN_002fEND.html].)\n\nBEGINFILE ENDFILE\n\nSpecial patterns for you to supply startup or cleanup actions to be done on a per-file basis. (See The BEGINFILE and ENDFILE\nSpecial Patterns [BEGINFILE_002fENDFILE.html].)\n\nempty\n\nThe empty pattern matches every input record. (See The Empty Pattern [Empty.html].)\n\n * Regular Expressions as Patterns [Regexp-Patterns.html]\n * Expressions as Patterns [Expression-Patterns.html]\n * Specifying Record Ranges with Patterns [Ranges.html]\n * The BEGIN and END Special Patterns [BEGIN_002fEND.html]\n * The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]\n * The Empty Pattern [Empty.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using Shell Variables in Programs [Using-Shell-Variables.html], Up: Patterns, Actions, and Variables\n[Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ccfddc33-4448-42c9-914c-d0712d037306", "embedding": null, "doc_hash": "3798bb22718fdcee31384f403cef5b5483f823a4b1fb5fb3d25a32150836cdb1", "extra_info": null, "node_info": {"start": 0, "end": 2215, "_node_type": "1"}, "relationships": {"1": "bed30783-b402-4f73-8b27-7e60c81ad72f"}}, "__type__": "1"}, "8e3b1012-5176-4f45-9f8b-0bca5c8d0f14": {"__data__": {"text": "Next: Arrays in awk [Arrays.html], Previous: Expressions [Expressions.html], Up: General Introduction [index.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7 PATTERNS, ACTIONS, AND VARIABLES\n\nAs you have already seen, each awk statement consists of a pattern with an associated action. This chapter describes how you build\npatterns and actions, what kinds of things you can do within actions, and awk\u2019s predefined variables.\n\nThe pattern\u2013action rules and the statements available for use within actions form the core of awk programming. In a sense,\neverything covered up to here has been the foundation that programs are built on top of. Now it\u2019s time to start building something\nuseful.\n\n * Pattern Elements [Pattern-Overview.html]\n * Using Shell Variables in Programs [Using-Shell-Variables.html]\n * Actions [Action-Overview.html]\n * Control Statements in Actions [Statements.html]\n * Predefined Variables [Built_002din-Variables.html]\n * Summary [Pattern-Action-Summary.html]", "doc_id": "8e3b1012-5176-4f45-9f8b-0bca5c8d0f14", "embedding": null, "doc_hash": "f1478c35500023b4b71f33b66c1567081760611fa79303e7fd35debd833ee9ed", "extra_info": null, "node_info": {"start": 0, "end": 1130, "_node_type": "1"}, "relationships": {"1": "a3c5d270-293d-499b-b14a-c5a7604f0369"}}, "__type__": "1"}, "a7c98940-4c11-47ea-9643-606e2bfdfed4": {"__data__": {"text": "Next: Where To Send Non-bug Questions [Asking-for-help.html], Previous: Please Don\u2019t Post Bug Reports to USENET [Usenet.html], Up:\nReporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.4.4 WHAT TO DO IF YOU THINK THERE IS A PERFORMANCE ISSUE\n\nIf you think that gawk is too slow at doing a particular task, you should investigate before sending in a bug report. Here are the\nsteps to follow:\n\n 1. Run gawk with the --profile option (see Command-Line Options [Options.html]) to see what your program is doing. It may be that\n    you have written it in an inefficient manner. For example, you may be doing something for every record that could be done just\n    once, for every file. (Use a BEGINFILE rule; see The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html].) Or\n    you may be doing something for every file that only needs to be done once per run of the program. (Use a BEGIN rule; see The\n    BEGIN and END Special Patterns [BEGIN_002fEND.html].)\n 2. If profiling at the awk level doesn\u2019t help, then you will need to compile gawk itself for profiling at the C language level.\n    \n    To do that, start with the latest released version of gawk. Unpack the source code in a new directory, and configure it:\n    \n    $ tar -xpzvf gawk-X.Y.Z.tar.gz\n    -| \u2026                                Output omitted\n    $ cd gawk-X.Y.Z\n    $ ./configure\n    -| \u2026                                Output omitted\n    \n\n 3. Edit the files Makefile and support/Makefile. Change every instance of -O2 or -O to -pg. This causes gawk to be compiled for\n    profiling.\n 4. Compile the program by running the make command:\n    \n    $ make\n    -| \u2026                                Output omitted\n    \n\n 5. Run the freshly compiled gawk on a real program, using real data. Using an artificial program to try to time one particular\n    feature of gawk is useless; real awk programs generally spend most of their time doing I/O, not computing. If you want to\n    prove that something is slow, it must be done using a real program and real data.\n    \n    Use a data file that is large enough for the statistical profiling to measure where gawk spends its time. It should be at\n    least 100 megabytes in size.\n    \n    $ ./gawk -f realprogram.awk realdata > /dev/null\n    \n\n 6. When done, you should have a file in the current directory named gmon.out. Run the command \u2018gprof gawk gmon.out > gprof.out\u2019.\n 7. Submit a bug report explaining what you think is slow. Include the gprof.out file with it.\n    \n    Preferably, you should also submit the program and the data, or else indicate where to get the data if the file is large.\n\n 8. If you have not submitted your program and data, be prepared to apply patches and rerun the profiling in order to see if the\n    patches were effective.\n\nIf you are incapable or unwilling to do the steps listed above, then you will just have to live with gawk as it is.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Where To Send Non-bug Questions [Asking-for-help.html], Previous: Please Don\u2019t Post Bug Reports to USENET [Usenet.html],", "doc_id": "a7c98940-4c11-47ea-9643-606e2bfdfed4", "embedding": null, "doc_hash": "67070e733bfa3843092cbad2acfa4107d8f96eb0744d4bcef314b31158b9c5e7", "extra_info": null, "node_info": {"start": 0, "end": 3336, "_node_type": "1"}, "relationships": {"1": "b984c275-9cb6-476e-8fd0-0f9ff585fa6e", "3": "72b05e7e-e550-430e-bcd6-aee0f58110e6"}}, "__type__": "1"}, "72b05e7e-e550-430e-bcd6-aee0f58110e6": {"__data__": {"text": "Please Don\u2019t Post Bug Reports to USENET [Usenet.html], Up:\nReporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "72b05e7e-e550-430e-bcd6-aee0f58110e6", "embedding": null, "doc_hash": "475efdf86789519364049ad41f2ac2f64cfc18a360c09bfd7c6613444f000728", "extra_info": null, "node_info": {"start": 3282, "end": 3439, "_node_type": "1"}, "relationships": {"1": "b984c275-9cb6-476e-8fd0-0f9ff585fa6e", "2": "a7c98940-4c11-47ea-9643-606e2bfdfed4"}}, "__type__": "1"}, "2813f53a-835c-4f83-9b33-167520f0dec0": {"__data__": {"text": "Next: Builtin Features versus Extensions [Extension-Philosophy.html], Previous: Profiling Your awk Programs [Profiling.html], Up:\nAdvanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.7 PRESERVING DATA BETWEEN RUNS\n\nStarting with version 5.2, gawk supports persistent memory. This experimental feature stores the values of all of gawk\u2019s\nvariables, arrays and user-defined functions in a persistent heap, which resides in a file in the filesystem. When persistent\nmemory is not in use (the normal case), gawk\u2019s data resides in ephemeral system memory.\n\nPersistent memory is enabled on certain 64-bit systems supporting the mmap() and munmap() system calls. gawk must be compiled as a\nnon-PIE (Position Independent Executable) binary, since the persistent store ends up holding pointers to functions held within the\ngawk executable. This also means that to use the persistent memory, you must use the same gawk executable from run to run.\n\nYou can see if your version of gawk supports persistent memory like so:\n\n$ gawk --version\n-| GNU Awk 5.2.2, API 3.2, PMA Avon 8-g1, (GNU MPFR 4.1.0, GNU MP 6.2.1)\n-| Copyright (C) 1989, 1991-2023 Free Software Foundation.\n\u2026\n\n\nIf you see the \u2018PMA\u2019 with a version indicator, then it\u2019s supported.\n\nAs of this writing, persistent memory has only been tested on GNU/Linux, Cygwin, Solaris 2.11, Intel architecture macOS systems,\nFreeBSD 13.1 and OpenBSD 7.1. On all others, persistent memory is disabled by default. You can force it to be enabled by exporting\nthe shell variable REALLY_USE_PERSIST_MALLOC with a nonempty value before running configure (see Compiling gawk for Unix-Like\nSystems [Quick-Installation.html]). If you do so and all the tests pass, please let the maintainer know.\n\nTo use persistent memory, follow these steps:\n\n 1. Create a new, empty sparse file of the desired size. For example, four gigabytes. On a GNU/Linux system, you can use the\n    truncate utility:\n    \n    $ truncate -s 4G data.pma\n    \n\n 2. It is recommended (but not required) to change the permissions on the file so that only the owner can read and write it:\n    \n    $ chmod 0600 data.pma\n    \n\n 3. Provide the path to the data file in the GAWK_PERSIST_FILE environment variable. This is best done by placing the value in the\n    environment just for the run of gawk, like so:\n    \n    $ GAWK_PERSIST_FILE=data.pma gawk 'BEGIN { print ++i }'\n    1\n    \n\n 4. Use the same data file in subsequent runs to use the preserved data values:\n    \n    $ GAWK_PERSIST_FILE=data.pma gawk 'BEGIN { print ++i }'\n    2\n    $ GAWK_PERSIST_FILE=data.pma gawk 'BEGIN { print ++i }'\n    3\n    \n    \n    As shown, in subsequent runs using the same data file, the values of gawk\u2019s variables are preserved. However, gawk\u2019s special\n    variables, such as NR, are reset upon each run. Only the variables defined by the program are preserved across runs.\n\nInterestingly, the program that you execute need not be the same from run to run; the persistent store only maintains the values\nof variables, arrays, and user-defined functions, not the totality of gawk\u2019s internal state. This lets you share data between\nunrelated programs, eliminating the need for scripts to communicate via text files.\n\nTerence Kelly, the", "doc_id": "2813f53a-835c-4f83-9b33-167520f0dec0", "embedding": null, "doc_hash": "3b2bec0ed2b982ee1f46b091da0b0c1a130c2d74af9c54d6de1e76dfc6f558ea", "extra_info": null, "node_info": {"start": 0, "end": 3410, "_node_type": "1"}, "relationships": {"1": "19594150-639a-41eb-b717-e5cc5e35dcdf", "3": "a52b1e21-95ee-44d7-a0c6-4624ea5a9e7c"}}, "__type__": "1"}, "a52b1e21-95ee-44d7-a0c6-4624ea5a9e7c": {"__data__": {"text": "the need for scripts to communicate via text files.\n\nTerence Kelly, the author of the persistent memory allocator gawk uses, provides the following advice about the backing file:\n\n> Regarding backing file size, I recommend making it far larger than all of the data that will ever reside in it, assuming that\n> the file system supports sparse files. The \u201cpay only for what you use\u201d aspect of sparse files ensures that the actual storage\n> resource footprint of the backing file will meet the application\u2019s needs but will be as small as possible. If the file system\n> does not support sparse files, there\u2019s a dilemma: Making the backing file too large is wasteful, but making it too small risks\n> memory exhaustion, i.e., pma_malloc() returns NULL. But persistent gawk should still work even without sparse files.\n\nYou can disable the use of the persistent memory allocator in gawk with the --disable-pma option to the configure command at the\ntime that you build gawk (see Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html]).\n\nYou can set the PMA_VERBOSITY environment variable to a value between zero and three to control how much debugging and error\ninformation the persistent memory allocator will print. gawk sets the default to one. See the support/pma.c source code to\nunderstand what the different verbosity levels are.\n\nThere are a few constraints on the use of persistent memory:\n\n * If you use MPFR mode (the -M option) on the first run of a program using persistent memory, you must continue to use it on all\n   subsequent runs. Similarly, if you don\u2019t use -M on the first run, do not use it on any subsequent runs.\n   \n   Mixing and matching MPFR mode and regular mode with the same backing file is not allowed. gawk detects such a situation and\n   issues a fatal error message.\n\n * The GNU/Linux CIFS filesystem is known to not work well with the PMA allocator. Don\u2019t use a backing file on a CIFS filesystem.\n * If gawk is run by the root user, then persistent memory is not allowed. This is to avoid the possibility of private data\n   \u201cleaking\u201d into the backing file and being recovered later by an attacker.\n * Over time, the backing file will be filled with memory \u201cleaked\u201d by gawk as it runs. Most notably this is the memory used to\n   compile your program into an internal form before running it, which happens each time, but there are other leakages as well.\n   (For an extreme example of this, see this thread [https://lists.gnu.org/archive/html/bug-gawk/2023-04/msg00025.html] in the\n   \u201cbug-gawk at gnu.org\u201d mailing list archives.) It is up to you to use \u2018du -sh pmafile\u2019 occasionally to monitor how full the file\n   is, and arrange to dump any data you may need before the backing file becomes full.\n\nTerence Kelly has provided a separate Persistent-Memory gawk User Manual document, which is included in the gawk distribution. It\nis worth reading.\n\nHere are additional articles and web links that provide more information about persistent memory and why it\u2019s useful in a\nscripting language like gawk.\n\nhttps://web.eecs.umich.edu/~tpkelly/pma/ [https://web.eecs.umich.edu/~tpkelly/pma/]\n\nThis is the canonical source for Terence Kelly\u2019s Persistent Memory Allocator (PMA). The latest source code and user manual will\nalways be available at this location. Kelly may be reached directly at any of the following email addresses: \u201ctpkelly AT acm.org\u201d,\n\u201ctpkelly AT cs.princeton.edu\u201d, or \u201ctpkelly AT eecs.umich.edu\u201d.\n\nPersistent Memory Allocation\n\nTerence Kelly, Zi Fan Tan, Jianan Li, and Haris Volos, ACM Queue magazine, Vol. 20 No. 2", "doc_id": "a52b1e21-95ee-44d7-a0c6-4624ea5a9e7c", "embedding": null, "doc_hash": "4f20bc767f07d1cc5013a42dd07cfe3650fa6cf9a6e488e4d113d8be8ab95dc5", "extra_info": null, "node_info": {"start": 3350, "end": 6926, "_node_type": "1"}, "relationships": {"1": "19594150-639a-41eb-b717-e5cc5e35dcdf", "2": "2813f53a-835c-4f83-9b33-167520f0dec0", "3": "dc0f7af8-2894-4b14-9916-254a2c5c4c0a"}}, "__type__": "1"}, "dc0f7af8-2894-4b14-9916-254a2c5c4c0a": {"__data__": {"text": "Li, and Haris Volos, ACM Queue magazine, Vol. 20 No. 2 (March/April 2022), PDF\n[https://dl.acm.org/doi/pdf/10.1145/3534855], HTML [https://queue.acm.org/detail.cfm?id=3534855]. This paper explains the design\nof the PMA allocator used in persistent gawk.\n\nPersistent Scripting\n\nZi Fan Tan, Jianan Li, Haris Volos, and Terence Kelly, Non-Volatile Memory Workshop (NVMW) 2022, http://nvmw.ucsd.edu/program/\n[http://nvmw.ucsd.edu/program/]. This paper motivates and describes a research prototype of persistent gawk and presents\nperformance evaluations on Intel Optane non-volatile memory; note that the interface differs slightly.\n\nPersistent Memory Programming on Conventional Hardware\n\nTerence Kelly, ACM Queue magazine Vol. 17 No. 4 (July/Aug 2019), PDF [https://dl.acm.org/doi/pdf/10.1145/3358955.3358957], HTML\n[https://queue.acm.org/detail.cfm?id=3358957]. This paper describes simple techniques for persistent memory for C/C++ code on\nconventional computers that lack non-volatile memory hardware.\n\nIs Persistent Memory Persistent?\n\nTerence Kelly, ACM Queue magazine Vol. 18 No. 2 (March/April 2020), PDF [https://dl.acm.org/doi/pdf/10.1145/3400899.3400902], HTML\n[https://queue.acm.org/detail.cfm?id=3400902]. This paper describes a simple and robust testbed for testing software against real\npower failures.\n\nCrashproofing the Original NoSQL Key/Value Store\n\nTerence Kelly, ACM Queue magazine Vol. 19 No. 4 (July/Aug 2021), PDF [https://dl.acm.org/doi/pdf/10.1145/3487019.3487353], HTML\n[https://queue.acm.org/detail.cfm?id=3487353]. This paper describes a crash-tolerance feature added to GNU DBM\u2019 (gdbm).\n\nWhen Terence Kelly published his papers, his collaborators produced a prototype integration of PMA with gawk. That version used a\n(mandatory!) option --persist=file to specify the file for storing the persistent heap. If this option is given to gawk, it\nproduces a fatal error message instructing the user to use the GAWK_PERSIST_FILE environment variable instead. Except for this\nparagraph, that option is otherwise undocumented.\n\nThe prototype only supported persistent data; it did not support persistent functions.\n\nAs noted earlier, support for persistent memory is experimental. If it becomes burdensome,86 then the feature will be removed.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(86)\n\nMeaning, there are too many bug reports, or too many strange differences in behavior from when gawk is run normally.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Builtin Features versus Extensions [Extension-Philosophy.html], Previous: Profiling Your awk Programs [Profiling.html], Up:\nAdvanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "dc0f7af8-2894-4b14-9916-254a2c5c4c0a", "embedding": null, "doc_hash": "9ddd0c7d503fee6905a508d942aee815f46aee6e66265a630784f1afae8d6ad2", "extra_info": null, "node_info": {"start": 6933, "end": 9833, "_node_type": "1"}, "relationships": {"1": "19594150-639a-41eb-b717-e5cc5e35dcdf", "2": "a52b1e21-95ee-44d7-a0c6-4624ea5a9e7c"}}, "__type__": "1"}, "8f2243e2-360e-4d65-8adb-fcc7a7470e6c": {"__data__": {"text": "Next: Using getline into a Variable [Getline_002fVariable.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.10.1 USING GETLINE WITH NO ARGUMENTS\n\nThe getline command can be used without arguments to read input from the current input file. All it does in this case is read the\nnext input record and split it up into fields. This is useful if you\u2019ve finished processing the current record, but want to do\nsome special processing on the next record right now. For example:\n\n# Remove text between /* and */, inclusive\n{\n    while ((start = index($0, \"/*\")) != 0) {\n        out = substr($0, 1, start - 1)  # leading part of the string\n        rest = substr($0, start + 2)    # ... */ ...\n        while ((end = index(rest, \"*/\")) == 0) {  # is */ in trailing part?\n            # get more text\n            if (getline <= 0) {\n                print(\"unexpected EOF or error:\", ERRNO) > \"/dev/stderr\"\n                exit\n            }\n            # build up the line using string concatenation\n            rest = rest $0\n        }\n        rest = substr(rest, end + 2)  # remove comment\n        # build up the output line using string concatenation\n        $0 = out rest\n    }\n    print $0\n}\n\n\nThis awk program deletes C-style comments (\u2018/* \u2026 */\u2019) from the input. It uses a number of features we haven\u2019t covered yet,\nincluding string concatenation (see String Concatenation [Concatenation.html]) and the index() and substr() built-in functions\n(see String-Manipulation Functions [String-Functions.html]). By replacing the \u2018print $0\u2019 with other statements, you could perform\nmore complicated processing on the decommented input, such as searching for matches of a regular expression.\n\nHere is some sample input:\n\nmon/*comment*/key\nrab/*commen\nt*/bit\nhorse /*comment*/more text\npart 1 /*comment*/part 2 /*comment*/part 3\nno comment\n\n\nWhen run, the output is:\n\n$ awk -f strip_comments.awk example_text\n-| monkey\n-| rabbit\n-| horse more text\n-| part 1 part 2 part 3\n-| no comment\n\n\nThis form of the getline command sets NF, NR, FNR, RT, and the value of $0.\n\n> NOTE: The new value of $0 is used to test the patterns of any subsequent rules. The original value of $0 that triggered the rule\n> that executed getline is lost. By contrast, the next statement reads a new record but immediately begins processing it normally,\n> starting with the first rule in the program. See The next Statement [Next-Statement.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using getline into a Variable [Getline_002fVariable.html], Up: Explicit Input with getline [Getline.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "8f2243e2-360e-4d65-8adb-fcc7a7470e6c", "embedding": null, "doc_hash": "709e4fde5ce6d1bd1d71f0d802772a2243427a7f03994555547f7cbbead57c12", "extra_info": null, "node_info": {"start": 0, "end": 2902, "_node_type": "1"}, "relationships": {"1": "28beace1-16bf-48cc-bea9-a883430446cc"}}, "__type__": "1"}, "7b861663-eb98-4fbc-acbd-39487b5c25ce": {"__data__": {"text": "Next: How It Works at a High Level [Extension-Mechanism-Outline.html], Previous: Introduction [Extension-Intro.html], Up: Writing\nExtensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.2 EXTENSION LICENSING\n\nEvery dynamic extension must be distributed under a license that is compatible with the GNU GPL (see GNU General Public License\n[Copying.html]).\n\nIn order for the extension to tell gawk that it is properly licensed, the extension must define the global symbol\nplugin_is_GPL_compatible. If this symbol does not exist, gawk emits a fatal error and exits when it tries to load your extension.\n\nThe declared type of the symbol should be int. It does not need to be in any allocated section, though. The code merely asserts\nthat the symbol exists in the global scope. Something like this is enough:\n\nint plugin_is_GPL_compatible;\n", "doc_id": "7b861663-eb98-4fbc-acbd-39487b5c25ce", "embedding": null, "doc_hash": "c06ecb33cd5dde4a0fdbd88dd12524fb708bdb958b89cd5121b614b389ef8f2a", "extra_info": null, "node_info": {"start": 0, "end": 1020, "_node_type": "1"}, "relationships": {"1": "ebc9e5e4-bdd5-44a1-b43b-e8aeaaae876f"}}, "__type__": "1"}, "2e396980-a2af-41b2-ba6a-b7ce05affb82": {"__data__": {"text": "Next: Where You Are Makes a Difference [Locales.html], Previous: Function Calls [Function-Calls.html], Up: Expressions\n[Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.5 OPERATOR PRECEDENCE (HOW OPERATORS NEST)\n\nOperator precedence determines how operators are grouped when different operators appear close by in one expression. For example,\n\u2018*\u2019 has higher precedence than \u2018+\u2019; thus, \u2018a + b * c\u2019 means to multiply b and c, and then add a to the product (i.e., \u2018a + (b *\nc)\u2019).\n\nThe normal precedence of the operators can be overruled by using parentheses. Think of the precedence rules as saying where the\nparentheses are assumed to be. In fact, it is wise to always use parentheses whenever there is an unusual combination of\noperators, because other people who read the program may not remember what the precedence is in this case. Even experienced\nprogrammers occasionally forget the exact rules, which leads to mistakes. Explicit parentheses help prevent any such mistakes.\n\nWhen operators of equal precedence are used together, the leftmost operator groups first, except for the assignment, conditional,\nand exponentiation operators, which group in the opposite order. Thus, \u2018a - b + c\u2019 groups as \u2018(a - b) + c\u2019 and \u2018a = b = c\u2019 groups\nas \u2018a = (b = c)\u2019.\n\nNormally the precedence of prefix unary operators does not matter, because there is only one way to interpret them: innermost\nfirst. Thus, \u2018$++i\u2019 means \u2018$(++i)\u2019 and \u2018++$x\u2019 means \u2018++($x)\u2019. However, when another operator follows the operand, then the\nprecedence of the unary operators can matter. \u2018$x^2\u2019 means \u2018($x)^2\u2019, but \u2018-x^2\u2019 means \u2018-(x^2)\u2019, because \u2018-\u2019 has lower precedence\nthan \u2018^\u2019, whereas \u2018$\u2019 has higher precedence. Also, operators cannot be combined in a way that violates the precedence rules; for\nexample, \u2018$$0++--\u2019 is not a valid expression because the first \u2018$\u2019 has higher precedence than the \u2018++\u2019; to avoid the problem the\nexpression can be rewritten as \u2018$($0++)--\u2019.\n\nThis list presents awk\u2019s operators, in order of highest to lowest precedence:\n\n(\u2026)\n\nGrouping.\n\n$\n\nField reference.\n\n++ --\n\nIncrement, decrement.\n\n^ **\n\nExponentiation. These operators group right to left.\n\n+ - !\n\nUnary plus, minus, logical \u201cnot.\u201d\n\n* / %\n\nMultiplication, division, remainder.\n\n+ -\n\nAddition, subtraction.\n\nString concatenation\n\nThere is no special symbol for concatenation. The operands are simply written side by side (see String Concatenation\n[Concatenation.html]).\n\n< <= == != > >= >> | |&\n\nRelational and redirection. The relational operators and the redirections have the same precedence level. Characters such as \u2018>\u2019\nserve both as relationals and as redirections; the context distinguishes between the two meanings.\n\nNote that the I/O redirection operators in print and printf statements belong to the statement level, not to expressions. The\nredirection does not produce an expression that could be the operand of another operator. As a result, it does not make sense to\nuse a redirection operator near another operator of lower precedence without parentheses. Such combinations (e.g., \u2018print foo > a\n? b : c\u2019) result in syntax errors. The correct way to write this statement is \u2018print foo > (a ? b : c)\u2019.\n\n~", "doc_id": "2e396980-a2af-41b2-ba6a-b7ce05affb82", "embedding": null, "doc_hash": "b6c7fe4320a7449162b7f5ddf37e7c96d343c28115b9ffeeae656f47db70695c", "extra_info": null, "node_info": {"start": 0, "end": 3334, "_node_type": "1"}, "relationships": {"1": "e31100c7-2806-4cf3-ad88-dd0e91938213", "3": "8da1a317-aa43-4d09-838f-e036348933d1"}}, "__type__": "1"}, "8da1a317-aa43-4d09-838f-e036348933d1": {"__data__": {"text": "statement is \u2018print foo > (a ? b : c)\u2019.\n\n~ !~\n\nMatching, nonmatching.\n\nin\n\nArray membership.\n\n&&\n\nLogical \u201cand.\u201d\n\n||\n\nLogical \u201cor.\u201d\n\n?:\n\nConditional. This operator groups right to left.\n\n= += -= *= /= %= ^= **=\n\nAssignment. These operators group right to left.\n\n> NOTE: The \u2018|&\u2019, \u2018**\u2019, and \u2018**=\u2019 operators are not specified by POSIX. For maximum portability, do not use them.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Where You Are Makes a Difference [Locales.html], Previous: Function Calls [Function-Calls.html], Up: Expressions\n[Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "8da1a317-aa43-4d09-838f-e036348933d1", "embedding": null, "doc_hash": "293210414bb780de86427f3943efc51effbd21d396592f04fd07bba7a2b3d2a1", "extra_info": null, "node_info": {"start": 3292, "end": 3997, "_node_type": "1"}, "relationships": {"1": "e31100c7-2806-4cf3-ad88-dd0e91938213", "2": "2e396980-a2af-41b2-ba6a-b7ce05affb82"}}, "__type__": "1"}, "a05e5fe0-43d8-4c89-952d-3d1ff4da7cc7": {"__data__": {"text": "Next: Getting Started with awk [Getting-Started.html], Previous: Foreword to the Fourth Edition [Foreword4.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nPREFACE\n\nSeveral kinds of tasks occur repeatedly when working with text files. You might want to extract certain lines and discard the\nrest. Or you may need to make changes wherever certain patterns appear, but leave the rest of the file alone. Such jobs are often\neasy with awk. The awk utility interprets a special-purpose programming language that makes it easy to handle simple\ndata-reformatting jobs.\n\nThe GNU implementation of awk is called gawk; if you invoke it with the proper options or environment variables, it is fully\ncompatible with the POSIX1 specification of the awk language and with the Unix version of awk maintained by Brian Kernighan. This\nmeans that all properly written awk programs should work with gawk. So most of the time, we don\u2019t distinguish between gawk and\nother awk implementations.\n\nUsing awk you can:\n\n * Manage small, personal databases\n * Generate reports\n * Validate data\n * Produce indexes and perform other document-preparation tasks\n * Experiment with algorithms that you can adapt later to other computer languages\n\nIn addition, gawk provides facilities that make it easy to:\n\n * Extract bits and pieces of data for processing\n * Sort data\n * Perform simple network communications\n * Profile and debug awk programs\n * Extend the language with functions written in C or C++\n\nThis Web page teaches you about the awk language and how you can use it effectively. You should already be familiar with basic\nsystem commands, such as cat and ls,2 as well as basic shell facilities, such as input/output (I/O) redirection and pipes.\n\nImplementations of the awk language are available for many different computing environments. This Web page, while describing the\nawk language in general, also describes the particular implementation of awk called gawk (which stands for \u201cGNU awk\u201d). gawk runs\non a broad range of Unix systems, ranging from Intel-architecture PC-based computers up through large-scale systems. gawk has also\nbeen ported to macOS, z/OS, Microsoft Windows (all versions), and OpenVMS.3\n\n * History of awk and gawk [History.html]\n * A Rose by Any Other Name [Names.html]\n * Using This Book [This-Manual.html]\n * Typographical Conventions [Conventions.html]\n * The GNU Project and This Book [Manual-History.html]\n * How to Contribute [How-To-Contribute.html]\n * Acknowledgments [Acknowledgments.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(1)\n\nThe 2018 POSIX standard is accessible online at https://pubs.opengroup.org/onlinepubs/9699919799/\n[https://pubs.opengroup.org/onlinepubs/9699919799/].\n\n(2)\n\nThese utilities are available on POSIX-compliant systems, as well as on traditional Unix-based systems. If you are using some\nother operating system, you still need to be familiar with the ideas of I/O redirection and pipes.\n\n(3)\n\nSome other, obsolete systems to which gawk was once ported are no longer supported and the code for those systems has been\nremoved.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Getting Started with awk [Getting-Started.html], Previous: Foreword to the Fourth Edition [Foreword4.html], Up: General\nIntroduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a05e5fe0-43d8-4c89-952d-3d1ff4da7cc7", "embedding": null, "doc_hash": "bd3f77f69b3cc59e5b0caf56006d1f0c70700b0e9b884546f13fa26e90013069", "extra_info": null, "node_info": {"start": 0, "end": 3702, "_node_type": "1"}, "relationships": {"1": "9a6fb848-f629-4481-92a0-f60bac8ce8a1"}}, "__type__": "1"}, "3c5c1994-301f-4039-8a55-870ffc4d0a3b": {"__data__": {"text": "Next: Output Separators [Output-Separators.html], Previous: The print Statement [Print.html], Up: Printing Output [Printing.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.2 PRINT STATEMENT EXAMPLES\n\nEach print statement makes at least one line of output. However, it isn\u2019t limited to only one line. If an item value is a string\ncontaining a newline, the newline is output along with the rest of the string. A single print statement can make any number of\nlines this way.\n\nThe following is an example of printing a string that contains embedded newlines (the \u2018\\n\u2019 is an escape sequence, used to\nrepresent the newline character; see Escape Sequences [Escape-Sequences.html]):\n\n$ awk 'BEGIN { print \"line one\\nline two\\nline three\" }'\n-| line one\n-| line two\n-| line three\n\n\nThe next example, which is run on the inventory-shipped file, prints the first two fields of each input record, with a space\nbetween them:\n\n$ awk '{ print $1, $2 }' inventory-shipped\n-| Jan 13\n-| Feb 15\n-| Mar 15\n\u2026\n\n\nA common mistake in using the print statement is to omit the comma between two items. This often has the effect of making the\nitems run together in the output, with no space. The reason for this is that juxtaposing two string expressions in awk means to\nconcatenate them. Here is the same program, without the comma:\n\n$ awk '{ print $1 $2 }' inventory-shipped\n-| Jan13\n-| Feb15\n-| Mar15\n\u2026\n\n\nTo someone unfamiliar with the inventory-shipped file, neither example\u2019s output makes much sense. A heading line at the beginning\nwould make it clearer. Let\u2019s add some headings to our table of months ($1) and green crates shipped ($2). We do this using a BEGIN\nrule (see The BEGIN and END Special Patterns [BEGIN_002fEND.html]) so that the headings are only printed once:\n\nawk 'BEGIN {  print \"Month Crates\"\n              print \"----- ------\" }\n           {  print $1, $2 }' inventory-shipped\n\n\nWhen run, the program prints the following:\n\nMonth Crates\n----- ------\nJan 13\nFeb 15\nMar 15\n\u2026\n\n\nThe only problem, however, is that the headings and the table data don\u2019t line up! We can fix this by printing some spaces between\nthe two fields:\n\nawk 'BEGIN { print \"Month Crates\"\n             print \"----- ------\" }\n           { print $1, \"     \", $2 }' inventory-shipped\n\n\nLining up columns this way can get pretty complicated when there are many columns to fix. Counting spaces for two or three columns\nis simple, but any more than this can take up a lot of time. This is why the printf statement was created (see Using printf\nStatements for Fancier Printing [Printf.html]); one of its specialties is lining up columns of data.\n\n> NOTE: You can continue either a print or printf statement simply by putting a newline after any comma (see awk Statements Versus\n> Lines [Statements_002fLines.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Output Separators [Output-Separators.html], Previous: The print Statement [Print.html], Up: Printing Output [Printing.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3c5c1994-301f-4039-8a55-870ffc4d0a3b", "embedding": null, "doc_hash": "bb0989f71c189367ec31038133fcff5d5be2e4b061dc85b324e298d1eb98b4ff", "extra_info": null, "node_info": {"start": 0, "end": 3247, "_node_type": "1"}, "relationships": {"1": "72e2c97c-4bea-4e04-93d2-712a0b7d6631"}}, "__type__": "1"}, "969e5ed6-a454-413e-80f0-1e97b696c411": {"__data__": {"text": "Next: print Statement Examples [Print-Examples.html], Up: Printing Output [Printing.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.1 THE PRINT STATEMENT\n\nUse the print statement to produce output with simple, standardized formatting. You specify only the strings or numbers to print,\nin a list separated by commas. They are output, separated by single spaces, followed by a newline. The statement looks like this:\n\nprint item1, item2, \u2026\n\n\nThe entire list of items may be optionally enclosed in parentheses. The parentheses are necessary if any of the item expressions\nuses the \u2018>\u2019 relational operator; otherwise it could be confused with an output redirection (see Redirecting Output of print and\nprintf [Redirection.html]).\n\nThe items to print can be constant strings or numbers, fields of the current record (such as $1), variables, or any awk\nexpression. Numeric values are converted to strings and then printed.\n\nThe simple statement \u2018print\u2019 with no items is equivalent to \u2018print $0\u2019: it prints the entire current record. To print a blank\nline, use \u2018print \"\"\u2019. To print a fixed piece of text, use a string constant, such as \"Don't\u00a0Panic\", as one item. If you forget to\nuse the double-quote characters, your text is taken as an awk expression, and you will probably get an error. Keep in mind that a\nspace is printed between any two items.\n\nNote that the print statement is a statement and not an expression\u2014you can\u2019t use it in the pattern part of a pattern\u2013action\nstatement, for example.", "doc_id": "969e5ed6-a454-413e-80f0-1e97b696c411", "embedding": null, "doc_hash": "408d05348a93490430db89c61c2505debc9b73d893a77ec69ecd86cb3cd598d5", "extra_info": null, "node_info": {"start": 0, "end": 1645, "_node_type": "1"}, "relationships": {"1": "12f281de-ac03-4b2f-bff8-27751028eb8c"}}, "__type__": "1"}, "47d4c52b-f11c-4b4c-8555-9a80ae8f9971": {"__data__": {"text": "Previous: Modifiers for printf Formats [Format-Modifiers.html], Up: Using printf Statements for Fancier Printing [Printf.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.5.4 EXAMPLES USING PRINTF\n\nThe following simple example shows how to use printf to make an aligned table:\n\nawk '{ printf \"%-10s %s\\n\", $1, $2 }' mail-list\n\n\nThis command prints the names of the people ($1) in the file mail-list as a string of 10 characters that are left-justified. It\nalso prints the phone numbers ($2) next on the line. This produces an aligned two-column table of names and phone numbers, as\nshown here:\n\n$ awk '{ printf \"%-10s %s\\n\", $1, $2 }' mail-list\n-| Amelia     555-5553\n-| Anthony    555-3412\n-| Becky      555-7685\n-| Bill       555-1675\n-| Broderick  555-0542\n-| Camilla    555-2912\n-| Fabius     555-1234\n-| Julie      555-6699\n-| Martin     555-6480\n-| Samuel     555-3430\n-| Jean-Paul  555-2127\n\n\nIn this case, the phone numbers had to be printed as strings because the numbers are separated by dashes. Printing the phone\nnumbers as numbers would have produced just the first three digits: \u2018555\u2019. This would have been pretty confusing.\n\nIt wasn\u2019t necessary to specify a width for the phone numbers because they are last on their lines. They don\u2019t need to have spaces\nafter them.\n\nThe table could be made to look even nicer by adding headings to the tops of the columns. This is done using a BEGIN rule (see The\nBEGIN and END Special Patterns [BEGIN_002fEND.html]) so that the headers are only printed once, at the beginning of the awk\nprogram:\n\nawk 'BEGIN { print \"Name      Number\"\n             print \"----      ------\" }\n           { printf \"%-10s %s\\n\", $1, $2 }' mail-list\n\n\nThe preceding example mixes print and printf statements in the same program. Using just printf statements can produce the same\nresults:\n\nawk 'BEGIN { printf \"%-10s %s\\n\", \"Name\", \"Number\"\n             printf \"%-10s %s\\n\", \"----\", \"------\" }\n           { printf \"%-10s %s\\n\", $1, $2 }' mail-list\n\n\nPrinting each column heading with the same format specification used for the column elements ensures that the headings are aligned\njust like the columns.\n\nThe fact that the same format specification is used three times can be emphasized by storing it in a variable, like this:\n\nawk 'BEGIN { format = \"%-10s %s\\n\"\n             printf format, \"Name\", \"Number\"\n             printf format, \"----\", \"------\" }\n           { printf format, $1, $2 }' mail-list\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Modifiers for printf Formats [Format-Modifiers.html], Up: Using printf Statements for Fancier Printing [Printf.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "47d4c52b-f11c-4b4c-8555-9a80ae8f9971", "embedding": null, "doc_hash": "eec92dc59d760e1a974e2a140646d1ef144ff9786e6c07a457c563c5f54c2878", "extra_info": null, "node_info": {"start": 0, "end": 2901, "_node_type": "1"}, "relationships": {"1": "83ba3d8f-2795-44cf-a792-0fcf42afaea6"}}, "__type__": "1"}, "c851db0f-4717-4472-b13b-d5f978951042": {"__data__": {"text": "Next: awk Portability Issues [I18N-Portability.html], Previous: Extracting Marked Strings [String-Extraction.html], Up:\nTranslating awk Programs [Translator-i18n.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n13.4.2 REARRANGING PRINTF ARGUMENTS\n\nFormat strings for printf and sprintf() (see Using printf Statements for Fancier Printing [Printf.html]) present a special problem\nfor translation. Consider the following:91\n\nprintf(_\"String `%s' has %d characters\\n\",\n          string, length(string)))\n\n\nA possible German translation for this might be:\n\n\"%d Zeichen lang ist die Zeichenkette `%s'\\n\"\n\n\nThe problem should be obvious: the order of the format specifications is different from the original! Even though gettext() can\nreturn the translated string at runtime, it cannot change the argument order in the call to printf.\n\nTo solve this problem, printf format specifiers may have an additional optional element, which we call a positional specifier. For\nexample:\n\n\"%2$d Zeichen lang ist die Zeichenkette `%1$s'\\n\"\n\n\nHere, the positional specifier consists of an integer count, which indicates which argument to use, and a \u2018$\u2019. Counts are\none-based, and the format string itself is not included. Thus, in the following example, \u2018string\u2019 is the first argument and\n\u2018length(string)\u2019 is the second:\n\n$ gawk 'BEGIN {\n>     string = \"Don\\47t Panic\"\n>     printf \"%2$d characters live in \\\"%1$s\\\"\\n\",\n>                         string, length(string)\n> }'\n-| 11 characters live in \"Don't Panic\"\n\n\nIf present, positional specifiers come first in the format specification, before the flags, the field width, and/or the precision.\n\nPositional specifiers can be used with the dynamic field width and precision capability:\n\n$ gawk 'BEGIN {\n>    printf(\"%*.*s\\n\", 10, 20, \"hello\")\n>    printf(\"%3$*2$.*1$s\\n\", 20, 10, \"hello\")\n> }'\n-|      hello\n-|      hello\n\n\n> NOTE: When using \u2018*\u2019 with a positional specifier, the \u2018*\u2019 comes first, then the integer position, and then the \u2018$\u2019. This is\n> somewhat counterintuitive.\n\ngawk does not allow you to mix regular format specifiers and those with positional specifiers in the same string:\n\n$ gawk 'BEGIN { printf \"%d %3$s\\n\", 1, 2, \"hi\" }'\nerror\u2192 gawk: cmd. line:1: fatal: must use `count$' on all formats or none\n\n\n> NOTE: There are some pathological cases that gawk may fail to diagnose. In such cases, the output may not be what you expect.\n> It\u2019s still a bad idea to try mixing them, even if gawk doesn\u2019t detect it.\n\nAlthough positional specifiers can be used directly in awk programs, their primary purpose is to help in producing correct\ntranslations of format strings into languages different from the one in which the program is first written.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(91)\n\nThis example is borrowed from the GNU gettext manual.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: awk Portability Issues [I18N-Portability.html], Previous: Extracting Marked Strings [String-Extraction.html], Up:\nTranslating awk Programs [Translator-i18n.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c851db0f-4717-4472-b13b-d5f978951042", "embedding": null, "doc_hash": "f55e59f7b58afe9862f2b0ceb05a68ea567733493c1bdc01ee6ab36bb8330802", "extra_info": null, "node_info": {"start": 0, "end": 3399, "_node_type": "1"}, "relationships": {"1": "508cba33-6de5-409b-90f7-c9e10acd8f57"}}, "__type__": "1"}, "7edc57b6-22dd-42a3-8e2a-2f2ef4d20cb4": {"__data__": {"text": "Next: Redirecting Output of print and printf [Redirection.html], Previous: Controlling Numeric Output with print [OFMT.html], Up:\nPrinting Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.5 USING PRINTF STATEMENTS FOR FANCIER PRINTING\n\nFor more precise control over the output format than what is provided by print, use printf. With printf you can specify the width\nto use for each item, as well as various formatting choices for numbers (such as what output base to use, whether to print an\nexponent, whether to print a sign, and how many digits to print after the decimal point).\n\n * Introduction to the printf Statement [Basic-Printf.html]\n * Format-Control Letters [Control-Letters.html]\n * Modifiers for printf Formats [Format-Modifiers.html]\n * Examples Using printf [Printf-Examples.html]", "doc_id": "7edc57b6-22dd-42a3-8e2a-2f2ef4d20cb4", "embedding": null, "doc_hash": "93269d5008e6ffd7af336421303bb6d4620664e03b212d9711064c8da4d178a2", "extra_info": null, "node_info": {"start": 0, "end": 964, "_node_type": "1"}, "relationships": {"1": "59f19983-7ae2-464c-9c1e-ed42c3cff673"}}, "__type__": "1"}, "6201ead9-56e3-49fc-8f9d-7899835bc6dd": {"__data__": {"text": "Next: Updating ERRNO [Updating-ERRNO.html], Previous: Registration Functions [Registration-Functions.html], Up: API Description\n[Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.7 PRINTING MESSAGES\n\nYou can print different kinds of warning messages from your extension, as described here. Note that for these functions, you must\npass in the extension ID received from gawk when the extension was loaded:105\n\nvoid fatal(awk_ext_id_t id, const char *format, ...);\n\nPrint a message and then cause gawk to exit immediately.\n\nvoid nonfatal(awk_ext_id_t id, const char *format, ...);\n\nPrint a nonfatal error message.\n\nvoid warning(awk_ext_id_t id, const char *format, ...);\n\nPrint a warning message.\n\nvoid lintwarn(awk_ext_id_t id, const char *format, ...);\n\nPrint a \u201clint warning.\u201d Normally this is the same as printing a warning message, but if gawk was invoked with \u2018--lint=fatal\u2019, then\nlint warnings become fatal error messages.\n\nAll of these functions are otherwise like the C printf() family of functions, where the format parameter is a string with literal\ncharacters and formatting codes intermixed.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(105)\n\nBecause the API uses only ISO C 90 features, it cannot make use of the ISO C 99 variadic macro feature to hide that parameter.\nMore\u2019s the pity.", "doc_id": "6201ead9-56e3-49fc-8f9d-7899835bc6dd", "embedding": null, "doc_hash": "7496b8c63aa09829d68df5e1ce5c9216cff190db483c06637f142262ea51e000", "extra_info": null, "node_info": {"start": 0, "end": 1576, "_node_type": "1"}, "relationships": {"1": "5f119514-cdb7-4a8d-8b7f-57a364619997"}}, "__type__": "1"}, "a4969d07-3445-46d0-abf5-b86b08d477c0": {"__data__": {"text": "Next: Expressions [Expressions.html], Previous: Reading Input Files [Reading-Files.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5 PRINTING OUTPUT\n\nOne of the most common programming actions is to print, or output, some or all of the input. Use the print statement for simple\noutput, and the printf statement for fancier formatting. The print statement is not limited when computing which values to print.\nHowever, with two exceptions, you cannot specify how to print them\u2014how many columns, whether to use exponential notation or not,\nand so on. (For the exceptions, see Output Separators [Output-Separators.html] and Controlling Numeric Output with print\n[OFMT.html].) For printing with specifications, you need the printf statement (see Using printf Statements for Fancier Printing\n[Printf.html]).\n\nBesides basic and formatted printing, this chapter also covers I/O redirections to files and pipes, introduces the special file\nnames that gawk processes internally, and discusses the close() built-in function.\n\n * The print Statement [Print.html]\n * print Statement Examples [Print-Examples.html]\n * Output Separators [Output-Separators.html]\n * Controlling Numeric Output with print [OFMT.html]\n * Using printf Statements for Fancier Printing [Printf.html]\n * Redirecting Output of print and printf [Redirection.html]\n * Special Files for Standard Preopened Data Streams [Special-FD.html]\n * Special File names in gawk [Special-Files.html]\n * Closing Input and Output Redirections [Close-Files-And-Pipes.html]\n * Enabling Nonfatal Output [Nonfatal.html]\n * Summary [Output-Summary.html]\n * Exercises [Output-Exercises.html]", "doc_id": "a4969d07-3445-46d0-abf5-b86b08d477c0", "embedding": null, "doc_hash": "0dd7437d7ca9fb60580295095a8dfeb1357de2ce8a623c20b94338337f5d0d51", "extra_info": null, "node_info": {"start": 0, "end": 1818, "_node_type": "1"}, "relationships": {"1": "156a65a4-7c85-4727-a3a8-b14021b9ce85"}}, "__type__": "1"}, "64f16b75-c741-476b-9d53-482965fd7fea": {"__data__": {"text": "Next: Preserving Data Between Runs [Persistent-Memory.html], Previous: Using gawk for Network Programming\n[TCP_002fIP-Networking.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.6 PROFILING YOUR AWK PROGRAMS\n\nYou may produce execution traces of your awk programs. This is done by passing the option --profile to gawk. When gawk has\nfinished running, it creates a profile of your program in a file named awkprof.out. Because it is profiling, it also executes up\nto 45% slower than gawk normally does.\n\nAs shown in the following example, the --profile option can be used to change the name of the file where gawk will write the\nprofile:\n\ngawk --profile=myprog.prof -f myprog.awk data1 data2\n\n\nIn the preceding example, gawk places the profile in myprog.prof instead of in awkprof.out.\n\nHere is a sample session showing a simple awk program, its input data, and the results from running gawk with the --profile\noption. First, the awk program:\n\nBEGIN { print \"First BEGIN rule\" }\n\nEND { print \"First END rule\" }\n\n/foo/ {\n    print \"matched /foo/, gosh\"\n    for (i = 1; i <= 3; i++)\n        sing()\n}\n\n{\n    if (/foo/)\n        print \"if is true\"\n    else\n        print \"else is true\"\n}\n\nBEGIN { print \"Second BEGIN rule\" }\n\nEND { print \"Second END rule\" }\n\nfunction sing(    dummy)\n{\n    print \"I gotta be me!\"\n}\n\n\nFollowing is the input data:\n\nfoo\nbar\nbaz\nfoo\njunk\n\n\nHere is the awkprof.out that results from running the gawk profiler on this program and data (this example also illustrates that\nawk programmers sometimes get up very early in the morning to work):\n\n    # gawk profile, created Mon Sep 29 05:16:21 2014\n\n    # BEGIN rule(s)\n\n    BEGIN {\n 1          print \"First BEGIN rule\"\n    }\n\n    BEGIN {\n 1          print \"Second BEGIN rule\"\n    }\n\n    # Rule(s)\n\n 5  /foo/ { # 2\n 2          print \"matched /foo/, gosh\"\n 6          for (i = 1; i <= 3; i++) {\n 6                  sing()\n            }\n    }\n\n 5  {\n 5          if (/foo/) { # 2\n 2                  print \"if is true\"\n 3          } else {\n 3                  print \"else is true\"\n            }\n    }\n\n    # END rule(s)\n\n    END {\n 1          print \"First END rule\"\n    }\n\n    END {\n 1          print \"Second END rule\"\n    }\n\n\n    # Functions, listed alphabetically\n\n 6  function sing(dummy)\n    {\n 6          print \"I gotta be me!\"\n    }\n\n\nThis example illustrates many of the basic features of profiling output. They are as follows:\n\n * The program is printed in the order BEGIN rules, BEGINFILE rules, pattern\u2013action rules, ENDFILE rules, END rules, and\n   functions, listed alphabetically. Multiple BEGIN and END rules retain their separate", "doc_id": "64f16b75-c741-476b-9d53-482965fd7fea", "embedding": null, "doc_hash": "db46f73bd0ba631c650efea4b61a6f914fe3c71cfc1c70e4c6da64657d92d80a", "extra_info": null, "node_info": {"start": 0, "end": 2815, "_node_type": "1"}, "relationships": {"1": "1ce65f78-e610-4d74-95e7-829b66fa3a82", "3": "db4dfab9-1668-4504-bbaf-412b541b5c51"}}, "__type__": "1"}, "db4dfab9-1668-4504-bbaf-412b541b5c51": {"__data__": {"text": " functions, listed alphabetically. Multiple BEGIN and END rules retain their separate identities, as do multiple BEGINFILE and\n   ENDFILE rules.\n * Pattern\u2013action rules have two counts. The first count, to the left of the rule, shows how many times the rule\u2019s pattern was\n   tested. The second count, to the right of the rule\u2019s opening left brace in a comment, shows how many times the rule\u2019s action\n   was executed. The difference between the two indicates how many times the rule\u2019s pattern evaluated to false.\n * Similarly, the count for an if-else statement shows how many times the condition was tested. To the right of the opening left\n   brace for the if\u2019s body is a count showing how many times the condition was true. The count for the else indicates how many\n   times the test failed.\n * The count for a loop header (such as for or while) shows how many times the loop test was executed. (Because of this, you can\u2019t\n   just look at the count on the first statement in a rule to determine how many times the rule was executed. If the first\n   statement is a loop, the count is misleading.)\n * For user-defined functions, the count next to the function keyword indicates how many times the function was called. The counts\n   next to the statements in the body show how many times those statements were executed.\n * The layout uses \u201cK&R\u201d style with TABs. Braces are used everywhere, even when the body of an if, else, or loop is only a single\n   statement.\n * Parentheses are used only where needed, as indicated by the structure of the program and the precedence rules. For example, \u2018(3\n   + 5) * 4\u2019 means add three and five, then multiply the total by four. However, \u20183 + 5 * 4\u2019 has no parentheses, and means \u20183 + (5\n   * 4)\u2019. However, explicit parentheses in the source program are retained.\n * Parentheses are used around the arguments to print and printf only when the print or printf statement is followed by a\n   redirection. Similarly, if the target of a redirection isn\u2019t a scalar, it gets parenthesized.\n * gawk supplies leading comments in front of the BEGIN and END rules, the BEGINFILE and ENDFILE rules, the pattern\u2013action rules,\n   and the functions.\n * Functions are listed alphabetically. All functions in the awk namespace are listed first, in alphabetical order. Then come the\n   functions in namespaces. The namespaces are listed in alphabetical order, and the functions within each namespace are listed\n   alphabetically.\n\nThe profiled version of your program may not look exactly like what you typed when you wrote it. This is because gawk creates the\nprofiled version by \u201cpretty-printing\u201d its internal representation of the program. The advantage to this is that gawk can produce a\nstandard representation. Also, things such as:\n\n/foo/\n\n\ncome out as:\n\n/foo/   {\n    print\n}\n\n\nwhich is correct, but possibly unexpected. (If a program uses both \u2018print $0\u2019 and plain \u2018print\u2019, that distinction is retained.)\n\nBesides creating profiles when a program has completed, gawk can produce a profile while it is running. This is useful if your awk\nprogram goes into an infinite loop and you want to see what has been executed. To use this feature, run gawk with the --profile\noption in the background:\n\n$ gawk --profile -f myprog &\n[1] 13992\n\n\nThe shell prints a job number and process ID number; in this case, 13992. Use the kill command to send the USR1 signal to gawk:\n\n$ kill -USR1 13992\n\n\nAs usual, the profiled version of the program is written to awkprof.out, or to a different file if one was specified with the\n--profile option.\n\nAlong with the regular profile, as shown earlier, the profile file includes a trace of any active functions:\n\n# Function Call Stack:\n\n#   3. baz\n#   2. bar\n#  ", "doc_id": "db4dfab9-1668-4504-bbaf-412b541b5c51", "embedding": null, "doc_hash": "a3a7feac5aa32551ae2e727e71458210f4d5aca4de436b6f95df0dea7865ce7d", "extra_info": null, "node_info": {"start": 2742, "end": 6457, "_node_type": "1"}, "relationships": {"1": "1ce65f78-e610-4d74-95e7-829b66fa3a82", "2": "64f16b75-c741-476b-9d53-482965fd7fea", "3": "c796d7f3-fd92-4326-8f2e-d0c77058b9f9"}}, "__type__": "1"}, "c796d7f3-fd92-4326-8f2e-d0c77058b9f9": {"__data__": {"text": "  3. baz\n#   2. bar\n#   1. foo\n# -- main --\n\n\nYou may send gawk the USR1 signal as many times as you like. Each time, the profile and function call trace are appended to the\noutput profile file.\n\nIf you use the HUP signal instead of the USR1 signal, gawk produces the profile and the function call trace and then exits.\n\nWhen gawk runs on MS-Windows systems, it uses the INT and QUIT signals for producing the profile, and in the case of the INT\nsignal, gawk exits. This is because these systems don\u2019t support the kill command, so the only signals you can deliver to a program\nare those generated by the keyboard. The INT signal is generated by the Ctrl-c or Ctrl-BREAK key, while the QUIT signal is\ngenerated by the Ctrl-\\ key.\n\nFinally, gawk also accepts another option, --pretty-print. When called this way, gawk \u201cpretty-prints\u201d the program into\nawkprof.out, without any execution counts.\n\n> NOTE: Once upon a time, the --pretty-print option would also run your program. This is no longer the case.\n\nThere is a significant difference between the output created when profiling, and that created when pretty-printing. Pretty-printed\noutput preserves the original comments that were in the program, although their placement may not correspond exactly to their\noriginal locations in the source code. However, no comments should be lost. Also, gawk does the best it can to preserve the\ndistinction between comments at the end of a statement and comments on lines by themselves. This isn\u2019t always perfect, though.\n\nHowever, as a deliberate design decision, profiling output omits the original program\u2019s comments. This allows you to focus on the\nexecution count data and helps you avoid the temptation to use the profiler for pretty-printing.\n\nAdditionally, pretty-printed output does not have the leading indentation that the profiling output does. This makes it easy to\npretty-print your code once development is completed, and then use the result as the final version of your program.\n\nBecause the internal representation of your program is formatted to recreate an awk program, profiling and pretty-printing\nautomatically disable gawk\u2019s default optimizations.\n\nProfiling and pretty-printing also preserve the original format of numeric constants; if you used an octal or hexadecimal value in\nyour source code, it will appear that way in the output.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Preserving Data Between Runs [Persistent-Memory.html], Previous: Using gawk for Network Programming\n[TCP_002fIP-Networking.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "c796d7f3-fd92-4326-8f2e-d0c77058b9f9", "embedding": null, "doc_hash": "b39d282f5c5a177cc4bce0d7ac3720f7d59cec7893ac2c697eb0ec2e51af41a8", "extra_info": null, "node_info": {"start": 6508, "end": 9239, "_node_type": "1"}, "relationships": {"1": "1ce65f78-e610-4d74-95e7-829b66fa3a82", "2": "db4dfab9-1668-4504-bbaf-412b541b5c51"}}, "__type__": "1"}, "655ea0db-bf1c-4b3d-9ac1-572eab9e2b9b": {"__data__": {"text": "Next: Translating awk Programs [Translator-i18n.html], Previous: GNU gettext [Explaining-gettext.html], Up: Internationalization\nwith gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.3 INTERNATIONALIZING AWK PROGRAMS\n\ngawk provides the following variables for internationalization:\n\nTEXTDOMAIN\n\nThis variable indicates the application\u2019s text domain. For compatibility with GNU gettext, the default value is \"messages\".\n\n_\"your message here\"\n\nString constants marked with a leading underscore are candidates for translation at runtime. String constants without a leading\nunderscore are not translated.\n\ngawk provides the following functions for internationalization:\n\ndcgettext(string [, domain [, category]])\n\nReturn the translation of string in text domain domain for locale category category. The default value for domain is the current\nvalue of TEXTDOMAIN. The default value for category is \"LC_MESSAGES\".\n\nIf you supply a value for category, it must be a string equal to one of the known locale categories described in the previous\nsection. You must also supply a text domain. Use TEXTDOMAIN if you want to use the current domain.\n\n> CAUTION: The order of arguments to the awk version of the dcgettext() function is purposely different from the order for the C\n> version. The awk version\u2019s order was chosen to be simple and to allow for reasonable awk-style default arguments.\n\ndcngettext(string1, string2, number [, domain [, category]])\n\nReturn the plural form used for number of the translation of string1 and string2 in text domain domain for locale category\ncategory. string1 is the English singular variant of a message, and string2 is the English plural variant of the same message. The\ndefault value for domain is the current value of TEXTDOMAIN. The default value for category is \"LC_MESSAGES\".\n\nThe same remarks about argument order as for the dcgettext() function apply.\n\nbindtextdomain(directory [, domain ])\n\nChange the directory in which gettext looks for .gmo files, in case they will not or cannot be placed in the standard locations\n(e.g., during testing). Return the directory in which domain is \u201cbound.\u201d\n\nThe default domain is the value of TEXTDOMAIN. If directory is the null string (\"\"), then bindtextdomain() returns the current\nbinding for the given domain.\n\nTo use these facilities in your awk program, follow these steps:\n\n 1. \n 2. Set the variable TEXTDOMAIN to the text domain of your program. This is best done in a BEGIN rule (see The BEGIN and END\n    Special Patterns [BEGIN_002fEND.html]), or it can also be done via the -v command-line option (see Command-Line Options\n    [Options.html]):\n    \n    BEGIN {\n        TEXTDOMAIN = \"guide\"\n        \u2026\n    }\n    \n\n 3. Mark all translatable strings with a leading underscore (\u2018_\u2019) character. It must be adjacent to the opening quote of the\n    string. For example:\n    \n    print _\"hello, world\"\n    x = _\"you goofed\"\n    printf(_\"Number of users is %d\\n\", nusers)\n    \n\n 4. If you are creating strings dynamically, you can still translate them, using the dcgettext() built-in function:89\n    \n    if (groggy)\n        message = dcgettext(\"%d customers disturbing me\\n\", \"adminprog\")\n    else\n        message = dcgettext(\"enjoying %d customers\\n\", \"adminprog\")\n    printf(message, ncustomers)\n    \n    \n    Here, the call to dcgettext() supplies a different text domain (\"adminprog\") in which to find the message, but it uses the\n    default \"LC_MESSAGES\" category.\n    \n  ", "doc_id": "655ea0db-bf1c-4b3d-9ac1-572eab9e2b9b", "embedding": null, "doc_hash": "3a264fdbd480e24e17146c739703c0dcd4f9c1256655bc968f1c6609a3114025", "extra_info": null, "node_info": {"start": 0, "end": 3632, "_node_type": "1"}, "relationships": {"1": "f74b3de8-e050-4788-9930-f1cde21c66d6", "3": "aed38f7b-538d-420b-9844-dbddbe381bff"}}, "__type__": "1"}, "aed38f7b-538d-420b-9844-dbddbe381bff": {"__data__": {"text": "  default \"LC_MESSAGES\" category.\n    \n    The previous example only works if ncustomers is greater than one. This example would be better done with dcngettext():\n    \n    if (groggy)\n        message = dcngettext(\"%d customer disturbing me\\n\",\n                             \"%d customers disturbing me\\n\",\n                             ncustomers, \"adminprog\")\n    else\n        message = dcngettext(\"enjoying %d customer\\n\",\n                             \"enjoying %d customers\\n\",\n                             ncustomers, \"adminprog\")\n    printf(message, ncustomers)\n    \n\n 5. During development, you might want to put the .gmo file in a private directory for testing. This is done with the\n    bindtextdomain() built-in function:\n    \n    BEGIN {\n       TEXTDOMAIN = \"guide\"   # our text domain\n       if (Testing) {\n           # where to find our files\n           bindtextdomain(\"testdir\")\n           # joe is in charge of adminprog\n           bindtextdomain(\"../joe/testdir\", \"adminprog\")\n       }\n       \u2026\n    }\n    \n\nSee A Simple Internationalization Example [I18N-Example.html] for an example program showing the steps to create and use\ntranslations from awk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(89)\n\nThanks to Bruno Haible for this example.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Translating awk Programs [Translator-i18n.html], Previous: GNU gettext [Explaining-gettext.html], Up: Internationalization\nwith gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "aed38f7b-538d-420b-9844-dbddbe381bff", "embedding": null, "doc_hash": "29e96859c0d279709720683b65bbafec550d4f0df1fc833ec0a8e171adfd8634", "extra_info": null, "node_info": {"start": 3591, "end": 5304, "_node_type": "1"}, "relationships": {"1": "f74b3de8-e050-4788-9930-f1cde21c66d6", "2": "655ea0db-bf1c-4b3d-9ac1-572eab9e2b9b"}}, "__type__": "1"}, "3681e209-b352-4940-997e-fa71ddd0ab2f": {"__data__": {"text": "Previous: Summary [Programs-Summary.html], Up: Practical awk Programs [Sample-Programs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n11.5 EXERCISES\n\n 1.  Rewrite cut.awk (see Cutting Out Fields and Columns [Cut-Program.html]) using split() with \"\" as the separator.\n 2.  In Searching for Regular Expressions in Files [Egrep-Program.html], we mentioned that \u2018egrep -i\u2019 could be simulated in\n     versions of awk without IGNORECASE by using tolower() on the line and the pattern. In a footnote there, we also mentioned\n     that this solution has a bug: the translated line is output, and not the original one. Fix this problem.\n 3.  The POSIX version of id takes options that control which information is printed. Modify the awk version (see Printing Out\n     User Information [Id-Program.html]) to accept the same arguments and perform in the same way.\n 4.  The split.awk program (see Splitting a Large File into Pieces [Split-Program.html]) assumes that letters are contiguous in\n     the character set, which isn\u2019t true for EBCDIC systems. Fix this problem. (Hint: Consider a different way to work through the\n     alphabet, without relying on ord() and chr().)\n 5.  In uniq.awk (see Printing Nonduplicated Lines of Text [Uniq-Program.html], the logic for choosing which lines to print\n     represents a state machine, which is \u201ca device which can be in one of a set number of stable conditions depending on its\n     previous condition and on the present values of its inputs.\u201d81 Brian Kernighan suggests that \u201can alternative approach to\n     state machines is to just read the input into an array, then use indexing. It\u2019s almost always easier code, and for most\n     inputs where you would use this, just as fast.\u201d Rewrite the logic to follow this suggestion.\n 6.  Why can\u2019t the wc.awk program (see Counting Things [Wc-Program.html]) just use the value of FNR in endfile()? Hint: Examine\n     the code in Noting Data file Boundaries [Filetrans-Function.html].\n 7.  Manipulation of individual characters in the translate program (see Transliterating Characters [Translate-Program.html]) is\n     painful using standard awk functions. Given that gawk can split strings into individual characters using \"\" as the separator,\n     how might you use this feature to simplify the program?\n 8.  The extract.awk program (see Extracting Programs from Texinfo Source Files [Extract-Program.html]) was written before gawk\n     had the gensub() function. Use it to simplify the code.\n 9.  Compare the performance of the awksed.awk program (see A Simple Stream Editor [Simple-Sed.html]) with the more\n     straightforward:\n     \n     BEGIN {\n         pat = ARGV[1]\n         repl = ARGV[2]\n         ARGV[1] = ARGV[2] = \"\"\n     }\n     \n     { gsub(pat, repl); print }\n     \n\n 10. What are the advantages and disadvantages of awksed.awk versus the real sed utility?\n 11. In An Easy Way to Use Library Functions [Igawk-Program.html], we mentioned that not trying to save the line read with getline\n     in the pathto() function when testing for the file\u2019s accessibility for use with the main program simplifies things\n     considerably. What problem does this engender though?\n 12. As an additional example of the idea that it is not always necessary to add new features to a program, consider the idea of\n     having two files in a directory in the search path:", "doc_id": "3681e209-b352-4940-997e-fa71ddd0ab2f", "embedding": null, "doc_hash": "f93499c1c624ddfa0dada67f379369e40195a1ca847ceb1da02f95e968fc095a", "extra_info": null, "node_info": {"start": 0, "end": 3499, "_node_type": "1"}, "relationships": {"1": "c68c559b-5281-4126-af5f-4314ad332645", "3": "b8e90eda-348b-470d-8d66-0364f23c40f8"}}, "__type__": "1"}, "b8e90eda-348b-470d-8d66-0364f23c40f8": {"__data__": {"text": "the idea of\n     having two files in a directory in the search path: default.awk\n     \n     This file contains a set of default library functions, such as getopt() and assert().\n     \n     site.awk\n     \n     This file contains library functions that are specific to a site or installation; i.e., locally developed functions. Having a\n     separate file allows default.awk to change with new gawk releases, without requiring the system administrator to update it\n     each time by adding the local functions.\n     \n     One user suggested that gawk be modified to automatically read these files upon startup. Instead, it would be very simple to\n     modify igawk to do this. Since igawk can process nested @include directives, default.awk could simply contain @include\n     statements for the desired library functions. Make this change.\n\n 13. Modify anagram.awk (see Finding Anagrams from a Dictionary [Anagram-Program.html]), to avoid the use of the external sort\n     utility.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(81)\n\nThis definition is from https://www.lexico.com/en/definition/state_machine [https://www.lexico.com/en/definition/state_machine].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Summary [Programs-Summary.html], Up: Practical awk Programs [Sample-Programs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b8e90eda-348b-470d-8d66-0364f23c40f8", "embedding": null, "doc_hash": "43fc7c7713760771a69a7329979a216792e91884fcc06528fffdc44c2977995a", "extra_info": null, "node_info": {"start": 3431, "end": 4974, "_node_type": "1"}, "relationships": {"1": "c68c559b-5281-4126-af5f-4314ad332645", "2": "3681e209-b352-4940-997e-fa71ddd0ab2f"}}, "__type__": "1"}, "a1758505-9a8b-4ede-879a-11f3f95a78ca": {"__data__": {"text": "Next: Exercises [Programs-Exercises.html], Previous: A Grab Bag of awk Programs [Miscellaneous-Programs.html], Up: Practical awk\nPrograms [Sample-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n11.4 SUMMARY\n\n * The programs provided in this chapter continue on the theme that reading programs is an excellent way to learn Good\n   Programming.\n * Using \u2018#!\u2019 to make awk programs directly runnable makes them easier to use. Otherwise, invoke the program using \u2018awk -f \u2026\u2019.\n * Reimplementing standard POSIX programs in awk is a pleasant exercise; awk\u2019s expressive power lets you write such programs in\n   relatively few lines of code, yet they are functionally complete and usable.\n * One of standard awk\u2019s weaknesses is working with individual characters. The ability to use split() with the empty string as the\n   separator can considerably simplify such tasks.\n * The examples here demonstrate the usefulness of the library functions from A Library of awk Functions [Library-Functions.html]\n   for a number of real (if small) programs.\n * Besides reinventing POSIX wheels, other programs solved a selection of interesting problems, such as finding duplicate words in\n   text, printing mailing labels, and finding anagrams.", "doc_id": "a1758505-9a8b-4ede-879a-11f3f95a78ca", "embedding": null, "doc_hash": "fa242ca03de9d7f3e020c2f58c4497b90b77891f8cf560adfde01ee1f994937b", "extra_info": null, "node_info": {"start": 0, "end": 1381, "_node_type": "1"}, "relationships": {"1": "1e8ec85f-7cd1-44ce-9bbd-7ce0bac64d4f"}}, "__type__": "1"}, "c07e8683-808f-4945-af47-e0b621e9199e": {"__data__": {"text": "Next: The Default Namespace [Default-Namespace.html], Previous: Standard awk\u2019s Single Namespace [Global-Namespace.html], Up:\nNamespaces in gawk [Namespaces.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n15.2 QUALIFIED NAMES\n\nA qualified name is an identifier that includes a namespace name, the namespace separator ::, and a component name. For example,\none might have a function named posix::getpid(). Here, the namespace is posix and the function name within the namespace (the\ncomponent) is getpid(). The namespace and component names are separated by a double-colon. Only one such separator is allowed in a\nqualified name.\n\n> NOTE: Unlike C++, the :: is not an operator. No spaces are allowed between the namespace name, the ::, and the component name.\n\nYou must use qualified names from one namespace to access variables and functions in another. This is especially important when\nusing variable names to index the special SYMTAB array (see Built-in Variables That Convey Information [Auto_002dset.html]), and\nwhen making indirect function calls (see Indirect Function Calls [Indirect-Calls.html]).", "doc_id": "c07e8683-808f-4945-af47-e0b621e9199e", "embedding": null, "doc_hash": "39ddba971732b60ea1a2b4b4f9ca1b0bbddad2c7e7d5e6c3ff09fc01a22cc896", "extra_info": null, "node_info": {"start": 0, "end": 1255, "_node_type": "1"}, "relationships": {"1": "fa8181ff-e6ae-4c1e-8b52-0f05703ccfe0"}}, "__type__": "1"}, "b3e9c1a0-35aa-42b5-8290-0f1692140eb2": {"__data__": {"text": "Next: Shell Startup Files [Shell-Startup-Files.html], Up: Compiling and Installing gawk on Unix-Like Systems\n[Unix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.1 COMPILING GAWK FOR UNIX-LIKE SYSTEMS\n\nThe normal installation steps should work on all modern commercial Unix-derived systems, GNU/Linux, BSD-based systems, and the\nCygwin environment for MS-Windows.\n\nAfter you have extracted the gawk distribution, cd to gawk-5.2.2. As with most GNU software, you configure gawk for your system by\nrunning the configure program. This program is a Bourne shell script that is generated automatically using GNU Autoconf. (The\nAutoconf software is described fully in Autoconf\u2014Generating Automatic Configuration Scripts, which can be found online at the Free\nSoftware Foundation\u2019s website [https://www.gnu.org/software/autoconf/manual/index.html].)\n\nTo configure gawk, simply run configure:\n\nsh ./configure\n\n\nThis produces a Makefile and config.h tailored to your system. The config.h file describes various facts about your system. You\nmight want to edit the Makefile to change the CFLAGS variable, which controls the command-line options that are passed to the C\ncompiler (such as optimization levels or compiling for debugging).\n\nAlternatively, you can add your own values for most make variables on the command line, such as CC and CFLAGS, when running\nconfigure:\n\nCC=cc CFLAGS=-g sh ./configure\n\n\nSee the file INSTALL in the gawk distribution for all the details.\n\nAfter you have run configure and possibly edited the Makefile, type:\n\nmake\n\n\nShortly thereafter, you should have an executable version of gawk. That\u2019s all there is to it! To verify that gawk is working\nproperly, run \u2018make check\u2019. All of the tests should succeed. If these steps do not work, or if any of the tests fail, check the\nfiles in the README_d directory to see if you\u2019ve found a known problem. If the failure is not described there, send in a bug\nreport (see Reporting Problems and Bugs [Bugs.html]).\n\nOf course, once you\u2019ve built gawk, it is likely that you will wish to install it. To do so, you need to run the command \u2018make\ninstall\u2019, as a user with the appropriate permissions. How to do this varies by system, but on many systems you can use the sudo\ncommand to do so. The command then becomes \u2018sudo make install\u2019. It is likely that you will be asked for your password, and you\nwill have to have been set up previously as a user who is allowed to run the sudo command.\n\n * Building With MPFR [Compiling-with-MPFR.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Shell Startup Files [Shell-Startup-Files.html], Up: Compiling and Installing gawk on Unix-Like Systems\n[Unix-Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b3e9c1a0-35aa-42b5-8290-0f1692140eb2", "embedding": null, "doc_hash": "d47755f6079fa3a19ae2c9aac647fd5ab98a971751269c18388ec01d8dae50dc", "extra_info": null, "node_info": {"start": 0, "end": 2989, "_node_type": "1"}, "relationships": {"1": "dd5b52e6-0fd8-4aec-99b8-aedb82b37b1e"}}, "__type__": "1"}, "b7a00520-fa68-409e-b9a9-f8cea8f893e9": {"__data__": {"text": "Previous: Comments in awk Programs [Comments.html], Up: How to Run awk Programs [Running-gawk.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.6 SHELL QUOTING ISSUES\n\nFor short to medium-length awk programs, it is most convenient to enter the program on the awk command line. This is best done by\nenclosing the entire program in single quotes. This is true whether you are entering the program interactively at the shell\nprompt, or writing it as part of a larger shell script:\n\nawk 'program text' input-file1 input-file2 \u2026\n\n\nOnce you are working with the shell, it is helpful to have a basic knowledge of shell quoting rules. The following rules apply\nonly to POSIX-compliant, Bourne-style shells (such as Bash, the GNU Bourne-Again Shell). If you use the C shell, you\u2019re on your\nown.\n\nBefore diving into the rules, we introduce a concept that appears throughout this Web page, which is that of the null, or empty,\nstring.\n\nThe null string is character data that has no value. In other words, it is empty. It is written in awk programs like this: \"\". In\nthe shell, it can be written using single or double quotes: \"\" or ''. Although the null string has no characters in it, it does\nexist. For example, consider this command:\n\n$ echo \"\"\n\n\nHere, the echo utility receives a single argument, even though that argument has no characters in it. In the rest of this Web\npage, we use the terms null string and empty string interchangeably. Now, on to the quoting rules:\n\n * Quoted items can be concatenated with nonquoted items as well as with other quoted items. The shell turns everything into one\n   argument for the command.\n * Preceding any single character with a backslash (\u2018\\\u2019) quotes that character. The shell removes the backslash and passes the\n   quoted character on to the command.\n * Single quotes protect everything between the opening and closing quotes. The shell does no interpretation of the quoted text,\n   passing it on verbatim to the command. It is impossible to embed a single quote inside single-quoted text. Refer back to\n   Comments in awk Programs [Comments.html] for an example of what happens if you try.\n * Double quotes protect most things between the opening and closing quotes. The shell does at least variable and command\n   substitution on the quoted text. Different shells may do additional kinds of processing on double-quoted text.\n   \n   Because certain characters within double-quoted text are processed by the shell, they must be escaped within the text. Of note\n   are the characters \u2018$\u2019, \u2018`\u2019, \u2018\\\u2019, and \u2018\"\u2019, all of which must be preceded by a backslash within double-quoted text if they are\n   to be passed on literally to the program. (The leading backslash is stripped first.) Thus, the example seen previously in\n   Running awk Without Input Files [Read-Terminal.html]:\n   \n   awk 'BEGIN { print \"Don\\47t Panic!\" }'\n   \n   \n   could instead be written this way:\n   \n   $ awk \"BEGIN { print \\\"Don't Panic!\\\" }\"\n   -| Don't Panic!\n   \n   \n   Note that the single quote is not special within double quotes.\n\n * Null strings are removed when they occur as part of a non-null command-line argument, while explicit null objects are kept. For\n   example, to specify that the field separator FS should be set to the null string, use:\n   \n   awk -F \"\" 'program' files # correct\n   \n   \n   Don\u2019t use this:\n   \n   awk -F\"\" 'program' files  # wrong!\n   \n   \n   In the second case, awk attempts to use the text of the program as the value of FS, and the first file name as the text of the\n   program! This results in syntax", "doc_id": "b7a00520-fa68-409e-b9a9-f8cea8f893e9", "embedding": null, "doc_hash": "091293fe7a29677c51f172062660bf7d055e9796bb2bc76b69306649e289af79", "extra_info": null, "node_info": {"start": 0, "end": 3702, "_node_type": "1"}, "relationships": {"1": "1bdb572a-b55f-4685-84be-0c276145f10b", "3": "4ee122ed-e385-4b97-92df-55dd6b0d296b"}}, "__type__": "1"}, "4ee122ed-e385-4b97-92df-55dd6b0d296b": {"__data__": {"text": "and the first file name as the text of the\n   program! This results in syntax errors at best, and confusing behavior at worst.\n\nMixing single and double quotes is difficult. You have to resort to shell quoting tricks, like this:\n\n$ awk 'BEGIN { print \"Here is a single quote <'\"'\"'>\" }'\n-| Here is a single quote <'>\n\n\nThis program consists of three concatenated quoted strings. The first and the third are single-quoted, and the second is\ndouble-quoted.\n\nThis can be \u201csimplified\u201d to:\n\n$ awk 'BEGIN { print \"Here is a single quote <'\\''>\" }'\n-| Here is a single quote <'>\n\n\nJudge for yourself which of these two is the more readable.\n\nAnother option is to use double quotes, escaping the embedded, awk-level double quotes:\n\n$ awk \"BEGIN { print \\\"Here is a single quote <'>\\\" }\"\n-| Here is a single quote <'>\n\n\nThis option is also painful, because double quotes, backslashes, and dollar signs are very common in more advanced awk programs.\n\nA third option is to use the octal escape sequence equivalents (see Escape Sequences [Escape-Sequences.html]) for the single- and\ndouble-quote characters, like so:\n\n$ awk 'BEGIN { print \"Here is a single quote <\\47>\" }'\n-| Here is a single quote <'>\n$ awk 'BEGIN { print \"Here is a double quote <\\42>\" }'\n-| Here is a double quote <\">\n\n\nThis works nicely, but you should comment clearly what the escape sequences mean.\n\nA fourth option is to use command-line variable assignment, like this:\n\n$ awk -v sq=\"'\" 'BEGIN { print \"Here is a single quote <\" sq \">\" }'\n-| Here is a single quote <'>\n\n\n(Here, the two string constants and the value of sq are concatenated into a single string that is printed by print.)\n\nIf you really need both single and double quotes in your awk program, it is probably best to move it into a separate file, where\nthe shell won\u2019t be part of the picture and you can say what you mean.\n\n * Quoting in MS-Windows Batch Files [DOS-Quoting.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Comments in awk Programs [Comments.html], Up: How to Run awk Programs [Running-gawk.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4ee122ed-e385-4b97-92df-55dd6b0d296b", "embedding": null, "doc_hash": "19940baa3f8af9aae27a5d8fc27df8119503e128a62b42bb2a5b588c99af5772", "extra_info": null, "node_info": {"start": 3625, "end": 5823, "_node_type": "1"}, "relationships": {"1": "1bdb572a-b55f-4685-84be-0c276145f10b", "2": "b7a00520-fa68-409e-b9a9-f8cea8f893e9"}}, "__type__": "1"}, "6aebe6ae-d75c-458b-882b-9eb6d5ba5883": {"__data__": {"text": "Next: Major Contributors to gawk [Contributors.html], Previous: Common Extensions Summary [Common-Extensions.html], Up: The\nEvolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.8 REGEXP RANGES AND LOCALES: A LONG SAD STORY\n\nThis section describes the confusing history of ranges within regular expressions and their interactions with locales, and how\nthis affected different versions of gawk.\n\nThe original Unix tools that worked with regular expressions defined character ranges (such as \u2018[a-z]\u2019) to match any character\nbetween the first character in the range and the last character in the range, inclusive. Ordering was based on the numeric value\nof each character in the machine\u2019s native character set. Thus, on ASCII-based systems, \u2018[a-z]\u2019 matched all the lowercase letters,\nand only the lowercase letters, as the numeric values for the letters from \u2018a\u2019 through \u2018z\u2019 were contiguous. (On an EBCDIC system,\nthe range \u2018[a-z]\u2019 includes additional nonalphabetic characters as well.)\n\nAlmost all introductory Unix literature explained range expressions as working in this fashion, and in particular, would teach\nthat the \u201ccorrect\u201d way to match lowercase letters was with \u2018[a-z]\u2019, and that \u2018[A-Z]\u2019 was the \u201ccorrect\u201d way to match uppercase\nletters. And indeed, this was true.113\n\nThe 1992 POSIX standard introduced the idea of locales (see Where You Are Makes a Difference [Locales.html]). Because many locales\ninclude other letters besides the plain 26 letters of the English alphabet, the POSIX standard added character classes (see Using\nBracket Expressions [Bracket-Expressions.html]) as a way to match different kinds of characters besides the traditional ones in\nthe ASCII character set.\n\nHowever, the standard changed the interpretation of range expressions. In the \"C\" and \"POSIX\" locales, a range expression like\n\u2018[a-dx-z]\u2019 is still equivalent to \u2018[abcdxyz]\u2019, as in ASCII. But outside those locales, the ordering was defined to be based on\ncollation order.\n\nWhat does that mean? In many locales, \u2018A\u2019 and \u2018a\u2019 are both less than \u2018B\u2019. In other words, these locales sort characters in\ndictionary order, and \u2018[a-dx-z]\u2019 is typically not equivalent to \u2018[abcdxyz]\u2019; instead, it might be equivalent to \u2018[ABCXYabcdxyz]\u2019,\nfor example.\n\nThis point needs to be emphasized: much literature teaches that you should use \u2018[a-z]\u2019 to match a lowercase character. But on\nsystems with non-ASCII locales, this also matches all of the uppercase characters except \u2018A\u2019 or \u2018Z\u2019! This was a continuous cause\nof confusion, even well into the twenty-first century.\n\nTo demonstrate these issues, the following example uses the sub() function, which does text replacement (see String-Manipulation\nFunctions [String-Functions.html]). Here, the intent is to remove trailing uppercase characters:\n\n$ echo something1234abc | gawk-3.1.8 '{ sub(\"[A-Z]*$\", \"\"); print }'\n-| something1234a\n\n\nThis output is unexpected, as the \u2018bc\u2019 at the end of \u2018something1234abc\u2019 should not normally match \u2018[A-Z]*\u2019. This result is due to\nthe locale setting (and thus you may not see it on your system).\n\nSimilar considerations apply to other ranges. For example, \u2018[\"-/]\u2019 is perfectly valid in ASCII, but is not valid in many Unicode\nlocales, such as en_US.UTF-8.\n\nEarly versions of gawk used regexp matching code that was not locale-aware, so ranges had their traditional interpretation.\n\nWhen gawk switched to using locale-aware regexp", "doc_id": "6aebe6ae-d75c-458b-882b-9eb6d5ba5883", "embedding": null, "doc_hash": "2df4a1297cde6f0ee3f0d3236310bc2afb76e4455094d5fff7b463bd3582d30e", "extra_info": null, "node_info": {"start": 0, "end": 3582, "_node_type": "1"}, "relationships": {"1": "62088ca8-07ef-4860-b230-5e330f7a70c6", "3": "c632575c-81af-480e-88cc-0baca5147f5d"}}, "__type__": "1"}, "c632575c-81af-480e-88cc-0baca5147f5d": {"__data__": {"text": "traditional interpretation.\n\nWhen gawk switched to using locale-aware regexp matchers, the problems began; especially as both GNU/Linux and commercial Unix\nvendors started implementing non-ASCII locales, and making them the default. Perhaps the most frequently asked question became\nsomething like, \u201cWhy does \u2018[A-Z]\u2019 match lowercase letters?!?\u201d\n\nThis situation existed for close to 10 years, if not more, and the gawk maintainer grew weary of trying to explain that gawk was\nbeing nicely standards-compliant, and that the issue was in the user\u2019s locale. During the development of version 4.0, he modified\ngawk to always treat ranges in the original, pre-POSIX fashion, unless --posix was used (see Command-Line Options\n[Options.html]).114\n\nFortunately, shortly before the final release of gawk 4.0, the maintainer learned that the 2008 standard had changed the\ndefinition of ranges, such that outside the \"C\" and \"POSIX\" locales, the meaning of range expressions was undefined.115\n\nBy using this lovely technical term, the standard gives license to implementers to implement ranges in whatever way they choose.\nThe gawk maintainer chose to apply the pre-POSIX meaning both with the default regexp matching and when --traditional or --posix\nare used. In all cases gawk remains POSIX-compliant.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(113)\n\nAnd Life was good.\n\n(114)\n\nAnd thus was born the Campaign for Rational Range Interpretation (or RRI). A number of GNU tools have already implemented this\nchange, or will soon. Thanks to Karl Berry for coining the phrase \u201cRational Range Interpretation.\u201d\n\n(115)\n\nSee the standard [https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_03_05] and its rationale\n[https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap09.html#tag_21_09_03_05].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Major Contributors to gawk [Contributors.html], Previous: Common Extensions Summary [Common-Extensions.html], Up: The\nEvolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c632575c-81af-480e-88cc-0baca5147f5d", "embedding": null, "doc_hash": "ef944018675c54b8b3bd4182ddec0411ad23dff2999a689fadb19b22a4d07e6c", "extra_info": null, "node_info": {"start": 3506, "end": 5795, "_node_type": "1"}, "relationships": {"1": "62088ca8-07ef-4860-b230-5e330f7a70c6", "2": "6aebe6ae-d75c-458b-882b-9eb6d5ba5883"}}, "__type__": "1"}, "fcbf1997-d4d6-4640-8386-53f653120762": {"__data__": {"text": "Next: The BEGIN and END Special Patterns [BEGIN_002fEND.html], Previous: Expressions as Patterns [Expression-Patterns.html], Up:\nPattern Elements [Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.3 SPECIFYING RECORD RANGES WITH PATTERNS\n\nA range pattern is made of two patterns separated by a comma, in the form \u2018begpat, endpat\u2019. It is used to match ranges of\nconsecutive input records. The first pattern, begpat, controls where the range begins, while endpat controls where the pattern\nends. For example, the following:\n\nawk '$1 == \"on\", $1 == \"off\"' myfile\n\n\nprints every record in myfile between \u2018on\u2019/\u2018off\u2019 pairs, inclusive.\n\nA range pattern starts out by matching begpat against every input record. When a record matches begpat, the range pattern is\nturned on, and the range pattern matches this record as well. As long as the range pattern stays turned on, it automatically\nmatches every input record read. The range pattern also matches endpat against every input record; when this succeeds, the range\npattern is turned off again for the following record. Then the range pattern goes back to checking begpat against each record.\n\nThe record that turns on the range pattern and the one that turns it off both match the range pattern. If you don\u2019t want to\noperate on these records, you can write if statements in the rule\u2019s action to distinguish them from the records you are interested\nin.\n\nIt is possible for a pattern to be turned on and off by the same record. If the record satisfies both conditions, then the action\nis executed for just that record. For example, suppose there is text between two identical markers (e.g., the \u2018%\u2019 symbol), each on\nits own line, that should be ignored. A first attempt would be to combine a range pattern that describes the delimited text with\nthe next statement (not discussed yet, see The next Statement [Next-Statement.html]). This causes awk to skip any further\nprocessing of the current record and start over again with the next input record. Such a program looks like this:\n\n/^%$/,/^%$/    { next }\n               { print }\n\n\nThis program fails because the range pattern is both turned on and turned off by the first line, which just has a \u2018%\u2019 on it. To\naccomplish this task, write the program in the following manner, using a flag:\n\n/^%$/     { skip = ! skip; next }\nskip == 1 { next } # skip lines with `skip' set\n\n\nIn a range pattern, the comma (\u2018,\u2019) has the lowest precedence of all the operators (i.e., it is evaluated last). Thus, the\nfollowing program attempts to combine a range pattern with another, simpler test:\n\necho Yes | awk '/1/,/2/ || /Yes/'\n\n\nThe intent of this program is \u2018(/1/,/2/) || /Yes/\u2019. However, awk interprets this as \u2018/1/, (/2/ || /Yes/)\u2019. This cannot be changed\nor worked around; range patterns do not combine with other patterns:\n\n$ echo Yes | gawk '(/1/,/2/) || /Yes/'\nerror\u2192 gawk: cmd. line:1: (/1/,/2/) || /Yes/\nerror\u2192 gawk: cmd. line:1:           ^ syntax error\n\n\nAs a minor point of interest, although it is poor style, POSIX allows you to put a newline after the comma in a range pattern.\n(d.c.)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The BEGIN and END Special Patterns [BEGIN_002fEND.html], Previous: Expressions as Patterns [Expression-Patterns.html], Up:\nPattern Elements [Pattern-Overview.html] \u00a0 [Contents [index.html#SEC_Contents]][Index", "doc_id": "fcbf1997-d4d6-4640-8386-53f653120762", "embedding": null, "doc_hash": "d7fe92ba8f65827f3b33aee125cd8f9939f0d71fb4ed4f687122c271cd70035f", "extra_info": null, "node_info": {"start": 0, "end": 3596, "_node_type": "1"}, "relationships": {"1": "00f964b1-ee51-4d18-8b1c-164c99dbe4f6", "3": "ae71eee0-ef60-45c7-add5-b6af2af55918"}}, "__type__": "1"}, "ae71eee0-ef60-45c7-add5-b6af2af55918": {"__data__": {"text": "\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ae71eee0-ef60-45c7-add5-b6af2af55918", "embedding": null, "doc_hash": "b6a3076ff069d56e788ce6ba29ceb58e88335ad01c38b57cc3815840cbe72c3b", "extra_info": null, "node_info": {"start": 3552, "end": 3610, "_node_type": "1"}, "relationships": {"1": "00f964b1-ee51-4d18-8b1c-164c99dbe4f6", "2": "fcbf1997-d4d6-4640-8386-53f653120762"}}, "__type__": "1"}, "9d5cb9d3-2796-4c29-8404-587751e5aafc": {"__data__": {"text": "Next: Running Long Programs [Long.html], Previous: One-Shot Throwaway awk Programs [One_002dshot.html], Up: How to Run awk\nPrograms [Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n1.1.2 RUNNING AWK WITHOUT INPUT FILES\n\nYou can also run awk without any input files. If you type the following command line:\n\nawk 'program'\n\n\nawk applies the program to the standard input, which usually means whatever you type on the keyboard. This continues until you\nindicate end-of-file by typing Ctrl-d. (On non-POSIX operating systems, the end-of-file character may be different.)\n\nAs an example, the following program prints a friendly piece of advice (from Douglas Adams\u2019s The Hitchhiker\u2019s Guide to the\nGalaxy), to keep you from worrying about the complexities of computer programming:\n\n$ awk 'BEGIN { print \"Don\\47t Panic!\" }'\n-| Don't Panic!\n\n\nawk executes statements associated with BEGIN before reading any input. If there are no other statements in your program, as is\nthe case here, awk just stops, instead of trying to read input it doesn\u2019t know how to process. The \u2018\\47\u2019 is a magic way (explained\nlater) of getting a single quote into the program, without having to engage in ugly shell quoting tricks.\n\n> NOTE: If you use Bash as your shell, you should execute the command \u2018set +H\u2019 before running this program interactively, to\n> disable the C shell-style command history, which treats \u2018!\u2019 as a special character. We recommend putting this command into your\n> personal startup file.\n\nThis next simple awk program emulates the cat utility; it copies whatever you type on the keyboard to its standard output (why\nthis works is explained shortly):\n\n$ awk '{ print }'\nNow is the time for all good men\n-| Now is the time for all good men\nto come to the aid of their country.\n-| to come to the aid of their country.\nFour score and seven years ago, ...\n-| Four score and seven years ago, ...\nWhat, me worry?\n-| What, me worry?\nCtrl-d\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Running Long Programs [Long.html], Previous: One-Shot Throwaway awk Programs [One_002dshot.html], Up: How to Run awk\nPrograms [Running-gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9d5cb9d3-2796-4c29-8404-587751e5aafc", "embedding": null, "doc_hash": "0c2620e406e95e61c4fee094ade3d56c476356f3d87976153adf2c48c9d50868", "extra_info": null, "node_info": {"start": 0, "end": 2431, "_node_type": "1"}, "relationships": {"1": "fcb53cf6-3bc8-4d1b-a35b-14c51afe1fa8"}}, "__type__": "1"}, "3794f396-e1d4-433b-9b6b-5848b538b08c": {"__data__": {"text": "Next: Retrying Reads After Certain Input Errors [Retrying-Input.html], Previous: Explicit Input with getline [Getline.html], Up:\nReading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.11 READING INPUT WITH A TIMEOUT\n\nThis section describes a feature that is specific to gawk.\n\nYou may specify a timeout in milliseconds for reading input from the keyboard, a pipe, or two-way communication, including TCP/IP\nsockets. This can be done on a per-input, per-command, or per-connection basis, by setting a special element in the PROCINFO array\n(see Built-in Variables That Convey Information [Auto_002dset.html]):\n\nPROCINFO[\"input_name\", \"READ_TIMEOUT\"] = timeout in milliseconds\n\n\nWhen set, this causes gawk to time out and return failure if no data is available to read within the specified timeout period. For\nexample, a TCP client can decide to give up on receiving any response from the server after a certain amount of time:\n\nService = \"/inet/tcp/0/localhost/daytime\"\nPROCINFO[Service, \"READ_TIMEOUT\"] = 100\nif ((Service |& getline) > 0)\n    print $0\nelse if (ERRNO != \"\")\n    print ERRNO\n\n\nHere is how to read interactively from the user26 without waiting for more than five seconds:\n\nPROCINFO[\"/dev/stdin\", \"READ_TIMEOUT\"] = 5000\nwhile ((getline < \"/dev/stdin\") > 0)\n    print $0\n\n\ngawk terminates the read operation if input does not arrive after waiting for the timeout period, returns failure, and sets ERRNO\nto an appropriate string value. A negative or zero value for the timeout is the same as specifying no timeout at all.\n\nA timeout can also be set for reading from the keyboard in the implicit loop that reads input records and matches them against\npatterns, like so:\n\n$ gawk 'BEGIN { PROCINFO[\"-\", \"READ_TIMEOUT\"] = 5000 }\n> { print \"You entered: \" $0 }'\ngawk\n-| You entered: gawk\n\n\nIn this case, failure to respond within five seconds results in the following error message:\n\nerror\u2192 gawk: cmd. line:2: (FILENAME=- FNR=1) fatal: error reading input file `-': Connection timed out\n\n\nThe timeout can be set or changed at any time, and will take effect on the next attempt to read from the input device. In the\nfollowing example, we start with a timeout value of one second, and progressively reduce it by one-tenth of a second until we wait\nindefinitely for the input to arrive:\n\nPROCINFO[Service, \"READ_TIMEOUT\"] = 1000\nwhile ((Service |& getline) > 0) {\n    print $0\n    PROCINFO[Service, \"READ_TIMEOUT\"] -= 100\n}\n\n\n> NOTE: You should not assume that the read operation will block exactly after the tenth record has been printed. It is possible\n> that gawk will read and buffer more than one record\u2019s worth of data the first time. Because of this, changing the value of\n> timeout like in the preceding example is not very useful.\n\nIf the PROCINFO element is not present and the GAWK_READ_TIMEOUT environment variable exists, gawk uses its value to initialize\nthe timeout value. The exclusive use of the environment variable to specify timeout has the disadvantage of not being able to\ncontrol it on a per-command or per-connection basis.\n\ngawk considers a timeout event to be an error even though the attempt to read from the underlying device may succeed in a later\nattempt. This is a limitation, and it also means that you cannot use this to multiplex input from two or more sources. See\nRetrying Reads After Certain Input Errors [Retrying-Input.html] for a way to enable later I/O attempts to succeed.\n\nAssigning a timeout value prevents read operations from being blocked indefinitely. But bear in mind that there are other", "doc_id": "3794f396-e1d4-433b-9b6b-5848b538b08c", "embedding": null, "doc_hash": "c70447b4f925cdbf46e0cb53e5bd1bb15dac6ee0ed83dbb8f0b84ece164ec9c0", "extra_info": null, "node_info": {"start": 0, "end": 3720, "_node_type": "1"}, "relationships": {"1": "cf80ad43-189d-4ca2-9423-44cea057f933", "3": "db626320-6672-4893-b9cc-d44946a0fdd9"}}, "__type__": "1"}, "db626320-6672-4893-b9cc-d44946a0fdd9": {"__data__": {"text": "read operations from being blocked indefinitely. But bear in mind that there are other ways\ngawk can stall waiting for an input device to be ready. A network client can sometimes take a long time to establish a connection\nbefore it can start reading any data, or the attempt to open a FIFO special file for reading can be blocked indefinitely until\nsome other process opens it for writing.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(26)\n\nThis assumes that standard input is the keyboard.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Retrying Reads After Certain Input Errors [Retrying-Input.html], Previous: Explicit Input with getline [Getline.html], Up:\nReading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "db626320-6672-4893-b9cc-d44946a0fdd9", "embedding": null, "doc_hash": "2d8370c7d7a4fa757aad61f3492500049dd59305a999f09f9df0fce62e8c6b3f", "extra_info": null, "node_info": {"start": 3634, "end": 4585, "_node_type": "1"}, "relationships": {"1": "cf80ad43-189d-4ca2-9423-44cea057f933", "2": "3794f396-e1d4-433b-9b6b-5848b538b08c"}}, "__type__": "1"}, "45599a4e-ddc6-4173-870f-979c786f0c18": {"__data__": {"text": "Next: Quoting Strings to Pass to the Shell [Shell-Quoting.html], Previous: Managing the Time of Day [Getlocaltime-Function.html],\nUp: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.8 READING A WHOLE FILE AT ONCE\n\nOften, it is convenient to have the entire contents of a file available in memory as a single string. A straightforward but naive\nway to do that might be as follows:\n\nfunction readfile1(file,    tmp, contents)\n{\n    if ((getline tmp < file) < 0)\n        return\n\n    contents = tmp RT\n    while ((getline tmp < file) > 0)\n        contents = contents tmp RT\n\n    close(file)\n    return contents\n}\n\n\nThis function reads from file one record at a time, building up the full contents of the file in the local variable contents. It\nworks, but is not necessarily efficient.\n\nThe following function, based on a suggestion by Denis Shirokov, reads the entire contents of the named file in one shot:\n\n# readfile.awk --- read an entire file at once\n\nfunction readfile(file,     tmp, save_rs)\n{\n    save_rs = RS\n    RS = \"^$\"\n    getline tmp < file\n    close(file)\n    RS = save_rs\n\n    return tmp\n}\n\n\nIt works by setting RS to \u2018^$\u2019, a regular expression that will never match if the file has contents. gawk reads data from the file\ninto tmp, attempting to match RS. The match fails after each read, but fails quickly, such that gawk fills tmp with the entire\ncontents of the file. (See How Input Is Split into Records [Records.html] for information on RT and RS.)\n\nIn the case that file is empty, the return value is the null string. Thus, calling code may use something like:\n\ncontents = readfile(\"/some/path\")\nif (length(contents) == 0)\n    # file was empty \u2026\n\n\nThis tests the result to see if it is empty or not. An equivalent test would be \u2018contents\u00a0==\u00a0\"\"\u2019.\n\nSee Reading an Entire File [Extension-Sample-Readfile.html] for an extension function that also reads an entire file into memory.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Quoting Strings to Pass to the Shell [Shell-Quoting.html], Previous: Managing the Time of Day [Getlocaltime-Function.html],\nUp: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "45599a4e-ddc6-4173-870f-979c786f0c18", "embedding": null, "doc_hash": "0a5645de0e66c024493c33d2a90d53e164eb18cab38a8b8269f8bb603153e4ec", "extra_info": null, "node_info": {"start": 0, "end": 2460, "_node_type": "1"}, "relationships": {"1": "11aaa8b3-0062-4462-97e7-abfd917bc170"}}, "__type__": "1"}, "998e8eed-e203-455b-9d35-0a3f89e67644": {"__data__": {"text": "Next: Printing Output [Printing.html], Previous: Regular Expressions [Regexp.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4 READING INPUT FILES\n\nIn the typical awk program, awk reads all input either from the standard input (by default, this is the keyboard, but often it is\na pipe from another command) or from files whose names you specify on the awk command line. If you specify input files, awk reads\nthem in order, processing all the data from one before going on to the next. The name of the current input file can be found in\nthe predefined variable FILENAME (see Predefined Variables [Built_002din-Variables.html]).\n\nThe input is read in units called records, and is processed by the rules of your program one record at a time. By default, each\nrecord is one line. Each record is automatically split into chunks called fields. This makes it more convenient for programs to\nwork on the parts of a record.\n\nOn rare occasions, you may need to use the getline command. The getline command is valuable both because it can do explicit input\nfrom any number of files, and because the files used with it do not have to be named on the awk command line (see Explicit Input\nwith getline [Getline.html]).\n\n * How Input Is Split into Records [Records.html]\n * Examining Fields [Fields.html]\n * Nonconstant Field Numbers [Nonconstant-Fields.html]\n * Changing the Contents of a Field [Changing-Fields.html]\n * Specifying How Fields Are Separated [Field-Separators.html]\n * Reading Fixed-Width Data [Constant-Size.html]\n * Defining Fields by Content [Splitting-By-Content.html]\n * Checking How gawk Is Splitting Records [Testing-field-creation.html]\n * Multiple-Line Records [Multiple-Line.html]\n * Explicit Input with getline [Getline.html]\n * Reading Input with a Timeout [Read-Timeout.html]\n * Retrying Reads After Certain Input Errors [Retrying-Input.html]\n * Directories on the Command Line [Command_002dline-directories.html]\n * Summary [Input-Summary.html]\n * Exercises [Input-Exercises.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Printing Output [Printing.html], Previous: Regular Expressions [Regexp.html], Up: General Introduction [index.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "998e8eed-e203-455b-9d35-0a3f89e67644", "embedding": null, "doc_hash": "64bd66102bf6eadfbcaf5b6b14bf0911a26ddf2bf0e7ba995ed78a45bff129ab", "extra_info": null, "node_info": {"start": 0, "end": 2499, "_node_type": "1"}, "relationships": {"1": "4c334a0a-6779-4c37-9f3f-981612dd5506"}}, "__type__": "1"}, "3a29c109-3384-4429-bb4a-41d3dc12b31b": {"__data__": {"text": "Next: Limitations [Limitations.html], Previous: Main Debugger Commands [List-of-Debugger-Commands.html], Up: Debugging awk\nPrograms [Debugger.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14.4 READLINE SUPPORT\n\nIf gawk is compiled with the GNU Readline library [http://cnswww.cns.cwru.edu/php/chet/readline/readline.html], you can take\nadvantage of that library\u2019s command completion and history expansion features. The following types of completion are available:\n\nCommand completion\n\nCommand names.\n\nSource file name completion\n\nSource file names. Relevant commands are break, clear, list, tbreak, and until.\n\nArgument completion\n\nNon-numeric arguments to a command. Relevant commands are enable and info.\n\nVariable name completion\n\nGlobal variable names, and function arguments in the current context if the program is running. Relevant commands are display,\nprint, set, and watch.", "doc_id": "3a29c109-3384-4429-bb4a-41d3dc12b31b", "embedding": null, "doc_hash": "032591b86f29c952b22e3b0540fd84e1e6872dff830dc98008b577b99d1f87b3", "extra_info": null, "node_info": {"start": 0, "end": 1036, "_node_type": "1"}, "relationships": {"1": "8e81ca0a-bfdc-4b3f-b716-75ad9900bfce"}}, "__type__": "1"}, "d6124a1f-f588-4ddd-99e2-f1da86c2ac7f": {"__data__": {"text": "Next: Examining Fields [Fields.html], Up: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.1 HOW INPUT IS SPLIT INTO RECORDS\n\nawk divides the input for your program into records and fields. It keeps track of the number of records that have been read so far\nfrom the current input file. This value is stored in a predefined variable called FNR, which is reset to zero every time a new\nfile is started. Another predefined variable, NR, records the total number of input records read so far from all data files. It\nstarts at zero, but is never automatically reset to zero.\n\nNormally, records are separated by newline characters. You can control how records are separated by assigning values to the\nbuilt-in variable RS. If RS is any single character, that character separates records. Otherwise (in gawk), RS is treated as a\nregular expression. This mechanism is explained in greater detail shortly.\n\n * Record Splitting with Standard awk [awk-split-records.html]\n * Record Splitting with gawk [gawk-split-records.html]", "doc_id": "d6124a1f-f588-4ddd-99e2-f1da86c2ac7f", "embedding": null, "doc_hash": "1d1458b801c0f97f4eb4a4da42ea2023f3fa3b3bd4cca45b96f1b94ee551bcf7", "extra_info": null, "node_info": {"start": 0, "end": 1203, "_node_type": "1"}, "relationships": {"1": "67e247a1-e6a7-4920-8ab9-1053ea049662"}}, "__type__": "1"}, "3e6d2a28-a3c6-4c18-8bb2-b806c9212a56": {"__data__": {"text": "Next: API Variables [Extension-API-Variables.html], Previous: Array Manipulation [Array-Manipulation.html], Up: API Description\n[Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.13 ACCESSING AND MANIPULATING REDIRECTIONS\n\nThe following function allows extensions to access and manipulate redirections.\n\nawk_bool_t get_file(const char *name, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0size_t name_len, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *filetype,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int fd, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const awk_input_buf_t **ibufp, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const awk_output_buf_t\n**obufp);\n\nLook up file name in gawk\u2019s internal redirection table. If name is NULL or name_len is zero, return data for the currently open\ninput file corresponding to FILENAME. (This does not access the filetype argument, so that may be undefined). If the file is not\nalready open, attempt to open it. The filetype argument must be zero-terminated and should be one of:\n\n\">\"\n\nA file opened for output.\n\n\">>\"\n\nA file opened for append.\n\n\"<\"\n\nA file opened for input.\n\n\"|>\"\n\nA pipe opened for output.\n\n\"|<\"\n\nA pipe opened for input.\n\n\"|&\"\n\nA two-way coprocess.\n\nOn error, return awk_false. Otherwise, return awk_true, and return additional information about the redirection in the ibufp and\nobufp pointers.\n\nFor input redirections, the *ibufp value should be non-NULL, and *obufp should be NULL. For output redirections, the *obufp value\nshould be non-NULL, and *ibufp should be NULL. For two-way coprocesses, both values should be non-NULL.\n\nIn the usual case, the extension is interested in (*ibufp)->fd and/or fileno((*obufp)->fp). If the file is not already open, and\nthe fd argument is nonnegative, gawk will use that file descriptor instead of opening the file in the usual way. If fd is\nnonnegative, but the file exists already, gawk ignores fd and returns the existing file. It is the caller\u2019s responsibility to\nnotice that neither the fd in the returned awk_input_buf_t nor the fd in the returned awk_output_buf_t matches the requested\nvalue.\n\nNote that supplying a file descriptor is currently not supported for pipes. However, supplying a file descriptor should work for\ninput, output, append, and two-way (coprocess) sockets. If filetype is two-way, gawk assumes that it is a socket! Note that in the\ntwo-way case, the input and output file descriptors may differ. To check for success, you must check whether either matches.\n\nIt is anticipated that this API function will be used to implement I/O multiplexing and a socket library.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: API Variables [Extension-API-Variables.html], Previous: Array Manipulation [Array-Manipulation.html], Up: API Description\n[Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3e6d2a28-a3c6-4c18-8bb2-b806c9212a56", "embedding": null, "doc_hash": "1d558c154eed0b5d65656b5acc198fc8ddb8bc69a267564fa5b88324e7b76425", "extra_info": null, "node_info": {"start": 0, "end": 3017, "_node_type": "1"}, "relationships": {"1": "55113dc6-7ed3-43e1-a244-275477d952dd"}}, "__type__": "1"}, "a5351a49-923f-4528-89e2-a5e3810c6bac": {"__data__": {"text": "Next: Special Files for Standard Preopened Data Streams [Special-FD.html], Previous: Using printf Statements for Fancier Printing\n[Printf.html], Up: Printing Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.6 REDIRECTING OUTPUT OF PRINT AND PRINTF\n\nSo far, the output from print and printf has gone to the standard output, usually the screen. Both print and printf can also send\ntheir output to other places. This is called redirection.\n\n> NOTE: When --sandbox is specified (see Command-Line Options [Options.html]), redirecting output to files, pipes, and coprocesses\n> is disabled.\n\nA redirection appears after the print or printf statement. Redirections in awk are written just like redirections in shell\ncommands, except that they are written inside the awk program.\n\nThere are four forms of output redirection: output to a file, output appended to a file, output through a pipe to another command,\nand output to a coprocess. We show them all for the print statement, but they work identically for printf:\n\nprint items > output-file\n\nThis redirection prints the items into the output file named output-file. The file name output-file can be any expression. Its\nvalue is changed to a string and then used as a file name (see Expressions [Expressions.html]).\n\nWhen this type of redirection is used, the output-file is erased before the first output is written to it. Subsequent writes to\nthe same output-file do not erase output-file, but append to it. (This is different from how you use redirections in shell\nscripts.) If output-file does not exist, it is created. For example, here is how an awk program can write a list of peoples\u2019 names\nto one file named name-list, and a list of phone numbers to another file named phone-list:\n\n$ awk '{ print $2 > \"phone-list\"\n>        print $1 > \"name-list\" }' mail-list\n$ cat phone-list\n-| 555-5553\n-| 555-3412\n\u2026\n$ cat name-list\n-| Amelia\n-| Anthony\n\u2026\n\n\nEach output file contains one name or number per line.\n\nprint items >> output-file\n\nThis redirection prints the items into the preexisting output file named output-file. The difference between this and the\nsingle-\u2018>\u2019 redirection is that the old contents (if any) of output-file are not erased. Instead, the awk output is appended to the\nfile. If output-file does not exist, then it is created.\n\nprint items | command\n\nIt is possible to send output to another program through a pipe instead of into a file. This redirection opens a pipe to command,\nand writes the values of items through this pipe to another process created to execute command.\n\nThe redirection argument command is actually an awk expression. Its value is converted to a string whose contents give the shell\ncommand to be run. For example, the following produces two files, one unsorted list of peoples\u2019 names, and one list sorted in\nreverse alphabetical order:\n\nawk '{ print $1 > \"names.unsorted\"\n       command = \"sort -r > names.sorted\"\n       print $1 | command }' mail-list\n\n\nThe unsorted list is written with an ordinary redirection, while the sorted list is written by piping through the sort utility.\n\nThe next example uses redirection to mail a message to the mailing list bug-system. This might be useful when trouble is\nencountered in an awk script run periodically for system maintenance:\n\nreport = \"mail bug-system\"\nprint(\"Awk script failed:\", $0) | report\nprint(\"at record number\", FNR, \"of\", FILENAME) | report\nclose(report)\n\n\nThe close() function is called here because it\u2019s a good idea to close the pipe as soon as all the intended output has been sent to\nit. See Closing Input and Output Redirections [Close-Files-And-Pipes.html] for more information.\n\nThis example also illustrates the use of a variable to represent a file or command\u2014it is not necessary to always use a", "doc_id": "a5351a49-923f-4528-89e2-a5e3810c6bac", "embedding": null, "doc_hash": "6d1432ac380c9ce7f31eba1fe6e16fde90eff78fa8922e8f17f8afec4b930358", "extra_info": null, "node_info": {"start": 0, "end": 3922, "_node_type": "1"}, "relationships": {"1": "60648308-46db-46b7-998f-d12629a6a39b", "3": "da8c3476-8569-4b26-9860-0a593984e49d"}}, "__type__": "1"}, "da8c3476-8569-4b26-9860-0a593984e49d": {"__data__": {"text": "the use of a variable to represent a file or command\u2014it is not necessary to always use a string\nconstant. Using a variable is generally a good idea, because (if you mean to refer to that same file or command) awk requires that\nthe string value be written identically every time.\n\nprint items |& command\n\nThis redirection prints the items to the input of command. The difference between this and the single-\u2018|\u2019 redirection is that the\noutput from command can be read with getline. Thus, command is a coprocess, which works together with but is subsidiary to the awk\nprogram.\n\nThis feature is a gawk extension, and is not available in POSIX awk. See Using getline from a Coprocess\n[Getline_002fCoprocess.html], for a brief discussion. See Two-Way Communications with Another Process [Two_002dway-I_002fO.html],\nfor a more complete discussion.\n\nRedirecting output using \u2018>\u2019, \u2018>>\u2019, \u2018|\u2019, or \u2018|&\u2019 asks the system to open a file, pipe, or coprocess only if the particular file or\ncommand you specify has not already been written to by your program or if it has been closed since it was last written to.\n\nIt is a common error to use \u2018>\u2019 redirection for the first print to a file, and then to use \u2018>>\u2019 for subsequent output:\n\n# clear the file\nprint \"Don't panic\" > \"guide.txt\"\n\u2026\n# append\nprint \"Avoid improbability generators\" >> \"guide.txt\"\n\n\nThis is indeed how redirections must be used from the shell. But in awk, it isn\u2019t necessary. In this kind of case, a program\nshould use \u2018>\u2019 for all the print statements, because the output file is only opened once. (It happens that if you mix \u2018>\u2019 and \u2018>>\u2019\noutput is produced in the expected order. However, mixing the operators for the same file is definitely poor style, and is\nconfusing to readers of your program.)\n\nAs mentioned earlier (see Points to Remember About getline [Getline-Notes.html]), many Many older awk implementations limit the\nnumber of pipelines that an awk program may have open to just one! In gawk, there is no such limit. gawk allows a program to open\nas many pipelines as the underlying operating system permits.\n\nPiping into sh\n\nA particularly powerful way to use redirection is to build command lines and pipe them into the shell, sh. For example, suppose\nyou have a list of files brought over from a system where all the file names are stored in uppercase, and you wish to rename them\nto have names in all lowercase. The following program is both simple and efficient:\n\n{ printf(\"mv %s %s\\n\", $0, tolower($0)) | \"sh\" }\n\nEND { close(\"sh\") }\n\n\nThe tolower() function returns its argument string with all uppercase characters converted to lowercase (see String-Manipulation\nFunctions [String-Functions.html]). The program builds up a list of command lines, using the mv utility to rename the files. It\nthen sends the list to the shell for execution.\n\nSee Quoting Strings to Pass to the Shell [Shell-Quoting.html] for a function that can help in generating command lines to be fed\nto the shell.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Special Files for Standard Preopened Data Streams [Special-FD.html], Previous: Using printf Statements for Fancier Printing\n[Printf.html], Up: Printing Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "da8c3476-8569-4b26-9860-0a593984e49d", "embedding": null, "doc_hash": "13efe56c1c0299acf827c75a6f1abfb580fb03de6ce9f301888ff8c055597552", "extra_info": null, "node_info": {"start": 3834, "end": 7161, "_node_type": "1"}, "relationships": {"1": "60648308-46db-46b7-998f-d12629a6a39b", "2": "a5351a49-923f-4528-89e2-a5e3810c6bac"}}, "__type__": "1"}, "fca54a78-2438-4d0e-a1ea-20ee0f83b5c8": {"__data__": {"text": "Next: Assigning Array Elements [Assigning-Elements.html], Previous: Introduction to Arrays [Array-Intro.html], Up: The Basics of\nArrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.1.2 REFERRING TO AN ARRAY ELEMENT\n\nThe principal way to use an array is to refer to one of its elements. An array reference is an expression as follows:\n\narray[index-expression]\n\n\nHere, array is the name of an array. The expression index-expression is the index of the desired element of the array.\n\nThe value of the array reference is the current value of that array element. For example, foo[4.3] is an expression referencing\nthe element of array foo at index \u20184.3\u2019.\n\nA reference to an array element that has no recorded value yields a value of \"\", the null string. This includes elements that have\nnot been assigned any value as well as elements that have been deleted (see The delete Statement [Delete.html]).\n\n> NOTE: A reference to an element that does not exist automatically creates that array element, with the null string as its value.\n> (In some cases, this is unfortunate, because it might waste memory inside awk.)\n> \n> Novice awk programmers often make the mistake of checking if an element exists by checking if the value is empty:\n> \n> # Check if \"foo\" exists in a:         Incorrect!\n> if (a[\"foo\"] != \"\") \u2026\n> \n> \n> This is incorrect for two reasons. First, it creates a[\"foo\"] if it didn\u2019t exist before! Second, it is valid (if a bit unusual)\n> to set an array element equal to the empty string.\n\nTo determine whether an element exists in an array at a certain index, use the following expression:\n\nindx in array\n\n\nThis expression tests whether the particular index indx exists, without the side effect of creating that element if it is not\npresent. The expression has the value one (true) if array[indx] exists and zero (false) if it does not exist. (We use indx here,\nbecause \u2018index\u2019 is the name of a built-in function.) For example, this statement tests whether the array frequencies contains the\nindex \u20182\u2019:\n\nif (2 in frequencies)\n    print \"Subscript 2 is present.\"\n\n\nNote that this is not a test of whether the array frequencies contains an element whose value is two. There is no way to do that\nexcept to scan all the elements. Also, this does not create frequencies[2], while the following (incorrect) alternative does:\n\nif (frequencies[2] != \"\")\n    print \"Subscript 2 is present.\"\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Assigning Array Elements [Assigning-Elements.html], Previous: Introduction to Arrays [Array-Intro.html], Up: The Basics of\nArrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "fca54a78-2438-4d0e-a1ea-20ee0f83b5c8", "embedding": null, "doc_hash": "d4487a13910251686ec546ff6145b23f8ea60f33a11e3606b088146a73ece234", "extra_info": null, "node_info": {"start": 0, "end": 2906, "_node_type": "1"}, "relationships": {"1": "f1053373-eca2-4aca-8dab-582726698803"}}, "__type__": "1"}, "110290ad-bbaf-48e9-b587-4c219e5d26b0": {"__data__": {"text": "Previous: Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html], Up: Constant Expressions [Constants.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.1.3 REGULAR EXPRESSION CONSTANTS\n\nA regexp constant is a regular expression description enclosed in slashes, such as /^beginning\u00a0and\u00a0end$/. Most regexps used in awk\nprograms are constant, but the \u2018~\u2019 and \u2018!~\u2019 matching operators can also match computed or dynamic regexps (which are typically\njust ordinary strings or variables that contain a regexp, but could be more complex expressions).", "doc_id": "110290ad-bbaf-48e9-b587-4c219e5d26b0", "embedding": null, "doc_hash": "21c1e84cb876b54d0ce84c6d7c890066144482b4aae2f424bf40f5003043c36b", "extra_info": null, "node_info": {"start": 0, "end": 698, "_node_type": "1"}, "relationships": {"1": "d7750eb9-1116-4a24-910f-031b11a5dd19"}}, "__type__": "1"}, "5706b23c-6e77-41e4-bf32-cdc50ed666d2": {"__data__": {"text": "Next: Making Each Character a Separate Field [Single-Character-Fields.html], Previous: Whitespace Normally Separates Fields\n[Default-Field-Splitting.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.5.2 USING REGULAR EXPRESSIONS TO SEPARATE FIELDS\n\nThe previous subsection discussed the use of single characters or simple strings as the value of FS. More generally, the value of\nFS may be a string containing any regular expression. In this case, each match in the record for the regular expression separates\nfields. For example, the assignment:\n\nFS = \", \\t\"\n\n\nmakes every area of an input line that consists of a comma followed by a space and a TAB into a field separator.\n\nFor a less trivial example of a regular expression, try using single spaces to separate fields the way single commas are used. FS\ncan be set to \"[\u00a0]\" (left bracket, space, right bracket). This regular expression matches a single space and nothing else (see\nRegular Expressions [Regexp.html]).\n\nThere is an important difference between the two cases of \u2018FS = \"\u00a0\"\u2019 (a single space) and \u2018FS = \"[\u00a0\\t\\n]+\"\u2019 (a regular expression\nmatching one or more spaces, TABs, or newlines). For both values of FS, fields are separated by runs (multiple adjacent\noccurrences) of spaces, TABs, and/or newlines. However, when the value of FS is \"\u00a0\", awk first strips leading and trailing\nwhitespace from the record and then decides where the fields are. For example, the following pipeline prints \u2018b\u2019:\n\n$ echo ' a b c d ' | awk '{ print $2 }'\n-| b\n\n\nHowever, this pipeline prints \u2018a\u2019 (note the extra spaces around each letter):\n\n$ echo ' a  b  c  d ' | awk 'BEGIN { FS = \"[ \\t\\n]+\" }\n>                                  { print $2 }'\n-| a\n\n\nIn this case, the first field is null, or empty.\n\nThe stripping of leading and trailing whitespace also comes into play whenever $0 is recomputed. For instance, study this\npipeline:\n\n$ echo '   a b c d' | awk '{ print; $2 = $2; print }'\n-|    a b c d\n-| a b c d\n\n\nThe first print statement prints the record as it was read, with leading whitespace intact. The assignment to $2 rebuilds $0 by\nconcatenating $1 through $NF together, separated by the value of OFS (which is a space by default). Because the leading whitespace\nwas ignored when finding $1, it is not part of the new $0. Finally, the last print statement prints the new $0.\n\nThere is an additional subtlety to be aware of when using regular expressions for field splitting. It is not well specified in the\nPOSIX standard, or anywhere else, what \u2018^\u2019 means when splitting fields. Does the \u2018^\u2019 match only at the beginning of the entire\nrecord? Or is each field separator a new string? It turns out that different awk versions answer this question differently, and\nyou should not rely on any specific behavior in your programs. (d.c.)\n\nAs a point of information, BWK awk allows \u2018^\u2019 to match only at the beginning of the record. gawk also works this way. For example:\n\n$ echo 'xxAA  xxBxx  C' |\n> gawk -F '(^x+)|( +)' '{ for (i = 1; i <= NF; i++)\n>                             printf \"-->%s<--\\n\", $i }'\n-| --><--\n-| -->AA<--\n-| -->xxBxx<--\n-| -->C<--\n\n\nFinally, field splitting with", "doc_id": "5706b23c-6e77-41e4-bf32-cdc50ed666d2", "embedding": null, "doc_hash": "22294476a137e04aad97494f5631ac3f79eabc0021e4f3ba26308d65c3ce2680", "extra_info": null, "node_info": {"start": 0, "end": 3348, "_node_type": "1"}, "relationships": {"1": "9bf2bf4d-57ab-480b-8ad4-db7f0ea89218", "3": "0ddf0f3c-e4cf-4317-b33e-a1f8d4839dc1"}}, "__type__": "1"}, "0ddf0f3c-e4cf-4317-b33e-a1f8d4839dc1": {"__data__": {"text": "-->xxBxx<--\n-| -->C<--\n\n\nFinally, field splitting with regular expressions works differently than regexp matching with the sub(), gsub(), and gensub() (see\nString-Manipulation Functions [String-Functions.html]). Those functions allow a regexp to match the empty string; field splitting\ndoes not. Thus, for example \u2018FS = \"()\"\u2019 does not split fields between characters.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Making Each Character a Separate Field [Single-Character-Fields.html], Previous: Whitespace Normally Separates Fields\n[Default-Field-Splitting.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "0ddf0f3c-e4cf-4317-b33e-a1f8d4839dc1", "embedding": null, "doc_hash": "7f07b60c13a938dbc43edb80a2f0adc44926918941e502d4af622117bc14a289", "extra_info": null, "node_info": {"start": 3294, "end": 4073, "_node_type": "1"}, "relationships": {"1": "9bf2bf4d-57ab-480b-8ad4-db7f0ea89218", "2": "5706b23c-6e77-41e4-bf32-cdc50ed666d2"}}, "__type__": "1"}, "89da9148-5541-4d97-899e-ad0d910bde64": {"__data__": {"text": "Next: Some Notes On Interval Expressions [Interval-Expressions.html], Up: Regular Expression Operators [Regexp-Operators.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n3.3.1 REGEXP OPERATORS IN AWK\n\nThe escape sequences described earlier in Escape Sequences [Escape-Sequences.html] are valid inside a regexp. They are introduced\nby a \u2018\\\u2019 and are recognized and converted into corresponding real characters as the very first step in processing regexps.\n\nHere is a list of metacharacters. All characters that are not escape sequences and that are not listed here stand for themselves:\n\n\\\n\nThis suppresses the special meaning of a character when matching. For example, \u2018\\$\u2019 matches the character \u2018$\u2019.\n\n^\n\nThis matches the beginning of a string. \u2018^@chapter\u2019 matches \u2018@chapter\u2019 at the beginning of a string, for example, and can be used\nto identify chapter beginnings in Texinfo source files. The \u2018^\u2019 is known as an anchor, because it anchors the pattern to match\nonly at the beginning of the string.\n\nIt is important to realize that \u2018^\u2019 does not match the beginning of a line (the point right after a \u2018\\n\u2019 newline character)\nembedded in a string. The condition is not true in the following example:\n\nif (\"line1\\nLINE 2\" ~ /^L/) \u2026\n\n\n$\n\nThis is similar to \u2018^\u2019, but it matches only at the end of a string. For example, \u2018p$\u2019 matches a record that ends with a \u2018p\u2019. The\n\u2018$\u2019 is an anchor and does not match the end of a line (the point right before a \u2018\\n\u2019 newline character) embedded in a string. The\ncondition in the following example is not true:\n\nif (\"line1\\nLINE 2\" ~ /1$/) \u2026\n\n\n. (period)\n\nThis matches any single character, including the newline character. For example, \u2018.P\u2019 matches any single character followed by a\n\u2018P\u2019 in a string. Using concatenation, we can make a regular expression such as \u2018U.A\u2019, which matches any three-character sequence\nthat begins with \u2018U\u2019 and ends with \u2018A\u2019.\n\nIn strict POSIX mode (see Command-Line Options [Options.html]), \u2018.\u2019 does not match the NUL character, which is a character with\nall bits equal to zero. Otherwise, NUL is just another character. Other versions of awk may not be able to match the NUL\ncharacter.\n\n[\u2026]\n\nThis is called a bracket expression.16 It matches any one of the characters that are enclosed in the square brackets. For example,\n\u2018[MVX]\u2019 matches any one of the characters \u2018M\u2019, \u2018V\u2019, or \u2018X\u2019 in a string. A full discussion of what can be inside the square\nbrackets of a bracket expression is given in Using Bracket Expressions [Bracket-Expressions.html].\n\n[^\u2026]\n\nThis is a complemented bracket expression. The first character after the \u2018[\u2019 must be a \u2018^\u2019. It matches any characters except those\nin the square brackets. For example, \u2018[^awk]\u2019 matches any character that is not an \u2018a\u2019, \u2018w\u2019, or \u2018k\u2019.\n\n|\n\nThis is the alternation operator and it is used to specify alternatives. The \u2018|\u2019 has the lowest precedence of all the regular\nexpression operators. For example, \u2018^P|[aeiouy]\u2019 matches any string that matches either \u2018^P\u2019 or \u2018[aeiouy]\u2019. This means it matches\nany string that starts with \u2018P\u2019 or contains (anywhere within it) a lowercase English vowel.\n\nThe alternation applies to the largest possible regexps on either side.\n\n(\u2026)\n\nParentheses are used for grouping in regular expressions, as in", "doc_id": "89da9148-5541-4d97-899e-ad0d910bde64", "embedding": null, "doc_hash": "a8f4482621d235567f65f86338fc76876725a74424daf071a39e873bca1f748b", "extra_info": null, "node_info": {"start": 0, "end": 3385, "_node_type": "1"}, "relationships": {"1": "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7", "3": "3faf16e7-a986-4e6e-9269-3e61c170e783"}}, "__type__": "1"}, "3faf16e7-a986-4e6e-9269-3e61c170e783": {"__data__": {"text": "are used for grouping in regular expressions, as in arithmetic. They can be used to concatenate regular expressions\ncontaining the alternation operator, \u2018|\u2019. For example, \u2018@(samp|code)\\{[^}]+\\}\u2019 matches both \u2018@code{foo}\u2019 and \u2018@samp{bar}\u2019. (These\nare Texinfo formatting control sequences. The \u2018+\u2019 is explained further on in this list.)\n\nThe left or opening parenthesis is always a metacharacter; to match one literally, precede it with a backslash. However, the right\nor closing parenthesis is only special when paired with a left parenthesis; an unpaired right parenthesis is (silently) treated as\na regular character.\n\n*\n\nThis symbol means that the preceding regular expression should be repeated as many times as necessary to find a match. For\nexample, \u2018ph*\u2019 applies the \u2018*\u2019 symbol to the preceding \u2018h\u2019 and looks for matches of one \u2018p\u2019 followed by any number of \u2018h\u2019s. This\nalso matches just \u2018p\u2019 if no \u2018h\u2019s are present.\n\nThere are two subtle points to understand about how \u2018*\u2019 works. First, the \u2018*\u2019 applies only to the single preceding regular\nexpression component (e.g., in \u2018ph*\u2019, it applies just to the \u2018h\u2019). To cause \u2018*\u2019 to apply to a larger subexpression, use\nparentheses: \u2018(ph)*\u2019 matches \u2018ph\u2019, \u2018phph\u2019, \u2018phphph\u2019, and so on.\n\nSecond, \u2018*\u2019 finds as many repetitions as possible. If the text to be matched is \u2018phhhhhhhhhhhhhhooey\u2019, \u2018ph*\u2019 matches all of the\n\u2018h\u2019s.\n\n+\n\nThis symbol is similar to \u2018*\u2019, except that the preceding expression must be matched at least once. This means that \u2018wh+y\u2019 would\nmatch \u2018why\u2019 and \u2018whhy\u2019, but not \u2018wy\u2019, whereas \u2018wh*y\u2019 would match all three.\n\n?\n\nThis symbol is similar to \u2018*\u2019, except that the preceding expression can be matched either once or not at all. For example, \u2018fe?d\u2019\nmatches \u2018fed\u2019 and \u2018fd\u2019, but nothing else.\n\n{n} {n,} {n,m}\n\nOne or two numbers inside braces denote an interval expression. If there is one number in the braces, the preceding regexp is\nrepeated n times. If there are two numbers separated by a comma, the preceding regexp is repeated n to m times. If there is one\nnumber followed by a comma, then the preceding regexp is repeated at least n times:\n\nwh{3}y\n\nMatches \u2018whhhy\u2019, but not \u2018why\u2019 or \u2018whhhhy\u2019.\n\nwh{3,5}y\n\nMatches \u2018whhhy\u2019, \u2018whhhhy\u2019, or \u2018whhhhhy\u2019 only.\n\nwh{2,}y\n\nMatches \u2018whhy\u2019, \u2018whhhy\u2019, and so on.\n\nIn regular expressions, the \u2018*\u2019, \u2018+\u2019, and \u2018?\u2019 operators, as well as the braces \u2018{\u2019 and \u2018}\u2019, have the highest precedence, followed\nby concatenation, and finally by \u2018|\u2019. As in arithmetic, parentheses can change how operators are grouped.\n\nIn POSIX awk and gawk, the \u2018*\u2019, \u2018+\u2019, and \u2018?\u2019 operators stand for themselves when there is nothing in the regexp that precedes\nthem. For example, /+/ matches a literal plus sign. However, many other versions of awk treat such a usage as a syntax error.\n\nWhat About The Empty Regexp?\n\nWe describe here an advanced", "doc_id": "3faf16e7-a986-4e6e-9269-3e61c170e783", "embedding": null, "doc_hash": "3ae5a8a656b355802d3d32fe8576bf4cfa6f745ad4ce81bb526a783a4a5a262c", "extra_info": null, "node_info": {"start": 3343, "end": 6151, "_node_type": "1"}, "relationships": {"1": "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7", "2": "89da9148-5541-4d97-899e-ad0d910bde64", "3": "13c9584b-3514-48ec-99f3-346cd3ea072b"}}, "__type__": "1"}, "13c9584b-3514-48ec-99f3-346cd3ea072b": {"__data__": {"text": "About The Empty Regexp?\n\nWe describe here an advanced regexp usage. Feel free to skip it upon first reading.\n\nYou can supply an empty regexp constant (\u2018//\u2019) in all places where a regexp is expected. Is this useful? What does it match?\n\nIt is useful. It matches the (invisible) empty string at the start and end of a string of characters, as well as the empty string\nbetween characters. This is best illustrated with the gsub() function, which makes global substitutions in a string (see\nString-Manipulation Functions [String-Functions.html]). Normal usage of gsub() is like so:\n\n$ awk '\n> BEGIN {\n>     x = \"ABC_CBA\"\n>     gsub(/B/, \"bb\", x)\n>     print x\n> }'\n-| AbbC_CbbA\n\n\nWe can use gsub() to see where the empty strings are that match the empty regexp:\n\n$ awk '\n> BEGIN {\n>     x = \"ABC\"\n>     gsub(//, \"x\", x)\n>     print x\n> }'\n-| xAxBxCx\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(16)\n\nIn other literature, you may see a bracket expression referred to as either a character set, a character class, or a character\nlist.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Some Notes On Interval Expressions [Interval-Expressions.html], Up: Regular Expression Operators [Regexp-Operators.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "13c9584b-3514-48ec-99f3-346cd3ea072b", "embedding": null, "doc_hash": "0febd715cefc8e98d77b4304b437f4d3df40364e2296a6d55454610ef8c8f327", "extra_info": null, "node_info": {"start": 6141, "end": 7589, "_node_type": "1"}, "relationships": {"1": "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7", "2": "3faf16e7-a986-4e6e-9269-3e61c170e783"}}, "__type__": "1"}, "777afc82-577f-40d0-a223-7cc7d78bd18e": {"__data__": {"text": "Next: Using Bracket Expressions [Bracket-Expressions.html], Previous: Escape Sequences [Escape-Sequences.html], Up: Regular\nExpressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.3 REGULAR EXPRESSION OPERATORS\n\nYou can combine regular expressions with special characters, called regular expression operators or metacharacters, to increase\nthe power and versatility of regular expressions.\n\n * Regexp Operators in awk [Regexp-Operator-Details.html]\n * Some Notes On Interval Expressions [Interval-Expressions.html]", "doc_id": "777afc82-577f-40d0-a223-7cc7d78bd18e", "embedding": null, "doc_hash": "3605a1c3d1e79b1001c0856ffae914ef65e90d6f5c08e67a4f4cdc13e8169e7f", "extra_info": null, "node_info": {"start": 0, "end": 679, "_node_type": "1"}, "relationships": {"1": "eebeee3f-45fd-4594-bd3e-17a000d55153"}}, "__type__": "1"}, "1350c3db-fba3-43ec-931d-1ec7acfdcb9d": {"__data__": {"text": "Next: Expressions as Patterns [Expression-Patterns.html], Up: Pattern Elements [Pattern-Overview.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.1 REGULAR EXPRESSIONS AS PATTERNS\n\nRegular expressions are one of the first kinds of patterns presented in this book. This kind of pattern is simply a regexp\nconstant in the pattern part of a rule. Its meaning is \u2018$0 ~ /pattern/\u2019. The pattern matches when the input record matches the\nregexp. For example:\n\n/foo|bar|baz/  { buzzwords++ }\nEND            { print buzzwords, \"buzzwords seen\" }\n", "doc_id": "1350c3db-fba3-43ec-931d-1ec7acfdcb9d", "embedding": null, "doc_hash": "1927387dad45e56304016b34eb032e038f23590e03c37131870d7ab266420429", "extra_info": null, "node_info": {"start": 0, "end": 690, "_node_type": "1"}, "relationships": {"1": "59ef877b-7477-4724-aa2b-2f046742617f"}}, "__type__": "1"}, "b67d7e1b-3a0d-4c46-9885-e01e0c9a3464": {"__data__": {"text": "Previous: Case Sensitivity in Matching [Case_002dsensitivity.html], Up: Regular Expressions [Regexp.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.9 SUMMARY\n\n * Regular expressions describe sets of strings to be matched. In awk, regular expression constants are written enclosed between\n   slashes: /\u2026/.\n * Regexp constants may be used standalone in patterns and in conditional expressions, or as part of matching expressions using\n   the \u2018~\u2019 and \u2018!~\u2019 operators.\n * Escape sequences let you represent nonprintable characters and also let you represent regexp metacharacters as literal\n   characters to be matched.\n * Regexp operators provide grouping, alternation, and repetition.\n * Bracket expressions give you a shorthand for specifying sets of characters that can match at a particular point in a regexp.\n   Within bracket expressions, POSIX character classes let you specify certain groups of characters in a locale-independent\n   fashion.\n * Regular expressions match the leftmost longest text in the string being matched. This matters for cases where you need to know\n   the extent of the match, such as for text substitution and when the record separator is a regexp.\n * Matching expressions may use dynamic regexps (i.e., string values treated as regular expressions).\n * gawk\u2019s IGNORECASE variable lets you control the case sensitivity of regexp matching. In other awk versions, use tolower() or\n   toupper().", "doc_id": "b67d7e1b-3a0d-4c46-9885-e01e0c9a3464", "embedding": null, "doc_hash": "cbef0f0b9e718ba56391b802f894b2ffd1d45ee5e91299aa76d44c49e1247728", "extra_info": null, "node_info": {"start": 0, "end": 1573, "_node_type": "1"}, "relationships": {"1": "3dede866-7084-459a-958f-af077d8891f2"}}, "__type__": "1"}, "298ba775-6e67-4790-b7bf-17a49037d70d": {"__data__": {"text": "Next: Escape Sequences [Escape-Sequences.html], Up: Regular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3.1 HOW TO USE REGULAR EXPRESSIONS\n\nA regular expression can be used as a pattern by enclosing it in slashes. Then the regular expression is tested against the entire\ntext of each record. (Normally, it only needs to match some part of the text in order to succeed.) For example, the following\nprints the second field of each record where the string \u2018li\u2019 appears anywhere in the record:\n\n$ awk '/li/ { print $2 }' mail-list\n-| 555-5553\n-| 555-0542\n-| 555-6699\n-| 555-3430\n\n\nRegular expressions can also be used in matching expressions. These expressions allow you to specify the string to match against;\nit need not be the entire current input record. The two operators \u2018~\u2019 and \u2018!~\u2019 perform regular expression comparisons. Expressions\nusing these operators can be used as patterns, or in if, while, for, and do statements. (See Control Statements in Actions\n[Statements.html].) For example, the following is true if the expression exp (taken as a string) matches regexp:\n\nexp ~ /regexp/\n\n\nThis example matches, or selects, all input records with the uppercase letter \u2018J\u2019 somewhere in the first field:\n\n$ awk '$1 ~ /J/' inventory-shipped\n-| Jan  13  25  15 115\n-| Jun  31  42  75 492\n-| Jul  24  34  67 436\n-| Jan  21  36  64 620\n\n\nSo does this:\n\nawk '{ if ($1 ~ /J/) print }' inventory-shipped\n\n\nThis next example is true if the expression exp (taken as a character string) does not match regexp:\n\nexp !~ /regexp/\n\n\nThe following example matches, or selects, all input records whose first field does not contain the uppercase letter \u2018J\u2019:\n\n$ awk '$1 !~ /J/' inventory-shipped\n-| Feb  15  32  24 226\n-| Mar  15  24  34 228\n-| Apr  31  52  63 420\n-| May  16  34  29 208\n\u2026\n\n\nWhen a regexp is enclosed in slashes, such as /foo/, we call it a regexp constant, much like 5.27 is a numeric constant and \"foo\"\nis a string constant.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Escape Sequences [Escape-Sequences.html], Up: Regular Expressions [Regexp.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "298ba775-6e67-4790-b7bf-17a49037d70d", "embedding": null, "doc_hash": "2376bbba118d63d9692714341fd1d140e846b96059777de9e424f7ebcf47d922", "extra_info": null, "node_info": {"start": 0, "end": 2378, "_node_type": "1"}, "relationships": {"1": "915e33cb-caef-4157-bb5d-0d063abe139f"}}, "__type__": "1"}, "02d7d03d-30f1-4004-af90-54c55b1b4ba5": {"__data__": {"text": "Next: Reading Input Files [Reading-Files.html], Previous: Running awk and gawk [Invoking-Gawk.html], Up: General Introduction\n[index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n3 REGULAR EXPRESSIONS\n\nA regular expression, or regexp, is a way of describing a set of strings. Because regular expressions are such a fundamental part\nof awk programming, their format and use deserve a separate chapter.\n\nA regular expression enclosed in slashes (\u2018/\u2019) is an awk pattern that matches every input record whose text belongs to that set.\nThe simplest regular expression is a sequence of letters, numbers, or both. Such a regexp matches any string that contains that\nsequence. Thus, the regexp \u2018foo\u2019 matches any string containing \u2018foo\u2019. Thus, the pattern /foo/ matches any input record containing\nthe three adjacent characters \u2018foo\u2019 anywhere in the record. Other kinds of regexps let you specify more complicated classes of\nstrings.\n\nInitially, the examples in this chapter are simple. As we explain more about how regular expressions work, we present more\ncomplicated instances.\n\n * How to Use Regular Expressions [Regexp-Usage.html]\n * Escape Sequences [Escape-Sequences.html]\n * Regular Expression Operators [Regexp-Operators.html]\n * Using Bracket Expressions [Bracket-Expressions.html]\n * How Much Text Matches? [Leftmost-Longest.html]\n * Using Dynamic Regexps [Computed-Regexps.html]\n * gawk-Specific Regexp Operators [GNU-Regexp-Operators.html]\n * Case Sensitivity in Matching [Case_002dsensitivity.html]\n * Summary [Regexp-Summary.html]", "doc_id": "02d7d03d-30f1-4004-af90-54c55b1b4ba5", "embedding": null, "doc_hash": "87be9fd599effb472c6cee08aa89a7b26969c3c93aa84af0e89cfd289ec1435f", "extra_info": null, "node_info": {"start": 0, "end": 1689, "_node_type": "1"}, "relationships": {"1": "1582a79f-62c7-4e66-bafb-b776837a288f"}}, "__type__": "1"}, "dab633e8-2dd9-49f2-9323-15dd7d1d4b1a": {"__data__": {"text": "Next: Printing Messages [Printing-Messages.html], Previous: Managing MPFR and GMP Values\n[API-Ownership-of-MPFR-and-GMP-Values.html], Up: API Description [Extension-API-Description.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6 REGISTRATION FUNCTIONS\n\nThis section describes the API functions for registering parts of your extension with gawk.\n\n * Registering An Extension Function [Extension-Functions.html]\n * Registering An Exit Callback Function [Exit-Callback-Functions.html]\n * Registering An Extension Version String [Extension-Version-String.html]\n * Customized Input Parsers [Input-Parsers.html]\n * Customized Output Wrappers [Output-Wrappers.html]\n * Customized Two-way Processors [Two_002dway-processors.html]", "doc_id": "dab633e8-2dd9-49f2-9323-15dd7d1d4b1a", "embedding": null, "doc_hash": "de3559973456c0889a76b5dd1b561ea26b8fd96e16c66791b157c26f8bdc8bd6", "extra_info": null, "node_info": {"start": 0, "end": 878, "_node_type": "1"}, "relationships": {"1": "efc3d9d0-45a2-4528-8f39-1826c98b6800"}}, "__type__": "1"}, "f3773539-b42d-4648-9fea-51e10e47b4c2": {"__data__": {"text": "Next: Accessing and Updating Parameters [Accessing-Parameters.html], Previous: Updating ERRNO [Updating-ERRNO.html], Up: API\nDescription [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.9 REQUESTING VALUES\n\nAll of the functions that return values from gawk work in the same way. You pass in an awk_valtype_t value to indicate what kind\nof value you expect. If the actual value matches what you requested, the function returns true and fills in the awk_value_t\nresult. Otherwise, the function returns false, and the val_type member indicates the type of the actual value. You may then print\nan error message or reissue the request for the actual value type, as appropriate. This behavior is summarized in Table 17.2.\n\nType of Actual Value\n\nStringStrnumNumberRegexBoolArrayUndefined StringStringStringStringStringStringfalsefalse\nStrnumfalseStrnumStrnumfalsefalsefalsefalse NumberNumberNumberNumberfalseNumberfalsefalse\nTypeRegexfalsefalsefalseRegexfalsefalsefalse RequestedBoolfalsefalsefalsefalseBoolfalsefalse\nArrayfalsefalsefalsefalsefalseArrayfalse ScalarScalarScalarScalarScalarScalarfalsefalse\nUndefinedStringStrnumNumberRegexBoolArrayUndefined Value cookiefalsefalsefalsefalsefalsefalsefalse\n\nTable 17.2: API value types returned", "doc_id": "f3773539-b42d-4648-9fea-51e10e47b4c2", "embedding": null, "doc_hash": "fed3cafd7ae8cc1e481bc1be0735ddb154e1e7d8ba217b724bc6b6fe69e5c9f7", "extra_info": null, "node_info": {"start": 0, "end": 1416, "_node_type": "1"}, "relationships": {"1": "f4203622-bd7f-44ac-bbf5-620addc160ab"}}, "__type__": "1"}, "28844de7-23bc-4ba1-939a-5f2080c493f0": {"__data__": {"text": "Next: Directories on the Command Line [Command_002dline-directories.html], Previous: Reading Input with a Timeout\n[Read-Timeout.html], Up: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.12 RETRYING READS AFTER CERTAIN INPUT ERRORS\n\nThis section describes a feature that is specific to gawk.\n\nWhen gawk encounters an error while reading input, by default getline returns \u22121, and subsequent attempts to read from that file\nresult in an end-of-file indication. However, you may optionally instruct gawk to allow I/O to be retried when certain errors are\nencountered by setting a special element in the PROCINFO array (see Built-in Variables That Convey Information\n[Auto_002dset.html]):\n\nPROCINFO[\"input_name\", \"RETRY\"] = 1\n\n\nWhen this element exists, gawk checks the value of the system (C language) errno variable when an I/O error occurs. If errno\nindicates a subsequent I/O attempt may succeed, getline instead returns \u22122 and further calls to getline may succeed. This applies\nto the errno values EAGAIN, EWOULDBLOCK, EINTR, or ETIMEDOUT.\n\nThis feature is useful in conjunction with PROCINFO[\"input_name\", \"READ_TIMEOUT\"] or situations where a file descriptor has been\nconfigured to behave in a non-blocking fashion.", "doc_id": "28844de7-23bc-4ba1-939a-5f2080c493f0", "embedding": null, "doc_hash": "1c46c9239d9cea5fea26edfbb93638725515fd6173682fc4a4e2311f15eb5d4f", "extra_info": null, "node_info": {"start": 0, "end": 1406, "_node_type": "1"}, "relationships": {"1": "4a1764fd-db95-49cb-af19-37a28c32cb03"}}, "__type__": "1"}, "a6685c54-07fb-4ed0-a912-a2407b62d4ad": {"__data__": {"text": "Next: Functions and Their Effects on Variable Typing [Dynamic-Typing.html], Previous: Calling User-Defined Functions\n[Function-Calling.html], Up: User-Defined Functions [User_002ddefined.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.4 THE RETURN STATEMENT\n\nAs seen in several earlier examples, the body of a user-defined function can contain a return statement. This statement returns\ncontrol to the calling part of the awk program. It can also be used to return a value for use in the rest of the awk program. It\nlooks like this:\n\nreturn [expression]\n\n\nThe expression part is optional. Due most likely to an oversight, POSIX does not define what the return value is if you omit the\nexpression. Technically speaking, this makes the returned value undefined, and therefore, unpredictable. In practice, though, all\nversions of awk simply return the null string, which acts like zero if used in a numeric context.\n\nA return statement without an expression is assumed at the end of every function definition. So, if control reaches the end of the\nfunction body, then technically the function returns an unpredictable value. In practice, it returns the empty string. awk does\nnot warn you if you use the return value of such a function.\n\nSometimes, you want to write a function for what it does, not for what it returns. Such a function corresponds to a void function\nin C, C++, or Java, or to a procedure in Ada. Thus, it may be appropriate to not return any value; simply bear in mind that you\nshould not be using the return value of such a function.\n\nThe following is an example of a user-defined function that returns a value for the largest number among the elements of an array:\n\nfunction maxelt(vec,   i, ret)\n{\n     for (i in vec) {\n          if (ret == \"\" || vec[i] > ret)\n               ret = vec[i]\n     }\n     return ret\n}\n\n\nYou call maxelt() with one argument, which is an array name. The local variables i and ret are not intended to be arguments; there\nis nothing to stop you from passing more than one argument to maxelt() but the results would be strange. The extra space before i\nin the function parameter list indicates that i and ret are local variables. You should follow this convention when defining\nfunctions.\n\nThe following program uses the maxelt() function. It loads an array, calls maxelt(), and then reports the maximum number in that\narray:\n\nfunction maxelt(vec,   i, ret)\n{\n     for (i in vec) {\n          if (ret == \"\" || vec[i] > ret)\n               ret = vec[i]\n     }\n     return ret\n}\n\n\n\n# Load all fields of each record into nums.\n{\n     for(i = 1; i <= NF; i++)\n          nums[NR, i] = $i\n}\n\n\n\n\nEND {\n     print maxelt(nums)\n}\n\n\nGiven the following input:\n\n 1 5 23 8 16\n44 3 5 2 8 26\n256 291 1396 2962 100\n-6 467 998 1101\n99385 11 0 225\n\n\nthe program reports (predictably) that 99,385 is the largest value in the array.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Functions and Their Effects on Variable Typing [Dynamic-Typing.html], Previous: Calling User-Defined Functions\n[Function-Calling.html], Up: User-Defined Functions [User_002ddefined.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "a6685c54-07fb-4ed0-a912-a2407b62d4ad", "embedding": null, "doc_hash": "14298b9c3a692a85c68beb8f7bcea0e68db640c7932b15f1d9a0a8708d13d30d", "extra_info": null, "node_info": {"start": 0, "end": 3393, "_node_type": "1"}, "relationships": {"1": "38237853-26ff-4466-a131-3d3202dabb3e"}}, "__type__": "1"}, "0073a059-442c-4c1c-8841-dcb0f3581e9a": {"__data__": {"text": "Next: Checking for Readable Data files [File-Checking.html], Previous: Noting Data file Boundaries [Filetrans-Function.html], Up:\nData file Management [Data-File-Management.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.3.2 REREADING THE CURRENT FILE\n\nAnother request for a new built-in function was for a function that would make it possible to reread the current file. The\nrequesting user didn\u2019t want to have to use getline (see Explicit Input with getline [Getline.html]) inside a loop.\n\nHowever, as long as you are not in the END rule, it is quite easy to arrange to immediately close the current input file and then\nstart over with it from the top. For lack of a better name, we\u2019ll call the function rewind():\n\n# rewind.awk --- rewind the current file and start over\n\nfunction rewind(    i)\n{\n    # shift remaining arguments up\n    for (i = ARGC; i > ARGIND; i--)\n        ARGV[i] = ARGV[i-1]\n\n    # make sure gawk knows to keep going\n    ARGC++\n\n    # make current file next to get done\n    ARGV[ARGIND+1] = FILENAME\n\n    # do it\n    nextfile\n}\n\n\nThe rewind() function relies on the ARGIND variable (see Built-in Variables That Convey Information [Auto_002dset.html]), which is\nspecific to gawk. It also relies on the nextfile keyword (see The nextfile Statement [Nextfile-Statement.html]). Because of this,\nyou should not call it from an ENDFILE rule. (This isn\u2019t necessary anyway, because gawk goes to the next file as soon as an\nENDFILE rule finishes!)\n\nYou need to be careful calling rewind(). You can end up causing infinite recursion if you don\u2019t pay attention. Here is an example\nuse:\n\n$ cat data\n-| a\n-| b\n-| c\n-| d\n-| e\n\n$ cat test.awk\n-| FNR == 3 && ! rewound {\n-|    rewound = 1\n-|    rewind()\n-| }\n-|\n-| { print FILENAME, FNR, $0 }\n\n$ gawk -f rewind.awk -f test.awk data \n-| data 1 a\n-| data 2 b\n-| data 1 a\n-| data 2 b\n-| data 3 c\n\n\n-| data 4 d\n-| data 5 e\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Checking for Readable Data files [File-Checking.html], Previous: Noting Data file Boundaries [Filetrans-Function.html], Up:\nData file Management [Data-File-Management.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "0073a059-442c-4c1c-8841-dcb0f3581e9a", "embedding": null, "doc_hash": "171d4b2888b686f6729622ea8415a4706511e10c51854218b890aba655597986", "extra_info": null, "node_info": {"start": 0, "end": 2400, "_node_type": "1"}, "relationships": {"1": "d88cafe9-2ffc-43ee-a55b-11152e2dd684"}}, "__type__": "1"}, "eb8413a2-2299-432c-a99b-7be0e2814f5b": {"__data__": {"text": "Next: The Cliff Random Number Generator [Cliff-Random-Function.html], Previous: Assertions [Assert-Function.html], Up: General\nProgramming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.3 ROUNDING NUMBERS\n\nThe way printf and sprintf() (see Using printf Statements for Fancier Printing [Printf.html]) perform rounding often depends upon\nthe system\u2019s C sprintf() subroutine. On many machines, sprintf() rounding is unbiased, which means it doesn\u2019t always round a\ntrailing .5 up, contrary to naive expectations. In unbiased rounding, .5 rounds to even, rather than always up, so 1.5 rounds to 2\nbut 4.5 rounds to 4. This means that if you are using a format that does rounding (e.g., \"%.0f\"), you should check what your\nsystem does. The following function does traditional rounding; it might be useful if your awk\u2019s printf does unbiased rounding:\n\n# round.awk --- do normal rounding\n\nfunction round(x,   ival, aval, fraction)\n{\n   ival = int(x)    # integer part, int() truncates\n\n   # see if fractional part\n   if (ival == x)   # no fraction\n      return ival   # ensure no decimals\n\n   if (x < 0) {\n      aval = -x     # absolute value\n      ival = int(aval)\n      fraction = aval - ival\n      if (fraction >= .5)\n         return int(x) - 1   # -2.5 --> -3\n      else\n         return int(x)       # -2.3 --> -2\n   } else {\n      fraction = x - ival\n      if (fraction >= .5)\n         return ival + 1\n      else\n         return ival\n   }\n}\n\n\n# test harness\n# { print $0, round($0) }\n", "doc_id": "eb8413a2-2299-432c-a99b-7be0e2814f5b", "embedding": null, "doc_hash": "054d0c0a191ff926f91c40faa3a45959915b9c5132d932b5599e538255dfb717", "extra_info": null, "node_info": {"start": 0, "end": 1656, "_node_type": "1"}, "relationships": {"1": "874d48fb-ac08-43fd-aea4-07c9498e6bca"}}, "__type__": "1"}, "38fba293-73ef-49b7-a748-03d8b9bf28b0": {"__data__": {"text": "Next: Reinventing Wheels for Fun and Profit [Clones.html], Up: Practical awk Programs [Sample-Programs.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n11.1 RUNNING THE EXAMPLE PROGRAMS\n\nTo run a given program, you would typically do something like this:\n\nawk -f program -- options files\n\n\nHere, program is the name of the awk program (such as cut.awk), options are any command-line options for the program that start\nwith a \u2018-\u2019, and files are the actual data files.\n\nIf your system supports the \u2018#!\u2019 executable interpreter mechanism (see Executable awk Programs [Executable-Scripts.html]), you can\ninstead run your program directly:\n\ncut.awk -c1-8 myfiles > results\n\n\nIf your awk is not gawk, you may instead need to use this:\n\ncut.awk -- -c1-8 myfiles > results\n", "doc_id": "38fba293-73ef-49b7-a748-03d8b9bf28b0", "embedding": null, "doc_hash": "d1ff962b518f03feec27e8cae90776c6581d4809dfe98e0a590c117cf1559475", "extra_info": null, "node_info": {"start": 0, "end": 914, "_node_type": "1"}, "relationships": {"1": "7ea3cb17-46f7-4e1e-8bc4-39eef0c4a76f"}}, "__type__": "1"}, "5e75468b-ef8a-414c-b9f6-0ea312199010": {"__data__": {"text": "Next: Data files for the Examples [Sample-Data-Files.html], Up: Getting Started with awk [Getting-Started.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.1 HOW TO RUN AWK PROGRAMS\n\nThere are several ways to run an awk program. If the program is short, it is easiest to include it in the command that runs awk,\nlike this:\n\nawk 'program' input-file1 input-file2 \u2026\n\n\nWhen the program is long, it is usually more convenient to put it in a file and run it with a command like this:\n\nawk -f program-file input-file1 input-file2 \u2026\n\n\nThis section discusses both mechanisms, along with several variations of each.\n\n * One-Shot Throwaway awk Programs [One_002dshot.html]\n * Running awk Without Input Files [Read-Terminal.html]\n * Running Long Programs [Long.html]\n * Executable awk Programs [Executable-Scripts.html]\n * Comments in awk Programs [Comments.html]\n * Shell Quoting Issues [Quoting.html]", "doc_id": "5e75468b-ef8a-414c-b9f6-0ea312199010", "embedding": null, "doc_hash": "f59582097faf8a927c1f64a2e52204c5ceec0802684992e49bcd6490631dd8e5", "extra_info": null, "node_info": {"start": 0, "end": 1042, "_node_type": "1"}, "relationships": {"1": "b950066f-e175-453c-9307-12f7f4957de1"}}, "__type__": "1"}, "678d5340-180b-4d84-b14b-f8d611bc28b0": {"__data__": {"text": "Next: Changes Between SVR4 and POSIX awk [POSIX.html], Previous: Major Changes Between V7 and SVR3.1 [V7_002fSVR3_002e1.html], Up:\nThe Evolution of the awk Language [Language-History.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.2 CHANGES BETWEEN SVR3.1 AND SVR4\n\nThe System V Release 4 (1989) version of Unix awk added these features (some of which originated in gawk):\n\n * The ENVIRON array (see Predefined Variables [Built_002din-Variables.html])\n * Multiple -f options on the command line (see Command-Line Options [Options.html])\n * The -v option for assigning variables before program execution begins (see Command-Line Options [Options.html])\n * The -- signal for terminating command-line options\n * The \u2018\\a\u2019, \u2018\\v\u2019, and \u2018\\x\u2019 escape sequences (see Escape Sequences [Escape-Sequences.html])\n * A defined return value for the srand() built-in function (see Numeric Functions [Numeric-Functions.html])\n * The toupper() and tolower() built-in string functions for case translation (see String-Manipulation Functions\n   [String-Functions.html])\n * A cleaner specification for the \u2018%c\u2019 format-control letter in the printf function (see Format-Control Letters\n   [Control-Letters.html])\n * The ability to dynamically pass the field width and precision (\"%*.*d\") in the argument list of printf and sprintf() (see\n   Format-Control Letters [Control-Letters.html])\n * The use of regexp constants, such as /foo/, as expressions, where they are equivalent to using the matching operator, as in \u2018$0\n   ~ /foo/\u2019 (see Using Regular Expression Constants [Using-Constant-Regexps.html])\n * Processing of escape sequences inside command-line variable assignments (see Assigning Variables on the Command Line\n   [Assignment-Options.html])", "doc_id": "678d5340-180b-4d84-b14b-f8d611bc28b0", "embedding": null, "doc_hash": "19edc1a52fe4c5983f36b19e5428aca8af8d99a96b438a1b3d4dd4249cb85e40", "extra_info": null, "node_info": {"start": 0, "end": 1879, "_node_type": "1"}, "relationships": {"1": "1ab9ace6-f28b-45be-bf3c-ad69b9f23c6f"}}, "__type__": "1"}, "ba07fd4f-3b11-44ea-9846-8336d71fca7e": {"__data__": {"text": "Next: Some Simple Examples [Very-Simple.html], Previous: How to Run awk Programs [Running-gawk.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.2 DATA FILES FOR THE EXAMPLES\n\nMany of the examples in this Web page take their input from two sample data files. The first, mail-list, represents a list of\npeoples\u2019 names together with their email addresses and information about those people. The second data file, called\ninventory-shipped, contains information about monthly shipments. In both files, each line is considered to be one record.\n\nIn mail-list, each record contains the name of a person, his/her phone number, his/her email address, and a code for his/her\nrelationship with the author of the list. The columns are aligned using spaces. An \u2018A\u2019 in the last column means that the person is\nan acquaintance. An \u2018F\u2019 in the last column means that the person is a friend. An \u2018R\u2019 means that the person is a relative:\n\nAmelia       555-5553     amelia.zodiacusque@gmail.com    F\nAnthony      555-3412     anthony.asserturo@hotmail.com   A\nBecky        555-7685     becky.algebrarum@gmail.com      A\nBill         555-1675     bill.drowning@hotmail.com       A\nBroderick    555-0542     broderick.aliquotiens@yahoo.com R\nCamilla      555-2912     camilla.infusarum@skynet.be     R\nFabius       555-1234     fabius.undevicesimus@ucb.edu    F\nJulie        555-6699     julie.perscrutabor@skeeve.com   F\nMartin       555-6480     martin.codicibus@hotmail.com    A\nSamuel       555-3430     samuel.lanceolis@shu.edu        A\nJean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R\n\n\nThe data file inventory-shipped represents information about shipments during the year. Each record contains the month, the number\nof green crates shipped, the number of red boxes shipped, the number of orange bags shipped, and the number of blue packages\nshipped, respectively. There are 16 entries, covering the 12 months of last year and the first four months of the current year. An\nempty line separates the data for the two years:\n\nJan  13  25  15 115\nFeb  15  32  24 226\nMar  15  24  34 228\nApr  31  52  63 420\nMay  16  34  29 208\nJun  31  42  75 492\nJul  24  34  67 436\nAug  15  34  47 316\nSep  13  55  37 277\nOct  29  54  68 525\nNov  20  87  82 577\nDec  17  35  61 401\n\nJan  21  36  64 620\nFeb  26  58  80 652\nMar  24  75  70 495\nApr  21  70  74 514\n\n\nThe sample files are included in the gawk distribution, in the directory awklib/eg/data.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Some Simple Examples [Very-Simple.html], Previous: How to Run awk Programs [Running-gawk.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "ba07fd4f-3b11-44ea-9846-8336d71fca7e", "embedding": null, "doc_hash": "7a2e125bd4ba43d0912eb4580f5aac205e90fb145f4ca66a1e61f41aaf5deb8a", "extra_info": null, "node_info": {"start": 0, "end": 2980, "_node_type": "1"}, "relationships": {"1": "1f73cf19-45e9-4454-b920-6ee849dee333"}}, "__type__": "1"}, "726cd99e-6f99-497d-a1b0-af0ced98a9aa": {"__data__": {"text": "Next: Main Debugger Commands [List-of-Debugger-Commands.html], Previous: Introduction to the gawk Debugger [Debugging.html], Up:\nDebugging awk Programs [Debugger.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n14.2 SAMPLE GAWK DEBUGGING SESSION\n\nIn order to illustrate the use of gawk as a debugger, let\u2019s look at a sample debugging session. We will use the awk implementation\nof the POSIX uniq command presented earlier (see Printing Nonduplicated Lines of Text [Uniq-Program.html]) as our example.\n\n * How to Start the Debugger [Debugger-Invocation.html]\n * Finding the Bug [Finding-The-Bug.html]", "doc_id": "726cd99e-6f99-497d-a1b0-af0ced98a9aa", "embedding": null, "doc_hash": "000cf06e0524d9ac1f081c1320150495a90617774165635d9b2b35267c34823d", "extra_info": null, "node_info": {"start": 0, "end": 749, "_node_type": "1"}, "relationships": {"1": "e48ca6d4-11cc-4818-92fd-b1fd4c422dd9"}}, "__type__": "1"}, "e9ef314f-576c-4e39-9cb5-2e99231690f2": {"__data__": {"text": "Next: Advanced Features of gawk [Advanced-Features.html], Previous: A Library of awk Functions [Library-Functions.html], Up:\nGeneral Introduction [index.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n11 PRACTICAL AWK PROGRAMS\n\nA Library of awk Functions [Library-Functions.html], presents the idea that reading programs in a language contributes to learning\nthat language. This chapter continues that theme, presenting a potpourri of awk programs for your reading enjoyment. There are\nthree sections. The first describes how to run the programs presented in this chapter.\n\nThe second presents awk versions of several common POSIX utilities. These are programs that you are hopefully already familiar\nwith, and therefore whose problems are understood. By reimplementing these programs in awk, you can focus on the awk-related\naspects of solving the programming problems.\n\nThe third is a grab bag of interesting programs. These solve a number of different data-manipulation and management problems. Many\nof the programs are short, which emphasizes awk\u2019s ability to do a lot in just a few lines of code.\n\nMany of these programs use library functions presented in A Library of awk Functions [Library-Functions.html].\n\n * Running the Example Programs [Running-Examples.html]\n * Reinventing Wheels for Fun and Profit [Clones.html]\n * A Grab Bag of awk Programs [Miscellaneous-Programs.html]\n * Summary [Programs-Summary.html]\n * Exercises [Programs-Exercises.html]", "doc_id": "e9ef314f-576c-4e39-9cb5-2e99231690f2", "embedding": null, "doc_hash": "13e22cb81f614cc8f3184f1951431b2b20be158f06b087b6c3d4092fe0128e66", "extra_info": null, "node_info": {"start": 0, "end": 1610, "_node_type": "1"}, "relationships": {"1": "68093135-cfb8-4f5d-b07a-e12794d36145"}}, "__type__": "1"}, "c94fd1cf-c01c-4b07-a239-f3fed8e2851e": {"__data__": {"text": "Next: Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html], Up: Constant Expressions [Constants.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.1.1 NUMERIC AND STRING CONSTANTS\n\nA numeric constant stands for a number. This number can be an integer, a decimal fraction, or a number in scientific (exponential)\nnotation.30 Here are some examples of numeric constants that all have the same value:\n\n105\n1.05e+2\n1050e-1\n\n\nA string constant consists of a sequence of characters enclosed in double quotation marks. For example:\n\n\"parrot\"\n\n\nrepresents the string whose contents are \u2018parrot\u2019. Strings in gawk can be of any length, and they can contain any of the possible\neight-bit ASCII characters, including ASCII NUL (character code zero). Other awk implementations may have difficulty with some\ncharacter codes.\n\nSome languages allow you to continue long strings across multiple lines by ending the line with a backslash. For example in C:\n\n#include <stdio.h>\n\nint main()\n{\n    printf(\"hello, \\\nworld\\n\");\n    return 0;\n}\n\n\nIn such a case, the C compiler removes both the backslash and the newline, producing a string as if it had been typed \u2018\"hello,\nworld\\n\"\u2019. This is useful when a single string needs to contain a large amount of text.\n\nThe POSIX standard says explicitly that newlines are not allowed inside string constants. And indeed, all awk implementations\nreport an error if you try to do so. For example:\n\n$ gawk 'BEGIN { print \"hello, \n> world\" }'\n-| gawk: cmd. line:1: BEGIN { print \"hello,\n-| gawk: cmd. line:1:               ^ unterminated string\n-| gawk: cmd. line:1: BEGIN { print \"hello,\n-| gawk: cmd. line:1:               ^ syntax error\n\n\nAlthough POSIX doesn\u2019t define what happens if you use an escaped newline, as in the previous C example, all known versions of awk\nallow you to do so. Unfortunately, what each one does with such a string varies. (d.c.) gawk, mawk, and the OpenSolaris POSIX awk\n(see Other Freely Available awk Implementations [Other-Versions.html]) elide the backslash and newline, as in C:\n\n$ gawk 'BEGIN { print \"hello, \\\n> world\" }'\n-| hello, world\n\n\nIn POSIX mode (see Command-Line Options [Options.html]), gawk does not allow escaped newlines. Otherwise, it behaves as just\ndescribed.\n\nBWK awk and BusyBox awk remove the backslash but leave the newline intact, as part of the string:\n\n$ nawk 'BEGIN { print \"hello, \\\n> world\" }'\n-| hello,\n-| world\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(30)\n\nThe internal representation of all numbers, including integers, uses double-precision floating-point numbers. On most modern\nsystems, these are in IEEE 754 standard format. See Arithmetic and Arbitrary-Precision Arithmetic with gawk\n[Arbitrary-Precision-Arithmetic.html], for much more information.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html], Up: Constant Expressions [Constants.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c94fd1cf-c01c-4b07-a239-f3fed8e2851e", "embedding": null, "doc_hash": "24315bb6643a02eadf4c995522fa2a951d588b0cbb871b126b5b9be9cbf2ca5f", "extra_info": null, "node_info": {"start": 0, "end": 3301, "_node_type": "1"}, "relationships": {"1": "150a5700-15b4-43d5-b1ab-15ac377fb379"}}, "__type__": "1"}, "94eebd20-ca4d-4acc-ac91-7f7b74d93dc6": {"__data__": {"text": "Next: Using Predefined Array Scanning Orders with gawk [Controlling-Scanning.html], Previous: Basic Array Example\n[Array-Example.html], Up: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n8.1.5 SCANNING ALL ELEMENTS OF AN ARRAY\n\nIn programs that use arrays, it is often necessary to use a loop that executes once for each element of an array. In other\nlanguages, where arrays are contiguous and indices are limited to nonnegative integers, this is easy: all the valid indices can be\nfound by counting from the lowest index up to the highest. This technique won\u2019t do the job in awk, because any number or string\ncan be an array index. So awk has a special kind of for statement for scanning an array:\n\nfor (var in array)\n    body\n\n\nThis loop executes body once for each index in array that the program has previously used, with the variable var set to that\nindex.\n\nThe following program uses this form of the for statement. The first rule scans the input records and notes which words appear (at\nleast once) in the input, by storing a one into the array used with the word as the index. The second rule scans the elements of\nused to find all the distinct words that appear in the input. It prints each word that is more than 10 characters long and also\nprints the number of such words. See String-Manipulation Functions [String-Functions.html] for more information on the built-in\nfunction length().\n\n# Record a 1 for each word that is used at least once\n{\n    for (i = 1; i <= NF; i++)\n        used[$i] = 1\n}\n\n\n\n\n\n\n# Find number of distinct words more than 10 characters long\nEND {\n    for (x in used) {\n        if (length(x) > 10) {\n            ++num_long_words\n            print x\n        }\n    }\n    print num_long_words, \"words longer than 10 characters\"\n}\n\n\nSee Generating Word-Usage Counts [Word-Sorting.html] for a more detailed example of this type.\n\nThe order in which elements of the array are accessed by this statement is determined by the internal arrangement of the array\nelements within awk and in standard awk cannot be controlled or changed. This can lead to problems if new elements are added to\narray by statements in the loop body; it is not predictable whether the for loop will reach them. Similarly, changing var inside\nthe loop may produce strange results. It is best to avoid such things.\n\nAs a point of information, gawk sets up the list of elements to be iterated over before the loop starts, and does not change it.\nBut not all awk versions do so. Consider this program, named loopcheck.awk:\n\nBEGIN {\n    a[\"here\"] = \"here\"\n    a[\"is\"] = \"is\"\n    a[\"a\"] = \"a\"\n    a[\"loop\"] = \"loop\"\n    for (i in a) {\n        j++\n        a[j] = j\n        print i\n    }\n}\n\n\nHere is what happens when run with gawk (and mawk):\n\n$ gawk -f loopcheck.awk\n-| here\n-| loop\n-| a\n-| is\n\n\nContrast this to BWK awk:\n\n$ nawk -f loopcheck.awk\n-| loop\n-| here\n-| is\n-| a\n-| 1\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using Predefined Array Scanning Orders with gawk [Controlling-Scanning.html], Previous: Basic Array Example\n[Array-Example.html], Up: The Basics of Arrays [Array-Basics.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "94eebd20-ca4d-4acc-ac91-7f7b74d93dc6", "embedding": null, "doc_hash": "ddb373a736275e38536d1447790c30db36724c4389884ec4b404821b0951ef62", "extra_info": null, "node_info": {"start": 0, "end": 3432, "_node_type": "1"}, "relationships": {"1": "44fc390f-39bf-4da3-9de9-bda7973b9e54"}}, "__type__": "1"}, "210939bb-803e-419c-8925-fddba8b02bcb": {"__data__": {"text": "Next: Setting the Rounding Mode [Setting-the-rounding-mode.html], Previous: Try a Few Extra Bits of Precision and Rounding\n[Try-To-Round.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.4 SETTING THE PRECISION\n\ngawk uses a global working precision; it does not keep track of the precision or accuracy of individual numbers. Performing an\narithmetic operation or calling a built-in function rounds the result to the current working precision. The default working\nprecision is 53 bits, which you can modify using the predefined variable PREC. You can also set the value to one of the predefined\ncase-insensitive strings shown in Table 16.4, to emulate an IEEE 754 binary format.\n\nPRECIEEE 754 binary format \"half\"16-bit half-precision \"single\"Basic 32-bit single precision \"double\"Basic 64-bit double precision\n\"quad\"Basic 128-bit quadruple precision \"oct\"256-bit octuple precision\n\nTable 16.4: Predefined precision strings for PREC\n\nThe following example illustrates the effects of changing precision on arithmetic operations:\n\n$ gawk -M -v PREC=100 'BEGIN { x = 1.0e-400; print x + 0\n>   PREC = \"double\"; print x + 0 }'\n-| 1e-400\n-| 0\n\n\n> CAUTION: Be wary of floating-point constants! When reading a floating-point constant from program source code, gawk uses the\n> default precision (that of a C double), unless overridden by an assignment to the special variable PREC on the command line, to\n> store it internally as an MPFR number. Changing the precision using PREC in the program text does not change the precision of a\n> constant.\n> \n> If you need to represent a floating-point constant at a higher precision than the default and cannot use a command-line\n> assignment to PREC, you should either specify the constant as a string, or as a rational number, whenever possible. The\n> following example illustrates the differences among various ways to print a floating-point constant:\n> \n> $ gawk -M 'BEGIN { PREC = 113; printf(\"%0.25f\\n\", 0.1) }'\n> -| 0.1000000000000000055511151\n> $ gawk -M -v PREC=113 'BEGIN { printf(\"%0.25f\\n\", 0.1) }'\n> -| 0.1000000000000000000000000\n> $ gawk -M 'BEGIN { PREC = 113; printf(\"%0.25f\\n\", \"0.1\") }'\n> -| 0.1000000000000000000000000\n> $ gawk -M 'BEGIN { PREC = 113; printf(\"%0.25f\\n\", 1/10) }'\n> -| 0.1000000000000000000000000\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Setting the Rounding Mode [Setting-the-rounding-mode.html], Previous: Try a Few Extra Bits of Precision and Rounding\n[Try-To-Round.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "210939bb-803e-419c-8925-fddba8b02bcb", "embedding": null, "doc_hash": "3ad308296ff3b4d5e2086f110111ceb25ecb03dc932d90d645c80ce9f7054619", "extra_info": null, "node_info": {"start": 0, "end": 2892, "_node_type": "1"}, "relationships": {"1": "07fd7e5d-4fcf-4e36-b6cc-ff8af2311d14"}}, "__type__": "1"}, "167361f7-9e89-44fd-9aa3-37bffe89c8a3": {"__data__": {"text": "Previous: Setting the Precision [Setting-precision.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.5 SETTING THE ROUNDING MODE\n\nThe ROUNDMODE variable provides program-level control over the rounding mode. The correspondence between ROUNDMODE and the IEEE\nrounding modes is shown in Table 16.5.\n\nRounding modeIEEE nameROUNDMODE Round to nearest, ties to evenroundTiesToEven\"N\" or \"n\" Round toward positive\ninfinityroundTowardPositive\"U\" or \"u\" Round toward negative infinityroundTowardNegative\"D\" or \"d\" Round toward\nzeroroundTowardZero\"Z\" or \"z\" Round away from zero\"A\" or \"a\"\n\nTable 16.5: gawk rounding modes\n\nROUNDMODE has the default value \"N\", which selects the IEEE 754 rounding mode roundTiesToEven. In Table 16.5, the value \"A\"\nselects rounding away from zero. This is only available if your version of the MPFR library supports it; otherwise, setting\nROUNDMODE to \"A\" has no effect.\n\nThe default mode roundTiesToEven is the most preferred, but the least intuitive. This method does the obvious thing for most\nvalues, by rounding them up or down to the nearest digit. For example, rounding 1.132 to two digits yields 1.13, and rounding\n1.157 yields 1.16.\n\nHowever, when it comes to rounding a value that is exactly halfway between, things do not work the way you probably learned in\nschool. In this case, the number is rounded to the nearest even digit. So rounding 0.125 to two digits rounds down to 0.12, but\nrounding 0.6875 to three digits rounds up to 0.688. You probably have already encountered this rounding mode when using printf to\nformat floating-point numbers. For example:\n\nBEGIN {\n    x = -4.5\n    for (i = 1; i < 10; i++) {\n        x += 1.0\n        printf(\"%4.1f => %2.0f\\n\", x, x)\n    }\n}\n\n\nproduces the following output when run on the author\u2019s system:100\n\n-3.5 => -4\n-2.5 => -2\n-1.5 => -2\n-0.5 => 0\n 0.5 => 0\n 1.5 => 2\n 2.5 => 2\n 3.5 => 4\n 4.5 => 4\n\n\nThe theory behind roundTiesToEven is that it more or less evenly distributes upward and downward rounds of exact halves, which\nmight cause any accumulating round-off error to cancel itself out. This is the default rounding mode for IEEE 754 computing\nfunctions and operators.\n\nRounding Modes and Conversion\n\nIt\u2019s important to understand that, along with CONVFMT and OFMT, the rounding mode affects how numbers are converted to strings.\nFor example, consider the following program:\n\nBEGIN {\n    pi = 3.1416\n    OFMT = \"%.f\"        # Print value as integer\n    print pi            # ROUNDMODE = \"N\" by default.\n    ROUNDMODE = \"U\"     # Now change ROUNDMODE\n    print pi\n}\n\n\nRunning this program produces this output:\n\n$ gawk -M -f roundmode.awk\n-| 3\n-| 4\n\n\nThe other rounding modes are rarely used. Rounding toward positive infinity (roundTowardPositive) and toward negative infinity\n(roundTowardNegative) are often used to implement interval arithmetic, where you adjust the rounding mode to calculate upper and\nlower bounds for the range of output. The roundTowardZero mode can be used for converting floating-point numbers to integers. When\nrounding away", "doc_id": "167361f7-9e89-44fd-9aa3-37bffe89c8a3", "embedding": null, "doc_hash": "0d93f85660f7a7eb621b0ba344319bfae776392a17767fe90fa009e502e01a59", "extra_info": null, "node_info": {"start": 0, "end": 3257, "_node_type": "1"}, "relationships": {"1": "fc5ad508-75b0-46d3-a66d-cc9c40fd6e1e", "3": "52fd06a0-e233-464d-a44e-7f9ba17bfc17"}}, "__type__": "1"}, "52fd06a0-e233-464d-a44e-7f9ba17bfc17": {"__data__": {"text": "be used for converting floating-point numbers to integers. When\nrounding away from zero, the nearest number with magnitude greater than or equal to the value is selected.\n\nSome numerical analysts will tell you that your choice of rounding style has tremendous impact on the final outcome, and advise\nyou to wait until final output for any rounding. Instead, you can often avoid round-off error problems by setting the precision\ninitially to some value sufficiently larger than the final desired precision, so that the accumulation of round-off error does not\ninfluence the outcome. If you suspect that results from your computation are sensitive to accumulation of round-off error, look\nfor a significant difference in output when you change the rounding mode to be sure.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(100)\n\nIt is possible for the output to be completely different if the C library in your system does not use the IEEE 754 even-rounding\nrule to round halfway cases for printf.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Setting the Precision [Setting-precision.html], Up: Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "52fd06a0-e233-464d-a44e-7f9ba17bfc17", "embedding": null, "doc_hash": "7f87c9d2c7a8f845047aaa5f7ca47165769572a17019e9a4abadf05ede34eab1", "extra_info": null, "node_info": {"start": 3180, "end": 4590, "_node_type": "1"}, "relationships": {"1": "fc5ad508-75b0-46d3-a66d-cc9c40fd6e1e", "2": "167361f7-9e89-44fd-9aa3-37bffe89c8a3"}}, "__type__": "1"}, "d5a32807-6a4f-431d-898e-414361c5cb80": {"__data__": {"text": "Next: Checking Whether A Value Is Numeric [Isnumeric-Function.html], Previous: Reading a Whole File at Once\n[Readfile-Function.html], Up: General Programming [General-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.9 QUOTING STRINGS TO PASS TO THE SHELL\n\nMichael Brennan offers the following programming pattern, which he uses frequently:\n\n#! /bin/sh\n\nawkp='\n   \u2026\n   '\n\ninput_program | awk \"$awkp\" | /bin/sh\n\n\nFor example, a program of his named flac-edit has this form:\n\n$ flac-edit -song=\"Whoope! That's Great\" file.flac\n\n\nIt generates the following output, which is to be piped to the shell (/bin/sh):\n\nchmod +w file.flac\nmetaflac --remove-tag=TITLE file.flac\nLANG=en_US.88591 metaflac --set-tag=TITLE='Whoope! That'\"'\"'s Great' file.flac\nchmod -w file.flac\n\n\nNote the need for shell quoting. The function shell_quote() does it. SINGLE is the one-character string \"'\" and QSINGLE is the\nthree-character string \"\\\"'\\\"\":\n\n# shell_quote --- quote an argument for passing to the shell\n\nfunction shell_quote(s,             # parameter\n    SINGLE, QSINGLE, i, X, n, ret)  # locals\n{\n    if (s == \"\")\n        return \"\\\"\\\"\"\n\n    SINGLE = \"\\x27\"  # single quote\n    QSINGLE = \"\\\"\\x27\\\"\"\n    n = split(s, X, SINGLE)\n\n    ret = SINGLE X[1] SINGLE\n    for (i = 2; i <= n; i++)\n        ret = ret QSINGLE SINGLE X[i] SINGLE\n\n    return ret\n}\n", "doc_id": "d5a32807-6a4f-431d-898e-414361c5cb80", "embedding": null, "doc_hash": "b88c06717879209e6a8aa842eb876c5744db75e0136331edfc10998960aba62a", "extra_info": null, "node_info": {"start": 0, "end": 1496, "_node_type": "1"}, "relationships": {"1": "c184e4e5-56aa-4d5d-8e9e-a93de196c28c"}}, "__type__": "1"}, "366c7d37-50ec-47e7-9afb-b1e1b00d7461": {"__data__": {"text": "Next: Additional Configuration Options [Additional-Configuration-Options.html], Previous: Compiling gawk for Unix-Like Systems\n[Quick-Installation.html], Up: Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.2.2 SHELL STARTUP FILES\n\nThe distribution contains shell startup files gawk.sh and gawk.csh, containing functions to aid in manipulating the AWKPATH and\nAWKLIBPATH environment variables. On a Fedora GNU/Linux system, these files should be installed in /etc/profile.d; on other\nplatforms, the appropriate location may be different.\n\ngawkpath_default\n\nReset the AWKPATH environment variable to its default value.\n\ngawkpath_prepend\n\nAdd the argument to the front of the AWKPATH environment variable.\n\ngawkpath_append\n\nAdd the argument to the end of the AWKPATH environment variable.\n\ngawklibpath_default\n\nReset the AWKLIBPATH environment variable to its default value.\n\ngawklibpath_prepend\n\nAdd the argument to the front of the AWKLIBPATH environment variable.\n\ngawklibpath_append\n\nAdd the argument to the end of the AWKLIBPATH environment variable.", "doc_id": "366c7d37-50ec-47e7-9afb-b1e1b00d7461", "embedding": null, "doc_hash": "3004b32bb6dfaacf7487df57ac71cf73cd09bdb0f7e021042a0ec3e6feb37d8b", "extra_info": null, "node_info": {"start": 0, "end": 1274, "_node_type": "1"}, "relationships": {"1": "a622be9a-1681-4931-9334-9d0733067e4d"}}, "__type__": "1"}, "5f5b2507-0b6d-4d0c-bcc3-84fbfbc10dd6": {"__data__": {"text": "Previous: Finding Anagrams from a Dictionary [Anagram-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html]\n\u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.11 AND NOW FOR SOMETHING COMPLETELY DIFFERENT\n\nThe following program was written by Davide Brini and is published on his website\n[http://backreference.org/2011/02/03/obfuscated-awk/]. It serves as his signature in the Usenet group comp.lang.awk. He supplies\nthe following copyright terms:\n\n> Copyright \u00a9 2008 Davide Brini\n> \n> Copying and distribution of the code published in this page, with or without modification, are permitted in any medium without\n> royalty provided the copyright notice and this notice are preserved.\n\nHere is the program:\n\nawk 'BEGIN{O=\"~\"~\"~\";o=\"==\"==\"==\";o+=+o;x=O\"\"O;while(X++<=x+o+o)c=c\"%c\";\nprintf c,(x-O)*(x-O),x*(x-o)-o,x*(x-O)+x-O-o,+x*(x-O)-x+o,X*(o*o+O)+x-O,\nX*(X-x)-o*o,(x+X)*o*o+o,x*(X-x)-O-O,x-O+(O+o+X+x)*(o+O),X*X-X*(x-O)-x+O,\nO+X*(o*(o+O)+O),+x+O+X*o,x*(x-o),(o+X+x)*o*o-(x-O-O),O+(X-x)*(X+O),x-O}'\n\n\nWe leave it to you to determine what the program does. (If you are truly desperate to understand it, see Chris Johansen\u2019s\nexplanation, which is embedded in the Texinfo source file for this Web page.)", "doc_id": "5f5b2507-0b6d-4d0c-bcc3-84fbfbc10dd6", "embedding": null, "doc_hash": "269973beb075a5fd1b4e6d672d5810181e19a9c834ac8959782496604935af63", "extra_info": null, "node_info": {"start": 0, "end": 1368, "_node_type": "1"}, "relationships": {"1": "891d2b25-c901-4c0f-b9f5-136922fbce65"}}, "__type__": "1"}, "6e7de4c5-60e8-4b08-876b-4e1afb5d7a66": {"__data__": {"text": "Next: An Easy Way to Use Library Functions [Igawk-Program.html], Previous: Extracting Programs from Texinfo Source Files\n[Extract-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.8 A SIMPLE STREAM EDITOR\n\nThe sed utility is a stream editor, a program that reads a stream of data, makes changes to it, and passes it on. It is often used\nto make global changes to a large file or to a stream of data generated by a pipeline of commands. Although sed is a complicated\nprogram in its own right, its most common use is to perform global substitutions in the middle of a pipeline:\n\ncommand1 < orig.data | sed 's/old/new/g' | command2 > result\n\n\nHere, \u2018s/old/new/g\u2019 tells sed to look for the regexp \u2018old\u2019 on each input line and globally replace it with the text \u2018new\u2019 (i.e.,\nall the occurrences on a line). This is similar to awk\u2019s gsub() function (see String-Manipulation Functions\n[String-Functions.html]).\n\nThe following program, awksed.awk, accepts at least two command-line arguments: the pattern to look for and the text to replace it\nwith. Any additional arguments are treated as data file names to process. If none are provided, the standard input is used:\n\n# awksed.awk --- do s/foo/bar/g using just print\n#    Thanks to Michael Brennan for the idea\n\nfunction usage()\n{\n    print \"usage: awksed pat repl [files...]\" > \"/dev/stderr\"\n    exit 1\n}\n\n\n\nBEGIN {\n    # validate arguments\n    if (ARGC < 3)\n        usage()\n\n\n\n\n    RS = ARGV[1]\n    ORS = ARGV[2]\n\n    # don't use arguments as files\n    ARGV[1] = ARGV[2] = \"\"\n}\n\n\n\n# look ma, no hands!\n{\n    if (RT == \"\")\n        printf \"%s\", $0\n    else\n        print\n}\n\n\nThe program relies on gawk\u2019s ability to have RS be a regexp, as well as on the setting of RT to the actual text that terminates\nthe record (see How Input Is Split into Records [Records.html]).\n\nThe idea is to have RS be the pattern to look for. gawk automatically sets $0 to the text between matches of the pattern. This is\ntext that we want to keep, unmodified. Then, by setting ORS to the replacement text, a simple print statement outputs the text we\nwant to keep, followed by the replacement text.\n\nThere is one wrinkle to this scheme, which is what to do if the last record doesn\u2019t end with text that matches RS. Using a print\nstatement unconditionally prints the replacement text, which is not correct. However, if the file did not end in text that matches\nRS, RT is set to the null string. In this case, we can print $0 using printf (see Using printf Statements for Fancier Printing\n[Printf.html]).\n\nThe BEGIN rule handles the setup, checking for the right number of arguments and calling usage() if there is a problem. Then it\nsets RS and ORS from the command-line arguments and sets ARGV[1] and ARGV[2] to the null string, so that they are not treated as\nfile names (see Using ARGC and ARGV [ARGC-and-ARGV.html]).\n\nThe usage() function prints an error message and exits. Finally, the single rule handles the printing scheme outlined earlier,\nusing print or printf as appropriate, depending upon the value of RT.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: An Easy Way to Use Library Functions [Igawk-Program.html], Previous: Extracting Programs from Texinfo Source Files\n[Extract-Program.html], Up: A Grab Bag of awk Programs", "doc_id": "6e7de4c5-60e8-4b08-876b-4e1afb5d7a66", "embedding": null, "doc_hash": "623a49bf25e494fab90bce221022051f930dfd5e6ca4678409afbd63ebf47972", "extra_info": null, "node_info": {"start": 0, "end": 3569, "_node_type": "1"}, "relationships": {"1": "e35d356b-c366-4902-a444-65115763451a", "3": "79f0b2d9-a146-45ba-81f7-d060be069173"}}, "__type__": "1"}, "79f0b2d9-a146-45ba-81f7-d060be069173": {"__data__": {"text": "Files\n[Extract-Program.html], Up: A Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "79f0b2d9-a146-45ba-81f7-d060be069173", "embedding": null, "doc_hash": "4eb7cca5318bc2a173cce1fd352f6f75f2a705bd030da0ceb3eac8bcbb17633f", "extra_info": null, "node_info": {"start": 3509, "end": 3658, "_node_type": "1"}, "relationships": {"1": "e35d356b-c366-4902-a444-65115763451a", "2": "6e7de4c5-60e8-4b08-876b-4e1afb5d7a66"}}, "__type__": "1"}, "09aa5e87-af12-4259-959b-be45b179d774": {"__data__": {"text": "Next: Setting FS from the Command Line [Command-Line-Field-Separator.html], Previous: Using Regular Expressions to Separate Fields\n[Regexp-Field-Splitting.html], Up: Specifying How Fields Are Separated [Field-Separators.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.5.3 MAKING EACH CHARACTER A SEPARATE FIELD\n\nThere are times when you may want to examine each character of a record separately. This can be done in gawk by simply assigning\nthe null string (\"\") to FS. (c.e.) In this case, each individual character in the record becomes a separate field. For example:\n\n$ echo a b | gawk 'BEGIN { FS = \"\" }\n>                  {\n>                      for (i = 1; i <= NF; i = i + 1)\n>                          print \"Field\", i, \"is\", $i\n>                  }'\n-| Field 1 is a\n-| Field 2 is\n-| Field 3 is b\n\n\nTraditionally, the behavior of FS equal to \"\" was not defined. In this case, most versions of Unix awk simply treat the entire\nrecord as only having one field. (d.c.) In compatibility mode (see Command-Line Options [Options.html]), if FS is the null string,\nthen gawk also behaves this way.", "doc_id": "09aa5e87-af12-4259-959b-be45b179d774", "embedding": null, "doc_hash": "ffd3f2841cd7f3c354c2bf1f156d76266b466ef2e364dd89978ad68a71a761b5", "extra_info": null, "node_info": {"start": 0, "end": 1249, "_node_type": "1"}, "relationships": {"1": "4452d168-e485-470a-9d20-73365a394242"}}, "__type__": "1"}, "b2ead909-1187-486f-a974-444041aad18d": {"__data__": {"text": "Next: Capturing Optional Trailing Data [Allowing-trailing-data.html], Previous: Processing Fixed-Width Data\n[Fixed-width-data.html], Up: Reading Fixed-Width Data [Constant-Size.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.6.2 SKIPPING INTERVENING FIELDS\n\nStarting in version 4.2, each field width may optionally be preceded by a colon-separated value specifying the number of\ncharacters to skip before the field starts. Thus, the preceding program could be rewritten to specify FIELDWIDTHS like so:\n\nBEGIN  { FIELDWIDTHS = \"8 1:5 4:7 6 1:6 1:6 2:33\" }\n\n\nThis strips away some of the white space separating the fields. With such a change, the program produces the following results:\n\nhzang    ttyV3 50\neklye    ttyV5 0\ndportein ttyV6 107\ngierd    ttyD3 1\ndave     ttyD4 0\nbrent    ttyp0 286\ndave     ttyq4 1296000\n", "doc_id": "b2ead909-1187-486f-a974-444041aad18d", "embedding": null, "doc_hash": "16e748280f59e75dd065cf675247ea63daf70d151dda89deaf999a19c12acaa0", "extra_info": null, "node_info": {"start": 0, "end": 968, "_node_type": "1"}, "relationships": {"1": "6eb27494-bfbf-4edf-8657-15d3b1aa2333"}}, "__type__": "1"}, "894ffaca-1a42-4698-94d0-6ebd6f814b39": {"__data__": {"text": "Previous: Special Files for Network Communications [Special-Network.html], Up: Special File names in gawk [Special-Files.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.8.3 SPECIAL FILE NAME CAVEATS\n\nHere are some things to bear in mind when using the special file names that gawk provides:\n\n * \n * Recognition of the file names for the three standard preopened files is disabled only in POSIX mode.\n * Recognition of the other special file names is disabled if gawk is in compatibility mode (either --traditional or --posix; see\n   Command-Line Options [Options.html]).\n * gawk always interprets these special file names. For example, using \u2018/dev/fd/4\u2019 for output actually writes on file descriptor\n   4, and not on a new file descriptor that is dup()ed from file descriptor 4. Most of the time this does not matter; however, it\n   is important to not close any of the files related to file descriptors 0, 1, and 2. Doing so results in unpredictable behavior.", "doc_id": "894ffaca-1a42-4698-94d0-6ebd6f814b39", "embedding": null, "doc_hash": "c63c59bfae6b41d4ebfd97b47dd3cb019581951db86cf32bd6625786b3f24be3", "extra_info": null, "node_info": {"start": 0, "end": 1112, "_node_type": "1"}, "relationships": {"1": "b43720bc-5924-48e5-aae1-9d41790dcb4d"}}, "__type__": "1"}, "d36db55a-6794-49b5-90d4-127b2ff3d745": {"__data__": {"text": "Next: Special File names in gawk [Special-Files.html], Previous: Redirecting Output of print and printf [Redirection.html], Up:\nPrinting Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.7 SPECIAL FILES FOR STANDARD PREOPENED DATA STREAMS\n\nRunning programs conventionally have three input and output streams already available to them for reading and writing. These are\nknown as the standard input, standard output, and standard error output. These open streams (and any other open files or pipes)\nare often referred to by the technical term file descriptors.\n\nThese streams are, by default, connected to your keyboard and screen, but they are often redirected with the shell, via the \u2018<\u2019,\n\u2018<<\u2019, \u2018>\u2019, \u2018>>\u2019, \u2018>&\u2019, and \u2018|\u2019 operators. Standard error is typically used for writing error messages; the reason there are two\nseparate streams, standard output and standard error, is so that they can be redirected separately.\n\nIn traditional implementations of awk, the only way to write an error message to standard error in an awk program is as follows:\n\nprint \"Serious error detected!\" | \"cat 1>&2\"\n\n\nThis works by opening a pipeline to a shell command that can access the standard error stream that it inherits from the awk\nprocess. This is far from elegant, and it also requires a separate process. So people writing awk programs often don\u2019t do this.\nInstead, they send the error messages to the screen, like this:\n\nprint \"Serious error detected!\" > \"/dev/tty\"\n\n\n(/dev/tty is a special file supplied by the operating system that is connected to your keyboard and screen. It represents the\n\u201cterminal,\u201d27 which on modern systems is a keyboard and screen, not a serial console.) This generally has the same effect, but not\nalways: although the standard error stream is usually the screen, it can be redirected; when that happens, writing to the screen\nis not correct. In fact, if awk is run from a background job, it may not have a terminal at all. Then opening /dev/tty fails.\n\ngawk, BWK awk, and mawk provide special file names for accessing the three standard streams. If the file name matches one of these\nspecial names when gawk (or one of the others) redirects input or output, then it directly uses the descriptor that the file name\nstands for. These special file names work for all operating systems that gawk has been ported to, not just those that are\nPOSIX-compliant:\n\n/dev/stdin\n\nThe standard input (file descriptor 0).\n\n/dev/stdout\n\nThe standard output (file descriptor 1).\n\n/dev/stderr\n\nThe standard error output (file descriptor 2).\n\nWith these facilities, the proper way to write an error message then becomes:\n\nprint \"Serious error detected!\" > \"/dev/stderr\"\n\n\nNote the use of quotes around the file name. Like with any other redirection, the value must be a string. It is a common error to\nomit the quotes, which leads to confusing results.\n\ngawk does not treat these file names as special when in POSIX-compatibility mode. However, because BWK awk supports them, gawk\ndoes support them even when invoked with the --traditional option (see Command-Line Options [Options.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(27)\n\nThe \u201ctty\u201d in /dev/tty stands for \u201cTeletype,\u201d a serial terminal.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Special File names in gawk [Special-Files.html], Previous: Redirecting Output of print and printf [Redirection.html], Up:\nPrinting Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d36db55a-6794-49b5-90d4-127b2ff3d745", "embedding": null, "doc_hash": "04d6349e04647e3571866c92abcd12576fd64a5ad88943b986eb6706e6e66ad5", "extra_info": null, "node_info": {"start": 0, "end": 3822, "_node_type": "1"}, "relationships": {"1": "4399bea1-532b-4c88-ac59-b79e0e65b6fb"}}, "__type__": "1"}, "7d3b2e24-e9bb-45ec-a42f-f704bf27b104": {"__data__": {"text": "Next: Closing Input and Output Redirections [Close-Files-And-Pipes.html], Previous: Special Files for Standard Preopened Data\nStreams [Special-FD.html], Up: Printing Output [Printing.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n5.8 SPECIAL FILE NAMES IN GAWK\n\nBesides access to standard input, standard output, and standard error, gawk provides access to any open file descriptor.\nAdditionally, there are special file names reserved for TCP/IP networking.\n\n * Accessing Other Open Files with gawk [Other-Inherited-Files.html]\n * Special Files for Network Communications [Special-Network.html]\n * Special File name Caveats [Special-Caveats.html]", "doc_id": "7d3b2e24-e9bb-45ec-a42f-f704bf27b104", "embedding": null, "doc_hash": "85ac1fa277bfe671b405a47e771bf3d17c3ff49c655560c1b7e916e266a5a618", "extra_info": null, "node_info": {"start": 0, "end": 798, "_node_type": "1"}, "relationships": {"1": "e0e7eb8d-0161-4052-b785-acea76242652"}}, "__type__": "1"}, "b45d69f1-959e-4d40-a478-b9c49d2aa46e": {"__data__": {"text": "Next: Special File name Caveats [Special-Caveats.html], Previous: Accessing Other Open Files with gawk\n[Other-Inherited-Files.html], Up: Special File names in gawk [Special-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n5.8.2 SPECIAL FILES FOR NETWORK COMMUNICATIONS\n\ngawk programs can open a two-way TCP/IP connection, acting as either a client or a server. This is done using a special file name\nof the form:\n\n/net-type/protocol/local-port/remote-host/remote-port\n\n\nThe net-type is one of \u2018inet\u2019, \u2018inet4\u2019, or \u2018inet6\u2019. The protocol is one of \u2018tcp\u2019 or \u2018udp\u2019, and the other fields represent the\nother essential pieces of information for making a networking connection. These file names are used with the \u2018|&\u2019 operator for\ncommunicating with a\u00a0coprocess (see Two-Way Communications with Another Process [Two_002dway-I_002fO.html]). This is an advanced\nfeature, mentioned here only for completeness. Full discussion is delayed until Using gawk for Network Programming\n[TCP_002fIP-Networking.html].", "doc_id": "b45d69f1-959e-4d40-a478-b9c49d2aa46e", "embedding": null, "doc_hash": "447feacc3edcfae916671cdfbc665b4607b545d92c546a26bfddb7ef0d2f9dac", "extra_info": null, "node_info": {"start": 0, "end": 1151, "_node_type": "1"}, "relationships": {"1": "6bd96b1e-94f4-41fa-8131-fdf17a4abb97"}}, "__type__": "1"}, "54d9fc7e-42f8-4c31-ae67-09c395eb2b5f": {"__data__": {"text": "Next: Duplicating Output into Multiple Files [Tee-Program.html], Previous: Printing Out User Information [Id-Program.html], Up:\nReinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.4 SPLITTING A LARGE FILE INTO PIECES\n\nThe split utility splits large text files into smaller pieces. The usage follows the POSIX standard for split and is as follows:\n\nsplit [-l count] [-a suffix-len] [file [outname]]\nsplit -b N[k|m]] [-a suffix-len] [file [outname]]\n\n\nBy default, the output files are named xaa, xab, and so on. Each file has 1,000 lines in it, with the likely exception of the last\nfile.\n\nThe split program has evolved over time, and the current POSIX version is more complicated than the original Unix version. The\noptions and what they do are as follows:\n\n-a suffix-len\n\nUse suffix-len characters for the suffix. For example, if suffix-len is four, the output files would range from xaaaa to xzzzz.\n\n-b N[k|m]]\n\nInstead of each file containing a specified number of lines, each file should have (at most) N bytes. Supplying a trailing \u2018k\u2019\nmultiplies N by 1,024, yielding kilobytes. Supplying a trailing \u2018m\u2019 multiplies N by 1,048,576 (1,024 * 1,024) yielding megabytes.\n(This option is mutually exclusive with -l).\n\n-l count\n\nEach file should have at most count lines, instead of the default 1,000. (This option is mutually exclusive with -b).\n\nIf supplied, file is the input file to read. Otherwise standard input is processed. If supplied, outname is the leading prefix to\nuse for file names, instead of \u2018x\u2019.\n\nIn order to use the -b option, gawk should be invoked with its -b option (see Command-Line Options [Options.html]), or with the\nenvironment variable LC_ALL set to \u2018C\u2019, so that each input byte is treated as a separate character.75\n\nHere is an implementation of split in awk. It uses the getopt() function presented in Processing Command-Line Options\n[Getopt-Function.html].\n\nThe program begins with a standard descriptive comment and then a usage() function describing the options. The variable common\nkeeps the function\u2019s lines short so that they look nice on the page:\n\n# split.awk --- do split in awk\n#\n# Requires getopt() library function.\n\nfunction usage(     common)\n{\n    common = \"[-a suffix-len] [file [outname]]\"\n    printf(\"usage: split [-l count]  %s\\n\", common) > \"/dev/stderr\"\n    printf(\"       split [-b N[k|m]] %s\\n\", common) > \"/dev/stderr\"\n    exit 1\n}\n\n\nNext, in a BEGIN rule we set the default values and parse the arguments. After that we initialize the data structures used to\ncycle the suffix from \u2018aa\u2026\u2019 to \u2018zz\u2026\u2019. Finally we set the name of the first output file:\n\nBEGIN {\n    # Set defaults:\n    Suffix_length = 2\n    Line_count = 1000\n    Byte_count = 0\n    Outfile = \"x\"\n\n    parse_arguments()\n\n    init_suffix_data()\n\n    Output = (Outfile compute_suffix())\n}\n\n\nParsing the arguments is straightforward. The program follows our convention (see Naming Library Function Global Variables\n[Library-Names.html]) of having important global variables start with an uppercase letter:\n\nfunction parse_arguments(   i, c, l, modifier)\n{\n    while ((c = getopt(ARGC, ARGV, \"a:b:l:\")) != -1) {\n    ", "doc_id": "54d9fc7e-42f8-4c31-ae67-09c395eb2b5f", "embedding": null, "doc_hash": "aae9b653353fab40d2c7b0f5eb2220a6a8d68e924f5b101d6b7311c4be5aa858", "extra_info": null, "node_info": {"start": 0, "end": 3321, "_node_type": "1"}, "relationships": {"1": "be1535d8-3079-41bd-b62f-de8cf1cb176e", "3": "4ae9cfcc-56c4-4ac1-8bce-7f80d0d29d7f"}}, "__type__": "1"}, "4ae9cfcc-56c4-4ac1-8bce-7f80d0d29d7f": {"__data__": {"text": "\"a:b:l:\")) != -1) {\n        if (c == \"a\")\n            Suffix_length = Optarg + 0\n        else if (c == \"b\") {\n            Byte_count = Optarg + 0\n            Line_count = 0\n\n            l = length(Optarg)\n            modifier = substr(Optarg, l, 1)\n            if (modifier == \"k\")\n                Byte_count *= 1024\n            else if (modifier == \"m\")\n                Byte_count *= 1024 * 1024\n        } else if (c == \"l\") {\n            Line_count = Optarg + 0\n            Byte_count = 0\n        } else\n            usage()\n    }\n\n    # Clear out options\n    for (i = 1; i < Optind; i++)\n        ARGV[i] = \"\"\n\n    # Check for filename\n    if (ARGV[Optind]) {\n        Optind++\n\n        # Check for different prefix\n        if (ARGV[Optind]) {\n            Outfile = ARGV[Optind]\n            ARGV[Optind] = \"\"\n\n            if (++Optind < ARGC)\n                usage()\n        }\n    }\n}\n\n\nManaging the file name suffix is interesting. Given a suffix of length three, say, the values go from \u2018aaa\u2019, \u2018aab\u2019, \u2018aac\u2019 and so\non, all the way to \u2018zzx\u2019, \u2018zzy\u2019, and finally \u2018zzz\u2019. There are two important aspects to this:\n\n * We have to be able to easily generate these suffixes, and in particular easily handle \u201crolling over\u201d; for example, going from\n   \u2018abz\u2019 to \u2018aca\u2019.\n * We have to tell when we\u2019ve finished with the last file, so that if we still have more input data we can print an error message\n   and exit. The trick is to handle this after using the last suffix, and not when the final suffix is created.\n\nThe computation is handled by compute_suffix(). This function is called every time a new file is opened.\n\nThe flow here is messy, because we want to generate \u2018zzzz\u2019 (say), and use it, and only produce an error after all the file name\nsuffixes have been used up. The logical steps are as follows:\n\n 1. Generate the suffix, saving the value in result to return. To do this, the supplementary array Suffix_ind contains one element\n    for each letter in the suffix. Each element ranges from 1 to 26, acting as the index into a string containing all the\n    lowercase letters of the English alphabet. It is initialized by init_suffix_data(). result is built up one letter at a time,\n    using each substr().\n 2. Prepare the data structures for the next time compute_suffix() is called. To do this, we loop over Suffix_ind, backwards. If\n    the current element is less than 26, it\u2019s incremented and the loop breaks (\u2018abq\u2019 goes to \u2018abr\u2019). Otherwise, the element is\n    reset to one and we move down the list (\u2018abz\u2019 to \u2018aca\u2019). Thus, the", "doc_id": "4ae9cfcc-56c4-4ac1-8bce-7f80d0d29d7f", "embedding": null, "doc_hash": "b8607e55fb9c8b8ed8b96dd30c09748d1302c014728fb670e8ea72a146ab4578", "extra_info": null, "node_info": {"start": 3305, "end": 5836, "_node_type": "1"}, "relationships": {"1": "be1535d8-3079-41bd-b62f-de8cf1cb176e", "2": "54d9fc7e-42f8-4c31-ae67-09c395eb2b5f", "3": "8ba7c95a-9057-41f6-8033-544fff268466"}}, "__type__": "1"}, "8ba7c95a-9057-41f6-8033-544fff268466": {"__data__": {"text": "down the list (\u2018abz\u2019 to \u2018aca\u2019). Thus, the Suffix_ind array is always \u201cone step ahead\u201d of the actual\n    file name suffix to be returned.\n 3. Check if we\u2019ve gone past the limit of possible file names. If Reached_last is true, print a message and exit. Otherwise, check\n    if Suffix_ind describes a suffix where all the letters are \u2018z\u2019. If that\u2019s the case we\u2019re about to return the final suffix. If\n    so, we set Reached_last to true so that the next call to compute_suffix() will cause a failure.\n\nPhysically, the steps in the function occur in the order 3, 1, 2:\n\nfunction compute_suffix(    i, result, letters)\n{\n    # Logical step 3\n    if (Reached_last) {\n        printf(\"split: too many files!\\n\") > \"/dev/stderr\"\n        exit 1\n    } else if (on_last_file())\n        Reached_last = 1    # fail when wrapping after 'zzz'\n\n    # Logical step 1\n    result = \"\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    for (i = 1; i <= Suffix_length; i++)\n        result = result substr(letters, Suffix_ind[i], 1)\n\n    # Logical step 2\n    for (i = Suffix_length; i >= 1; i--) {\n        if (++Suffix_ind[i] > 26) {\n            Suffix_ind[i] = 1\n        } else\n            break\n    }\n\n    return result\n}\n\n\nThe Suffix_ind array and Reached_last are initialized by init_suffix_data():\n\nfunction init_suffix_data(  i)\n{\n    for (i = 1; i <= Suffix_length; i++)\n        Suffix_ind[i] = 1\n\n    Reached_last = 0\n}\n\n\nThe function on_last_file() returns true if Suffix_ind describes a suffix where all the letters are \u2018z\u2019 by checking that all the\nelements in the array are equal to 26:\n\nfunction on_last_file(  i, on_last)\n{\n    on_last = 1\n    for (i = 1; i <= Suffix_length; i++) {\n        on_last = on_last && (Suffix_ind[i] == 26)\n    }\n\n    return on_last\n}\n\n\nThe actual work of splitting the input file is done by the next two rules. Since splitting by line count and splitting by byte\ncount are mutually exclusive, we simply use two separate rules, one for when Line_count is greater than zero, and another for when\nByte_count is greater than zero.\n\nThe variable tcount counts how many lines have been processed so far. When it exceeds Line_count, it\u2019s time to close the previous\nfile and switch to a new one:\n\nLine_count > 0 {\n    if (++tcount > Line_count) {\n        close(Output)\n        Output = (Outfile compute_suffix())\n        tcount = 1\n    }\n    print > Output\n}\n\n\nThe rule for handling bytes is more complicated. Since lines most likely vary in length, the Byte_count boundary may be hit in the\nmiddle of an input record. In that case, split has to write enough of the first bytes of the input record to finish up Byte_count\nbytes, close the file, open a new file, and write the rest of the record to the new file. The", "doc_id": "8ba7c95a-9057-41f6-8033-544fff268466", "embedding": null, "doc_hash": "c7cbb4213805604fc800ef30bf7be1e0a84a394369755b114d9aca89e7f4cded", "extra_info": null, "node_info": {"start": 5820, "end": 8542, "_node_type": "1"}, "relationships": {"1": "be1535d8-3079-41bd-b62f-de8cf1cb176e", "2": "4ae9cfcc-56c4-4ac1-8bce-7f80d0d29d7f", "3": "4b13be37-9c6e-4111-a910-2c7991bb7045"}}, "__type__": "1"}, "4b13be37-9c6e-4111-a910-2c7991bb7045": {"__data__": {"text": "file, open a new file, and write the rest of the record to the new file. The logic here does all that:\n\nByte_count > 0 {\n    # `+ 1' is for the final newline\n    if (tcount + length($0) + 1 > Byte_count) { # would overflow\n        # compute leading bytes\n        leading_bytes = Byte_count - tcount\n\n        # write leading bytes\n        printf(\"%s\", substr($0, 1, leading_bytes)) > Output\n\n        # close old file, open new file\n        close(Output)\n        Output = (Outfile compute_suffix())\n\n        # set up first bytes for new file\n        $0 = substr($0, leading_bytes + 1)  # trailing bytes\n        tcount = 0\n    }\n\n    # write full record or trailing bytes\n    tcount += length($0) + 1\n    print > Output\n}\n\n\nFinally, the END rule cleans up by closing the last output file:\n\nEND {\n    close(Output)\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(75)\n\nUsing -b twice requires separating gawk\u2019s options from those of the program. For example: \u2018gawk -f getopt.awk -f split.awk -b --\n-b 42m large-file.txt split-\u2019.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Duplicating Output into Multiple Files [Tee-Program.html], Previous: Printing Out User Information [Id-Program.html], Up:\nReinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "4b13be37-9c6e-4111-a910-2c7991bb7045", "embedding": null, "doc_hash": "b0c32de9203175f37b166f4cc61de16241ff6529d830776df37a10ede1eda2d2", "extra_info": null, "node_info": {"start": 8500, "end": 9995, "_node_type": "1"}, "relationships": {"1": "be1535d8-3079-41bd-b62f-de8cf1cb176e", "2": "8ba7c95a-9057-41f6-8033-544fff268466"}}, "__type__": "1"}, "887c76c9-7953-4cd8-a049-c78861e428fb": {"__data__": {"text": "Next: Checking How gawk Is Splitting Records [Testing-field-creation.html], Previous: Reading Fixed-Width Data\n[Constant-Size.html], Up: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.7 DEFINING FIELDS BY CONTENT\n\nThis section discusses an advanced feature of gawk. If you are a novice awk user, you might want to skip it on the first reading.\n\nNormally, when using FS, gawk defines the fields as the parts of the record that occur in between each field separator. In other\nwords, FS defines what a field is not, instead of what a field is. However, there are times when you really want to define the\nfields by what they are, and not by what they are not.\n\nThe most notorious such case is so-called comma-separated values (CSV) data. Many spreadsheet programs, for example, can export\ntheir data into text files, where each record is terminated with a newline, and fields are separated by commas. If commas only\nseparated the data, there wouldn\u2019t be an issue. The problem comes when one of the fields contains an embedded comma. In such\ncases, most programs embed the field in double quotes.24 So, we might have data like this:\n\nRobbins,Arnold,\"1234 A Pretty Street, NE\",MyTown,MyState,12345-6789,USA\n\n\nThe FPAT variable offers a solution for cases like this. The value of FPAT should be a string that provides a regular expression.\nThis regular expression describes the contents of each field.\n\nIn the case of CSV data as presented here, each field is either \u201canything that is not a comma,\u201d or \u201ca double quote, anything that\nis not a double quote, and a closing double quote.\u201d (There are more complicated definitions of CSV data, treated shortly.) If\nwritten as a regular expression constant (see Regular Expressions [Regexp.html]), we would have /([^,]+)|(\"[^\"]+\")/. Writing this\nas a string requires us to escape the double quotes, leading to:\n\nFPAT = \"([^,]+)|(\\\"[^\\\"]+\\\")\"\n\n\nPutting this to use, here is a simple program to parse the data:\n\nBEGIN {\n    FPAT = \"([^,]+)|(\\\"[^\\\"]+\\\")\"\n}\n\n\n\n\n\n\n{\n    print \"NF = \", NF\n    for (i = 1; i <= NF; i++) {\n        printf(\"$%d = <%s>\\n\", i, $i)\n    }\n}\n\n\nWhen run, we get the following:\n\n$ gawk -f simple-csv.awk addresses.csv\nNF =  7\n$1 = <Robbins>\n$2 = <Arnold>\n$3 = <\"1234 A Pretty Street, NE\">\n$4 = <MyTown>\n$5 = <MyState>\n$6 = <12345-6789>\n$7 = <USA>\n\n\nNote the embedded comma in the value of $3.\n\nA straightforward improvement when processing CSV data of this sort would be to remove the quotes when they occur, with something\nlike this:\n\nif (substr($i, 1, 1) == \"\\\"\") {\n    len = length($i)\n    $i = substr($i, 2, len - 2)    # Get text within the two quotes\n}\n\n\n> NOTE: Some programs export CSV data that contains embedded newlines between the double quotes. gawk provides no way to deal with\n> this. Even though a formal specification for CSV data exists, there isn\u2019t much more to be done; the FPAT mechanism provides an\n> elegant solution for the majority of cases, and the gawk developers are satisfied with that.\n\nAs written, the regexp used for FPAT requires that each field contain at least one character. A straightforward modification\n(changing the first \u2018+\u2019 to \u2018*\u2019) allows fields to be empty:\n\nFPAT =", "doc_id": "887c76c9-7953-4cd8-a049-c78861e428fb", "embedding": null, "doc_hash": "cc3f8186e7e1d2983164591bce5381172ce28bda69ad3471e7df16a2b755d0da", "extra_info": null, "node_info": {"start": 0, "end": 3351, "_node_type": "1"}, "relationships": {"1": "62864485-f80f-40fc-855f-9760b57f77f9", "3": "65d56dc8-cd2a-4031-891f-8cb314a1b5d4"}}, "__type__": "1"}, "65d56dc8-cd2a-4031-891f-8cb314a1b5d4": {"__data__": {"text": "to \u2018*\u2019) allows fields to be empty:\n\nFPAT = \"([^,]*)|(\\\"[^\\\"]+\\\")\"\n\n\nAs with FS, the IGNORECASE variable (see Built-in Variables That Control awk [User_002dmodified.html]) affects field splitting\nwith FPAT.\n\nAssigning a value to FPAT overrides field splitting with FS and with FIELDWIDTHS.\n\nFinally, the patsplit() function makes the same functionality available for splitting regular strings (see String-Manipulation\nFunctions [String-Functions.html]).\n\n * More on CSV Files [More-CSV.html]\n * FS Versus FPAT: A Subtle Difference [FS-versus-FPAT.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(24)\n\nThe CSV format lacked a formal standard definition for many years. RFC 4180 [http://www.ietf.org/rfc/rfc4180.txt] standardizes the\nmost common practices.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Checking How gawk Is Splitting Records [Testing-field-creation.html], Previous: Reading Fixed-Width Data\n[Constant-Size.html], Up: Reading Input Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "65d56dc8-cd2a-4031-891f-8cb314a1b5d4", "embedding": null, "doc_hash": "50aafff984e95565cb26c2f0498ae99cdc060e1909ee05c834f8b872a041c2da", "extra_info": null, "node_info": {"start": 3309, "end": 4534, "_node_type": "1"}, "relationships": {"1": "62864485-f80f-40fc-855f-9760b57f77f9", "2": "887c76c9-7953-4cd8-a049-c78861e428fb"}}, "__type__": "1"}, "aca93c95-a2f4-48c3-bdf6-966b4f53f00f": {"__data__": {"text": "Next: Strongly Typed Regexp Constants [Strong-Regexp-Constants.html], Up: Using Regular Expression Constants\n[Using-Constant-Regexps.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.2.1 STANDARD REGULAR EXPRESSION CONSTANTS\n\nWhen used on the righthand side of the \u2018~\u2019 or \u2018!~\u2019 operators, a regexp constant merely stands for the regexp that is to be\nmatched. However, regexp constants (such as /foo/) may be used like simple expressions. When a regexp constant appears by itself,\nit has the same meaning as if it appeared in a pattern (i.e., \u2018($0 ~ /foo/)\u2019). (d.c.) See Expressions as Patterns\n[Expression-Patterns.html]. This means that the following two code segments:\n\nif ($0 ~ /barfly/ || $0 ~ /camelot/)\n    print \"found\"\n\n\nand:\n\nif (/barfly/ || /camelot/)\n    print \"found\"\n\n\nare exactly equivalent. One rather bizarre consequence of this rule is that the following Boolean expression is valid, but does\nnot do what its author probably intended:\n\n# Note that /foo/ is on the left of the ~\nif (/foo/ ~ $1) print \"found foo\"\n\n\nThis code is \u201cobviously\u201d testing $1 for a match against the regexp /foo/. But in fact, the expression \u2018/foo/ ~ $1\u2019 really means\n\u2018($0 ~ /foo/) ~ $1\u2019. In other words, first match the input record against the regexp /foo/. The result is either zero or one,\ndepending upon the success or failure of the match. That result is then matched against the first field in the record. Because it\nis unlikely that you would ever really want to make this kind of test, gawk issues a warning when it sees this construct in a\nprogram. Another consequence of this rule is that the assignment statement:\n\nmatches = /foo/\n\n\nassigns either zero or one to the variable matches, depending upon the contents of the current input record.\n\nConstant regular expressions are also used as the first argument for the gensub(), sub(), and gsub() functions, as the second\nargument of the match() function, and as the third argument of the split() and patsplit() functions (see String-Manipulation\nFunctions [String-Functions.html]). Modern implementations of awk, including gawk, allow the third argument of split() to be a\nregexp constant, but some older implementations do not. (d.c.) Because some built-in functions accept regexp constants as\narguments, confusion can arise when attempting to use regexp constants as arguments to user-defined functions (see User-Defined\nFunctions [User_002ddefined.html]). For example:\n\nfunction mysub(pat, repl, str, global)\n{\n    if (global)\n        gsub(pat, repl, str)\n    else\n        sub(pat, repl, str)\n    return str\n}\n\n\n\n\n\n\n{\n    \u2026\n    text = \"hi! hi yourself!\"\n    mysub(/hi/, \"howdy\", text, 1)\n    \u2026\n}\n\n\nIn this example, the programmer wants to pass a regexp constant to the user-defined function mysub(), which in turn passes it on\nto either sub() or gsub(). However, what really happens is that the pat parameter is assigned a value of either one or zero,\ndepending upon whether or not $0 matches /hi/. gawk issues a warning when it sees a regexp constant used as a parameter to a\nuser-defined function, because passing a truth value in this way is probably not what was intended.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Strongly Typed Regexp Constants [Strong-Regexp-Constants.html], Up: Using Regular Expression", "doc_id": "aca93c95-a2f4-48c3-bdf6-966b4f53f00f", "embedding": null, "doc_hash": "65b9fae8ba39f29990087c373d667e001e46ffbdaafad09123cb83a9c1d2f488", "extra_info": null, "node_info": {"start": 0, "end": 3513, "_node_type": "1"}, "relationships": {"1": "78d3748a-bb2b-4c51-92c6-f7a0b3e66ab0", "3": "6610ebd6-c239-462b-873e-da22dd95bfe3"}}, "__type__": "1"}, "6610ebd6-c239-462b-873e-da22dd95bfe3": {"__data__": {"text": "Constants [Strong-Regexp-Constants.html], Up: Using Regular Expression Constants\n[Using-Constant-Regexps.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6610ebd6-c239-462b-873e-da22dd95bfe3", "embedding": null, "doc_hash": "2b20f813a9fd00cec4913b89f111052ef0ec5b7d55f8fa7e2b3da07efd41b752", "extra_info": null, "node_info": {"start": 3443, "end": 3612, "_node_type": "1"}, "relationships": {"1": "78d3748a-bb2b-4c51-92c6-f7a0b3e66ab0", "2": "aca93c95-a2f4-48c3-bdf6-966b4f53f00f"}}, "__type__": "1"}, "b782fbc0-7632-4bb2-84c4-134b07b34a90": {"__data__": {"text": "Next: Predefined Variables [Built_002din-Variables.html], Previous: Actions [Action-Overview.html], Up: Patterns, Actions, and\nVariables [Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7.4 CONTROL STATEMENTS IN ACTIONS\n\nControl statements, such as if, while, and so on, control the flow of execution in awk programs. Most of awk\u2019s control statements\nare patterned after similar statements in C.\n\nAll the control statements start with special keywords, such as if and while, to distinguish them from simple expressions. Many\ncontrol statements contain other statements. For example, the if statement contains another statement that may or may not be\nexecuted. The contained statement is called the body. To include more than one statement in the body, group them into a single\ncompound statement with braces, separating them with newlines or semicolons.\n\n * The if-else Statement [If-Statement.html]\n * The while Statement [While-Statement.html]\n * The do-while Statement [Do-Statement.html]\n * The for Statement [For-Statement.html]\n * The switch Statement [Switch-Statement.html]\n * The break Statement [Break-Statement.html]\n * The continue Statement [Continue-Statement.html]\n * The next Statement [Next-Statement.html]\n * The nextfile Statement [Nextfile-Statement.html]\n * The exit Statement [Exit-Statement.html]", "doc_id": "b782fbc0-7632-4bb2-84c4-134b07b34a90", "embedding": null, "doc_hash": "8d8ac3d808b6329dea08c442d2291c08f2e8cbb620f8fa0d6c2fd266f6edd93f", "extra_info": null, "node_info": {"start": 0, "end": 1491, "_node_type": "1"}, "relationships": {"1": "1a7ced0e-fe07-40c6-ba3d-f61c1fabb512"}}, "__type__": "1"}, "ebdf107d-e177-45d4-bee8-c05f1f74cfb5": {"__data__": {"text": "Next: Other Features of awk [Other-Features.html], Previous: A More Complex Example [More-Complex.html], Up: Getting Started with\nawk [Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.6 AWK STATEMENTS VERSUS LINES\n\nMost often, each line in an awk program is a separate statement or separate rule, like this:\n\nawk '/12/  { print $0 }\n     /21/  { print $0 }' mail-list inventory-shipped\n\n\nHowever, gawk ignores newlines after any of the following symbols and keywords:\n\n,    {    ?    :    ||    &&    do    else\n\n\nA newline at any other point is considered the end of the statement.9\n\nIf you would like to split a single statement into two lines at a point where a newline would terminate it, you can continue it by\nending the first line with a backslash character (\u2018\\\u2019). The backslash must be the final character on the line in order to be\nrecognized as a continuation character. A backslash followed by a newline is allowed anywhere in the statement, even in the middle\nof a string or regular expression. For example:\n\nawk '/This regular expression is too long, so continue it\\\n on the next line/ { print $1 }'\n\n\nWe have generally not used backslash continuation in our sample programs. gawk places no limit on the length of a line, so\nbackslash continuation is never strictly necessary; it just makes programs more readable. For this same reason, as well as for\nclarity, we have kept most statements short in the programs presented throughout the Web page.\n\nBackslash continuation is most useful when your awk program is in a separate source file instead of entered from the command line.\nYou should also note that many awk implementations are more particular about where you may use backslash continuation. For\nexample, they may not allow you to split a string constant using backslash continuation. Thus, for maximum portability of your awk\nprograms, it is best not to split your lines in the middle of a regular expression or a string.\n\n> CAUTION: Backslash continuation does not work as described with the C shell. It works for awk programs in files and for one-shot\n> programs, provided you are using a POSIX-compliant shell, such as the Unix Bourne shell or Bash. But the C shell behaves\n> differently! There you must use two backslashes in a row, followed by a newline. Note also that when using the C shell, every\n> newline in your awk program must be escaped with a backslash. To illustrate:\n> \n> % awk 'BEGIN { \\\n> ?   print \\\\\n> ?       \"hello, world\" \\\n> ? }'\n> -| hello, world\n> \n> \n> Here, the \u2018%\u2019 and \u2018?\u2019 are the C shell\u2019s primary and secondary prompts, analogous to the standard shell\u2019s \u2018$\u2019 and \u2018>\u2019.\n> \n> Compare the previous example to how it is done with a POSIX-compliant shell:\n> \n> $ awk 'BEGIN {\n> >   print \\\n> >       \"hello, world\"\n> > }'\n> -| hello, world\n\nawk is a line-oriented language. Each rule\u2019s action has to begin on the same line as the pattern. To have the pattern and action\non separate lines, you must use backslash continuation; there is no other option.\n\nAnother thing to keep in mind is that backslash continuation and comments do not mix. As soon as awk sees the \u2018#\u2019 that starts a\ncomment, it ignores everything on the rest of the line. For example:\n\n$ gawk 'BEGIN { print \"dont panic\" # a friendly \\\n>                                    BEGIN rule\n> }'\nerror\u2192 gawk: cmd. line:2:       ", "doc_id": "ebdf107d-e177-45d4-bee8-c05f1f74cfb5", "embedding": null, "doc_hash": "c9beb10d47057f561263b60a33d81402173f33468fbbce9b88f1d62307fb2614", "extra_info": null, "node_info": {"start": 0, "end": 3499, "_node_type": "1"}, "relationships": {"1": "c6bc5174-1419-487f-bdb2-7ae0620207ee", "3": "6b44c90b-04f5-4796-8018-c9e45bdf4ecf"}}, "__type__": "1"}, "6b44c90b-04f5-4796-8018-c9e45bdf4ecf": {"__data__": {"text": "gawk: cmd. line:2:                BEGIN rule\nerror\u2192 gawk: cmd. line:2:                ^ syntax error\n\n\nIn this case, it looks like the backslash would continue the comment onto the next line. However, the backslash-newline\ncombination is never even noticed because it is \u201chidden\u201d inside the comment. Thus, the BEGIN is noted as a syntax error.\n\nIf you\u2019re interested, see https://lists.gnu.org/archive/html/bug-gawk/2022-10/msg00025.html\n[https://lists.gnu.org/archive/html/bug-gawk/2022-10/msg00025.html] for a source code patch that allows lines to be continued when\ninside parentheses. This patch was not added to gawk since it would quietly decrease the portability of awk programs.\n\nWhen awk statements within one rule are short, you might want to put more than one of them on a line. This is accomplished by\nseparating the statements with a semicolon (\u2018;\u2019). This also applies to the rules themselves. Thus, the program shown at the start\nof this section could also be written this way:\n\n/12/ { print $0 } ; /21/ { print $0 }\n\n\n> NOTE: The requirement that states that rules on the same line must be separated with a semicolon was not in the original awk\n> language; it was added for consistency with the treatment of statements within an action.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(9)\n\nThe \u2018?\u2019 and \u2018:\u2019 referred to here is the three-operand conditional expression described in Conditional Expressions\n[Conditional-Exp.html]. Splitting lines after \u2018?\u2019 and \u2018:\u2019 is a minor gawk extension; if --posix is specified (see Command-Line\nOptions [Options.html]), then this extension is disabled.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Other Features of awk [Other-Features.html], Previous: A More Complex Example [More-Complex.html], Up: Getting Started with\nawk [Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6b44c90b-04f5-4796-8018-c9e45bdf4ecf", "embedding": null, "doc_hash": "acc0561597c4153027ff7c249cea86c1d85a6ab65ce8c885513bc9d176255440", "extra_info": null, "node_info": {"start": 3474, "end": 5521, "_node_type": "1"}, "relationships": {"1": "c6bc5174-1419-487f-bdb2-7ae0620207ee", "2": "ebdf107d-e177-45d4-bee8-c05f1f74cfb5"}}, "__type__": "1"}, "a6e122df-446b-4b30-9cf1-e39b55e44e0e": {"__data__": {"text": "Previous: Errors Accumulate [Errors-accumulate.html], Up: Floating-Point Arithmetic Is Not Exact\n[Inexactness-of-computations.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.1.4 FLOATING POINT VALUES THEY DIDN\u2019T TALK ABOUT IN SCHOOL\n\nBoth IEEE 754 floating-point hardware, and MPFR, support two kinds of values that you probably didn\u2019t learn about in school. The\nfirst is infinity, a special value, that can be either negative or positive, and which is either smaller than any other value\n(negative infinity), or larger than any other value (positive infinity). When such values are generated, gawk prints them as\neither \u2018-inf\u2019 or \u2018+inf\u2019, respectively. It accepts those strings as data input and converts them to the proper floating-point\nvalues internally.\n\nInfinity values of the same sign compare as equal to each other. Otherwise, operations (addition, subtraction, etc.) involving\nanother number and infinity produce mathematically reasonable results.\n\nThe second kind of value is \u201cnot a number\u201d, or NaN for short.99 This is a special value that results from attempting a calculation\nthat has no answer as a real number. In such a case, programs can either receive a floating-point exception, or get NaN back as\nthe result. The IEEE 754 standard recommends that systems return NaN. Some examples:\n\nsqrt(-1)\n\nThis makes sense in the range of complex numbers, but not in the range of real numbers, so the result is NaN.\n\nlog(-8)\n\n\u22128 is out of the domain of log(), so the result is NaN.\n\nNaN values are strange. In particular, they cannot be compared with other floating point values; any such comparison, except for\n\u201cis not equal to\u201d, returns false. NaN values are so much unequal to other values that even comparing two identical NaN values with\n!= returns true!\n\nNaN values can also be signed, although it depends upon the implementation as to which sign you get for any operation that returns\na NaN. For example, on some systems, sqrt(-1) returns a negative NaN. On others, it returns a positive NaN.\n\nWhen such values are generated, gawk prints them as either \u2018-nan\u2019 or \u2018+nan\u2019, respectively. Here too, gawk accepts those strings as\ndata input and converts them to the proper floating-point values internally.\n\nIf you want to dive more deeply into this topic, you can find test programs in C, awk and Python in the directory\nawklib/eg/test-programs in the gawk distribution. These programs enable comparison among programming languages as to how they\nhandle NaN and infinity values.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(99)\n\nThanks to Michael Brennan for this description, which we have paraphrased, and for the examples.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Errors Accumulate [Errors-accumulate.html], Up: Floating-Point Arithmetic Is Not Exact\n[Inexactness-of-computations.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a6e122df-446b-4b30-9cf1-e39b55e44e0e", "embedding": null, "doc_hash": "bdd6fec8f85b260048447ca3327313b924900fd49d865da900c91159fa18c63c", "extra_info": null, "node_info": {"start": 0, "end": 3214, "_node_type": "1"}, "relationships": {"1": "5557e1c6-7541-4a55-b67b-19dd4e388091"}}, "__type__": "1"}, "e0e523fc-f905-4ea1-9725-ddb4fd0d0d4d": {"__data__": {"text": "Next: Rearranging printf Arguments [Printf-Ordering.html], Up: Translating awk Programs [Translator-i18n.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n13.4.1 EXTRACTING MARKED STRINGS\n\nOnce your awk program is working, and all the strings have been marked and you\u2019ve set (and perhaps bound) the text domain, it is\ntime to produce translations. First, use the --gen-pot command-line option to create the initial .pot file:\n\ngawk --gen-pot -f guide.awk > guide.pot\n\n\nWhen run with --gen-pot, gawk does not execute your program. Instead, it parses it as usual and prints all marked strings to\nstandard output in the format of a GNU gettext Portable Object file. Also included in the output are any constant strings that\nappear as the first argument to dcgettext() or as the first and second argument to dcngettext().90 You should distribute the\ngenerated .pot file with your awk program; translators will eventually use it to provide you translations that you can also then\ndistribute. See A Simple Internationalization Example [I18N-Example.html] for the full list of steps to go through to create and\ntest translations for guide.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(90)\n\nThe xgettext utility that comes with GNU gettext can handle .awk files.", "doc_id": "e0e523fc-f905-4ea1-9725-ddb4fd0d0d4d", "embedding": null, "doc_hash": "fca89bbbb31a97fa3adf9cc993652caf69278296762b3707256fe86f30ccd3d8", "extra_info": null, "node_info": {"start": 0, "end": 1502, "_node_type": "1"}, "relationships": {"1": "accd31e4-d7ee-4f87-8409-067c84ec0474"}}, "__type__": "1"}, "30d289c3-312e-4e8b-b7c8-e09a17d4f412": {"__data__": {"text": "Next: Input/Output Functions [I_002fO-Functions.html], Previous: Numeric Functions [Numeric-Functions.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.4 STRING-MANIPULATION FUNCTIONS\n\nThe functions in this section look at or change the text of one or more strings.\n\ngawk understands locales (see Where You Are Makes a Difference [Locales.html]) and does all string processing in terms of\ncharacters, not bytes. This distinction is particularly important to understand for locales where one character may be represented\nby multiple bytes. Thus, for example, length() returns the number of characters in a string, and not the number of bytes used to\nrepresent those characters. Similarly, index() works with character indices, and not byte indices.\n\n> CAUTION: A number of functions deal with indices into strings. For these functions, the first character of a string is at\n> position (index) one. This is different from C and the languages descended from it, where the first character is at position\n> zero. You need to remember this when doing index calculations, particularly if you are used to C.\n\nIn the following list, optional parameters are enclosed in square brackets\u00a0([\u00a0]). Several functions perform string substitution;\nthe full discussion is provided in the description of the sub() function, which comes toward the end, because the list is\npresented alphabetically.\n\nThose functions that are specific to gawk are marked with a pound sign (\u2018#\u2019). They are not available in compatibility mode (see\nCommand-Line Options [Options.html]):\n\nasort(source [, dest [, how ] ]) # \u00b6 asorti(source [, dest [, how ] ]) #\n\nThese two functions are similar in behavior, so they are described together.\n\n> NOTE: The following description ignores the third argument, how, as it requires understanding features that we have not\n> discussed yet. Thus, the discussion here is a deliberate simplification. (We do provide all the details later on; see Sorting\n> Array Values and Indices with gawk [Array-Sorting-Functions.html] for the full story.)\n\nBoth functions return the number of elements in the array source. For asort(), gawk sorts the values of source and replaces the\nindices of the sorted values of source with sequential integers starting with one. If the optional array dest is specified, then\nsource is duplicated into dest. dest is then sorted, leaving the indices of source unchanged.\n\nWhen comparing strings, IGNORECASE affects the sorting (see Sorting Array Values and Indices with gawk\n[Array-Sorting-Functions.html]). If the source array contains subarrays as values (see Arrays of Arrays [Arrays-of-Arrays.html]),\nthey will come last, after all scalar values. Subarrays are not recursively sorted.\n\nFor example, if the contents of a are as follows:\n\na[\"last\"] = \"de\"\na[\"first\"] = \"sac\"\na[\"middle\"] = \"cul\"\n\n\nA call to asort():\n\nasort(a)\n\n\nresults in the following contents of a:\n\na[1] = \"cul\"\na[2] = \"de\"\na[3] = \"sac\"\n\n\nThe asorti() function works similarly to asort(); however, the indices are sorted, instead of the values. Thus, in the previous\nexample, starting with the same initial set of indices and values in a, calling \u2018asorti(a)\u2019 would yield:\n\na[1] = \"first\"\na[2] = \"last\"\na[3] = \"middle\"\n\n\n> NOTE: You may not use either SYMTAB or FUNCTAB as the second argument to these functions. Attempting to do so produces a fatal\n> error. You may use them as the first argument, but only if providing a second array to use for the actual sorting.\n\nYou are allowed to use the same array for both the source and dest arguments, but doing so only makes sense if you\u2019re", "doc_id": "30d289c3-312e-4e8b-b7c8-e09a17d4f412", "embedding": null, "doc_hash": "5f3e185915e7039f65f8add99e8470932e90a9b6b1075bc8e0fa98b1b927f195", "extra_info": null, "node_info": {"start": 0, "end": 3770, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "3": "fd4adb43-013f-4886-943d-a676cabc8c5a"}}, "__type__": "1"}, "fd4adb43-013f-4886-943d-a676cabc8c5a": {"__data__": {"text": "for both the source and dest arguments, but doing so only makes sense if you\u2019re also\nsupplying the third argument.\n\ngensub(regexp, replacement, how [, target]) # \u00b6\n\nSearch the target string target for matches of the regular expression regexp. If how is a string beginning with \u2018g\u2019 or \u2018G\u2019 (short\nfor \u201cglobal\u201d), then replace all matches of regexp with replacement. Otherwise, treat how as a number indicating which match of\nregexp to replace. Treat numeric values less than one as if they were one. If no target is supplied, use $0. Return the modified\nstring as the result of the function. The original target string is not changed.\n\nThe returned value is always a string, even if the original target was a number or a regexp value.\n\ngensub() is a general substitution function. Its purpose is to provide more features than the standard sub() and gsub() functions.\n\ngensub() provides an additional feature that is not available in sub() or gsub(): the ability to specify components of a regexp in\nthe replacement text. This is done by using parentheses in the regexp to mark the components and then specifying \u2018\\N\u2019 in the\nreplacement text, where N is a digit from 1 to 9. For example:\n\n$ gawk '\n> BEGIN {\n>      a = \"abc def\"\n>      b = gensub(/(.+) (.+)/, \"\\\\2 \\\\1\", \"g\", a)\n>      print b\n> }'\n-| def abc\n\n\nAs with sub(), you must type two backslashes in order to get one into the string. In the replacement text, the sequence \u2018\\0\u2019\nrepresents the entire matched text, as does the character \u2018&\u2019.\n\nThe following example shows how you can use the third argument to control which match of the regexp should be changed:\n\n$ echo a b c a b c |\n> gawk '{ print gensub(/a/, \"AA\", 2) }'\n-| a b c AA b c\n\n\nIn this case, $0 is the default target string. gensub() returns the new string as its result, which is passed directly to print\nfor printing.\n\nIf the how argument is a string that does not begin with \u2018g\u2019 or \u2018G\u2019, or if it is a number that is less than or equal to zero, only\none substitution is performed. If how is zero, gawk issues a warning message.\n\nIf regexp does not match target, gensub()\u2019s return value is the original unchanged value of target. Note that, as mentioned above,\nthe returned value is a string, even if target was not.\n\ngsub(regexp, replacement [, target]) \u00b6\n\nSearch target for all of the longest, leftmost, nonoverlapping matching substrings it can find and replace them with replacement.\nThe \u2018g\u2019 in gsub() stands for \u201cglobal,\u201d which means replace everywhere. For example:\n\n{ gsub(/Britain/, \"United Kingdom\"); print }\n\n\nreplaces all occurrences of the string \u2018Britain\u2019 with \u2018United Kingdom\u2019 for all input records.\n\nThe gsub() function returns the number of substitutions made. If the variable to search and alter (target) is omitted, then the\nentire input record ($0) is used. As in sub(), the characters \u2018&\u2019 and \u2018\\\u2019 are special, and the third argument must be assignable.\n\nindex(in, find) \u00b6\n\nSearch the string in for the first occurrence of the string find, and return the position in characters where that occurrence\nbegins in the string in. Consider the following example:\n\n$ awk 'BEGIN { print index(\"peanut\", \"an\") }'\n-| 3\n\n\nIf find is not found, index() returns zero.\n\nWith BWK awk and gawk, it is a fatal error to use a regexp constant for find. Other implementations allow it, simply treating the\nregexp constant as an expression meaning \u2018$0 ~ /regexp/\u2019.", "doc_id": "fd4adb43-013f-4886-943d-a676cabc8c5a", "embedding": null, "doc_hash": "98c7867ae6e5b41ea6cc6aff2e6519a6a720bb7fdae31a202bc344a5bdb149b6", "extra_info": null, "node_info": {"start": 3706, "end": 7087, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "2": "30d289c3-312e-4e8b-b7c8-e09a17d4f412", "3": "2d94e5d0-7057-4cd7-9beb-7fb0647d5d8b"}}, "__type__": "1"}, "2d94e5d0-7057-4cd7-9beb-7fb0647d5d8b": {"__data__": {"text": "constant as an expression meaning \u2018$0 ~ /regexp/\u2019. (d.c.)\n\nlength([string]) \u00b6\n\nReturn the number of characters in string. If string is a number, the length of the digit string representing that number is\nreturned. For example, length(\"abcde\") is five. By contrast, length(15 * 35) works out to three. In this example, 15 * 35 = 525,\nand 525 is then converted to the string \"525\", which has three characters.\n\nIf no argument is supplied, length() returns the length of $0.\n\n> NOTE: In older versions of awk, the length() function could be called without any parentheses. Doing so is considered poor\n> practice, although the 2008 POSIX standard explicitly allows it, to support historical practice. For programs to be maximally\n> portable, always supply the parentheses.\n\nIf length() is called with a variable that has not been used, gawk forces the variable to be a scalar. Other implementations of\nawk leave the variable without a type. (d.c.) Consider:\n\n$ gawk 'BEGIN { print length(x) ; x[1] = 1 }'\n-| 0\nerror\u2192 gawk: fatal: attempt to use scalar `x' as array\n\n$ nawk 'BEGIN { print length(x) ; x[1] = 1 }'\n-| 0\n\n\nIf --lint has been specified on the command line, gawk issues a warning about this.\n\nWith gawk and several other awk implementations, when given an array argument, the length() function returns the number of\nelements in the array. (c.e.) This is less useful than it might seem at first, as the array is not guaranteed to be indexed from\none to the number of elements in it. If --lint is provided on the command line (see Command-Line Options [Options.html]), gawk\nwarns that passing an array argument is not portable. If --posix is supplied, using an array argument is a fatal error (see Arrays\nin awk [Arrays.html]).\n\nmatch(string, regexp [, array]) \u00b6\n\nSearch string for the longest, leftmost substring matched by the regular expression regexp and return the character position\n(index) at which that substring begins (one, if it starts at the beginning of string). If no match is found, return zero.\n\nThe regexp argument may be either a regexp constant (/\u2026/) or a string constant (\"\u2026\"). In the latter case, the string is treated as\na regexp to be matched. See Using Dynamic Regexps [Computed-Regexps.html] for a discussion of the difference between the two\nforms, and the implications for writing your program correctly.\n\nThe order of the first two arguments is the opposite of most other string functions that work with regular expressions, such as\nsub() and gsub(). It might help to remember that for match(), the order is the same as for the \u2018~\u2019 operator: \u2018string ~ regexp\u2019.\n\nThe match() function sets the predefined variable RSTART to the index. It also sets the predefined variable RLENGTH to the length\nin characters of the matched substring. If no match is found, RSTART is set to zero, and RLENGTH to \u22121.\n\nFor example:\n\n{\n    if ($1 == \"FIND\")\n        regex = $2\n    else {\n        where = match($0, regex)\n        if (where != 0)\n            print \"Match of\", regex, \"found at\", where, \"in\", $0\n       }\n}\n\n\nThis program looks for lines that match the regular expression stored in the variable regex. This regular expression can be\nchanged. If the first word on a line is \u2018FIND\u2019, regex is changed to be the second word on that line. Therefore, if given:\n\nFIND ru+n\nMy program runs\nbut not very quickly\nFIND Melvin\nJF+KM\nThis line is property of Reality Engineering Co.\nMelvin was here.\n\n\nawk prints:\n\nMatch of ru+n", "doc_id": "2d94e5d0-7057-4cd7-9beb-7fb0647d5d8b", "embedding": null, "doc_hash": "c196c8fd96d100648836db8fc22c70b1898050c7fed816b13ed422dab2cfb044", "extra_info": null, "node_info": {"start": 7110, "end": 10549, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "2": "fd4adb43-013f-4886-943d-a676cabc8c5a", "3": "1bf8226b-66b7-4f1c-93ed-28d7cc636df4"}}, "__type__": "1"}, "1bf8226b-66b7-4f1c-93ed-28d7cc636df4": {"__data__": {"text": "Co.\nMelvin was here.\n\n\nawk prints:\n\nMatch of ru+n found at 12 in My program runs\nMatch of Melvin found at 1 in Melvin was here.\n\n\nIf array is present, it is cleared, and then the zeroth element of array is set to the entire portion of string matched by regexp.\nIf regexp contains parentheses, the integer-indexed elements of array are set to contain the portion of string matching the\ncorresponding parenthesized subexpression. For example:\n\n$ echo foooobazbarrrrr |\n> gawk '{ match($0, /(fo+).+(bar*)/, arr)\n>         print arr[1], arr[2] }'\n-| foooo barrrrr\n\n\nIn addition, multidimensional subscripts are available providing the start index and length of each matched subexpression:\n\n$ echo foooobazbarrrrr |\n> gawk '{ match($0, /(fo+).+(bar*)/, arr)\n>           print arr[1], arr[2]\n>           print arr[1, \"start\"], arr[1, \"length\"]\n>           print arr[2, \"start\"], arr[2, \"length\"]\n> }'\n-| foooo barrrrr\n-| 1 5\n-| 9 7\n\n\nThere may not be subscripts for the start and index for every parenthesized subexpression, because they may not all have matched\ntext; thus, they should be tested for with the in operator (see Referring to an Array Element [Reference-to-Elements.html]).\n\nThe array argument to match() is a gawk extension. In compatibility mode (see Command-Line Options [Options.html]), using a third\nargument is a fatal error.\n\npatsplit(string, array [, fieldpat [, seps ] ]) # \u00b6\n\nDivide string into pieces (or \u201cfields\u201d) defined by fieldpat and store the pieces in array and the separator strings in the seps\narray. The first piece is stored in array[1], the second piece in array[2], and so forth. The third argument, fieldpat, is a\nregexp describing the fields in string (just as FPAT is a regexp describing the fields in input records). It may be either a\nregexp constant or a string. If fieldpat is omitted, the value of FPAT is used. patsplit() returns the number of elements created.\nseps[i] is the possibly null separator string after array[i]. The possibly null leading separator will be in seps[0]. So a\nnon-null string with n fields will have n+1 separators. A null string has no fields or separators.\n\nThe patsplit() function splits strings into pieces in a manner similar to the way input lines are split into fields using FPAT\n(see Defining Fields by Content [Splitting-By-Content.html]).\n\nBefore splitting the string, patsplit() deletes any previously existing elements in the arrays array and seps.\n\nsplit(string, array [, fieldsep [, seps ] ]) \u00b6\n\nDivide string into pieces separated by fieldsep and store the pieces in array and the separator strings in the seps array. The\nfirst piece is stored in array[1], the second piece in array[2], and so forth. The string value of the third argument, fieldsep,\nis a regexp describing where to split string (much as FS can be a regexp describing where to split input records). If fieldsep is\nomitted, the value of FS is used. split() returns the number of elements created. seps is a gawk extension, with seps[i] being the\nseparator string between array[i] and array[i+1]. If fieldsep is a single space, then any leading whitespace goes into seps[0] and\nany trailing whitespace goes into seps[n], where n is the return value of split() (i.e., the number of elements in array).\n\nThe split() function splits strings into pieces in the same way that input lines are split into fields. For example:\n\nsplit(\"cul-de-sac\", a, \"-\",", "doc_id": "1bf8226b-66b7-4f1c-93ed-28d7cc636df4", "embedding": null, "doc_hash": "f31da86617354ebdd1d0c1bbd3ee5a9973d4f336d7e10f2297ef7c60904d0d39", "extra_info": null, "node_info": {"start": 10549, "end": 13942, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "2": "2d94e5d0-7057-4cd7-9beb-7fb0647d5d8b", "3": "4a979cbe-8e5c-40ec-b607-a5558f20d0e9"}}, "__type__": "1"}, "4a979cbe-8e5c-40ec-b607-a5558f20d0e9": {"__data__": {"text": "into fields. For example:\n\nsplit(\"cul-de-sac\", a, \"-\", seps)\n\n\nsplits the string \"cul-de-sac\" into three fields using \u2018-\u2019 as the separator. It sets the contents of the array a as follows:\n\na[1] = \"cul\"\na[2] = \"de\"\na[3] = \"sac\"\n\n\nand sets the contents of the array seps as follows:\n\nseps[1] = \"-\"\nseps[2] = \"-\"\n\n\nThe value returned by this call to split() is three.\n\nAs with input field-splitting, when the value of fieldsep is \"\u00a0\", leading and trailing whitespace is ignored in values assigned to\nthe elements of array but not in seps, and the elements are separated by runs of whitespace. Also, as with input field splitting,\nif fieldsep is the null string, each individual character in the string is split into its own array element. (c.e.) Additionally,\nif fieldsep is a single-character string, that string acts as the separator, even if its value is a regular expression\nmetacharacter.\n\nNote, however, that RS has no effect on the way split() works. Even though \u2018RS = \"\"\u2019 causes the newline character to also be an\ninput field separator, this does not affect how split() splits strings.\n\nModern implementations of awk, including gawk, allow the third argument to be a regexp constant (/\u2026/) as well as a string. (d.c.)\nThe POSIX standard allows this as well. See Using Dynamic Regexps [Computed-Regexps.html] for a discussion of the difference\nbetween using a string constant or a regexp constant, and the implications for writing your program correctly.\n\nBefore splitting the string, split() deletes any previously existing elements in the arrays array and seps.\n\nIf string is null, the array has no elements. (So this is a portable way to delete an entire array with one statement. See The\ndelete Statement [Delete.html].)\n\nIf string does not match fieldsep at all (but is not null), array has one element only. The value of that element is the original\nstring.\n\nIn POSIX mode (see Command-Line Options [Options.html]), the fourth argument is not allowed.\n\nsprintf(format, expression1, \u2026) \u00b6\n\nReturn (without printing) the string that printf would have printed out with the same arguments (see Using printf Statements for\nFancier Printing [Printf.html]). For example:\n\npival = sprintf(\"pi = %.2f (approx.)\", 22/7)\n\n\nassigns the string \u2018pi\u00a0=\u00a03.14\u00a0(approx.)\u2019 to the variable pival.\n\nstrtonum(str) #\n\nExamine str and return its numeric value. If str begins with a leading \u20180\u2019, strtonum() assumes that str is an octal number. If str\nbegins with a leading \u20180x\u2019 or \u20180X\u2019, strtonum() assumes that str is a hexadecimal number. For example:\n\n$ echo 0x11 |\n> gawk '{ printf \"%d\\n\", strtonum($1) }'\n-| 17\n\n\nUsing the strtonum() function is not the same as adding zero to a string value; the automatic coercion of strings to numbers works\nonly for decimal data, not for octal or hexadecimal.47\n\nNote also that strtonum() uses the current locale\u2019s decimal point for recognizing numbers (see Where You Are Makes a Difference\n[Locales.html]).\n\nsub(regexp, replacement [, target]) \u00b6\n\nSearch target, which is treated as a string, for the leftmost, longest substring matched by the regular expression regexp. Modify\nthe entire string by replacing the matched text with replacement. The modified string becomes the new value of target. Return the\nnumber of substitutions made (zero or one).\n\nThe regexp argument may be either a regexp constant (/\u2026/) or a string constant (\"\u2026\"). In the latter case, the string is treated as\na regexp to be matched. See Using Dynamic Regexps", "doc_id": "4a979cbe-8e5c-40ec-b607-a5558f20d0e9", "embedding": null, "doc_hash": "738edb02c4f9a1284060fb40b14bd6e8ef631f53b341ae79d102cc9d9943ca86", "extra_info": null, "node_info": {"start": 13938, "end": 17395, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "2": "1bf8226b-66b7-4f1c-93ed-28d7cc636df4", "3": "93e07af7-c4d4-4333-9787-4b79b66eb616"}}, "__type__": "1"}, "93e07af7-c4d4-4333-9787-4b79b66eb616": {"__data__": {"text": "the string is treated as\na regexp to be matched. See Using Dynamic Regexps [Computed-Regexps.html] for a discussion of the difference between the two\nforms, and the implications for writing your program correctly.\n\nThis function is peculiar because target is not simply used to compute a value, and not just any expression will do\u2014it must be a\nvariable, field, or array element so that sub() can store a modified value there. If this argument is omitted, then the default is\nto use and alter $0.48 For example:\n\nstr = \"water, water, everywhere\"\nsub(/at/, \"ith\", str)\n\n\nsets str to \u2018wither,\u00a0water,\u00a0everywhere\u2019, by replacing the leftmost longest occurrence of \u2018at\u2019 with \u2018ith\u2019.\n\nIf the special character \u2018&\u2019 appears in replacement, it stands for the precise substring that was matched by regexp. (If the\nregexp can match more than one string, then this precise substring may vary.) For example:\n\n{ sub(/candidate/, \"& and his wife\"); print }\n\n\nchanges the first occurrence of \u2018candidate\u2019 to \u2018candidate and his wife\u2019 on each input line. Here is another example:\n\n$ awk 'BEGIN {\n>         str = \"daabaaa\"\n>         sub(/a+/, \"C&C\", str)\n>         print str\n> }'\n-| dCaaCbaaa\n\n\nThis shows how \u2018&\u2019 can represent a nonconstant string and also illustrates the \u201cleftmost, longest\u201d rule in regexp matching (see\nHow Much Text Matches? [Leftmost-Longest.html]).\n\nThe effect of this special character (\u2018&\u2019) can be turned off by putting a backslash before it in the string. As usual, to insert\none backslash in the string, you must write two backslashes. Therefore, write \u2018\\\\&\u2019 in a string constant to include a literal \u2018&\u2019\nin the replacement. For example, the following shows how to replace the first \u2018|\u2019 on each line with an \u2018&\u2019:\n\n{ sub(/\\|/, \"\\\\&\"); print }\n\n\nAs mentioned, the third argument to sub() must be a variable, field, or array element. Some versions of awk allow the third\nargument to be an expression that is not an lvalue. In such a case, sub() still searches for the pattern and returns zero or one,\nbut the result of the substitution (if any) is thrown away because there is no place to put it. Such versions of awk accept\nexpressions like the following:\n\nsub(/USA/, \"United States\", \"the USA and Canada\")\n\n\nFor historical compatibility, gawk accepts such erroneous code. However, using any other nonchangeable object as the third\nparameter causes a fatal error and your program will not run.\n\nFinally, if the regexp is not a regexp constant, it is converted into a string, and then the value of that string is treated as\nthe regexp to match.\n\nsubstr(string, start [, length ]) \u00b6\n\nReturn a length-character-long substring of string, starting at character number start. The first character of a string is\ncharacter number one.49 For example, substr(\"washington\", 5, 3) returns \"ing\".\n\nIf length is not present, substr() returns the whole suffix of string that begins at character number start. For example,\nsubstr(\"washington\", 5) returns \"ington\". The whole suffix is also returned if length is greater than the number of characters\nremaining in the string, counting from character start.\n\nIf start is less than one, substr() treats it as if it was one. (POSIX doesn\u2019t specify what to do in this case: BWK awk acts this\nway, and therefore gawk does too.) If start is greater than the number of characters in the string, substr() returns the null\nstring. Similarly, if length is present but less than or equal to zero, the null string is returned.\n\nThe string returned by substr()", "doc_id": "93e07af7-c4d4-4333-9787-4b79b66eb616", "embedding": null, "doc_hash": "f7293dcb32c6f77aa3962f85b8e343c0a56a2640efdfe3a3e2b8c545f675c74c", "extra_info": null, "node_info": {"start": 17383, "end": 20865, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "2": "4a979cbe-8e5c-40ec-b607-a5558f20d0e9", "3": "b078b0f9-802f-468d-95f5-10bebf455ef9"}}, "__type__": "1"}, "b078b0f9-802f-468d-95f5-10bebf455ef9": {"__data__": {"text": "to zero, the null string is returned.\n\nThe string returned by substr() cannot be assigned. Thus, it is a mistake to attempt to change a portion of a string, as shown in\nthe following example:\n\nstring = \"abcdef\"\n# try to get \"abCDEf\", won't work\nsubstr(string, 3, 3) = \"CDE\"\n\n\nIt is also a mistake to use substr() as the third argument of sub() or gsub():\n\ngsub(/xyz/, \"pdq\", substr($0, 5, 20))  # WRONG\n\n\n(Some commercial versions of awk treat substr() as assignable, but doing so is not portable.)\n\nIf you need to replace bits and pieces of a string, combine substr() with string concatenation, in the following manner:\n\nstring = \"abcdef\"\n\u2026\nstring = substr(string, 1, 2) \"CDE\" substr(string, 6)\n\n\ntolower(string) \u00b6\n\nReturn a copy of string, with each uppercase character in the string replaced with its corresponding lowercase character.\nNonalphabetic characters are left unchanged. For example, tolower(\"MiXeD cAsE 123\") returns \"mixed case 123\".\n\ntoupper(string) \u00b6\n\nReturn a copy of string, with each lowercase character in the string replaced with its corresponding uppercase character.\nNonalphabetic characters are left unchanged. For example, toupper(\"MiXeD cAsE 123\") returns \"MIXED CASE 123\".\n\nAt first glance, the split() and patsplit() functions appear to be mirror images of each other. But there are differences:\n\n * split() treats its third argument like FS, with all the special rules involved for FS.\n * Matching of null strings differs. This is discussed in FS Versus FPAT: A Subtle Difference [FS-versus-FPAT.html].\n\nMatching the Null String\n\nIn awk, the \u2018*\u2019 operator can match the null string. This is particularly important for the sub(), gsub(), and gensub() functions.\nFor example:\n\n$ echo abc | awk '{ gsub(/m*/, \"X\"); print }'\n-| XaXbXcX\n\n\nAlthough this makes a certain amount of sense, it can be surprising.\n\n * More about \u2018\\\u2019 and \u2018&\u2019 with sub(), gsub(), and gensub() [Gory-Details.html]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(47)\n\nUnless you use the --non-decimal-data option, which isn\u2019t recommended. See Allowing Nondecimal Input Data [Nondecimal-Data.html]\nfor more information.\n\n(48)\n\nNote that this means that the record will first be regenerated using the value of OFS if any fields have been changed, and that\nthe fields will be updated after the substitution, even if the operation is a \u201cno-op\u201d such as \u2018sub(/^/, \"\")\u2019.\n\n(49)\n\nThis is different from C and C++, in which the first character is number zero.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Input/Output Functions [I_002fO-Functions.html], Previous: Numeric Functions [Numeric-Functions.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b078b0f9-802f-468d-95f5-10bebf455ef9", "embedding": null, "doc_hash": "d1633f6016e5e01c08cc4979683bea32c044acb68495d61a5835fa6da122fa10", "extra_info": null, "node_info": {"start": 20857, "end": 23744, "_node_type": "1"}, "relationships": {"1": "e9722366-3ff3-4ff3-8017-521ce85d8c8d", "2": "93e07af7-c4d4-4333-9787-4b79b66eb616"}}, "__type__": "1"}, "e9a5d53c-f9e0-4bac-abab-873257d7c7fe": {"__data__": {"text": "Next: Locales Can Influence Conversion [Locale-influences-conversions.html], Up: Conversion of Strings and Numbers\n[Conversion.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.4.1 HOW AWK CONVERTS BETWEEN STRINGS AND NUMBERS\n\nStrings are converted to numbers and numbers are converted to strings, if the context of the awk program demands it. For example,\nif the value of either foo or bar in the expression \u2018foo + bar\u2019 happens to be a string, it is converted to a number before the\naddition is performed. If numeric values appear in string concatenation, they are converted to strings. Consider the following:\n\ntwo = 2; three = 3\nprint (two three) + 4\n\n\nThis prints the (numeric) value 27. The numeric values of the variables two and three are converted to strings and concatenated\ntogether. The resulting string is converted back to the number 23, to which 4 is then added.\n\nIf, for some reason, you need to force a number to be converted to a string, concatenate that number with the empty string, \"\". To\nforce a string to be converted to a number, add zero to that string. A string is converted to a number by interpreting any numeric\nprefix of the string as numerals: \"2.5\" converts to 2.5, \"1e3\" converts to 1,000, and \"25fix\" has a numeric value of 25. Strings\nthat can\u2019t be interpreted as valid numbers convert to zero.\n\nThe exact manner in which numbers are converted into strings is controlled by the awk predefined variable CONVFMT (see Predefined\nVariables [Built_002din-Variables.html]). Numbers are converted using the sprintf() function with CONVFMT as the format specifier\n(see String-Manipulation Functions [String-Functions.html]).\n\nCONVFMT\u2019s default value is \"%.6g\", which creates a value with at most six significant digits. For some applications, you might\nwant to change it to specify more precision. On most modern machines, 17 digits is usually enough to capture a floating-point\nnumber\u2019s value exactly.31\n\nStrange results can occur if you set CONVFMT to a string that doesn\u2019t tell sprintf() how to format floating-point numbers in a\nuseful way. For example, if you forget the \u2018%\u2019 in the format, awk converts all numbers to the same constant string.\n\nAs a special case, if a number is an integer, then the result of converting it to a string is always an integer, no matter what\nthe value of CONVFMT may be. Given the following code fragment:\n\nCONVFMT = \"%2.2f\"\na = 12\nb = a \"\"\n\n\nb has the value \"12\", not \"12.00\". (d.c.)\n\nPre-POSIX awk Used OFMT for String Conversion\n\nPrior to the POSIX standard, awk used the value of OFMT for converting numbers to strings. OFMT specifies the output format to use\nwhen printing numbers with print. CONVFMT was introduced in order to separate the semantics of conversion from the semantics of\nprinting. Both CONVFMT and OFMT have the same default value: \"%.6g\". In the vast majority of cases, old awk programs do not change\ntheir behavior. See The print Statement [Print.html] for more information on the print statement.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(31)\n\nPathological cases can require up to 752 digits (!), but we doubt that you need to worry about this.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Locales Can Influence Conversion [Locale-influences-conversions.html], Up: Conversion of Strings and Numbers\n[Conversion.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "e9a5d53c-f9e0-4bac-abab-873257d7c7fe", "embedding": null, "doc_hash": "94d2a88e3aea34120bb25f8c3684bb80ec8a915f1e30710f8f5e87ff8bed67e9", "extra_info": null, "node_info": {"start": 0, "end": 3710, "_node_type": "1"}, "relationships": {"1": "147092c1-1102-4b9e-a42b-f51f2553c1d8"}}, "__type__": "1"}, "881e962d-55cc-42b0-acd5-60fddada208f": {"__data__": {"text": "Previous: Standard Regular Expression Constants [Standard-Regexp-Constants.html], Up: Using Regular Expression Constants\n[Using-Constant-Regexps.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.2.2 STRONGLY TYPED REGEXP CONSTANTS\n\nThis section describes a gawk-specific feature.\n\nAs we saw in the previous section, regexp constants (/\u2026/) hold a strange position in the awk language. In most contexts, they act\nlike an expression: \u2018$0 ~ /\u2026/\u2019. In other contexts, they denote only a regexp to be matched. In no case are they really a \u201cfirst\nclass citizen\u201d of the language. That is, you cannot define a scalar variable whose type is \u201cregexp\u201d in the same sense that you can\ndefine a variable to be a number or a string:\n\nnum = 42        Numeric variable\nstr = \"hi\"      String variable\nre = /foo/      Wrong! re is the result of $0 ~ /foo/\n\n\nFor a number of more advanced use cases, it would be nice to have regexp constants that are strongly typed; in other words, that\ndenote a regexp useful for matching, and not an expression.\n\ngawk provides this feature. A strongly typed regexp constant looks almost like a regular regexp constant, except that it is\npreceded by an \u2018@\u2019 sign:\n\nre = @/foo/     Regexp variable\n\n\nStrongly typed regexp constants cannot be used everywhere that a regular regexp constant can, because this would make the language\neven more confusing. Instead, you may use them only in certain contexts:\n\n * On the righthand side of the \u2018~\u2019 and \u2018!~\u2019 operators: \u2018some_var ~ @/foo/\u2019 (see How to Use Regular Expressions\n   [Regexp-Usage.html]).\n * In the case part of a switch statement (see The switch Statement [Switch-Statement.html]).\n * As an argument to one of the built-in functions that accept regexp constants: gensub(), gsub(), match(), patsplit(), split(),\n   and sub() (see String-Manipulation Functions [String-Functions.html]).\n * As a parameter in a call to a user-defined function (see User-Defined Functions [User_002ddefined.html]).\n * As the return value of a user-defined function.\n * On the righthand side of an assignment to a variable: \u2018some_var = @/foo/\u2019. In this case, the type of some_var is regexp.\n   Additionally, some_var can be used with \u2018~\u2019 and \u2018!~\u2019, passed to one of the built-in functions listed above, or passed as a\n   parameter to a user-defined function.\n\nYou may use the -v option (see Command-Line Options [Options.html]) to assign a strongly-typed regexp constant to a variable on\nthe command line, like so:\n\ngawk -v pattern='@/something(interesting)+/' \u2026\n\n\nYou may also make such assignments as regular command-line arguments (see Other Command-Line Arguments [Other-Arguments.html]).\n\nYou may use the typeof() built-in function (see Getting Type Information [Type-Functions.html]) to determine if a variable or\nfunction parameter is a regexp variable.\n\nThe true power of this feature comes from the ability to create variables that have regexp type. Such variables can be passed on\nto user-defined functions, without the confusing aspects of computed regular expressions created from strings or string constants.\nThey may also be passed through indirect function calls (see Indirect Function Calls [Indirect-Calls.html]) and on to the built-in\nfunctions that accept regexp constants.\n\nWhen used in numeric conversions, strongly typed regexp variables convert to zero. When used in string conversions, they convert\nto the string value of", "doc_id": "881e962d-55cc-42b0-acd5-60fddada208f", "embedding": null, "doc_hash": "3dd3e74c9db658a765d4763e3e978dcf3914d6b6207a77c414aaf4f3f83d3b1c", "extra_info": null, "node_info": {"start": 0, "end": 3540, "_node_type": "1"}, "relationships": {"1": "574ff711-e261-4047-aa3d-1f1b7a68fbcb", "3": "b1285bd8-c119-44e4-a6fc-e3c9e7483292"}}, "__type__": "1"}, "b1285bd8-c119-44e4-a6fc-e3c9e7483292": {"__data__": {"text": "to zero. When used in string conversions, they convert\nto the string value of the original regexp text.\n\nThere is an additional, interesting corner case. When used as the third argument to sub() or gsub(), they retain their type. Thus,\nif you have something like this:\n\nre = @/don't panic/\nsub(/don't/, \"do\", re)\nprint typeof(re), re\n\n\nthen re retains its type, but now attempts to match the string \u2018do panic\u2019. This provides a (very indirect) way to create\nregexp-typed variables at runtime.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Standard Regular Expression Constants [Standard-Regexp-Constants.html], Up: Using Regular Expression Constants\n[Using-Constant-Regexps.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "b1285bd8-c119-44e4-a6fc-e3c9e7483292", "embedding": null, "doc_hash": "acfefa4adbda93698afc3c49bdfff516fbea66d5a74c1f3171dc1bc1ee92b867", "extra_info": null, "node_info": {"start": 3463, "end": 4297, "_node_type": "1"}, "relationships": {"1": "574ff711-e261-4047-aa3d-1f1b7a68fbcb", "2": "881e962d-55cc-42b0-acd5-60fddada208f"}}, "__type__": "1"}, "14c8f229-a448-42a1-8ef5-0e7128010194": {"__data__": {"text": "Next: Assertions [Assert-Function.html], Up: General Programming [General-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n10.2.1 CONVERTING STRINGS TO NUMBERS\n\nThe strtonum() function (see String-Manipulation Functions [String-Functions.html]) is a gawk extension. The following function\nprovides an implementation for other versions of awk:\n\n# mystrtonum --- convert string to number\n\nfunction mystrtonum(str,        ret, n, i, k, c)\n{\n    if (str ~ /^0[0-7]*$/) {\n        # octal\n        n = length(str)\n        ret = 0\n        for (i = 1; i <= n; i++) {\n            c = substr(str, i, 1)\n            # index() returns 0 if c not in string,\n            # includes c == \"0\"\n            k = index(\"1234567\", c)\n\n            ret = ret * 8 + k\n        }\n    } else if (str ~ /^0[xX][[:xdigit:]]+$/) {\n        # hexadecimal\n        str = substr(str, 3)    # lop off leading 0x\n        n = length(str)\n        ret = 0\n        for (i = 1; i <= n; i++) {\n            c = substr(str, i, 1)\n            c = tolower(c)\n            # index() returns 0 if c not in string,\n            # includes c == \"0\"\n            k = index(\"123456789abcdef\", c)\n\n            ret = ret * 16 + k\n        }\n    } else if (str ~ \\\n  /^[-+]?([0-9]+([.][0-9]*([Ee][0-9]+)?)?|([.][0-9]+([Ee][-+]?[0-9]+)?))$/) {\n        # decimal number, possibly floating point\n        ret = str + 0\n    } else\n        ret = \"NOT-A-NUMBER\"\n\n    return ret\n}\n\n# BEGIN {     # gawk test harness\n#     a[1] = \"25\"\n#     a[2] = \".31\"\n#     a[3] = \"0123\"\n#     a[4] = \"0xdeadBEEF\"\n#     a[5] = \"123.45\"\n#     a[6] = \"1.e3\"\n#     a[7] = \"1.32\"\n#     a[8] = \"1.32E2\"\n#\n#     for (i = 1; i in a; i++)\n#         print a[i], strtonum(a[i]), mystrtonum(a[i])\n# }\n\n\nThe function first looks for C-style octal numbers (base 8). If the input string matches a regular expression describing octal\nnumbers, then mystrtonum() loops through each character in the string. It sets k to the index in \"1234567\" of the current octal\ndigit. The return value will either be the same number as the digit, or zero if the character is", "doc_id": "14c8f229-a448-42a1-8ef5-0e7128010194", "embedding": null, "doc_hash": "cf892b0044b47104442538d5d465cdbee45f37c69e3f9abe87da0364d1c143f7", "extra_info": null, "node_info": {"start": 0, "end": 2218, "_node_type": "1"}, "relationships": {"1": "2e3949b0-fedb-4f2f-896d-535dcd2954d3", "3": "6cc7f615-9b3e-45ca-913d-4d0e1df0d8e2"}}, "__type__": "1"}, "6cc7f615-9b3e-45ca-913d-4d0e1df0d8e2": {"__data__": {"text": "The return value will either be the same number as the digit, or zero if the character is not there, which will be true for\na \u20180\u2019. This is safe, because the regexp test in the if ensures that only octal values are converted.\n\nSimilar logic applies to the code that checks for and converts a hexadecimal value, which starts with \u20180x\u2019 or \u20180X\u2019. The use of\ntolower() simplifies the computation for finding the correct numeric value for each hexadecimal digit.\n\nFinally, if the string matches the (rather complicated) regexp for a regular decimal integer or floating-point number, the\ncomputation \u2018ret = str + 0\u2019 lets awk convert the value to a number.\n\nA commented-out test program is included, so that the function can be tested with gawk and the results compared to the built-in\nstrtonum() function.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Assertions [Assert-Function.html], Up: General Programming [General-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6cc7f615-9b3e-45ca-913d-4d0e1df0d8e2", "embedding": null, "doc_hash": "8029c7419c18a8fd32b7bf5c2300e43b912808830567060475f29d5fddd40c66", "extra_info": null, "node_info": {"start": 2129, "end": 3208, "_node_type": "1"}, "relationships": {"1": "2e3949b0-fedb-4f2f-896d-535dcd2954d3", "2": "14c8f229-a448-42a1-8ef5-0e7128010194"}}, "__type__": "1"}, "2ef39962-6661-4b58-8397-ffeefb8ee539": {"__data__": {"text": "Next: The break Statement [Break-Statement.html], Previous: The for Statement [For-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.5 THE SWITCH STATEMENT\n\nThis section describes a gawk-specific feature. If gawk is in compatibility mode (see Command-Line Options [Options.html]), it is\nnot available.\n\nThe switch statement allows the evaluation of an expression and the execution of statements based on a case match. Case statements\nare checked for a match in the order they are defined. If no suitable case is found, the default section is executed, if supplied.\n\nEach case contains a single constant, be it numeric, string, or regexp. The switch expression is evaluated, and then each case\u2019s\nconstant is compared against the result in turn. The type of constant determines the comparison: numeric or string do the usual\ncomparisons. A regexp constant (either regular, /foo/, or strongly typed, @/foo/) does a regular expression match against the\nstring value of the original expression. The general form of the switch statement looks like this:\n\nswitch (expression) {\ncase value or regular expression:\n    case-body\ndefault:\n    default-body\n}\n\n\nControl flow in the switch statement works as it does in C. Once a match to a given case is made, the case statement bodies\nexecute until a break, continue, next, nextfile, or exit is encountered, or the end of the switch statement itself. For example:\n\nwhile ((c = getopt(ARGC, ARGV, \"aksx\")) != -1) {\n    switch (c) {\n    case \"a\":\n        # report size of all files\n        all_files = TRUE;\n        break\n    case \"k\":\n        BLOCK_SIZE = 1024       # 1K block size\n        break\n    case \"s\":\n        # do sums only\n        sum_only = TRUE\n        break\n    case \"x\":\n        # don't cross filesystems\n        fts_flags = or(fts_flags, FTS_XDEV)\n        break\n    case \"?\":\n    default:\n        usage()\n        break\n    }\n}\n\n\nNote that if none of the statements specified here halt execution of a matched case statement, execution falls through to the next\ncase until execution halts. In this example, the case for \"?\" falls through to the default case, which is to call a function named\nusage(). (The getopt() function being called here is described in Processing Command-Line Options [Getopt-Function.html].)\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The break Statement [Break-Statement.html], Previous: The for Statement [For-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2ef39962-6661-4b58-8397-ffeefb8ee539", "embedding": null, "doc_hash": "e842a32896c0826b9100b718c0e66ca05ff90b00d8d69f1e43d958b3ded6996c", "extra_info": null, "node_info": {"start": 0, "end": 2825, "_node_type": "1"}, "relationships": {"1": "ea19df4d-7808-460c-a1b0-58255df16051"}}, "__type__": "1"}, "015acb02-515e-42bc-9e4f-62723517ca90": {"__data__": {"text": "Next: Array Manipulation [Array-Manipulation.html], Previous: Accessing and Updating Parameters [Accessing-Parameters.html], Up:\nAPI Description [Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.11 SYMBOL TABLE ACCESS\n\nTwo sets of routines provide access to global variables, and one set allows you to create and release cached values.\n\n * Variable Access and Update by Name [Symbol-table-by-name.html]\n * Variable Access and Update by Cookie [Symbol-table-by-cookie.html]\n * Creating and Using Cached Values [Cached-values.html]", "doc_id": "015acb02-515e-42bc-9e4f-62723517ca90", "embedding": null, "doc_hash": "cc0acb15c195200f297c3abdf521f43f7cdfb0df586860e65c26c0c1d9d5772a", "extra_info": null, "node_info": {"start": 0, "end": 709, "_node_type": "1"}, "relationships": {"1": "2dfd8e3b-bbed-4587-a172-9c2ca1b1ff39"}}, "__type__": "1"}, "c77f6f3f-c4b3-494e-b112-2552c2c76fbb": {"__data__": {"text": "Next: Creating and Using Cached Values [Cached-values.html], Previous: Variable Access and Update by Name\n[Symbol-table-by-name.html], Up: Symbol Table Access [Symbol-Table-Access.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.11.2 VARIABLE ACCESS AND UPDATE BY COOKIE\n\nA scalar cookie is an opaque handle that provides access to a global variable or array. It is an optimization that avoids looking\nup variables in gawk\u2019s symbol table every time access is needed. This was discussed earlier, in General-Purpose Data Types\n[General-Data-Types.html].\n\nThe following functions let you work with scalar cookies:\n\nawk_bool_t sym_lookup_scalar(awk_scalar_t cookie, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t wanted,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result);\n\nRetrieve the current value of a scalar cookie. Once you have obtained a scalar cookie using sym_lookup(), you can use this\nfunction to get its value more efficiently. Return false if the value cannot be retrieved.\n\nawk_bool_t sym_update_scalar(awk_scalar_t cookie, awk_value_t *value);\n\nUpdate the value associated with a scalar cookie. Return false if the new value is not of type AWK_STRING, AWK_STRNUM, AWK_REGEX,\nor AWK_NUMBER. Here too, the predefined variables may not be updated.\n\nIt is not obvious at first glance how to work with scalar cookies or what their raison d\u2019\u00eatre really is. In theory, the\nsym_lookup() and sym_update() routines are all you really need to work with variables. For example, you might have code that looks\nup the value of a variable, evaluates a condition, and then possibly changes the value of the variable based on the result of that\nevaluation, like so:\n\n/*  do_magic --- do something really great */\n\nstatic awk_value_t *\ndo_magic(int nargs, awk_value_t *result)\n{\n    awk_value_t value;\n\n    if (   sym_lookup(\"MAGIC_VAR\", AWK_NUMBER, & value)\n        && some_condition(value.num_value)) {\n            value.num_value += 42;\n            sym_update(\"MAGIC_VAR\", & value);\n    }\n\n    return make_number(0.0, result);\n}\n\n\nThis code looks (and is) simple and straightforward. So what\u2019s the problem?\n\nWell, consider what happens if awk-level code associated with your extension calls the magic() function (implemented in C by\ndo_magic()), once per record, while processing hundreds of thousands or millions of records. The MAGIC_VAR variable is looked up\nin the symbol table once or twice per function call!\n\nThe symbol table lookup is really pure overhead; it is considerably more efficient to get a cookie that represents the variable,\nand use that to get the variable\u2019s value and update it as needed.107\n\nThus, the way to use cookies is as follows. First, install your extension\u2019s variable in gawk\u2019s symbol table using sym_update(), as\nusual. Then get a scalar cookie for the variable using sym_lookup():\n\nstatic awk_scalar_t magic_var_cookie;    /* cookie for MAGIC_VAR */\n\nstatic void\nmy_extension_init()\n{\n    awk_value_t value;\n\n\n\n\n    /* install initial value */\n    sym_update(\"MAGIC_VAR\", make_number(42.0, & value));\n\n    /* get the cookie */\n    sym_lookup(\"MAGIC_VAR\", AWK_SCALAR, & value);\n\n    /* save the cookie */\n    magic_var_cookie =", "doc_id": "c77f6f3f-c4b3-494e-b112-2552c2c76fbb", "embedding": null, "doc_hash": "a21eebae94e4b8f9b1e1594309e23a7644f4cf9b52bb92b31e62d135813d895b", "extra_info": null, "node_info": {"start": 0, "end": 3306, "_node_type": "1"}, "relationships": {"1": "fc9a5387-f75d-4432-a0de-550e357c130d", "3": "9a343352-76db-4fb3-9a42-d0c264d3f73d"}}, "__type__": "1"}, "9a343352-76db-4fb3-9a42-d0c264d3f73d": {"__data__": {"text": "   /* save the cookie */\n    magic_var_cookie = value.scalar_cookie;\n    \u2026\n}\n\n\nNext, use the routines in this section for retrieving and updating the value through the cookie. Thus, do_magic() now becomes\nsomething like this:\n\n/*  do_magic --- do something really great */\n\nstatic awk_value_t *\ndo_magic(int nargs, awk_value_t *result)\n{\n    awk_value_t value;\n\n    if (   sym_lookup_scalar(magic_var_cookie, AWK_NUMBER, & value)\n        && some_condition(value.num_value)) {\n            value.num_value += 42;\n            sym_update_scalar(magic_var_cookie, & value);\n    }\n    \u2026\n\n    return make_number(0.0, result);\n}\n\n\n> NOTE: The previous code omitted error checking for presentation purposes. Your extension code should be more robust and\n> carefully check the return values from the API functions.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(107)\n\nThe difference is measurable and quite real. Trust us.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Creating and Using Cached Values [Cached-values.html], Previous: Variable Access and Update by Name\n[Symbol-table-by-name.html], Up: Symbol Table Access [Symbol-Table-Access.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "9a343352-76db-4fb3-9a42-d0c264d3f73d", "embedding": null, "doc_hash": "2fbfbac75a3ab2cee20db372e6438bafcd08c25ad0d21a9e2bd3d95b6d6b61fa", "extra_info": null, "node_info": {"start": 3259, "end": 4647, "_node_type": "1"}, "relationships": {"1": "fc9a5387-f75d-4432-a0de-550e357c130d", "2": "c77f6f3f-c4b3-494e-b112-2552c2c76fbb"}}, "__type__": "1"}, "e9e7b2d9-9b29-437c-85a1-fb0bc97d018b": {"__data__": {"text": "Next: Variable Access and Update by Cookie [Symbol-table-by-cookie.html], Up: Symbol Table Access [Symbol-Table-Access.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.11.1 VARIABLE ACCESS AND UPDATE BY NAME\n\nThe following routines provide the ability to access and update global awk-level variables by name. In compiler terminology,\nidentifiers of different kinds are termed symbols, thus the \u201csym\u201d in the routines\u2019 names. The data structure that stores\ninformation about symbols is termed a symbol table. The functions are as follows:\n\nawk_bool_t sym_lookup(const char *name, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t wanted, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result);\n\nFill in the awk_value_t structure pointed to by result with the value of the variable named by the string name, which is a regular\nC string. wanted indicates the type of value expected. Return true if the actual type matches wanted, and false otherwise. In the\nlatter case, result->val_type indicates the actual type (see Table 17.2\n[Requesting-Values.html#table_002dvalue_002dtypes_002dreturned]).\n\nawk_bool_t sym_lookup_ns(const char *name, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const char *name_space, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_valtype_t\nwanted, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_value_t *result);\n\nThis is like sym_lookup(), but the name_space parameter allows you to specify which namespace name is part of. name_space cannot\nbe NULL. If it is \"\" or \"awk\", then name is searched for in the default awk namespace.\n\nNote that namespace is a C++ keyword. For interoperability with C++, you should avoid using that identifier in C code.\n\nawk_bool_t sym_update(const char *name, awk_value_t *value);\n\nUpdate the variable named by the string name, which is a regular C string. The variable is added to gawk\u2019s symbol table if it is\nnot there. Return true if everything worked, and false otherwise.\n\nChanging types (scalar to array or vice versa) of an existing variable is not allowed, nor may this routine be used to update an\narray. This routine cannot be used to update any of the predefined variables (such as ARGC or NF).\n\nawk_bool_t sym_update_ns(const char *name_space, const char *name, awk_value_t *value);\n\nThis is like sym_update(), but the name_space parameter allows you to specify which namespace name is part of. name_space cannot\nbe NULL. If it is \"\" or \"awk\", then name is searched for in the default awk namespace.\n\nAn extension can look up the value of gawk\u2019s special variables. However, with the exception of the PROCINFO array, an extension\ncannot change any of those variables.\n\nWhen searching for or updating variables outside the awk namespace (see Namespaces in gawk [Namespaces.html]), function and\nvariable names must be simple identifiers.106 In addition, namespace names and variable and function names must follow the rules\ngiven in Namespace and Component Naming Rules [Naming-Rules.html].\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(106)\n\nAllowing both namespace plus identifier and foo::bar would have been too confusing to document, and to code and test.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Variable Access and Update by Cookie [Symbol-table-by-cookie.html], Up: Symbol Table Access [Symbol-Table-Access.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "e9e7b2d9-9b29-437c-85a1-fb0bc97d018b", "embedding": null, "doc_hash": "5646e5f9aecac5f4cc0371dad7f82cd1db0c2628258fb763642ecaa2aee6c8b5", "extra_info": null, "node_info": {"start": 0, "end": 3610, "_node_type": "1"}, "relationships": {"1": "cb8bccb1-e9c1-4b13-a02a-16e17a700a13"}}, "__type__": "1"}, "e62b2ced-c426-4577-ad6c-7e0fafd6d007": {"__data__": {"text": "Next: Profiling Your awk Programs [Profiling.html], Previous: Two-Way Communications with Another Process\n[Two_002dway-I_002fO.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.5 USING GAWK FOR NETWORK PROGRAMMING\n\n> EMRED:\n> \u00a0\u00a0\u00a0\u00a0A host is a host from coast to coast,\n> \u00a0\u00a0\u00a0\u00a0and nobody talks to a host that\u2019s close,\n> \u00a0\u00a0\u00a0\u00a0unless the host that isn\u2019t close\n> \u00a0\u00a0\u00a0\u00a0is busy, hung, or dead.\n\n\u2014 Mike O\u2019Brien (aka Mr. Protocol)\n\nIn addition to being able to open a two-way pipeline to a coprocess on the same system (see Two-Way Communications with Another\nProcess [Two_002dway-I_002fO.html]), it is possible to make a two-way connection to another process on another system across an IP\nnetwork connection.\n\nYou can think of this as just a very long two-way pipeline to a coprocess. The way gawk decides that you want to use TCP/IP\nnetworking is by recognizing special file names that begin with one of \u2018/inet/\u2019, \u2018/inet4/\u2019, or \u2018/inet6/\u2019.\n\nThe full syntax of the special file name is /net-type/protocol/local-port/remote-host/remote-port. The components are:\n\nnet-type\n\nSpecifies the kind of Internet connection to make. Use \u2018/inet4/\u2019 to force IPv4, and \u2018/inet6/\u2019 to force IPv6. Plain \u2018/inet/\u2019 (which\nused to be the only option) uses the system default, most likely IPv4.\n\nprotocol\n\nThe protocol to use over IP. This must be either \u2018tcp\u2019, or \u2018udp\u2019, for a TCP or UDP IP connection, respectively. TCP should be used\nfor most applications.\n\nlocal-port \u00b6\n\nThe local TCP or UDP port number to use. Use a port number of \u20180\u2019 when you want the system to pick a port. This is what you should\ndo when writing a TCP or UDP client. You may also use a well-known service name, such as \u2018smtp\u2019 or \u2018http\u2019, in which case gawk\nattempts to determine the predefined port number using the C getaddrinfo() function.\n\nremote-host\n\nThe IP address or fully qualified domain name of the Internet host to which you want to connect.\n\nremote-port\n\nThe TCP or UDP port number to use on the given remote-host. Again, use \u20180\u2019 if you don\u2019t care, or else a well-known service name.\n\n> NOTE: Failure in opening a two-way socket will result in a nonfatal error being returned to the calling code. The value of ERRNO\n> indicates the error (see Built-in Variables That Convey Information [Auto_002dset.html]).\n\nConsider the following very simple example:\n\nBEGIN {\n    Service = \"/inet/tcp/0/localhost/daytime\"\n    Service |& getline\n    print $0\n    close(Service)\n}\n\n\nThis program reads the current date and time from the local system\u2019s TCP daytime server. It then prints the results and closes the\nconnection.\n\nBecause this topic is extensive, the use of gawk for TCP/IP programming is documented separately. See TCP/IP Internetworking with\ngawk [https://www.gnu.org/software/gawk/manual/gawkinet/], which comes as part of the gawk distribution, for a much more complete\nintroduction and discussion, as well as extensive examples.\n\n> NOTE: gawk can only open direct sockets. There is currently no way to access services available over Secure Socket Layer (SSL);\n> this includes any web service whose URL starts with \u2018https://\u2019.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Profiling Your awk Programs [Profiling.html], Previous: Two-Way Communications with Another", "doc_id": "e62b2ced-c426-4577-ad6c-7e0fafd6d007", "embedding": null, "doc_hash": "d97ccd89974e5365d30a5237a0f5ca8e90526f925cc125f8d2728cd900a20c6d", "extra_info": null, "node_info": {"start": 0, "end": 3521, "_node_type": "1"}, "relationships": {"1": "6c47fe64-e54d-485f-9ace-85ce5eef8338", "3": "34bd076e-38ac-43aa-9015-3f9c7e7e1ef0"}}, "__type__": "1"}, "34bd076e-38ac-43aa-9015-3f9c7e7e1ef0": {"__data__": {"text": "Your awk Programs [Profiling.html], Previous: Two-Way Communications with Another Process\n[Two_002dway-I_002fO.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "34bd076e-38ac-43aa-9015-3f9c7e7e1ef0", "embedding": null, "doc_hash": "095dacab9af9c016a309fcd975dd50a894f2e3a83c36e9e99e7a761c7ddb9d02", "extra_info": null, "node_info": {"start": 3440, "end": 3671, "_node_type": "1"}, "relationships": {"1": "6c47fe64-e54d-485f-9ace-85ce5eef8338", "2": "e62b2ced-c426-4577-ad6c-7e0fafd6d007"}}, "__type__": "1"}, "3a8943b0-2593-4a61-88ab-100498f3e78f": {"__data__": {"text": "Next: Printing Nonduplicated Lines of Text [Uniq-Program.html], Previous: Splitting a Large File into Pieces [Split-Program.html],\nUp: Reinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.5 DUPLICATING OUTPUT INTO MULTIPLE FILES\n\nThe tee program is known as a \u201cpipe fitting.\u201d tee copies its standard input to its standard output and also duplicates it to the\nfiles named on the command line. Its usage is as follows:\n\ntee [-a] file \u2026\n\n\nThe -a option tells tee to append to the named files, instead of truncating them and starting over.\n\nThe BEGIN rule first makes a copy of all the command-line arguments into an array named copy. ARGV[0] is not needed, so it is not\ncopied. tee cannot use ARGV directly, because awk attempts to process each file name in ARGV as input data.\n\nIf the first argument is -a, then the flag variable append is set to true, and both ARGV[1] and copy[1] are deleted. If ARGC is\nless than two, then no file names were supplied and tee prints a usage message and exits. Finally, awk is forced to read the\nstandard input by setting ARGV[1] to \"-\" and ARGC to two:\n\n# tee.awk --- tee in awk\n#\n# Copy standard input to all named output files.\n# Append content if -a option is supplied.\n#\nBEGIN {\n    for (i = 1; i < ARGC; i++)\n        copy[i] = ARGV[i]\n\n    if (ARGV[1] == \"-a\") {\n        append = 1\n        delete ARGV[1]\n        delete copy[1]\n        ARGC--\n    }\n    if (ARGC < 2) {\n        print \"usage: tee [-a] file ...\" > \"/dev/stderr\"\n        exit 1\n    }\n    ARGV[1] = \"-\"\n    ARGC = 2\n}\n\n\nThe following single rule does all the work. Because there is no pattern, it is executed for each line of input. The body of the\nrule simply prints the line into each file on the command line, and then to the standard output:\n\n{\n    # moving the if outside the loop makes it run faster\n    if (append)\n        for (i in copy)\n            print >> copy[i]\n    else\n        for (i in copy)\n            print > copy[i]\n    print\n}\n\n\nIt is also possible to write the loop this way:\n\nfor (i in copy)\n    if (append)\n        print >> copy[i]\n\n\n    else\n        print > copy[i]\n\n\nThis is more concise, but it is also less efficient. The \u2018if\u2019 is tested for each record and for each output file. By duplicating\nthe loop body, the \u2018if\u2019 is only tested once for each input record. If there are N input records and M output files, the first\nmethod only executes N \u2018if\u2019 statements, while the second executes N*M \u2018if\u2019 statements.\n\nFinally, the END rule cleans up by closing all the output files:\n\nEND {\n    for (i in copy)\n        close(copy[i])\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Printing Nonduplicated Lines of Text [Uniq-Program.html], Previous: Splitting a Large File into Pieces [Split-Program.html],\nUp: Reinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents", "doc_id": "3a8943b0-2593-4a61-88ab-100498f3e78f", "embedding": null, "doc_hash": "51ef15558d138a4852e71aba96d36fa41596501f1e8b254b10cded622beab87b", "extra_info": null, "node_info": {"start": 0, "end": 3082, "_node_type": "1"}, "relationships": {"1": "0561e07b-94c2-4d9d-93cc-068a71b47def", "3": "08cbcf82-c8d9-4c1c-9e80-169d62362fd9"}}, "__type__": "1"}, "08cbcf82-c8d9-4c1c-9e80-169d62362fd9": {"__data__": {"text": "Reinventing Wheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "08cbcf82-c8d9-4c1c-9e80-169d62362fd9", "embedding": null, "doc_hash": "e8ffb995ea510c082e2924e3fbb7841abc4c8eff7e0dee04d8289dfd79858013", "extra_info": null, "node_info": {"start": 3019, "end": 3129, "_node_type": "1"}, "relationships": {"1": "0561e07b-94c2-4d9d-93cc-068a71b47def", "2": "3a8943b0-2593-4a61-88ab-100498f3e78f"}}, "__type__": "1"}, "deabb435-ae19-4635-b8c6-e9b9c1c36f15": {"__data__": {"text": "Next: Multiple-Line Records [Multiple-Line.html], Previous: Defining Fields by Content [Splitting-By-Content.html], Up: Reading\nInput Files [Reading-Files.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n4.8 CHECKING HOW GAWK IS SPLITTING RECORDS\n\nAs we\u2019ve seen, gawk provides three independent methods to split input records into fields. The mechanism used is based on which of\nthe three variables\u2014FS, FIELDWIDTHS, or FPAT\u2014was last assigned to. In addition, an API input parser may choose to override the\nrecord parsing mechanism; please refer to Customized Input Parsers [Input-Parsers.html] for further information about this\nfeature.\n\nTo restore normal field splitting after using FIELDWIDTHS and/or FPAT, simply assign a value to FS. You can use \u2018FS = FS\u2019 to do\nthis, without having to know the current value of FS.\n\nIn order to tell which kind of field splitting is in effect, use PROCINFO[\"FS\"] (see Built-in Variables That Convey Information\n[Auto_002dset.html]). The value is \"FS\" if regular field splitting is being used, \"FIELDWIDTHS\" if fixed-width field splitting is\nbeing used, or \"FPAT\" if content-based field splitting is being used:\n\nif (PROCINFO[\"FS\"] == \"FS\")\n    regular field splitting \u2026\nelse if (PROCINFO[\"FS\"] == \"FIELDWIDTHS\")\n    fixed-width field splitting \u2026\nelse if (PROCINFO[\"FS\"] == \"FPAT\")\n    content-based field splitting \u2026\nelse\n    API input parser field splitting \u2026 (advanced feature)\n\n\nThis information is useful when writing a function that needs to temporarily change FS or FIELDWIDTHS, read some records, and then\nrestore the original settings (see Reading the User Database [Passwd-Functions.html] for an example of such a function).", "doc_id": "deabb435-ae19-4635-b8c6-e9b9c1c36f15", "embedding": null, "doc_hash": "6ea1f8f8d9a59ab93e3c76f754a07a0c1d619462bfc7465a8a30ae1bd3953823", "extra_info": null, "node_info": {"start": 0, "end": 1822, "_node_type": "1"}, "relationships": {"1": "f880dc81-23b5-40f1-9806-3d7c8b25a629"}}, "__type__": "1"}, "ea2a36ab-a69f-4f83-ae37-7219bd7ff6ad": {"__data__": {"text": "Next: Typographical Conventions [Conventions.html], Previous: A Rose by Any Other Name [Names.html], Up: Preface [Preface.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nUSING THIS BOOK\n\nThe term awk refers to a particular program as well as to the language you use to tell this program what to do. When we need to be\ncareful, we call the language \u201cthe awk language,\u201d and the program \u201cthe awk utility.\u201d This Web page explains both how to write\nprograms in the awk language and how to run the awk utility. The term \u201cawk program\u201d refers to a program written by you in the awk\nprogramming language.\n\nPrimarily, this Web page explains the features of awk as defined in the POSIX standard. It does so in the context of the gawk\nimplementation. While doing so, it also attempts to describe important differences between gawk and other awk implementations.5\nFinally, it notes any gawk features that are not in the POSIX standard for awk.\n\nThis Web page has the difficult task of being both a tutorial and a reference. If you are a novice, feel free to skip over details\nthat seem too complex. You should also ignore the many cross-references; they are for the expert user and for the Info and HTML\n[https://www.gnu.org/software/gawk/manual/] versions of the Web page.\n\nThere are sidebars scattered throughout the Web page. They add a more complete explanation of points that are relevant, but not\nlikely to be of interest on first reading. All appear in the index, under the heading \u201csidebar.\u201d\n\nMost of the time, the examples use complete awk programs. Some of the more advanced sections show only the part of the awk program\nthat illustrates the concept being described.\n\nAlthough this Web page is aimed principally at people who have not been exposed to awk, there is a lot of information here that\neven the awk expert should find useful. In particular, the description of POSIX awk and the example programs in A Library of awk\nFunctions [Library-Functions.html], and in Practical awk Programs [Sample-Programs.html], should be of interest.\n\nThis Web page is split into several parts, as follows:\n\n * Part I describes the awk language and the gawk program in detail. It starts with the basics, and continues through all of the\n   features of awk. It contains the following chapters:\n   * Getting Started with awk [Getting-Started.html], provides the essentials you need to know to begin using awk.\n   * Running awk and gawk [Invoking-Gawk.html], describes how to run gawk, the meaning of its command-line options, and how it\n     finds awk program source files.\n   * Regular Expressions [Regexp.html], introduces regular expressions in general, and in particular the flavors supported by\n     POSIX awk and gawk.\n   * Reading Input Files [Reading-Files.html], describes how awk reads your data. It introduces the concepts of records and\n     fields, as well as the getline command. I/O redirection is first described here. Network I/O is also briefly introduced here.\n   * Printing Output [Printing.html], describes how awk programs can produce output with print and printf.\n   * Expressions [Expressions.html], describes expressions, which are the basic building blocks for getting most things done in a\n     program.\n   * Patterns, Actions, and Variables [Patterns-and-Actions.html], describes how to write patterns for matching records, actions\n     for doing something when a record is matched, and the predefined variables awk and gawk use.\n   * Arrays in awk [Arrays.html], covers awk\u2019s one-and-only data structure: the associative array. Deleting array elements and\n     whole arrays is described, as well as sorting arrays in gawk. The chapter also describes how gawk provides arrays of arrays.\n   * Functions [Functions.html], describes the", "doc_id": "ea2a36ab-a69f-4f83-ae37-7219bd7ff6ad", "embedding": null, "doc_hash": "0632fc58f80cbf747413f71bc645b055b68b2dbdb9808cf8f416f2ea7cdc1eb4", "extra_info": null, "node_info": {"start": 0, "end": 3895, "_node_type": "1"}, "relationships": {"1": "409aa88e-fc1d-4573-baba-324998416f6c", "3": "c08266ee-d29d-4b79-af1f-f0c0b5fb5da1"}}, "__type__": "1"}, "c08266ee-d29d-4b79-af1f-f0c0b5fb5da1": {"__data__": {"text": "of arrays.\n   * Functions [Functions.html], describes the built-in functions awk and gawk provide, as well as how to define your own\n     functions. It also discusses how gawk lets you call functions indirectly.\n * Part II shows how to use awk and gawk for problem solving. There is lots of code here for you to read and learn from. This part\n   contains the following chapters:\n   * A Library of awk Functions [Library-Functions.html], provides a number of functions meant to be used from main awk programs.\n   * Practical awk Programs [Sample-Programs.html], provides many sample awk programs.\n   \n   Reading these two chapters allows you to see awk solving real problems.\n\n * Part III focuses on features specific to gawk. It contains the following chapters:\n   * Advanced Features of gawk [Advanced-Features.html], describes a number of advanced features. Of particular note are the\n     abilities to control the order of array traversal, have two-way communications with another process, perform TCP/IP\n     networking, and profile your awk programs.\n   * Internationalization with gawk [Internationalization.html], describes special features for translating program messages into\n     different languages at runtime.\n   * Debugging awk Programs [Debugger.html], describes the gawk debugger.\n   * Namespaces in gawk [Namespaces.html], describes how gawk allows variables and/or functions of the same name to be in\n     different namespaces.\n   * Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html], describes advanced arithmetic\n     facilities.\n   * Writing Extensions for gawk [Dynamic-Extensions.html], describes how to add new variables and functions to gawk by writing\n     extensions in C or C++.\n * Part IV provides the appendices, the Glossary, and two licenses that cover the gawk source code and this Web page,\n   respectively. It contains the following appendices:\n   * The Evolution of the awk Language [Language-History.html], describes how the awk language has evolved since its first release\n     to the present. It also describes how gawk has acquired features over time.\n   * Installing gawk [Installation.html], describes how to get gawk, how to compile it on POSIX-compatible systems, and how to\n     compile and use it on different non-POSIX systems. It also describes how to report bugs in gawk and where to get other freely\n     available awk implementations.\n   * Implementation Notes [Notes.html], describes how to disable gawk\u2019s extensions, as well as how to contribute new code to gawk,\n     and some possible future directions for gawk development.\n   * Basic Programming Concepts [Basic-Concepts.html], provides some very cursory background material for those who are completely\n     unfamiliar with computer programming.\n   * The Glossary [Glossary.html], defines most, if not all, of the significant terms used throughout the Web page. If you find\n     terms that you aren\u2019t familiar with, try looking them up here.\n   * GNU General Public License [Copying.html], and GNU Free Documentation License [GNU-Free-Documentation-License.html], present\n     the licenses that cover the gawk source code and this Web page, respectively.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(5)\n\nAll such differences appear in the index under the entry \u201cdifferences in awk and gawk.\u201d\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Typographical Conventions [Conventions.html], Previous: A Rose by Any Other Name [Names.html], Up: Preface [Preface.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c08266ee-d29d-4b79-af1f-f0c0b5fb5da1", "embedding": null, "doc_hash": "2f34b08c5b681be8037668876d1cf70dc671c29282834b254915179b29ba2a45", "extra_info": null, "node_info": {"start": 3838, "end": 7600, "_node_type": "1"}, "relationships": {"1": "409aa88e-fc1d-4573-baba-324998416f6c", "2": "ea2a36ab-a69f-4f83-ae37-7219bd7ff6ad"}}, "__type__": "1"}, "f40b59dd-becf-465a-b319-0c6ba4fb7c4f": {"__data__": {"text": "Next: Bit-Manipulation Functions [Bitwise-Functions.html], Previous: Input/Output Functions [I_002fO-Functions.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.6 TIME FUNCTIONS\n\nawk programs are commonly used to process log files containing timestamp information, indicating when a particular log record was\nwritten. Many programs log their timestamps in the form returned by the time() system call, which is the number of seconds since a\nparticular epoch. On POSIX-compliant systems, it is the number of seconds since 1970-01-01 00:00:00 UTC, not counting leap\nseconds.53 All known POSIX-compliant systems support timestamps from 0 through 231 \u2212 1, which is sufficient to represent times\nthrough 2038-01-19 03:14:07 UTC. Many systems support a wider range of timestamps, including negative timestamps that represent\ntimes before the epoch.\n\nIn order to make it easier to process such log files and to produce useful reports, gawk provides the following functions for\nworking with timestamps. They are gawk extensions; they are not specified in the POSIX standard.54 However, recent versions of\nmawk (see Other Freely Available awk Implementations [Other-Versions.html]) also support these functions. Optional parameters are\nenclosed in square brackets ([ ]):\n\nmktime(datespec [, utc-flag ]) \u00b6\n\nTurn datespec into a timestamp in the same form as is returned by systime(). It is similar to the function of the same name in ISO\nC. The argument, datespec, is a string of the form \"YYYY\u00a0MM\u00a0DD\u00a0HH\u00a0MM\u00a0SS\u00a0[DST]\". The string consists of six or seven numbers\nrepresenting, respectively, the full year including century, the month from 1 to 12, the day of the month from 1 to 31, the hour\nof the day from 0 to 23, the minute from 0 to 59, the second from 0 to 60,55 and an optional daylight-savings flag.\n\nThe values of these numbers need not be within the ranges specified; for example, an hour of \u22121 means 1 hour before midnight. The\norigin-zero Gregorian calendar is assumed, with year 0 preceding year 1 and year \u22121 preceding year 0. If utc-flag is present and\nis either nonzero or non-null, the time is assumed to be in the UTC time zone; otherwise, the time is assumed to be in the local\ntime zone. If the DST daylight-savings flag is positive, the time is assumed to be daylight savings time; if zero, the time is\nassumed to be standard time; and if negative (the default), mktime() attempts to determine whether daylight savings time is in\neffect for the specified time.\n\nIf datespec does not contain enough elements or if the resulting time is out of range, mktime() returns \u22121.\n\nstrftime([format [, timestamp [, utc-flag] ] ]) \u00b6\n\nFormat the time specified by timestamp based on the contents of the format string and return the result. It is similar to the\nfunction of the same name in ISO C. If utc-flag is present and is either nonzero or non-null, the value is formatted as UTC\n(Coordinated Universal Time, formerly GMT or Greenwich Mean Time). Otherwise, the value is formatted for the local time zone. The\ntimestamp is in the same format as the value returned by the systime() function. If no timestamp argument is supplied, gawk uses\nthe current time of day as the timestamp. Without a format argument, strftime() uses the value of PROCINFO[\"strftime\"] as the\nformat string (see Predefined Variables [Built_002din-Variables.html]). The default string value is \"%a\u00a0%b\u00a0%e\u00a0%H:%M:%S\u00a0%Z\u00a0%Y\".\nThis format string produces output that is equivalent to that of the date utility. You can assign a new value to\nPROCINFO[\"strftime\"] to change the default format; see the following list for the various format directives.\n\nsystime()", "doc_id": "f40b59dd-becf-465a-b319-0c6ba4fb7c4f", "embedding": null, "doc_hash": "553e1fcd50eb745ed59c896d2f932eb16ee91a0012bba75e8e4f15b99ee9c66f", "extra_info": null, "node_info": {"start": 0, "end": 3821, "_node_type": "1"}, "relationships": {"1": "ac34d774-ae06-4fea-9801-61b0f03b1591", "3": "efa9a90e-cdca-4eaf-9b47-668fbea7a773"}}, "__type__": "1"}, "efa9a90e-cdca-4eaf-9b47-668fbea7a773": {"__data__": {"text": "see the following list for the various format directives.\n\nsystime() \u00b6\n\nReturn the current time as the number of seconds since the system epoch. On POSIX systems, this is the number of seconds since\n1970-01-01 00:00:00 UTC, not counting leap seconds. It may be a different number on other systems.\n\nThe systime() function allows you to compare a timestamp from a log file with the current time of day. In particular, it is easy\nto determine how long ago a particular record was logged. It also allows you to produce log records using the \u201cseconds since the\nepoch\u201d format.\n\nThe mktime() function allows you to convert a textual representation of a date and time into a timestamp. This makes it easy to do\nbefore/after comparisons of dates and times, particularly when dealing with date and time data coming from an external source,\nsuch as a log file.\n\nThe strftime() function allows you to easily turn a timestamp into human-readable information. It is similar in nature to the\nsprintf() function (see String-Manipulation Functions [String-Functions.html]), in that it copies nonformat specification\ncharacters verbatim to the returned string, while substituting date and time values for format specifications in the format\nstring.\n\nstrftime() is guaranteed by the 1999 ISO C standard56 to support the following date format specifications:\n\n%a\n\nThe locale\u2019s abbreviated weekday name.\n\n%A\n\nThe locale\u2019s full weekday name.\n\n%b\n\nThe locale\u2019s abbreviated month name.\n\n%B\n\nThe locale\u2019s full month name.\n\n%c\n\nThe locale\u2019s \u201cappropriate\u201d date and time representation. (This is \u2018%A %B %d %T %Y\u2019 in the \"C\" locale.)\n\n%C\n\nThe century part of the current year. This is the year divided by 100 and truncated to the next lower integer.\n\n%d\n\nThe day of the month as a decimal number (01\u201331).\n\n%D\n\nEquivalent to specifying \u2018%m/%d/%y\u2019.\n\n%e\n\nThe day of the month, padded with a space if it is only one digit.\n\n%F\n\nEquivalent to specifying \u2018%Y-%m-%d\u2019. This is the ISO 8601 date format.\n\n%g\n\nThe year modulo 100 of the ISO 8601 week number, as a decimal number (00\u201399). For example, January 1, 2012, is in week 53 of 2011.\nThus, the year of its ISO 8601 week number is 2011, even though its year is 2012. Similarly, December 31, 2012, is in week 1 of\n2013. Thus, the year of its ISO week number is 2013, even though its year is 2012.\n\n%G\n\nThe full year of the ISO week number, as a decimal number.\n\n%h\n\nEquivalent to \u2018%b\u2019.\n\n%H\n\nThe hour (24-hour clock) as a decimal number (00\u201323).\n\n%I\n\nThe hour (12-hour clock) as a decimal number (01\u201312).\n\n%j\n\nThe day of the year as a decimal number (001\u2013366).\n\n%m\n\nThe month as a decimal number (01\u201312).\n\n%M\n\nThe minute as a decimal number (00\u201359).\n\n%n\n\nA newline character (ASCII LF).\n\n%p\n\nThe locale\u2019s equivalent of the AM/PM designations associated with a 12-hour clock.\n\n%r\n\nThe locale\u2019s 12-hour clock time. (This is \u2018%I:%M:%S %p\u2019 in the \"C\" locale.)\n\n%R\n\nEquivalent to specifying \u2018%H:%M\u2019.\n\n%S\n\nThe second as a decimal number (00\u201360).\n\n%t\n\nA TAB character.\n\n%T\n\nEquivalent to specifying \u2018%H:%M:%S\u2019.\n\n%u\n\nThe weekday as a decimal number (1\u20137). Monday is day", "doc_id": "efa9a90e-cdca-4eaf-9b47-668fbea7a773", "embedding": null, "doc_hash": "4d31c82551a81a52359b979b3978a1ec86f49f833b7f97209cb0b1d28bf3b181", "extra_info": null, "node_info": {"start": 3762, "end": 6839, "_node_type": "1"}, "relationships": {"1": "ac34d774-ae06-4fea-9801-61b0f03b1591", "2": "f40b59dd-becf-465a-b319-0c6ba4fb7c4f", "3": "94d87f48-7247-47ba-945a-d89901592ab2"}}, "__type__": "1"}, "94d87f48-7247-47ba-945a-d89901592ab2": {"__data__": {"text": "weekday as a decimal number (1\u20137). Monday is day one.\n\n%U\n\nThe week number of the year (with the first Sunday as the first day of week one) as a decimal number (00\u201353).\n\n%V\n\nThe week number of the year (with the first Monday as the first day of week one) as a decimal number (01\u201353). The method for\ndetermining the week number is as specified by ISO 8601. (To wit: if the week containing January 1 has four or more days in the\nnew year, then it is week one; otherwise it is the last week [52 or 53] of the previous year and the next week is week one.)\n\n%w\n\nThe weekday as a decimal number (0\u20136). Sunday is day zero.\n\n%W\n\nThe week number of the year (with the first Monday as the first day of week one) as a decimal number (00\u201353).\n\n%x\n\nThe locale\u2019s \u201cappropriate\u201d date representation. (This is \u2018%A %B %d %Y\u2019 in the \"C\" locale.)\n\n%X\n\nThe locale\u2019s \u201cappropriate\u201d time representation. (This is \u2018%T\u2019 in the \"C\" locale.)\n\n%y\n\nThe year modulo 100 as a decimal number (00\u201399).\n\n%Y\n\nThe full year as a decimal number (e.g., 2015).\n\n%z\n\nThe time zone offset in a \u2018+HHMM\u2019 format (e.g., the format necessary to produce RFC 822/RFC 1036 date headers).\n\n%Z\n\nThe time zone name or abbreviation; no characters if no time zone is determinable.\n\n%Ec %EC %Ex %EX %Ey %EY %Od %Oe %OH %OI %Om %OM %OS %Ou %OU %OV %Ow %OW %Oy\n\n\u201cAlternative representations\u201d for the specifications that use only the second letter (\u2018%c\u2019, \u2018%C\u2019, and so on).57 (These facilitate\ncompliance with the POSIX date utility.)\n\n%%\n\nA literal \u2018%\u2019.\n\nIf a conversion specifier is not one of those just listed, the behavior is undefined.58\n\nFor systems that are not yet fully standards-compliant, gawk supplies a copy of strftime() from the GNU C Library. It supports all\nof the just-listed format specifications. If that version is used to compile gawk (see Installing gawk [Installation.html]), then\nthe following additional format specifications are available:\n\n%k\n\nThe hour (24-hour clock) as a decimal number (0\u201323). Single-digit numbers are padded with a space.\n\n%l\n\nThe hour (12-hour clock) as a decimal number (1\u201312). Single-digit numbers are padded with a space.\n\n%s\n\nThe time as a decimal timestamp in seconds since the epoch.\n\nAdditionally, the alternative representations are recognized but their normal representations are used.\n\nThe following example is an awk implementation of the POSIX date utility. Normally, the date utility prints the current date and\ntime of day in a well-known format. However, if you provide an argument to it that begins with a \u2018+\u2019, date copies nonformat\nspecifier characters to the standard output and interprets the current time according to the format specifiers in the string. For\nexample:\n\n$ date '+Today is %A, %B %d, %Y.'\n-| Today is Monday, September 22, 2014.\n\n\nHere is the gawk version of the date utility. It has a shell \u201cwrapper\u201d to handle the -u option, which requires that date run as if\nthe time zone is set to UTC:\n\n#! /bin/sh\n#\n# date --- approximate the POSIX 'date' command\n\ncase $1 in\n-u)  TZ=UTC0     # use UTC\n     export TZ\n     shift ;;\nesac\n\ngawk 'BEGIN  {\n    format = PROCINFO[\"strftime\"]\n    exitval = 0\n\n    if (ARGC > 2)\n    ", "doc_id": "94d87f48-7247-47ba-945a-d89901592ab2", "embedding": null, "doc_hash": "5095228aae49e2a1eb104b3087ea72f3add18ab8d8fc500c40ae3815eb858253", "extra_info": null, "node_info": {"start": 6860, "end": 10000, "_node_type": "1"}, "relationships": {"1": "ac34d774-ae06-4fea-9801-61b0f03b1591", "2": "efa9a90e-cdca-4eaf-9b47-668fbea7a773", "3": "36dd9097-2549-4120-b106-6521b178a630"}}, "__type__": "1"}, "36dd9097-2549-4120-b106-6521b178a630": {"__data__": {"text": "exitval = 0\n\n    if (ARGC > 2)\n        exitval = 1\n    else if (ARGC == 2) {\n        format = ARGV[1]\n        if (format ~ /^\\+/)\n            format = substr(format, 2)   # remove leading +\n    }\n    print strftime(format)\n    exit exitval\n}' \"$@\"\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(53)\n\nSee Glossary [Glossary.html], especially the entries \u201cEpoch\u201d and \u201cUTC.\u201d\n\n(54)\n\nThe GNU date utility can also do many of the things described here. Its use may be preferable for simple time-related operations\nin shell scripts.\n\n(55)\n\nOccasionally there are minutes in a year with a leap second, which is why the seconds can go up to 60.\n\n(56)\n\nUnfortunately, not every system\u2019s strftime() necessarily supports all of the conversions listed here.\n\n(57)\n\nIf you don\u2019t understand any of this, don\u2019t worry about it; these facilities are meant to make it easier to \u201cinternationalize\u201d\nprograms. Other internationalization features are described in Internationalization with gawk [Internationalization.html].\n\n(58)\n\nThis is because ISO C leaves the behavior of the C version of strftime() undefined and gawk uses the system\u2019s version of\nstrftime() if it\u2019s there. Typically, the conversion specifier either does not appear in the returned string or appears literally.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Bit-Manipulation Functions [Bitwise-Functions.html], Previous: Input/Output Functions [I_002fO-Functions.html], Up: Built-in\nFunctions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "36dd9097-2549-4120-b106-6521b178a630", "embedding": null, "doc_hash": "fc7d0300239114073742cc6955fa3e60c9526e09a3fb5bf4e8624d7f26c586ba", "extra_info": null, "node_info": {"start": 10005, "end": 11715, "_node_type": "1"}, "relationships": {"1": "ac34d774-ae06-4fea-9801-61b0f03b1591", "2": "94d87f48-7247-47ba-945a-d89901592ab2"}}, "__type__": "1"}, "5de54994-5de6-4bef-a5d4-2f348e4404ca": {"__data__": {"text": "Next: Printing Mailing Labels [Labels-Program.html], Previous: An Alarm Clock Program [Alarm-Program.html], Up: A Grab Bag of awk\nPrograms [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.3 TRANSLITERATING CHARACTERS\n\nThe system tr utility transliterates characters. For example, it is often used to map uppercase letters into lowercase for further\nprocessing:\n\ngenerate data | tr 'A-Z' 'a-z' | process data \u2026\n\n\ntr requires two lists of characters.76 When processing the input, the first character in the first list is replaced with the first\ncharacter in the second list, the second character in the first list is replaced with the second character in the second list, and\nso on. If there are more characters in the \u201cfrom\u201d list than in the \u201cto\u201d list, the last character of the \u201cto\u201d list is used for the\nremaining characters in the \u201cfrom\u201d list.\n\nOnce upon a time, a user proposed adding a transliteration function to gawk. The following program was written to prove that\ncharacter transliteration could be done with a user-level function. This program is not as complete as the system tr utility, but\nit does most of the job.\n\nThe translate program was written long before gawk acquired the ability to split each character in a string into separate array\nelements. Thus, it makes repeated use of the substr(), index(), and gsub() built-in functions (see String-Manipulation Functions\n[String-Functions.html]). There are two functions. The first, stranslate(), takes three arguments:\n\nfrom\n\nA list of characters from which to translate\n\nto\n\nA list of characters to which to translate\n\ntarget\n\nThe string on which to do the translation\n\nAssociative arrays make the translation part fairly easy. t_ar holds the \u201cto\u201d characters, indexed by the \u201cfrom\u201d characters. Then a\nsimple loop goes through from, one character at a time. For each character in from, if the character appears in target, it is\nreplaced with the corresponding to character.\n\nThe translate() function calls stranslate(), using $0 as the target. The main program sets two global variables, FROM and TO, from\nthe command line, and then changes ARGV so that awk reads from the standard input.\n\nFinally, the processing rule simply calls translate() for each record:\n\n# translate.awk --- do tr-like stuff\n# Bugs: does not handle things like tr A-Z a-z; it has\n# to be spelled out. However, if `to' is shorter than `from',\n# the last character in `to' is used for the rest of `from'.\n\nfunction stranslate(from, to, target,     lf, lt, ltarget, t_ar, i, c,\n                                                               result)\n{\n    lf = length(from)\n    lt = length(to)\n    ltarget = length(target)\n    for (i = 1; i <= lt; i++)\n        t_ar[substr(from, i, 1)] = substr(to, i, 1)\n    if (lt < lf)\n        for (; i <= lf; i++)\n            t_ar[substr(from, i, 1)] = substr(to, lt, 1)\n    for (i = 1; i <= ltarget; i++) {\n        c = substr(target, i, 1)\n        if (c in t_ar)\n            c = t_ar[c]\n        result = result c\n    }\n ", "doc_id": "5de54994-5de6-4bef-a5d4-2f348e4404ca", "embedding": null, "doc_hash": "a3ff94bf8bc5167c0108a1f33e116da48335c2520b833508ab5c3b23bbe0b90e", "extra_info": null, "node_info": {"start": 0, "end": 3170, "_node_type": "1"}, "relationships": {"1": "8d3a90ab-56a9-4a75-a7d1-e26a16e82733", "3": "79f29cd6-4f76-44d8-a3e7-60cf290497d0"}}, "__type__": "1"}, "79f29cd6-4f76-44d8-a3e7-60cf290497d0": {"__data__": {"text": "       result = result c\n    }\n    return result\n}\n\nfunction translate(from, to)\n{\n    return $0 = stranslate(from, to, $0)\n}\n\n# main program\nBEGIN {\n\n\n    if (ARGC < 3) {\n        print \"usage: translate from to\" > \"/dev/stderr\"\n        exit\n    }\n\n\n    FROM = ARGV[1]\n    TO = ARGV[2]\n    ARGC = 2\n    ARGV[1] = \"-\"\n}\n\n{\n    translate(FROM, TO)\n    print\n}\n\n\nIt is possible to do character transliteration in a user-level function, but it is not necessarily efficient, and we (the gawk\ndevelopers) started to consider adding a built-in function. However, shortly after writing this program, we learned that Brian\nKernighan had added the toupper() and tolower() functions to his awk (see String-Manipulation Functions [String-Functions.html]).\nThese functions handle the vast majority of the cases where character transliteration is necessary, and so we chose to simply add\nthose functions to gawk as well and then leave well enough alone.\n\nAn obvious improvement to this program would be to set up the t_ar array only once, in a BEGIN rule. However, this assumes that\nthe \u201cfrom\u201d and \u201cto\u201d lists will never change throughout the lifetime of the program.\n\nAnother obvious improvement is to enable the use of ranges, such as \u2018a-z\u2019, as allowed by the tr utility. Look at the code for\ncut.awk (see Cutting Out Fields and Columns [Cut-Program.html]) for inspiration.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(76)\n\nOn some older systems, including Solaris, the system version of tr may require that the lists be written as range expressions\nenclosed in square brackets (\u2018[a-z]\u2019) and quoted, to prevent the shell from attempting a file name expansion. This is not a\nfeature.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Printing Mailing Labels [Labels-Program.html], Previous: An Alarm Clock Program [Alarm-Program.html], Up: A Grab Bag of awk\nPrograms [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "79f29cd6-4f76-44d8-a3e7-60cf290497d0", "embedding": null, "doc_hash": "1313fc924acf2f32d56769fa35cc4bca460691e965e4664c024f6efaace7ea2a", "extra_info": null, "node_info": {"start": 3138, "end": 5268, "_node_type": "1"}, "relationships": {"1": "8d3a90ab-56a9-4a75-a7d1-e26a16e82733", "2": "5de54994-5de6-4bef-a5d4-2f348e4404ca"}}, "__type__": "1"}, "9e865bba-322b-40c8-9d37-e31a7997186b": {"__data__": {"text": "Next: A Simple Internationalization Example [I18N-Example.html], Previous: Internationalizing awk Programs [Programmer-i18n.html],\nUp: Internationalization with gawk [Internationalization.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n13.4 TRANSLATING AWK PROGRAMS\n\nOnce a program\u2019s translatable strings have been marked, they must be extracted to create the initial .pot file. As part of\ntranslation, it is often helpful to rearrange the order in which arguments to printf are output.\n\ngawk\u2019s --gen-pot command-line option extracts the messages and is discussed next. After that, printf\u2019s ability to rearrange the\norder for printf arguments at runtime is covered.\n\n * Extracting Marked Strings [String-Extraction.html]\n * Rearranging printf Arguments [Printf-Ordering.html]\n * awk Portability Issues [I18N-Portability.html]", "doc_id": "9e865bba-322b-40c8-9d37-e31a7997186b", "embedding": null, "doc_hash": "7174d14307010758c96b444453274895eb0a4a4b38580b30b82a171c726234ec", "extra_info": null, "node_info": {"start": 0, "end": 976, "_node_type": "1"}, "relationships": {"1": "b7882349-5a1c-4951-a560-9c7246465a58"}}, "__type__": "1"}, "ad3ac723-9670-4823-9411-6445277918a4": {"__data__": {"text": "Next: Function Calls [Function-Calls.html], Previous: Operators: Doing Something with Values [All-Operators.html], Up: Expressions\n[Expressions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.3 TRUTH VALUES AND CONDITIONS\n\nIn certain contexts, expression values also serve as \u201ctruth values\u201d; i.e., they determine what should happen next as the program\nruns. This section describes how awk defines \u201ctrue\u201d and \u201cfalse\u201d and how values are compared.\n\n * True and False in awk [Truth-Values.html]\n * Variable Typing and Comparison Expressions [Typing-and-Comparison.html]\n * Boolean Expressions [Boolean-Ops.html]\n * Conditional Expressions [Conditional-Exp.html]", "doc_id": "ad3ac723-9670-4823-9411-6445277918a4", "embedding": null, "doc_hash": "c5c6f1d07aedf6f9cda8c4bed62bef88744ce3908de14dd51ad5712f0cdf4796", "extra_info": null, "node_info": {"start": 0, "end": 810, "_node_type": "1"}, "relationships": {"1": "86c2b3ca-6b7f-410b-8b6d-d94cf84e08fe"}}, "__type__": "1"}, "24899395-398d-4219-b0cd-894026d3965f": {"__data__": {"text": "Next: Variable Typing and Comparison Expressions [Typing-and-Comparison.html], Up: Truth Values and Conditions\n[Truth-Values-and-Conditions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.1 TRUE AND FALSE IN AWK\n\nMany programming languages have a special representation for the concepts of \u201ctrue\u201d and \u201cfalse.\u201d Such languages usually use the\nspecial constants true and false, or perhaps their uppercase equivalents. However, awk is different. It borrows a very simple\nconcept of true and false from C. In awk, any nonzero numeric value or any nonempty string value is true. Any other value (zero or\nthe null string, \"\") is false. The following program prints \u2018A strange truth value\u2019 three times:\n\nBEGIN {\n   if (3.1415927)\n       print \"A strange truth value\"\n   if (\"Four Score And Seven Years Ago\")\n       print \"A strange truth value\"\n   if (j = 57)\n       print \"A strange truth value\"\n}\n\n\nThere is a surprising consequence of the \u201cnonzero or non-null\u201d rule: the string constant \"0\" is actually true, because it is\nnon-null. (d.c.)", "doc_id": "24899395-398d-4219-b0cd-894026d3965f", "embedding": null, "doc_hash": "049e34cc33fe7d81a71a6f6bfb90308095c6788bd001a5f0ee0aa3e7d07f881c", "extra_info": null, "node_info": {"start": 0, "end": 1188, "_node_type": "1"}, "relationships": {"1": "2a64dbab-bf37-4e88-930c-1c5af7428671"}}, "__type__": "1"}, "5184cb88-f9af-48ad-90ea-d59ea81abaf6": {"__data__": {"text": "Next: Setting the Precision [Setting-precision.html], Previous: Getting the Accuracy You Need [Getting-Accuracy.html], Up:\nFloating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n16.4.3 TRY A FEW EXTRA BITS OF PRECISION AND ROUNDING\n\nInstead of arbitrary-precision floating-point arithmetic, often all you need is an adjustment of your logic or a different order\nfor the operations in your calculation. The stability and the accuracy of the computation of pi in the earlier example can be\nenhanced by using the following simple algebraic transformation:\n\n(sqrt(x * x + 1) - 1) / x \u2261 x / (sqrt(x * x + 1) + 1)\n\n\nAfter making this change, the program converges to pi in under 30 iterations:\n\n$ gawk -f pi2.awk\n-| 3.215390309173473\n-| 3.159659942097501\n-| 3.146086215131436\n-| 3.142714599645370\n-| 3.141873049979825\n\u2026\n-| 3.141592653589797\n-| 3.141592653589797\n", "doc_id": "5184cb88-f9af-48ad-90ea-d59ea81abaf6", "embedding": null, "doc_hash": "fb1e34bf1b76cead6b170cfd3eded85839f8b6fa6cb8992e8d8c4d3d62ce1381", "extra_info": null, "node_info": {"start": 0, "end": 1058, "_node_type": "1"}, "relationships": {"1": "3e502692-cc6f-4181-a94a-ad189d3b43bd"}}, "__type__": "1"}, "a11580df-4129-47ea-a853-9bb1a4c29b87": {"__data__": {"text": "Next: A More Complex Example [More-Complex.html], Previous: Some Simple Examples [Very-Simple.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.4 AN EXAMPLE WITH TWO RULES\n\nThe awk utility reads the input files one line at a time. For each line, awk tries the patterns of each rule. If several patterns\nmatch, then several actions execute in the order in which they appear in the awk program. If no patterns match, then no actions\nrun.\n\nAfter processing all the rules that match the line (and perhaps there are none), awk reads the next line. (However, see The next\nStatement [Next-Statement.html] and also see The nextfile Statement [Nextfile-Statement.html].) This continues until the program\nreaches the end of the file. For example, the following awk program contains two rules:\n\n/12/  { print $0 }\n/21/  { print $0 }\n\n\nThe first rule has the string \u201812\u2019 as the pattern and \u2018print $0\u2019 as the action. The second rule has the string \u201821\u2019 as the pattern\nand also has \u2018print $0\u2019 as the action. Each rule\u2019s action is enclosed in its own pair of braces.\n\nThis program prints every line that contains the string \u201812\u2019 or the string \u201821\u2019. If a line contains both strings, it is printed\ntwice, once by each rule.\n\nThis is what happens if we run this program on our two sample data files, mail-list and inventory-shipped:\n\n$ awk '/12/ { print $0 }\n>      /21/ { print $0 }' mail-list inventory-shipped\n-| Anthony      555-3412     anthony.asserturo@hotmail.com   A\n-| Camilla      555-2912     camilla.infusarum@skynet.be     R\n-| Fabius       555-1234     fabius.undevicesimus@ucb.edu    F\n-| Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R\n-| Jean-Paul    555-2127     jeanpaul.campanorum@nyu.edu     R\n-| Jan  21  36  64 620\n-| Apr  21  70  74 514\n\n\nNote how the line beginning with \u2018Jean-Paul\u2019 in mail-list was printed twice, once for each rule.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: A More Complex Example [More-Complex.html], Previous: Some Simple Examples [Very-Simple.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a11580df-4129-47ea-a853-9bb1a4c29b87", "embedding": null, "doc_hash": "58d50f784fa14d760e9440430ab54f124f5deaa46e671b00086a46ef1ffaf2f3", "extra_info": null, "node_info": {"start": 0, "end": 2403, "_node_type": "1"}, "relationships": {"1": "ba27e2d7-2469-4a2a-8207-20fc6c89bbaa"}}, "__type__": "1"}, "7fe4c8e5-3284-4ca4-987e-d7e5d5b80c32": {"__data__": {"text": "Next: Using gawk for Network Programming [TCP_002fIP-Networking.html], Previous: Controlling Array Traversal and Array Sorting\n[Array-Sorting.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n12.4 TWO-WAY COMMUNICATIONS WITH ANOTHER PROCESS\n\nIt is often useful to be able to send data to a separate program for processing and then read the result. This can always be done\nwith temporary files:\n\n# Write the data for processing\ntempfile = (\"mydata.\" PROCINFO[\"pid\"])\nwhile (not done with data)\n    print data | (\"subprogram > \" tempfile)\nclose(\"subprogram > \" tempfile)\n\n# Read the results, remove tempfile when done\nwhile ((getline newdata < tempfile) > 0)\n    process newdata appropriately\nclose(tempfile)\nsystem(\"rm \" tempfile)\n\n\nThis works, but not elegantly. Among other things, it requires that the program be run in a directory that cannot be shared among\nusers; for example, /tmp will not do, as another user might happen to be using a temporary file with the same name.84\n\nHowever, with gawk, it is possible to open a two-way pipe to another process. The second process is termed a coprocess, as it runs\nin parallel with gawk. The two-way connection is created using the \u2018|&\u2019 operator (borrowed from the Korn shell, ksh):85\n\ndo {\n    print data |& \"subprogram\"\n    \"subprogram\" |& getline results\n} while (data left to process)\nclose(\"subprogram\")\n\n\nThe first time an I/O operation is executed using the \u2018|&\u2019 operator, gawk creates a two-way pipeline to a child process that runs\nthe other program. Output created with print or printf is written to the program\u2019s standard input, and output from the program\u2019s\nstandard output can be read by the gawk program using getline. As is the case with processes started by \u2018|\u2019, the subprogram can be\nany program, or pipeline of programs, that can be started by the shell.\n\nThere are some cautionary items to be aware of:\n\n * As the code inside gawk currently stands, the coprocess\u2019s standard error goes to the same place that the parent gawk\u2019s standard\n   error goes. It is not possible to read the child\u2019s standard error separately.\n * I/O buffering may be a problem. gawk automatically flushes all output down the pipe to the coprocess. However, if the coprocess\n   does not flush its output, gawk may hang when doing a getline in order to read the coprocess\u2019s results. This could lead to a\n   situation known as deadlock, where each process is waiting for the other one to do something.\n\nIt is possible to close just one end of the two-way pipe to a coprocess, by supplying a second argument to the close() function of\neither \"to\" or \"from\" (see Closing Input and Output Redirections [Close-Files-And-Pipes.html]). These strings tell gawk to close\nthe end of the pipe that sends data to the coprocess or the end that reads from it, respectively.\n\nThis is particularly necessary in order to use the system sort utility as part of a coprocess; sort must read all of its input\ndata before it can produce any output. The sort program does not receive an end-of-file indication until gawk closes the write end\nof the pipe.\n\nWhen you have finished writing data to the sort utility, you can close the \"to\" end of the pipe, and then start reading sorted\ndata via getline. For example:\n\nBEGIN {\n    command = \"LC_ALL=C sort\"\n    n = split(\"abcdefghijklmnopqrstuvwxyz\", a, \"\")\n\n    for (i = n; i > 0; i--)\n        print a[i] |& command\n    close(command, \"to\")\n\n    while", "doc_id": "7fe4c8e5-3284-4ca4-987e-d7e5d5b80c32", "embedding": null, "doc_hash": "33d48671979c126dc3539baf856c50fe865d27b4dac63a6b8577663a49029718", "extra_info": null, "node_info": {"start": 0, "end": 3617, "_node_type": "1"}, "relationships": {"1": "67902284-c4a8-4cf2-b476-ec49863010b5", "3": "7842293d-9802-40e6-980a-5b319743b8dc"}}, "__type__": "1"}, "7842293d-9802-40e6-980a-5b319743b8dc": {"__data__": {"text": "|& command\n    close(command, \"to\")\n\n    while ((command |& getline line) > 0)\n        print \"got\", line\n    close(command)\n}\n\n\nThis program writes the letters of the alphabet in reverse order, one per line, down the two-way pipe to sort. It then closes the\nwrite end of the pipe, so that sort receives an end-of-file indication. This causes sort to sort the data and write the sorted\ndata back to the gawk program. Once all of the data has been read, gawk terminates the coprocess and exits.\n\nAs a side note, the assignment \u2018LC_ALL=C\u2019 in the sort command ensures traditional Unix (ASCII) sorting from sort. This is not\nstrictly necessary here, but it\u2019s good to know how to do this.\n\nBe careful when closing the \"from\" end of a two-way pipe; in this case gawk waits for the child process to exit, which may cause\nyour program to hang. (Thus, this particular feature is of much less use in practice than being able to close the \"to\" end.)\n\n> CAUTION: Normally, it is a fatal error to write to the \"to\" end of a two-way pipe which has been closed, and it is also a fatal\n> error to read from the \"from\" end of a two-way pipe that has been closed.\n> \n> You may set PROCINFO[\"command\", \"NONFATAL\"] to make such operations become nonfatal. If you do so, you then need to check ERRNO\n> after each print, printf, or getline. See Enabling Nonfatal Output [Nonfatal.html], for more information.\n\nYou may also use pseudo-ttys (ptys) for two-way communication instead of pipes, if your system supports them. This is done on a\nper-command basis, by setting a special element in the PROCINFO array (see Built-in Variables That Convey Information\n[Auto_002dset.html]), like so:\n\ncommand = \"sort -nr\"           # command, save in convenience variable\nPROCINFO[command, \"pty\"] = 1   # update PROCINFO\nprint \u2026 |& command           # start two-way pipe\n\u2026\n\n\nIf your system does not have ptys, or if all the system\u2019s ptys are in use, gawk automatically falls back to using regular pipes.\n\nUsing ptys usually avoids the buffer deadlock issues described earlier, at some loss in performance. This is because the tty\ndriver buffers and sends data line-by-line. On systems with the stdbuf (part of the GNU Coreutils package\n[https://www.gnu.org/software/coreutils/coreutils.html]), you can use that program instead of ptys.\n\nNote also that ptys are not fully transparent. Certain binary control codes, such Ctrl-d for end-of-file, are interpreted by the\ntty driver and not passed through.\n\n> CAUTION: Finally, coprocesses open up the possibility of deadlock between gawk and the program running in the coprocess. This\n> can occur if you send \u201ctoo much\u201d data to the coprocess before reading any back; each process is blocked writing data with no one\n> available to read what they\u2019ve already written. There is no workaround for deadlock; careful programming and knowledge of the\n> behavior of the coprocess are required.\n\nThe following example, due to Andrew Schorr, demonstrates how using ptys can help deal with buffering deadlocks.\n\nSuppose gawk were unable to add numbers. You could use a coprocess to do it. Here\u2019s an exceedingly simple program written for that\npurpose:\n\n$ cat add.c\n#include <stdio.h>\n\nint\nmain(void)\n{\n    int x, y;\n    while (scanf(\"%d %d\", & x, & y) == 2)\n        printf(\"%d\\n\", x + y);\n    return 0;\n}\n$ cc -O add.c -o add      Compile the", "doc_id": "7842293d-9802-40e6-980a-5b319743b8dc", "embedding": null, "doc_hash": "c7468a62c2f625a5dea1a1aa9914a068a4b0cbefb759e61e6a6f45c17f558f46", "extra_info": null, "node_info": {"start": 3582, "end": 6922, "_node_type": "1"}, "relationships": {"1": "67902284-c4a8-4cf2-b476-ec49863010b5", "2": "7fe4c8e5-3284-4ca4-987e-d7e5d5b80c32", "3": "c4c55463-cb82-4f9d-b378-fd9e70247cf8"}}, "__type__": "1"}, "c4c55463-cb82-4f9d-b378-fd9e70247cf8": {"__data__": {"text": "cc -O add.c -o add      Compile the program\n\n\nYou could then write an exceedingly simple gawk program to add numbers by passing them to the coprocess:\n\n$ echo 1 2 |\n> gawk -v cmd=./add '{ print |& cmd; cmd |& getline x; print x }'\n\n\nAnd it would deadlock, because add.c fails to call \u2018setlinebuf(stdout)\u2019. The add program freezes.\n\nNow try instead:\n\n$ echo 1 2 |\n> gawk -v cmd=add 'BEGIN { PROCINFO[cmd, \"pty\"] = 1 }\n>                  { print |& cmd; cmd |& getline x; print x }'\n-| 3\n\n\nBy using a pty, gawk fools the standard I/O library into thinking it has an interactive session, so it defaults to line buffering.\nAnd now, magically, it works!\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(84)\n\nMichael Brennan suggests the use of rand() to generate unique file names. This is a valid point; nevertheless, temporary files\nremain more difficult to use than two-way pipes.\n\n(85)\n\nThis is very different from the same operator in the C shell and in Bash.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Using gawk for Network Programming [TCP_002fIP-Networking.html], Previous: Controlling Array Traversal and Array Sorting\n[Array-Sorting.html], Up: Advanced Features of gawk [Advanced-Features.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "c4c55463-cb82-4f9d-b378-fd9e70247cf8", "embedding": null, "doc_hash": "9e62526ee61a7975b85fdf03db613116c8b675f034e41741379c6fee0ba751a8", "extra_info": null, "node_info": {"start": 6923, "end": 8374, "_node_type": "1"}, "relationships": {"1": "67902284-c4a8-4cf2-b476-ec49863010b5", "2": "7842293d-9802-40e6-980a-5b319743b8dc"}}, "__type__": "1"}, "d643b816-1921-4621-bdce-b5829548a1f8": {"__data__": {"text": "Previous: Customized Output Wrappers [Output-Wrappers.html], Up: Registration Functions [Registration-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.6.6 CUSTOMIZED TWO-WAY PROCESSORS\n\nA two-way processor combines an input parser and an output wrapper for two-way I/O with the \u2018|&\u2019 operator (see Redirecting Output\nof print and printf [Redirection.html]). It makes identical use of the awk_input_parser_t and awk_output_buf_t structures as\ndescribed earlier.\n\nA two-way processor is represented by the following structure:\n\ntypedef struct awk_two_way_processor {\n    const char *name;   /* name of the two-way processor */\n    awk_bool_t (*can_take_two_way)(const char *name);\n    awk_bool_t (*take_control_of)(const char *name,\n                                  awk_input_buf_t *inbuf,\n                                  awk_output_buf_t *outbuf);\n    awk_const struct awk_two_way_processor *awk_const next;  /* for gawk */\n} awk_two_way_processor_t;\n\n\nThe fields are as follows:\n\nconst char *name;\n\nThe name of the two-way processor.\n\nawk_bool_t (*can_take_two_way)(const char *name);\n\nThe function pointed to by this field should return true if it wants to take over two-way I/O for this file name. It should not\nchange any state (variable values, etc.) within gawk.\n\nawk_bool_t (*take_control_of)(const char *name, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_input_buf_t *inbuf,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0awk_output_buf_t *outbuf);\n\nThe function pointed to by this field should fill in the awk_input_buf_t and awk_output_buf_t structures pointed to by inbuf and\noutbuf, respectively. These structures were described earlier.\n\nawk_const struct two_way_processor *awk_const next;\n\nThis is for use by gawk; therefore it is marked awk_const so that the extension cannot modify it.\n\nAs with the input parser and output processor, you provide \u201cyes I can take this\u201d and \u201ctake over for this\u201d functions,\nXXX_can_take_two_way() and XXX_take_control_of().\n\nYou register your two-way processor with the following function:\n\nvoid register_two_way_processor(awk_two_way_processor_t *two_way_processor);\n\nRegister the two-way processor pointed to by two_way_processor with gawk.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Customized Output Wrappers [Output-Wrappers.html], Up: Registration Functions [Registration-Functions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d643b816-1921-4621-bdce-b5829548a1f8", "embedding": null, "doc_hash": "5f90ec042e7c479783e8d151e2b10e8844a96d0198d7e57b5930c690267f47bd", "extra_info": null, "node_info": {"start": 0, "end": 2635, "_node_type": "1"}, "relationships": {"1": "1f592df9-186f-4b87-a6f7-d970dfa8c635"}}, "__type__": "1"}, "0c3b826d-92c6-46a7-b3eb-f9d4eaaf238e": {"__data__": {"text": "Next: String-Translation Functions [I18N-Functions.html], Previous: Bit-Manipulation Functions [Bitwise-Functions.html], Up:\nBuilt-in Functions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.1.8 GETTING TYPE INFORMATION\n\ngawk provides two functions that let you distinguish the type of a variable. This is necessary for writing code that traverses\nevery element of an array of arrays (see Arrays of Arrays [Arrays-of-Arrays.html]), and in other contexts.\n\nisarray(x)\n\nReturn a true value if x is an array. Otherwise, return false.\n\ntypeof(x)\n\nReturn one of the following strings, depending upon the type of x:\n\n\"array\"\n\nx is an array.\n\n\"regexp\"\n\nx is a strongly typed regexp (see Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]).\n\n\"number\"\n\nx is a number.\n\n\"number|bool\"\n\nx is a Boolean typed value (see Boolean Typed Values [Boolean-Typed-Values.html]).\n\n\"string\"\n\nx is a string.\n\n\"strnum\"\n\nx is a number that started life as user input, such as a field or the result of calling split(). (I.e., x has the strnum\nattribute; see String Type versus Numeric Type [Variable-Typing.html].)\n\n\"unassigned\"\n\nx is a scalar variable that has not been assigned a value yet. For example:\n\nBEGIN {\n    # creates a[1] but it has no assigned value\n    a[1]\n    print typeof(a[1])  # unassigned\n}\n\n\n\"untyped\"\n\nx has not yet been used yet at all; it can become a scalar or an array. The typing could even conceivably differ from run to run\nof the same program! For example:\n\nBEGIN {\n    print \"initially, typeof(v) = \", typeof(v)\n\n    if (\"FOO\" in ENVIRON)\n        make_scalar(v)\n    else\n        make_array(v)\n\n    print \"typeof(v) =\", typeof(v)\n}\n\nfunction make_scalar(p,    l) { l = p }\n\nfunction make_array(p) { p[1] = 1 }\n\n\nisarray() is meant for use in two circumstances. The first is when traversing a multidimensional array: you can test if an element\nis itself an array or not. The second is inside the body of a user-defined function (not discussed yet; see User-Defined Functions\n[User_002ddefined.html]), to test if a parameter is an array or not.\n\n> NOTE: While you can use isarray() at the global level to test variables, doing so makes no sense. Because you are the one\n> writing the program, you are supposed to know if your variables are arrays or not.\n\nThe typeof() function is general; it allows you to determine if a variable or function parameter is a scalar (number, string, or\nstrongly typed regexp) or an array.\n\nNormally, passing a variable that has never been used to a built-in function causes it to become a scalar variable (unassigned).\nHowever, isarray() and typeof() are different; they do not change their arguments from untyped to unassigned.\n\nThis applies to both variables denoted by simple identifiers and array elements that come into existence simply by referencing\nthem. Consider:\n\n$ gawk 'BEGIN { print typeof(x) }'\n-| untyped\n$ gawk 'BEGIN { print typeof(x[\"foo\"]) }'\n-| untyped\n\n\nNote that prior to version 5.2, array elements that come into existence simply by referencing them were different, they were\nautomatically forced to be scalars:\n\n$", "doc_id": "0c3b826d-92c6-46a7-b3eb-f9d4eaaf238e", "embedding": null, "doc_hash": "68ef6553bddaf60c1444f4ee27124107fdf565565be542d1c355bcc9618e0c9f", "extra_info": null, "node_info": {"start": 0, "end": 3250, "_node_type": "1"}, "relationships": {"1": "6e9d6a07-7572-4f16-b9d8-dca652765dd5", "3": "a1a2cd01-29ad-4d84-9eee-c5eb4ebf6982"}}, "__type__": "1"}, "a1a2cd01-29ad-4d84-9eee-c5eb4ebf6982": {"__data__": {"text": "them were different, they were\nautomatically forced to be scalars:\n\n$ gawk-5.1.1 'BEGIN { print typeof(x) }'\n-| untyped\n$ gawk-5.1.1 'BEGIN { print typeof(x[\"foo\"]) }'\n-| unassigned\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: String-Translation Functions [I18N-Functions.html], Previous: Bit-Manipulation Functions [Bitwise-Functions.html], Up:\nBuilt-in Functions [Built_002din.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "a1a2cd01-29ad-4d84-9eee-c5eb4ebf6982", "embedding": null, "doc_hash": "e1e35e03389ace7b5f7d15d76ae92f7e648e589c64f9d30fe19b6827c74e1159", "extra_info": null, "node_info": {"start": 3181, "end": 3719, "_node_type": "1"}, "relationships": {"1": "6e9d6a07-7572-4f16-b9d8-dca652765dd5", "2": "0c3b826d-92c6-46a7-b3eb-f9d4eaaf238e"}}, "__type__": "1"}, "106b45bc-4f19-4289-9426-210b10d17372": {"__data__": {"text": "Next: Boolean Expressions [Boolean-Ops.html], Previous: True and False in awk [Truth-Values.html], Up: Truth Values and Conditions\n[Truth-Values-and-Conditions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.2 VARIABLE TYPING AND COMPARISON EXPRESSIONS\n\n> The Guide is definitive. Reality is frequently inaccurate.\n\n\u2014 Douglas Adams, The Hitchhiker\u2019s Guide to the Galaxy\n\nUnlike in other programming languages, in awk variables do not have a fixed type. Instead, they can be either a number or a\nstring, depending upon the value that is assigned to them. We look now at how variables are typed, and how awk compares variables.\n\n * String Type versus Numeric Type [Variable-Typing.html]\n * Comparison Operators [Comparison-Operators.html]\n * String Comparison Based on Locale Collating Order [POSIX-String-Comparison.html]", "doc_id": "106b45bc-4f19-4289-9426-210b10d17372", "embedding": null, "doc_hash": "ced9ba8924600cbeb7e9b981e863c0bbcb59357e589ad4d96a37fbf336484156", "extra_info": null, "node_info": {"start": 0, "end": 974, "_node_type": "1"}, "relationships": {"1": "dd1e0eec-1ab7-45b0-903e-316d2f8a355b"}}, "__type__": "1"}, "dd007daf-6ad5-4d8d-b976-3713f258e662": {"__data__": {"text": "Next: Summary [Invoking-Summary.html], Previous: Obsolete Options and/or Features [Obsolete.html], Up: Running awk and gawk\n[Invoking-Gawk.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n2.10 UNDOCUMENTED OPTIONS AND FEATURES\n\n> Use the Source, Luke!\n\n\u2014 Obi-Wan\n\nThis section intentionally left blank.", "doc_id": "dd007daf-6ad5-4d8d-b976-3713f258e662", "embedding": null, "doc_hash": "c58fbd2491fea6492066f9cd5452d23c4dfe907ede13832441ad87e4cd30c3e2", "extra_info": null, "node_info": {"start": 0, "end": 452, "_node_type": "1"}, "relationships": {"1": "d10a97b7-8dac-438d-a4b3-03d58e79c0d1"}}, "__type__": "1"}, "9f6b0a3a-b9a6-484f-a082-d0517d46151f": {"__data__": {"text": "Next: The delete Statement [Delete.html], Previous: Using Numbers to Subscript Arrays [Numeric-Array-Subscripts.html], Up: Arrays\nin awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n8.3 USING UNINITIALIZED VARIABLES AS SUBSCRIPTS\n\nSuppose it\u2019s necessary to write a program to print the input data in reverse order. A reasonable attempt to do so (with some test\ndata) might look like this:\n\n$ echo 'line 1\n> line 2\n> line 3' | awk '{ l[lines] = $0; ++lines }\n> END {\n>     for (i = lines - 1; i >= 0; i--)\n>        print l[i]\n> }'\n-| line 3\n-| line 2\n\n\nUnfortunately, the very first line of input data did not appear in the output!\n\nUpon first glance, we would think that this program should have worked. The variable lines is uninitialized, and uninitialized\nvariables have the numeric value zero. So, awk should have printed the value of l[0].\n\nThe issue here is that subscripts for awk arrays are always strings. Uninitialized variables, when used as strings, have the value\n\"\", not zero. Thus, \u2018line 1\u2019 ends up stored in l[\"\"]. The following version of the program works correctly:\n\n{ l[lines++] = $0 }\nEND {\n    for (i = lines - 1; i >= 0; i--)\n       print l[i]\n}\n\n\nHere, the \u2018++\u2019 forces lines to be numeric, thus making the \u201cold value\u201d numeric zero. This is then converted to \"0\" as the array\nsubscript.\n\nEven though it is somewhat unusual, the null string (\"\") is a valid array subscript. (d.c.) gawk warns about the use of the null\nstring as a subscript if --lint is provided on the command line (see Command-Line Options [Options.html]).\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The delete Statement [Delete.html], Previous: Using Numbers to Subscript Arrays [Numeric-Array-Subscripts.html], Up: Arrays\nin awk [Arrays.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9f6b0a3a-b9a6-484f-a082-d0517d46151f", "embedding": null, "doc_hash": "04cdd7eff2f7c0ea82b4255d594c1867e774235bcb9e435d4f19efcb3dadb44e", "extra_info": null, "node_info": {"start": 0, "end": 2051, "_node_type": "1"}, "relationships": {"1": "f2f91975-ca4a-4682-a092-1a0e65182983"}}, "__type__": "1"}, "a09a1c9b-7cd1-4606-89fd-b8e47be9957f": {"__data__": {"text": "Next: Counting Things [Wc-Program.html], Previous: Duplicating Output into Multiple Files [Tee-Program.html], Up: Reinventing\nWheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.6 PRINTING NONDUPLICATED LINES OF TEXT\n\nThe uniq utility reads sorted lines of data on its standard input, and by default removes duplicate lines. In other words, it only\nprints unique lines\u2014hence the name. uniq has a number of options. The usage is as follows:\n\nuniq [-udc [-f n] [-s n]] [inputfile [outputfile]]\n\n\nThe options for uniq are:\n\n-d\n\nPrint only repeated (duplicated) lines.\n\n-u\n\nPrint only nonrepeated (unique) lines.\n\n-c\n\nCount lines. This option overrides -d and -u. Both repeated and nonrepeated lines are counted.\n\n-f n\n\nSkip n fields before comparing lines. The definition of fields is similar to awk\u2019s default: nonwhitespace characters separated by\nruns of spaces and/or TABs.\n\n-s n\n\nSkip n characters before comparing lines. Any fields specified with -f are skipped first.\n\ninputfile\n\nData is read from the input file named on the command line, instead of from the standard input.\n\noutputfile\n\nThe generated output is sent to the named output file, instead of to the standard output.\n\nNormally uniq behaves as if both the -d and -u options are provided.\n\nuniq uses the getopt() library function (see Processing Command-Line Options [Getopt-Function.html]) and the join() library\nfunction (see Merging an Array into a String [Join-Function.html]).\n\nThe program begins with a usage() function and then a brief outline of the options and their meanings in comments:\n\n# uniq.awk --- do uniq in awk\n#\n# Requires getopt() and join() library functions\n\n\n\n\nfunction usage()\n{\n    print(\"Usage: uniq [-udc [-f fields] [-s chars]] \" \\\n          \"[ in [ out ]]\") > \"/dev/stderr\"\n    exit 1\n}\n\n# -c    count lines. overrides -d and -u\n# -d    only repeated lines\n# -u    only nonrepeated lines\n# -f n  skip n fields\n# -s n  skip n characters, skip fields first\n\n\nThe POSIX standard for uniq allows options to start with \u2018+\u2019 as well as with \u2018-\u2019. An initial BEGIN rule traverses the arguments\nchanging any leading \u2018+\u2019 to \u2018-\u2019 so that the getopt() function can parse the options:\n\n# As of 2020, '+' can be used as the option character in addition to '-'\n# Previously allowed use of -N to skip fields and +N to skip\n# characters is no longer allowed, and not supported by this version.\n\nBEGIN {\n    # Convert + to - so getopt can handle things\n    for (i = 1; i < ARGC; i++) {\n        first = substr(ARGV[i], 1, 1)\n        if (ARGV[i] == \"--\" || (first != \"-\" && first != \"+\"))\n            break\n        else if (first == \"+\")\n            # Replace \"+\" with \"-\"\n            ARGV[i] = \"-\" substr(ARGV[i], 2)\n    }\n}\n\n\nThe next BEGIN rule deals with the command-line arguments and options. If no options are supplied, then the default is taken, to\nprint both repeated and nonrepeated lines. The output file, if provided, is assigned to outputfile. Early on, outputfile is\ninitialized to the standard output, /dev/stdout:\n\nBEGIN {\n   ", "doc_id": "a09a1c9b-7cd1-4606-89fd-b8e47be9957f", "embedding": null, "doc_hash": "667bf7ad920db854ee26bd3e4c27c8017b80d69246b70d1fd12bffedd7f40458", "extra_info": null, "node_info": {"start": 0, "end": 3197, "_node_type": "1"}, "relationships": {"1": "975f9793-5e62-4f9e-8e18-21bbccc33dd1", "3": "d65aa49d-448d-4b94-9752-c7c780424d93"}}, "__type__": "1"}, "d65aa49d-448d-4b94-9752-c7c780424d93": {"__data__": {"text": "to the standard output, /dev/stdout:\n\nBEGIN {\n    count = 1\n    outputfile = \"/dev/stdout\"\n    opts = \"udcf:s:\"\n    while ((c = getopt(ARGC, ARGV, opts)) != -1) {\n        if (c == \"u\")\n            non_repeated_only++\n        else if (c == \"d\")\n            repeated_only++\n        else if (c == \"c\")\n            do_count++\n        else if (c == \"f\")\n            fcount = Optarg + 0\n        else if (c == \"s\")\n            charcount = Optarg + 0\n        else\n            usage()\n    }\n\n    for (i = 1; i < Optind; i++)\n        ARGV[i] = \"\"\n\n    if (repeated_only == 0 && non_repeated_only == 0)\n        repeated_only = non_repeated_only = 1\n\n    if (ARGC - Optind == 2) {\n        outputfile = ARGV[ARGC - 1]\n        ARGV[ARGC - 1] = \"\"\n    }\n}\n\n\nThe following function, are_equal(), compares the current line, $0, to the previous line, last. It handles skipping fields and\ncharacters. If no field count and no character count are specified, are_equal() returns one or zero depending upon the result of a\nsimple string comparison of last and $0.\n\nOtherwise, things get more complicated. If fields have to be skipped, each line is broken into an array using split() (see\nString-Manipulation Functions [String-Functions.html]); the desired fields are then joined back into a line using join(). The\njoined lines are stored in clast and cline. If no fields are skipped, clast and cline are set to last and $0, respectively.\nFinally, if characters are skipped, substr() is used to strip off the leading charcount characters in clast and cline. The two\nstrings are then compared and are_equal() returns the result:\n\nfunction are_equal(    n, m, clast, cline, alast, aline)\n{\n    if (fcount == 0 && charcount == 0)\n        return (last == $0)\n\n\n\n\n    if (fcount > 0) {\n        n = split(last, alast)\n        m = split($0, aline)\n        clast = join(alast, fcount+1, n)\n        cline = join(aline, fcount+1, m)\n    } else {\n        clast = last\n        cline = $0\n    }\n    if (charcount) {\n        clast = substr(clast, charcount + 1)\n        cline = substr(cline, charcount + 1)\n    }\n\n\n\n\n    return (clast == cline)\n}\n\n\nThe following two rules are the body of the program. The first one is executed only for the very first line of data. It sets last\nequal to $0, so that subsequent lines of text have something to be compared to.\n\nThe second rule does the work. The variable equal is one or zero, depending upon the results of are_equal()\u2019s comparison. If uniq\nis counting repeated lines, and the lines are equal, then it increments the count variable. Otherwise, it prints the line and\nresets count, because the two", "doc_id": "d65aa49d-448d-4b94-9752-c7c780424d93", "embedding": null, "doc_hash": "8e3f98b1c2faf180d71da141f562ec628df8452c163c91cf8add7e6bfa357416", "extra_info": null, "node_info": {"start": 3157, "end": 5765, "_node_type": "1"}, "relationships": {"1": "975f9793-5e62-4f9e-8e18-21bbccc33dd1", "2": "a09a1c9b-7cd1-4606-89fd-b8e47be9957f", "3": "fddaa038-ce6a-480f-b984-ea8d3d669585"}}, "__type__": "1"}, "fddaa038-ce6a-480f-b984-ea8d3d669585": {"__data__": {"text": "the count variable. Otherwise, it prints the line and\nresets count, because the two lines are not equal.\n\nIf uniq is not counting, and if the lines are equal, count is incremented. Nothing is printed, as the point is to remove\nduplicates. Otherwise, if uniq is counting repeated lines and more than one line is seen, or if uniq is counting nonrepeated lines\nand only one line is seen, then the line is printed, and count is reset.\n\nFinally, similar logic is used in the END rule to print the final line of input data:\n\nNR == 1 {\n    last = $0\n    next\n}\n\n{\n    equal = are_equal()\n\n    if (do_count) {    # overrides -d and -u\n        if (equal)\n            count++\n        else {\n            printf(\"%4d %s\\n\", count, last) > outputfile\n            last = $0\n            count = 1    # reset\n        }\n        next\n    }\n\n    if (equal)\n        count++\n    else {\n        if ((repeated_only && count > 1) ||\n            (non_repeated_only && count == 1))\n                print last > outputfile\n        last = $0\n        count = 1\n    }\n}\n\nEND {\n    if (do_count)\n        printf(\"%4d %s\\n\", count, last) > outputfile\n\n\n    else if ((repeated_only && count > 1) ||\n            (non_repeated_only && count == 1))\n        print last > outputfile\n    close(outputfile)\n}\n\n\nAs a side note, this program does not follow our recommended convention of naming global variables with a leading capital letter.\nDoing that would make the program a little easier to follow.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Counting Things [Wc-Program.html], Previous: Duplicating Output into Multiple Files [Tee-Program.html], Up: Reinventing\nWheels for Fun and Profit [Clones.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "fddaa038-ce6a-480f-b984-ea8d3d669585", "embedding": null, "doc_hash": "53a9e6ca92d5ffbfd7a0bacfe3530760bcb0bf09057d9b6e46d24c1fcf504a9e", "extra_info": null, "node_info": {"start": 5723, "end": 7541, "_node_type": "1"}, "relationships": {"1": "975f9793-5e62-4f9e-8e18-21bbccc33dd1", "2": "d65aa49d-448d-4b94-9752-c7c780424d93"}}, "__type__": "1"}, "e6cb946e-8344-4b7c-8576-672b76aab0ea": {"__data__": {"text": "Next: Installation on Other Operating Systems [Non_002dUnix-Installation.html], Previous: The gawk Distribution\n[Gawk-Distribution.html], Up: Installing gawk [Installation.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nB.2 COMPILING AND INSTALLING GAWK ON UNIX-LIKE SYSTEMS\n\nUsually, you can compile and install gawk by typing only two commands. However, if you use an unusual system, you may need to\nconfigure gawk for your system yourself.\n\n * Compiling gawk for Unix-Like Systems [Quick-Installation.html]\n * Shell Startup Files [Shell-Startup-Files.html]\n * Additional Configuration Options [Additional-Configuration-Options.html]\n * The Configuration Process [Configuration-Philosophy.html]\n * Compiling from Git [Compiling-from-Git.html]\n * Building the Documentation [Building-the-Documentation.html]", "doc_id": "e6cb946e-8344-4b7c-8576-672b76aab0ea", "embedding": null, "doc_hash": "4b826aef7ca91d43172a28166e90c9d09230f676f032a983b4929fa791ef9719", "extra_info": null, "node_info": {"start": 0, "end": 959, "_node_type": "1"}, "relationships": {"1": "5416b827-38f8-4ee9-8b6c-78dad7c7ea58"}}, "__type__": "1"}, "97decda0-724e-40f7-a1e2-3b24a1b2ff79": {"__data__": {"text": "Next: Requesting Values [Requesting-Values.html], Previous: Printing Messages [Printing-Messages.html], Up: API Description\n[Extension-API-Description.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.4.8 UPDATING ERRNO\n\nThe following functions allow you to update the ERRNO variable:\n\nvoid update_ERRNO_int(int errno_val);\n\nSet ERRNO to the string equivalent of the error code in errno_val. The value should be one of the defined error codes in\n<errno.h>, and gawk turns it into a (possibly translated) string using the C strerror() function.\n\nvoid update_ERRNO_string(const char *string);\n\nSet ERRNO directly to the string value of ERRNO. gawk makes a copy of the value of string.\n\nvoid unset_ERRNO(void);\n\nUnset ERRNO.", "doc_id": "97decda0-724e-40f7-a1e2-3b24a1b2ff79", "embedding": null, "doc_hash": "daaa8dd97404b0260bfc35871bc978c52e9639f11054041ccee6565174aa9632", "extra_info": null, "node_info": {"start": 0, "end": 872, "_node_type": "1"}, "relationships": {"1": "e361eb00-babf-4ef3-9034-0d96beaf0455"}}, "__type__": "1"}, "e5ca0d64-2bf2-46d6-a453-c61ec77d2681": {"__data__": {"text": "Next: What To Do If You Think There Is A Performance Issue [Performance-bugs.html], Previous: Submitting Bug Reports\n[Bug-address.html], Up: Reporting Problems and Bugs [Bugs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nB.4.3 PLEASE DON\u2019T POST BUG REPORTS TO USENET\n\n> I gave up on Usenet a couple of years ago and haven\u2019t really looked back. It\u2019s like sports talk radio\u2014you feel smarter for not\n> having read it.\n\n\u2014 Chet Ramey\n\nPlease do not try to report bugs in gawk by posting to the Usenet/Internet newsgroup comp.lang.awk. Although some of the gawk\ndevelopers occasionally read this news group, the primary gawk maintainer no longer does. Thus it\u2019s virtually guaranteed that he\nwill not see your posting.\n\nIf you really don\u2019t care about the previous paragraph and continue to post bug reports in comp.lang.awk, then understand that\nyou\u2019re not reporting bugs, you\u2019re just whining.\n\nSimilarly, posting bug reports or questions in web forums (such as Stack Overflow [https://stackoverflow.com/]) may get you an\nanswer, but it won\u2019t be from the gawk maintainers, who do not spend their time in web forums. The steps described here are the\nonly officially recognized way for reporting bugs. Really.", "doc_id": "e5ca0d64-2bf2-46d6-a453-c61ec77d2681", "embedding": null, "doc_hash": "17802cf28ba2d52acbd4c8d636f09c206199c723fe5c4e7399893427c0e057ae", "extra_info": null, "node_info": {"start": 0, "end": 1352, "_node_type": "1"}, "relationships": {"1": "8f4576b7-b6f4-4d1f-ac86-51c435918639"}}, "__type__": "1"}, "83351168-5bbb-4330-9104-5c55e41d2a3e": {"__data__": {"text": "Next: Indirect Function Calls [Indirect-Calls.html], Previous: Built-in Functions [Built_002din.html], Up: Functions\n[Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n9.2 USER-DEFINED FUNCTIONS\n\nComplicated awk programs can often be simplified by defining your own functions. User-defined functions can be called just like\nbuilt-in ones (see Function Calls [Function-Calls.html]), but it is up to you to define them (i.e., to tell awk what they should\ndo).\n\n * Function Definition Syntax [Definition-Syntax.html]\n * Function Definition Examples [Function-Example.html]\n * Calling User-Defined Functions [Function-Calling.html]\n * The return Statement [Return-Statement.html]\n * Functions and Their Effects on Variable Typing [Dynamic-Typing.html]", "doc_id": "83351168-5bbb-4330-9104-5c55e41d2a3e", "embedding": null, "doc_hash": "197cb82e0b3a8c7566b7f17c4392bfce5272777a55929bb5fb6d7c466b53884e", "extra_info": null, "node_info": {"start": 0, "end": 906, "_node_type": "1"}, "relationships": {"1": "6de26390-981c-409b-90a9-869f983eae6e"}}, "__type__": "1"}, "4f78e6a5-bb97-4819-a5b5-f0a3efdf7634": {"__data__": {"text": "Next: Built-in Variables That Convey Information [Auto_002dset.html], Up: Predefined Variables [Built_002din-Variables.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.5.1 BUILT-IN VARIABLES THAT CONTROL AWK\n\nThe following is an alphabetical list of variables that you can change to control how awk does certain things.\n\nThe variables that are specific to gawk are marked with a pound sign (\u2018#\u2019). These variables are gawk extensions. In other awk\nimplementations or if gawk is in compatibility mode (see Command-Line Options [Options.html]), they are not special. (Any\nexceptions are noted in the description of each variable.)\n\nBINMODE #\n\nOn non-POSIX systems, this variable specifies use of binary mode for all I/O. Numeric values of one, two, or three specify that\ninput files, output files, or all files, respectively, should use binary I/O. A numeric value less than zero is treated as zero,\nand a numeric value greater than three is treated as three. Alternatively, string values of \"r\" or \"w\" specify that input files\nand output files, respectively, should use binary I/O. A string value of \"rw\" or \"wr\" indicates that all files should use binary\nI/O. Any other string value is treated the same as \"rw\", but causes gawk to generate a warning message. BINMODE is described in\nmore detail in Using gawk on PC Operating Systems [PC-Using.html]. mawk (see Other Freely Available awk Implementations\n[Other-Versions.html]) also supports this variable, but only using numeric values.\n\nCONVFMT\n\nA string that controls the conversion of numbers to strings (see Conversion of Strings and Numbers [Conversion.html]). It works by\nbeing passed, in effect, as the first argument to the sprintf() function (see String-Manipulation Functions\n[String-Functions.html]). Its default value is \"%.6g\". CONVFMT was introduced by the POSIX standard.\n\nFIELDWIDTHS #\n\nA space-separated list of columns that tells gawk how to split input with fixed columnar boundaries. Starting in version 4.2, each\nfield width may optionally be preceded by a colon-separated value specifying the number of characters to skip before the field\nstarts. Assigning a value to FIELDWIDTHS overrides the use of FS and FPAT for field splitting. See Reading Fixed-Width Data\n[Constant-Size.html] for more information.\n\nFPAT #\n\nA regular expression (as a string) that tells gawk to create the fields based on text that matches the regular expression.\nAssigning a value to FPAT overrides the use of FS and FIELDWIDTHS for field splitting. See Defining Fields by Content\n[Splitting-By-Content.html] for more information.\n\nFS\n\nThe input field separator (see Specifying How Fields Are Separated [Field-Separators.html]). The value is a single-character\nstring or a multicharacter regular expression that matches the separations between fields in an input record. If the value is the\nnull string (\"\"), then each character in the record becomes a separate field. (This behavior is a gawk extension. POSIX awk does\nnot specify the behavior when FS is the null string. Nonetheless, some other versions of awk also treat \"\" specially.)\n\nThe default value is \"\u00a0\", a string consisting of a single space. As a special exception, this value means that any sequence of\nspaces, TABs, and/or newlines is a single separator. It also causes spaces, TABs, and newlines at the beginning and end of a\nrecord to be ignored.\n\nYou can set the value of FS on the command line using the -F option:\n\nawk -F, 'program' input-files\n\n\nIf gawk is using FIELDWIDTHS or FPAT for field splitting, assigning a value to FS causes gawk to return to the normal, FS-based\nfield splitting. An easy way to do this is to simply say \u2018FS = FS\u2019, perhaps with an explanatory", "doc_id": "4f78e6a5-bb97-4819-a5b5-f0a3efdf7634", "embedding": null, "doc_hash": "557e49091fcfb76a77108dab748edb5d55aafa1e36ae42d20ca8ce1303525f79", "extra_info": null, "node_info": {"start": 0, "end": 3836, "_node_type": "1"}, "relationships": {"1": "90995119-baf6-46b4-b74b-53aac89f5727", "3": "720da9fd-0af3-4337-99d9-01b0a0998960"}}, "__type__": "1"}, "720da9fd-0af3-4337-99d9-01b0a0998960": {"__data__": {"text": "this is to simply say \u2018FS = FS\u2019, perhaps with an explanatory comment.\n\nIGNORECASE #\n\nIf IGNORECASE is nonzero or non-null, then all string comparisons and all regular expression matching are case-independent. This\napplies to regexp matching with \u2018~\u2019 and \u2018!~\u2019, the gensub(), gsub(), index(), match(), patsplit(), split(), and sub() functions,\nrecord termination with RS, and field splitting with FS and FPAT. However, the value of IGNORECASE does not affect array\nsubscripting and it does not affect field splitting when using a single-character field separator. See Case Sensitivity in\nMatching [Case_002dsensitivity.html].\n\nLINT #\n\nWhen this variable is true (nonzero or non-null), gawk behaves as if the --lint command-line option is in effect (see Command-Line\nOptions [Options.html]). With a value of \"fatal\", lint warnings become fatal errors. With a value of \"invalid\", only warnings\nabout things that are actually invalid are issued. (This is not fully implemented yet.) Any other true value prints nonfatal\nwarnings. Assigning a false value to LINT turns off the lint warnings.\n\nThis variable is a gawk extension. It is not special in other awk implementations. Unlike with the other special variables,\nchanging LINT does affect the production of lint warnings, even if gawk is in compatibility mode. Much as the --lint and\n--traditional options independently control different aspects of gawk\u2019s behavior, the control of lint warnings during program\nexecution is independent of the flavor of awk being executed.\n\nOFMT\n\nA string that controls conversion of numbers to strings (see Conversion of Strings and Numbers [Conversion.html]) for printing\nwith the print statement. It works by being passed as the first argument to the sprintf() function (see String-Manipulation\nFunctions [String-Functions.html]). Its default value is \"%.6g\". Earlier versions of awk used OFMT to specify the format for\nconverting numbers to strings in general expressions; this is now done by CONVFMT.\n\nOFS\n\nThe output field separator (see Output Separators [Output-Separators.html]). It is output between the fields printed by a print\nstatement. Its default value is \"\u00a0\", a string consisting of a single space.\n\nORS\n\nThe output record separator. It is output at the end of every print statement. Its default value is \"\\n\", the newline character.\n(See Output Separators [Output-Separators.html].)\n\nPREC #\n\nThe working precision of arbitrary-precision floating-point numbers, 53 bits by default (see Setting the Precision\n[Setting-precision.html]).\n\nROUNDMODE #\n\nThe rounding mode to use for arbitrary-precision arithmetic on numbers, by default \"N\" (roundTiesToEven in the IEEE 754 standard;\nsee Setting the Rounding Mode [Setting-the-rounding-mode.html]).\n\nRS\n\nThe input record separator. Its default value is a string containing a single newline character, which means that an input record\nconsists of a single line of text. It can also be the null string, in which case records are separated by runs of blank lines. If\nit is a regexp, records are separated by matches of the regexp in the input text. (See How Input Is Split into Records\n[Records.html].)\n\nThe ability for RS to be a regular expression is a gawk extension. In most other awk implementations, or if gawk is in\ncompatibility mode (see Command-Line Options [Options.html]), just the first character of RS\u2019s value is used.\n\nSUBSEP\n\nThe subscript separator. It has the default value of \"\\034\" and is used to separate the parts of the indices of a multidimensional\narray. Thus, the expression \u2018foo[\"A\",\u00a0\"B\"]\u2019 really accesses foo[\"A\\034B\"] (see Multidimensional Arrays [Multidimensional.html]).\n\nTEXTDOMAIN #\n\nUsed for internationalization of programs at the awk level. It sets the default text domain", "doc_id": "720da9fd-0af3-4337-99d9-01b0a0998960", "embedding": null, "doc_hash": "b9e2c2b7845c4615bfd870cde27ff165dee7e15ddec3f1ad2a7d69381387628e", "extra_info": null, "node_info": {"start": 3788, "end": 7535, "_node_type": "1"}, "relationships": {"1": "90995119-baf6-46b4-b74b-53aac89f5727", "2": "4f78e6a5-bb97-4819-a5b5-f0a3efdf7634", "3": "478c6a5e-3a0a-4730-b00e-84a49644cc09"}}, "__type__": "1"}, "478c6a5e-3a0a-4730-b00e-84a49644cc09": {"__data__": {"text": "for internationalization of programs at the awk level. It sets the default text domain for specially marked string constants\nin the source text, as well as for the dcgettext(), dcngettext(), and bindtextdomain() functions (see Internationalization with\ngawk [Internationalization.html]). The default value of TEXTDOMAIN is \"messages\".\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Built-in Variables That Convey Information [Auto_002dset.html], Up: Predefined Variables [Built_002din-Variables.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "478c6a5e-3a0a-4730-b00e-84a49644cc09", "embedding": null, "doc_hash": "5830bc26c222335ce51cb9c1367f7dbf2639ff2a6a4cb2a844649790b2b0b8bd", "extra_info": null, "node_info": {"start": 7498, "end": 8149, "_node_type": "1"}, "relationships": {"1": "90995119-baf6-46b4-b74b-53aac89f5727", "2": "720da9fd-0af3-4337-99d9-01b0a0998960"}}, "__type__": "1"}, "3a76468a-ae8c-4a9c-9576-a2b94eb25cfa": {"__data__": {"text": "Next: Input/Output from BEGIN and END Rules [I_002fO-And-BEGIN_002fEND.html], Up: The BEGIN and END Special Patterns\n[BEGIN_002fEND.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.1.4.1 STARTUP AND CLEANUP ACTIONS\n\nA BEGIN rule is executed once only, before the first input record is read. Likewise, an END rule is executed once only, after all\nthe input is read. For example:\n\n$ awk '\n> BEGIN { print \"Analysis of \\\"li\\\"\" }\n> /li/  { ++n }\n> END   { print \"\\\"li\\\" appears in\", n, \"records.\" }' mail-list\n-| Analysis of \"li\"\n-| \"li\" appears in 4 records.\n\n\nThis program finds the number of records in the input file mail-list that contain the string \u2018li\u2019. The BEGIN rule prints a title\nfor the report. There is no need to use the BEGIN rule to initialize the counter n to zero, as awk does this automatically (see\nVariables [Variables.html]). The second rule increments the variable n every time a record containing the pattern \u2018li\u2019 is read.\nThe END rule prints the value of n at the end of the run.\n\nThe special patterns BEGIN and END cannot be used in ranges or with Boolean operators (indeed, they cannot be used with any\noperators). An awk program may have multiple BEGIN and/or END rules. They are executed in the order in which they appear: all the\nBEGIN rules at startup and all the END rules at termination.\n\nBEGIN and END rules may be intermixed with other rules. This feature was added in the 1987 version of awk and is included in the\nPOSIX standard. The original (1978) version of awk required the BEGIN rule to be placed at the beginning of the program, the END\nrule to be placed at the end, and only allowed one of each. This is no longer required, but it is a good idea to follow this\ntemplate in terms of program organization and readability.\n\nMultiple BEGIN and END rules are useful for writing library functions, because each library file can have its own BEGIN and/or END\nrule to do its own initialization and/or cleanup. The order in which library functions are named on the command line controls the\norder in which their BEGIN and END rules are executed. Therefore, you have to be careful when writing such rules in library files\nso that the order in which they are executed doesn\u2019t matter. See Command-Line Options [Options.html] for more information on using\nlibrary functions. See A Library of awk Functions [Library-Functions.html], for a number of useful library functions.\n\nIf an awk program has only BEGIN rules and no other rules, then the program exits after the BEGIN rules are run.38 However, if an\nEND rule exists, then the input is read, even if there are no other rules in the program. This is necessary in case the END rule\nchecks the FNR and NR variables, or the fields.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(38)\n\nThe original version of awk kept reading and ignoring input until the end of the file was seen.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Input/Output from BEGIN and END Rules [I_002fO-And-BEGIN_002fEND.html], Up: The BEGIN and END Special Patterns\n[BEGIN_002fEND.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "3a76468a-ae8c-4a9c-9576-a2b94eb25cfa", "embedding": null, "doc_hash": "70d119ae99436a010e554f034fdfa769699a993d1c6f8bd5adc58fe11f268648", "extra_info": null, "node_info": {"start": 0, "end": 3435, "_node_type": "1"}, "relationships": {"1": "b6210497-2f1c-4937-941e-d233ac9cb99b"}}, "__type__": "1"}, "52ec34e4-7a8f-47bd-a23b-2dbf0c7b486d": {"__data__": {"text": "Next: Variables [Variables.html], Previous: Constant Expressions [Constants.html], Up: Constants, Variables, and Conversions\n[Values.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.2 USING REGULAR EXPRESSION CONSTANTS\n\nRegular expression constants consist of text describing a regular expression enclosed in slashes (such as /the +answer/). This\nsection describes how such constants work in POSIX awk and gawk, and then goes on to describe strongly typed regexp constants,\nwhich are a gawk extension.\n\n * Standard Regular Expression Constants [Standard-Regexp-Constants.html]\n * Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]", "doc_id": "52ec34e4-7a8f-47bd-a23b-2dbf0c7b486d", "embedding": null, "doc_hash": "05455e292b727bf87c528e4989d8dde219aeaf16a9c2a2e8443b4b78c997cc62", "extra_info": null, "node_info": {"start": 0, "end": 795, "_node_type": "1"}, "relationships": {"1": "2292d7c7-9f03-4733-bb99-10c656670b57"}}, "__type__": "1"}, "466e922f-af69-4b4f-8deb-f7981d48a140": {"__data__": {"text": "Previous: C Code for chdir() and stat() [Internal-File-Ops.html], Up: Example: Some File Functions [Extension-Example.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n17.6.3 INTEGRATING THE EXTENSIONS\n\nNow that the code is written, it must be possible to add it at runtime to the running gawk interpreter. First, the code must be\ncompiled. Assuming that the functions are in a file named filefuncs.c, and idir is the location of the gawkapi.h header file, the\nfollowing steps112 create a GNU/Linux shared library:\n\n$ gcc -fPIC -shared -DHAVE_CONFIG_H -c -O -g -Iidir filefuncs.c\n$ gcc -o filefuncs.so -shared filefuncs.o\n\n\nOnce the library exists, it is loaded by using the @load keyword:\n\n# file testff.awk\n@load \"filefuncs\"\n\nBEGIN {\n    \"pwd\" | getline curdir  # save current directory\n    close(\"pwd\")\n\n    chdir(\"/tmp\")\n    system(\"pwd\")   # test it\n    chdir(curdir)   # go back\n\n    print \"Info for testff.awk\"\n    ret = stat(\"testff.awk\", data)\n    print \"ret =\", ret\n    for (i in data)\n        printf \"data[\\\"%s\\\"] = %s\\n\", i, data[i]\n    print \"testff.awk modified:\",\n        strftime(\"%m %d %Y %H:%M:%S\", data[\"mtime\"])\n\n    print \"\\nInfo for JUNK\"\n    ret = stat(\"JUNK\", data)\n    print \"ret =\", ret\n    for (i in data)\n        printf \"data[\\\"%s\\\"] = %s\\n\", i, data[i]\n    print \"JUNK modified:\", strftime(\"%m %d %Y %H:%M:%S\", data[\"mtime\"])\n}\n\n\nThe AWKLIBPATH environment variable tells gawk where to find extensions (see How gawk Finds Extensions [Finding-Extensions.html]).\nWe set it to the current directory and run the program:\n\n$ AWKLIBPATH=$PWD gawk -f testff.awk\n-| /tmp\n-| Info for testff.awk\n-| ret = 0\n-| data[\"blksize\"] = 4096\n-| data[\"devbsize\"] = 512\n-| data[\"mtime\"] = 1412004710\n-| data[\"mode\"] = 33204\n-| data[\"type\"] = file\n-| data[\"dev\"] = 2053\n-| data[\"gid\"] = 1000\n-| data[\"ino\"] = 10358899\n-| data[\"ctime\"] = 1412004710\n-| data[\"blocks\"] = 8\n-| data[\"nlink\"] = 1\n-| data[\"name\"] = testff.awk\n-| data[\"atime\"] = 1412004716\n-| data[\"pmode\"] = -rw-rw-r--\n-| data[\"size\"] = 666\n-| data[\"uid\"] = 1000\n-| testff.awk modified: 09 29 2014 18:31:50\n-|\n-| Info for JUNK\n-| ret = -1\n-| JUNK modified: 01 01 1970 02:00:00\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(112)\n\nIn practice, you would probably want to use the GNU Autotools (Automake, Autoconf, Libtool, and gettext) to configure and build\nyour libraries. Instructions for doing so are beyond the scope of this Web page. See The gawkextlib Project [gawkextlib.html] for\nInternet links to the tools.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: C Code for chdir() and stat() [Internal-File-Ops.html], Up: Example: Some File Functions [Extension-Example.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "466e922f-af69-4b4f-8deb-f7981d48a140", "embedding": null, "doc_hash": "99ffb6ce71cb6c3020705ee0b68a6f9af4ee6dea0ea3e210dbdcf18303cf4012", "extra_info": null, "node_info": {"start": 0, "end": 3047, "_node_type": "1"}, "relationships": {"1": "12a3f7c5-f6f5-46c2-a23a-a898dcc9ae13"}}, "__type__": "1"}, "273077e7-f591-4931-a73c-ef265687d1f7": {"__data__": {"text": "Next: Actions [Action-Overview.html], Previous: Pattern Elements [Pattern-Overview.html], Up: Patterns, Actions, and Variables\n[Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n7.2 USING SHELL VARIABLES IN PROGRAMS\n\nawk programs are often used as components in larger programs written in shell. For example, it is very common to use a shell\nvariable to hold a pattern that the awk program searches for. There are two ways to get the value of the shell variable into the\nbody of the awk program.\n\nA common method is to use shell quoting to substitute the variable\u2019s value into the program inside the script. For example,\nconsider the following program:\n\nprintf \"Enter search pattern: \"\nread pattern\nawk \"/$pattern/ \"'{ nmatches++ }\n     END { print nmatches, \"found\" }' /path/to/data\n\n\nThe awk program consists of two pieces of quoted text that are concatenated together to form the program. The first part is\ndouble-quoted, which allows substitution of the pattern shell variable inside the quotes. The second part is single-quoted.\n\nVariable substitution via quoting works, but can potentially be messy. It requires a good understanding of the shell\u2019s quoting\nrules (see Shell Quoting Issues [Quoting.html]), and it\u2019s often difficult to correctly match up the quotes when reading the\nprogram.\n\nA better method is to use awk\u2019s variable assignment feature (see Assigning Variables on the Command Line\n[Assignment-Options.html]) to assign the shell variable\u2019s value to an awk variable. Then use dynamic regexps to match the pattern\n(see Using Dynamic Regexps [Computed-Regexps.html]). The following shows how to redo the previous example using this technique:\n\nprintf \"Enter search pattern: \"\nread pattern\nawk -v pat=\"$pattern\" '$0 ~ pat { nmatches++ }\n       END { print nmatches, \"found\" }' /path/to/data\n\n\nNow, the awk program is just one single-quoted string. The assignment \u2018-v pat=\"$pattern\"\u2019 still requires double quotes, in case\nthere is whitespace in the value of $pattern. The awk variable pat could be named pattern too, but that would be more confusing.\nUsing a variable also provides more flexibility, as the variable can be used anywhere inside the program\u2014for printing, as an array\nsubscript, or for any other use\u2014without requiring the quoting tricks at every point in the program.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Actions [Action-Overview.html], Previous: Pattern Elements [Pattern-Overview.html], Up: Patterns, Actions, and Variables\n[Patterns-and-Actions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "273077e7-f591-4931-a73c-ef265687d1f7", "embedding": null, "doc_hash": "1b01f796b237c8ddbd02231798191d52e73b1deb4e398e8bdc3ebd4949788399", "extra_info": null, "node_info": {"start": 0, "end": 2812, "_node_type": "1"}, "relationships": {"1": "7e175dff-e596-476f-8743-f62dff600981"}}, "__type__": "1"}, "d1f144be-48c2-4c0a-bd6a-be2634f2b6ac": {"__data__": {"text": "Next: Assigning Variables on the Command Line [Assignment-Options.html], Up: Variables [Variables.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.3.1 USING VARIABLES IN A PROGRAM\n\nVariables let you give names to values and refer to them later. Variables have already been used in many of the examples. The name\nof a variable must be a sequence of letters, digits, or underscores, and it may not begin with a digit. Here, a letter is any one\nof the 52 upper- and lowercase English letters. Other characters that may be defined as letters in non-English locales are not\nvalid in variable names. Case is significant in variable names; a and A are distinct variables.\n\nA variable name is a valid expression by itself; it represents the variable\u2019s current value. Variables are given new values with\nassignment operators, increment operators, and decrement operators (see Assignment Expressions [Assignment-Ops.html]). In\naddition, the sub() and gsub() functions can change a variable\u2019s value, and the match(), split(), and patsplit() functions can\nchange the contents of their array parameters (see String-Manipulation Functions [String-Functions.html]).\n\nA few variables have special built-in meanings, such as FS (the field separator) and NF (the number of fields in the current input\nrecord). See Predefined Variables [Built_002din-Variables.html] for a list of the predefined variables. These predefined variables\ncan be used and assigned just like all other variables, but their values are also used or changed automatically by awk. All\npredefined variables\u2019 names are entirely uppercase.\n\nVariables in awk can be assigned either numeric or string values. The kind of value a variable holds can change over the life of a\nprogram. By default, variables are initialized to the empty string, which is zero if converted to a number. There is no need to\nexplicitly initialize a variable in awk, which is what you would do in C and in most other traditional languages.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Assigning Variables on the Command Line [Assignment-Options.html], Up: Variables [Variables.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d1f144be-48c2-4c0a-bd6a-be2634f2b6ac", "embedding": null, "doc_hash": "3586e15116bf8a80b364d1ee60566b9c70636586c00a8b1e7a5525ab4b9936c3", "extra_info": null, "node_info": {"start": 0, "end": 2412, "_node_type": "1"}, "relationships": {"1": "736e71ca-4b0f-415b-a941-4b26a226c3e4"}}, "__type__": "1"}, "55c3407e-1084-47ba-b37c-e95738123b51": {"__data__": {"text": "Next: Code for wc.awk [wc-program.html], Previous: Modern Character Sets [Bytes-vs_002e-Characters.html], Up: Counting Things\n[Wc-Program.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.7.2 A BRIEF INTRODUCTION TO EXTENSIONS\n\nLoadable extensions are presented in full detail in Writing Extensions for gawk [Dynamic-Extensions.html]. They provide a way to\nadd functions to gawk which can call out to other facilities written in C or C++.\n\nFor the purposes of wc.awk, it\u2019s enough to know that the extension is loaded with the @load directive, and the additional function\nwe will use is called mbs_length(). This function returns the number of bytes in a string, not the number of characters.\n\nThe \"mbs\" extension comes from the gawkextlib project. See The gawkextlib Project [gawkextlib.html] for more information.", "doc_id": "55c3407e-1084-47ba-b37c-e95738123b51", "embedding": null, "doc_hash": "f7dbf3fd0f9aee3eab7e5817dd2c0c425f23deb6912b15ab33974c6d8f77fe97", "extra_info": null, "node_info": {"start": 0, "end": 967, "_node_type": "1"}, "relationships": {"1": "edd8efdf-c492-449b-b9f5-b99f6cbf0687"}}, "__type__": "1"}, "1b6e16da-56f3-4cb3-90b8-d67bec70b816": {"__data__": {"text": "Next: Changes Between SVR3.1 and SVR4 [SVR4.html], Up: The Evolution of the awk Language [Language-History.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nA.1 MAJOR CHANGES BETWEEN V7 AND SVR3.1\n\nThe awk language evolved considerably between the release of Version 7 Unix (1978) and the new version that was first made\ngenerally available in System V Release 3.1 (1987). This section summarizes the changes, with cross-references to further details:\n\n * The requirement for \u2018;\u2019 to separate rules on a line (see awk Statements Versus Lines [Statements_002fLines.html])\n * User-defined functions and the return statement (see User-Defined Functions [User_002ddefined.html])\n * The delete statement (see The delete Statement [Delete.html])\n * The do-while statement (see The do-while Statement [Do-Statement.html])\n * The built-in functions atan2(), cos(), sin(), rand(), and srand() (see Numeric Functions [Numeric-Functions.html])\n * The built-in functions gsub(), sub(), and match() (see String-Manipulation Functions [String-Functions.html])\n * The built-in functions close() and system() (see Input/Output Functions [I_002fO-Functions.html])\n * The ARGC, ARGV, FNR, RLENGTH, RSTART, and SUBSEP predefined variables (see Predefined Variables [Built_002din-Variables.html])\n * Assignable $0 (see Changing the Contents of a Field [Changing-Fields.html])\n * The conditional expression using the ternary operator \u2018?:\u2019 (see Conditional Expressions [Conditional-Exp.html])\n * The expression \u2018indx in array\u2019 outside of for statements (see Referring to an Array Element [Reference-to-Elements.html])\n * The exponentiation operator \u2018^\u2019 (see Arithmetic Operators [Arithmetic-Ops.html]) and its assignment operator form \u2018^=\u2019 (see\n   Assignment Expressions [Assignment-Ops.html])\n * C-compatible operator precedence, which breaks some old awk programs (see Operator Precedence (How Operators Nest)\n   [Precedence.html])\n * Regexps as the value of FS (see Specifying How Fields Are Separated [Field-Separators.html]) and as the third argument to the\n   split() function (see String-Manipulation Functions [String-Functions.html]), rather than using only the first character of FS\n * Dynamic regexps as operands of the \u2018~\u2019 and \u2018!~\u2019 operators (see Using Dynamic Regexps [Computed-Regexps.html])\n * The escape sequences \u2018\\b\u2019, \u2018\\f\u2019, and \u2018\\r\u2019 (see Escape Sequences [Escape-Sequences.html])\n * Redirection of input for the getline function (see Explicit Input with getline [Getline.html])\n * Multiple BEGIN and END rules (see The BEGIN and END Special Patterns [BEGIN_002fEND.html])\n * Multidimensional arrays (see Multidimensional Arrays [Multidimensional.html])\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Changes Between SVR3.1 and SVR4 [SVR4.html], Up: The Evolution of the awk Language [Language-History.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "1b6e16da-56f3-4cb3-90b8-d67bec70b816", "embedding": null, "doc_hash": "3ea2248bb5ec6eadde47d6372968aba0bfe0196dc7cc53a7f163888fb3d6f39e", "extra_info": null, "node_info": {"start": 0, "end": 3101, "_node_type": "1"}, "relationships": {"1": "d8ba98d3-0bf7-4449-b74e-9681ca396477"}}, "__type__": "1"}, "38e6e48c-db2e-484f-a094-a488e5972646": {"__data__": {"text": "Next: Operators: Doing Something with Values [All-Operators.html], Up: Expressions [Expressions.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n6.1 CONSTANTS, VARIABLES, AND CONVERSIONS\n\nExpressions are built up from values and the operations performed upon them. This section describes the elementary objects that\nprovide the values used in expressions.\n\n * Constant Expressions [Constants.html]\n * Using Regular Expression Constants [Using-Constant-Regexps.html]\n * Variables [Variables.html]\n * Conversion of Strings and Numbers [Conversion.html]", "doc_id": "38e6e48c-db2e-484f-a094-a488e5972646", "embedding": null, "doc_hash": "73a18b2c83fa866fd7ae2f23150de01a525560a2ceac09cd3dacc9380cf39749", "extra_info": null, "node_info": {"start": 0, "end": 700, "_node_type": "1"}, "relationships": {"1": "b329e402-438a-405d-8cfe-030d66389563"}}, "__type__": "1"}, "f372bfa7-7fdb-4d06-86ff-cd73911d3d21": {"__data__": {"text": "Next: Passing Function Arguments by Value Or by Reference [Pass-By-Value_002fReference.html], Previous: Writing a Function Call\n[Calling-A-Function.html], Up: Calling User-Defined Functions [Function-Calling.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n9.2.3.2 CONTROLLING VARIABLE SCOPE\n\nUnlike in many languages, there is no way to make a variable local to a { \u2026 } block in awk, but you can make a variable local to a\nfunction. It is good practice to do so whenever a variable is needed only in that function.\n\nTo make a variable local to a function, simply declare the variable as an argument after the actual function arguments (see\nFunction Definition Syntax [Definition-Syntax.html]). Look at the following example, where variable i is a global variable used by\nboth functions foo() and bar():\n\nfunction bar()\n{\n    for (i = 0; i < 3; i++)\n        print \"bar's i=\" i\n}\n\nfunction foo(j)\n{\n    i = j + 1\n    print \"foo's i=\" i\n    bar()\n    print \"foo's i=\" i\n}\n\nBEGIN {\n      i = 10\n      print \"top's i=\" i\n      foo(0)\n      print \"top's i=\" i\n}\n\n\nRunning this script produces the following, because the i in functions foo() and bar() and at the top level refer to the same\nvariable instance:\n\ntop's i=10\nfoo's i=1\nbar's i=0\nbar's i=1\nbar's i=2\nfoo's i=3\ntop's i=3\n\n\nIf you want i to be local to both foo() and bar(), do as follows (the extra space before i is a coding convention to indicate that\ni is a local variable, not an argument):\n\nfunction bar(    i)\n{\n    for (i = 0; i < 3; i++)\n        print \"bar's i=\" i\n}\n\nfunction foo(j,    i)\n{\n    i = j + 1\n    print \"foo's i=\" i\n    bar()\n    print \"foo's i=\" i\n}\n\nBEGIN {\n      i = 10\n      print \"top's i=\" i\n      foo(0)\n      print \"top's i=\" i\n}\n\n\nRunning the corrected script produces the following:\n\ntop's i=10\nfoo's i=1\nbar's i=0\nbar's i=1\nbar's i=2\nfoo's i=1\ntop's i=10\n\n\nBesides scalar values (strings and numbers), you may also have local arrays. By using a parameter name as an array, awk treats it\nas an array, and it is local to the function. In addition, recursive calls create new arrays. Consider this example:\n\nfunction some_func(p1,      a)\n{\n    if (p1++ > 3)\n        return\n\n\n\n\n    a[p1] = p1\n\n    some_func(p1)\n\n    printf(\"At level %d, index %d %s found in a\\n\",\n         p1, (p1 - 1), (p1 - 1) in a ? \"is\" : \"is not\")\n    printf(\"At level %d, index %d %s found in a\\n\",\n         p1, p1, p1 in a ? \"is\" : \"is not\")\n    print \"\"\n}\n\nBEGIN {\n    some_func(1)\n}\n\n\nWhen run, this program produces the following output:\n\nAt level 4, index 3 is not found in a\nAt level 4, index 4 is found in a\n\nAt level 3, index 2 is not found in a\nAt level 3, index 3 is found in a\n\nAt", "doc_id": "f372bfa7-7fdb-4d06-86ff-cd73911d3d21", "embedding": null, "doc_hash": "43037f556e33305d58ab71661a5199697d01217145605572723047d805545400", "extra_info": null, "node_info": {"start": 0, "end": 2798, "_node_type": "1"}, "relationships": {"1": "03028a81-8c63-42f1-ab7d-d3cfdf35c467", "3": "24ac5882-2bd7-4ff1-9b98-ba8770b3ffd0"}}, "__type__": "1"}, "24ac5882-2bd7-4ff1-9b98-ba8770b3ffd0": {"__data__": {"text": "2 is not found in a\nAt level 3, index 3 is found in a\n\nAt level 2, index 1 is not found in a\nAt level 2, index 2 is found in a\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Passing Function Arguments by Value Or by Reference [Pass-By-Value_002fReference.html], Previous: Writing a Function Call\n[Calling-A-Function.html], Up: Calling User-Defined Functions [Function-Calling.html] \u00a0 [Contents [index.html#SEC_Contents]][Index\n[Index.html]]", "doc_id": "24ac5882-2bd7-4ff1-9b98-ba8770b3ffd0", "embedding": null, "doc_hash": "b404bf8468c31c57d4f4821b0df94ce51f831696de33a489b53491cdcfb71224", "extra_info": null, "node_info": {"start": 2741, "end": 3274, "_node_type": "1"}, "relationships": {"1": "03028a81-8c63-42f1-ab7d-d3cfdf35c467", "2": "f372bfa7-7fdb-4d06-86ff-cd73911d3d21"}}, "__type__": "1"}, "3f01046c-69e7-4876-9d78-3a7d4e12f46b": {"__data__": {"text": "Next: Comparison Operators [Comparison-Operators.html], Up: Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.3.2.1 STRING TYPE VERSUS NUMERIC TYPE\n\nScalar objects in awk (variables, array elements, and fields) are dynamically typed. This means their type can change as the\nprogram runs, from untyped before any use,33 to string or number, and then from string to number or number to string, as the\nprogram progresses. (gawk also provides regexp-typed scalars, but let\u2019s ignore that for now; see Strongly Typed Regexp Constants\n[Strong-Regexp-Constants.html].)\n\nYou can\u2019t do much with untyped variables, other than tell that they are untyped. The following program tests a against \"\" and 0;\nthe test succeeds when a has never been assigned a value. It also uses the built-in typeof() function (not presented yet; see\nGetting Type Information [Type-Functions.html]) to show a\u2019s type:\n\n$ gawk 'BEGIN { print (a == \"\" && a == 0 ?\n> \"a is untyped\" : \"a has a type!\") ; print typeof(a) }'\n-| a is untyped\n-| unassigned\n\n\nA scalar has numeric type when assigned a numeric value, such as from a numeric constant, or from another scalar with numeric\ntype:\n\n$ gawk 'BEGIN { a = 42 ; print typeof(a)\n> b = a ; print typeof(b) }'\nnumber\nnumber\n\n\nSimilarly, a scalar has string type when assigned a string value, such as from a string constant, or from another scalar with\nstring type:\n\n$ gawk 'BEGIN { a = \"forty two\" ; print typeof(a)\n> b = a ; print typeof(b) }'\nstring\nstring\n\n\nSo far, this is all simple and straightforward. What happens, though, when awk has to process data from a user? Let\u2019s start with\nfield data. What should the following command produce as output?\n\necho hello | awk '{ printf(\"%s %s < 42\\n\", $1,\n                           ($1 < 42 ? \"is\" : \"is not\")) }'\n\n\nSince \u2018hello\u2019 is alphabetic data, awk can only do a string comparison. Internally, it converts 42 into \"42\" and compares the two\nstring values \"hello\" and \"42\". Here\u2019s the result:\n\n$ echo hello | awk '{ printf(\"%s %s < 42\\n\", $1,\n>                            ($1 < 42 ? \"is\" : \"is not\")) }'\n-| hello is not < 42\n\n\nHowever, what happens when data from a user looks like a number? On the one hand, in reality, the input data consists of\ncharacters, not binary numeric values. But, on the other hand, the data looks numeric, and awk really ought to treat it as such.\nAnd indeed, it does:\n\n$ echo 37 | awk '{ printf(\"%s %s < 42\\n\", $1,\n>                         ($1 < 42 ? \"is\" : \"is not\")) }'\n-| 37 is < 42\n\n\nHere are the rules for when awk treats data as a number, and for when it treats data as a string.\n\nThe POSIX standard uses the term numeric string for input data that looks numeric. The \u201837\u2019 in the previous example is a numeric\nstring. So what is the type of a numeric string? Answer: numeric.\n\nThe type of a variable is important because the types of two variables determine how they are compared. Variable typing follows\nthese definitions and rules:\n\n * A numeric constant or the", "doc_id": "3f01046c-69e7-4876-9d78-3a7d4e12f46b", "embedding": null, "doc_hash": "d9b5a4c16e1bef225ad9931e4c93ffe5663ee5694b1e7f24182712064bdce775", "extra_info": null, "node_info": {"start": 0, "end": 3176, "_node_type": "1"}, "relationships": {"1": "200b0fd5-3144-46c4-9d6b-e62b180ecc09", "3": "473548ed-5ea6-4164-af8b-97b177ca0a89"}}, "__type__": "1"}, "473548ed-5ea6-4164-af8b-97b177ca0a89": {"__data__": {"text": "typing follows\nthese definitions and rules:\n\n * A numeric constant or the result of a numeric operation has the numeric attribute.\n * A string constant or the result of a string operation has the string attribute.\n * Fields, getline input, FILENAME, ARGV elements, ENVIRON elements, and the elements of an array created by match(), split(), and\n   patsplit() that are numeric strings have the strnum attribute.34 Otherwise, they have the string attribute. Uninitialized\n   variables also have the strnum attribute.\n * Attributes propagate across assignments but are not changed by any use.\n\nThe last rule is particularly important. In the following program, a has numeric type, even though it is later used in a string\noperation:\n\nBEGIN {\n     a = 12.345\n     b = a \" is a cute number\"\n     print b\n}\n\n\nWhen two operands are compared, either string comparison or numeric comparison may be used. This depends upon the attributes of\nthe operands, according to the following symmetric matrix:\n\n        +----------------------------------------------\n        |       STRING          NUMERIC         STRNUM\n--------+----------------------------------------------\n        |\nSTRING  |       string          string          string\n        |\nNUMERIC |       string          numeric         numeric\n        |\nSTRNUM  |       string          numeric         numeric\n--------+----------------------------------------------\n\n\nThe basic idea is that user input that looks numeric\u2014and only user input\u2014should be treated as numeric, even though it is actually\nmade of characters and is therefore also a string. Thus, for example, the string constant \"\u00a0+3.14\", when it appears in program\nsource code, is a string\u2014even though it looks numeric\u2014and is never treated as a number for comparison purposes.\n\nIn short, when one operand is a \u201cpure\u201d string, such as a string constant, then a string comparison is performed. Otherwise, a\nnumeric comparison is performed. (The primary difference between a number and a strnum is that for strnums gawk preserves the\noriginal string value that the scalar had when it came in.)\n\nThis point bears additional emphasis: Input that looks numeric is numeric. All other input is treated as strings.\n\nThus, the six-character input string \u2018\u00a0+3.14\u2019 receives the strnum attribute. In contrast, the eight characters \"\u00a0+3.14\" appearing\nin program text comprise a string constant. The following examples print \u20181\u2019 when the comparison between the two different\nconstants is true, and \u20180\u2019 otherwise:\n\n$ echo ' +3.14' | awk '{ print($0 == \" +3.14\") }'    True\n-| 1\n$ echo ' +3.14' | awk '{ print($0 == \"+3.14\") }'     False\n-| 0\n$ echo ' +3.14' | awk '{ print($0 == \"3.14\") }'      False\n-| 0\n$ echo ' +3.14' | awk '{ print($0 == 3.14) }'        True\n-| 1\n$ echo ' +3.14' | awk '{ print($1 == \" +3.14\") }'    False\n-| 0\n$ echo ' +3.14' | awk '{ print($1 == \"+3.14\") }'     True\n-| 1\n$ echo ' +3.14' | awk '{ print($1 == \"3.14\") }'      False\n-| 0\n$ echo ' +3.14' | awk '{ print($1 == 3.14) }'        True\n-|", "doc_id": "473548ed-5ea6-4164-af8b-97b177ca0a89", "embedding": null, "doc_hash": "eb255cb21aa4d8d26b4cb76643b288fba10affb51c9af015394433d218dd1319", "extra_info": null, "node_info": {"start": 3114, "end": 6122, "_node_type": "1"}, "relationships": {"1": "200b0fd5-3144-46c4-9d6b-e62b180ecc09", "2": "3f01046c-69e7-4876-9d78-3a7d4e12f46b", "3": "0dd5647b-7817-4aa8-8ddf-3df18fdfd62b"}}, "__type__": "1"}, "0dd5647b-7817-4aa8-8ddf-3df18fdfd62b": {"__data__": {"text": "print($1 == 3.14) }'        True\n-| 1\n\n\nYou can see the type of an input field (or other user input) using typeof():\n\n$ echo hello 37 | gawk '{ print typeof($1), typeof($2) }'\n-| string strnum\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(33)\n\ngawk calls this unassigned, as the following example shows.\n\n(34)\n\nThus, a POSIX numeric string and gawk\u2019s strnum are the same thing.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Comparison Operators [Comparison-Operators.html], Up: Variable Typing and Comparison Expressions\n[Typing-and-Comparison.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "0dd5647b-7817-4aa8-8ddf-3df18fdfd62b", "embedding": null, "doc_hash": "9d7eef85ada703e422f70a4471542217f5046a7f50aa7aa62dc2e58c313f85c2", "extra_info": null, "node_info": {"start": 6150, "end": 6951, "_node_type": "1"}, "relationships": {"1": "200b0fd5-3144-46c4-9d6b-e62b180ecc09", "2": "473548ed-5ea6-4164-af8b-97b177ca0a89"}}, "__type__": "1"}, "67e4dd21-bf18-4826-9a5f-441eb36f8f35": {"__data__": {"text": "Next: Conversion of Strings and Numbers [Conversion.html], Previous: Using Regular Expression Constants\n[Using-Constant-Regexps.html], Up: Constants, Variables, and Conversions [Values.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n6.1.3 VARIABLES\n\nVariables are ways of storing values at one point in your program for use later in another part of your program. They can be\nmanipulated entirely within the program text, and they can also be assigned values on the awk command line.\n\n * Using Variables in a Program [Using-Variables.html]\n * Assigning Variables on the Command Line [Assignment-Options.html]", "doc_id": "67e4dd21-bf18-4826-9a5f-441eb36f8f35", "embedding": null, "doc_hash": "ad4e621f10a7420fe9fb6cc361b183ad4d08a55b0e113b50699672dbbf93d00d", "extra_info": null, "node_info": {"start": 0, "end": 757, "_node_type": "1"}, "relationships": {"1": "d8c83223-fda2-4684-bea8-94fb5ad215e5"}}, "__type__": "1"}, "feb2056d-66e3-4e9a-a001-09cb926c9e1a": {"__data__": {"text": "Next: An Example with Two Rules [Two-Rules.html], Previous: Data files for the Examples [Sample-Data-Files.html], Up: Getting\nStarted with awk [Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.3 SOME SIMPLE EXAMPLES\n\nThe following command runs a simple awk program that searches the input file mail-list for the character string \u2018li\u2019 (a grouping\nof characters is usually called a string; the term string is based on similar usage in English, such as \u201ca string of pearls\u201d or \u201ca\nstring of cars in a train\u201d):\n\nawk '/li/ { print $0 }' mail-list\n\n\nWhen lines containing \u2018li\u2019 are found, they are printed because \u2018print\u00a0$0\u2019 means print the current line. (Just \u2018print\u2019 by itself\nmeans the same thing, so we could have written that instead.)\n\nYou will notice that slashes (\u2018/\u2019) surround the string \u2018li\u2019 in the awk program. The slashes indicate that \u2018li\u2019 is the pattern to\nsearch for. This type of pattern is called a regular expression, which is covered in more detail later (see Regular Expressions\n[Regexp.html]). The pattern is allowed to match parts of words. There are single quotes around the awk program so that the shell\nwon\u2019t interpret any of it as special shell characters.\n\nHere is what this program prints:\n\n$ awk '/li/ { print $0 }' mail-list\n-| Amelia       555-5553     amelia.zodiacusque@gmail.com    F\n-| Broderick    555-0542     broderick.aliquotiens@yahoo.com R\n-| Julie        555-6699     julie.perscrutabor@skeeve.com   F\n-| Samuel       555-3430     samuel.lanceolis@shu.edu        A\n\n\nIn an awk rule, either the pattern or the action can be omitted, but not both. If the pattern is omitted, then the action is\nperformed for every input line. If the action is omitted, the default action is to print all lines that match the pattern.\n\nThus, we could leave out the action (the print statement and the braces) in the previous example and the result would be the same:\nawk prints all lines matching the pattern \u2018li\u2019. By comparison, omitting the print statement but retaining the braces makes an\nempty action that does nothing (i.e., no lines are printed).\n\nMany practical awk programs are just a line or two long. Following is a collection of useful, short programs to get you started.\nSome of these programs contain constructs that haven\u2019t been covered yet. (The description of the program will give you a good idea\nof what is going on, but you\u2019ll need to read the rest of the Web page to become an awk expert!) Most of the examples use a data\nfile named data. This is just a placeholder; if you use these programs yourself, substitute your own file names for data.\n\nSome of the following examples use the output of \u2018ls\u00a0-l\u2019 as input. ls is a system command that gives you a listing of the files in\na directory. With the -l option, this listing includes each file\u2019s size and the date the file was last modified. Its output looks\nlike this:\n\n-rw-r--r--  1 arnold   user   1933 Nov  7 13:05 Makefile\n-rw-r--r--  1 arnold   user  10809 Nov  7 13:03 awk.h\n-rw-r--r--  1 arnold   user    983 Apr 13 12:14 awk.tab.h\n-rw-r--r--  1 arnold   user  31869 Jun 15 12:20 awkgram.y\n-rw-r--r--  1 arnold   user  22414 Nov  7 13:03 awk1.c\n-rw-r--r--  1 arnold   user  37455 Nov  7", "doc_id": "feb2056d-66e3-4e9a-a001-09cb926c9e1a", "embedding": null, "doc_hash": "f8879379425ae99e591f138fe05d58e83b1a29e96bf8a37dcb4a160d4f741d41", "extra_info": null, "node_info": {"start": 0, "end": 3344, "_node_type": "1"}, "relationships": {"1": "7378ece4-4537-421e-8ea9-7ad438a974a5", "3": "822f78a3-8008-48dc-9938-5bb8da8ce2b8"}}, "__type__": "1"}, "822f78a3-8008-48dc-9938-5bb8da8ce2b8": {"__data__": {"text": " 1 arnold   user  37455 Nov  7 13:03 awk2.c\n-rw-r--r--  1 arnold   user  27511 Dec  9 13:07 awk3.c\n-rw-r--r--  1 arnold   user   7989 Nov  7 13:03 awk4.c\n\n\nThe first field contains read-write permissions, the second field contains the number of links to the file, and the third field\nidentifies the file\u2019s owner. The fourth field identifies the file\u2019s group. The fifth field contains the file\u2019s size in bytes. The\nsixth, seventh, and eighth fields contain the month, day, and time, respectively, that the file was last modified. Finally, the\nninth field contains the file name.\n\nFor future reference, note that there is often more than one way to do things in awk. At some point, you may want to look back at\nthese examples and see if you can come up with different ways to do the same things shown here:\n\n * Print every line that is longer than 80 characters:\n   \n   awk 'length($0) > 80' data\n   \n   \n   The sole rule has a relational expression as its pattern and has no action\u2014so it uses the default action, printing the record.\n\n * Print the length of the longest input line:\n   \n   awk '{ if (length($0) > max) max = length($0) }\n        END { print max }' data\n   \n   \n   The code associated with END executes after all input has been read; it\u2019s the other side of the coin to BEGIN.\n\n * Print the length of the longest line in data:\n   \n   expand data | awk '{ if (x < length($0)) x = length($0) }\n                      END { print \"maximum line length is \" x }'\n   \n   \n   This example differs slightly from the previous one: the input is processed by the expand utility to change TABs into spaces,\n   so the widths compared are actually the right-margin columns, as opposed to the number of input characters on each line.\n\n * Print every line that has at least one field:\n   \n   awk 'NF > 0' data\n   \n   \n   This is an easy way to delete blank lines from a file (or rather, to create a new file similar to the old file but from which\n   the blank lines have been removed).\n\n * Print seven random numbers from 0 to 100, inclusive:\n   \n   awk 'BEGIN { for (i = 1; i <= 7; i++)\n                    print int(101 * rand()) }'\n   \n\n * Print the total number of bytes used by files:\n   \n   ls -l files | awk '{ x += $5 }\n                      END { print \"total bytes: \" x }'\n   \n\n * Print the total number of kilobytes used by files:\n   \n   ls -l files | awk '{ x += $5 }\n      END { print \"total K-bytes:\", x / 1024 }'\n   \n\n * Print a sorted list of the login names of all users:\n   \n   awk -F: '{ print $1 }' /etc/passwd | sort\n   \n\n * Count the lines in a file:\n   \n   awk 'END { print NR }' data\n   \n\n * Print the even-numbered lines in the data file:\n   \n   awk 'NR % 2 == 0' data\n   \n   \n   If you used the expression \u2018NR % 2 == 1\u2019 instead, the program would print the odd-numbered lines.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: An Example with Two Rules [Two-Rules.html], Previous: Data files for the Examples [Sample-Data-Files.html], Up: Getting\nStarted with awk [Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "822f78a3-8008-48dc-9938-5bb8da8ce2b8", "embedding": null, "doc_hash": "80a47bfefc47cd63de9cddac89019eb0b5d514c4f4842f0f6681483550c93a6e", "extra_info": null, "node_info": {"start": 3314, "end": 6470, "_node_type": "1"}, "relationships": {"1": "7378ece4-4537-421e-8ea9-7ad438a974a5", "2": "feb2056d-66e3-4e9a-a001-09cb926c9e1a"}}, "__type__": "1"}, "c4bd1deb-aac7-4060-b610-7ad7d226c3d2": {"__data__": {"text": "Next: Working with the Stack [Execution-Stack.html], Previous: Control of Execution [Debugger-Execution-Control.html], Up: Main\nDebugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n14.3.3 VIEWING AND CHANGING DATA\n\nThe commands for viewing and changing variables inside of gawk are:\n\ndisplay [var | $n]\n\nAdd variable var (or field $n) to the display list. The value of the variable or field is displayed each time the program stops.\nEach variable added to the list is identified by a unique number:\n\ngawk> display x\n-| 10: x = 1\n\n\nThis displays the assigned item number, the variable name, and its current value. If the display variable refers to a function\nparameter, it is silently deleted from the list as soon as the execution reaches a context where no such variable of the given\nname exists. Without argument, display displays the current values of items on the list.\n\neval \"awk statements\"\n\nEvaluate awk statements in the context of the running program. You can do anything that an awk program would do: assign values to\nvariables, call functions, and so on.\n\n> NOTE: You cannot use eval to execute a statement containing any of the following: exit, getline, next, nextfile, or return.\n\neval param, \u2026 awk statements end\n\nThis form of eval is similar, but it allows you to define \u201clocal variables\u201d that exist in the context of the awk statements,\ninstead of using variables or function parameters defined by the program.\n\nprint var1[, var2 \u2026] p var1[, var2 \u2026]\n\nPrint the value of a gawk variable or field. Fields must be referenced by constants:\n\ngawk> print $3\n\n\nThis prints the third field in the input record (if the specified field does not exist, it prints \u2018Null field\u2019). A variable can be\nan array element, with the subscripts being constant string values. To print the contents of an array, prefix the name of the\narray with the \u2018@\u2019 symbol:\n\ngawk> print @a\n\n\nThis prints the indices and the corresponding values for all elements in the array a.\n\nprintf format [, arg \u2026]\n\nPrint formatted text. The format may include escape sequences, such as \u2018\\n\u2019 (see Escape Sequences [Escape-Sequences.html]). No\nnewline is printed unless one is specified.\n\nset var=value\n\nAssign a constant (number or string) value to an awk variable or field. String values must be enclosed between double quotes\n(\"\u2026\").\n\nYou can also set special awk variables, such as FS, NF, NR, and so on.\n\nwatch var | $n [\"expression\"] w var | $n [\"expression\"]\n\nAdd variable var (or field $n) to the watch list. The debugger then stops whenever the value of the variable or field changes.\nEach watched item is assigned a number that can be used to delete it from the watch list using the unwatch command.\n\nWith a watchpoint, you may also supply a condition. This is an awk expression (enclosed in double quotes) that the debugger\nevaluates whenever the watchpoint is reached. If the condition is true, then the debugger stops execution and prompts for a\ncommand. Otherwise, gawk continues executing the program.\n\nundisplay [n]\n\nRemove item number n (or all items, if no argument) from the automatic display list.\n\nunwatch [n]\n\nRemove item number n (or all items, if no argument) from the watch list.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Working with the Stack [Execution-Stack.html], Previous: Control of Execution [Debugger-Execution-Control.html], Up: Main\nDebugger Commands [List-of-Debugger-Commands.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "c4bd1deb-aac7-4060-b610-7ad7d226c3d2", "embedding": null, "doc_hash": "961f9217bb2add5e3735fb993b303a8a8fe489e23f5eb6ec48993aa96619885e", "extra_info": null, "node_info": {"start": 0, "end": 3731, "_node_type": "1"}, "relationships": {"1": "f3555700-a627-48a8-92a9-fe6338d5cc37"}}, "__type__": "1"}, "2830fbd0-7a9c-4238-8246-13376c46862a": {"__data__": {"text": "Next: Summary [Library-Functions-Summary.html], Previous: Reading the Group Database [Group-Functions.html], Up: A Library of awk\nFunctions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n10.7 TRAVERSING ARRAYS OF ARRAYS\n\nArrays of Arrays [Arrays-of-Arrays.html] described how gawk provides arrays of arrays. In particular, any element of an array may\nbe either a scalar or another array. The isarray() function (see Getting Type Information [Type-Functions.html]) lets you\ndistinguish an array from a scalar. The following function, walk_array(), recursively traverses an array, printing the element\nindices and values. You call it with the array and a string representing the name of the array:\n\nfunction walk_array(arr, name,      i)\n{\n    for (i in arr) {\n        if (isarray(arr[i]))\n            walk_array(arr[i], (name \"[\" i \"]\"))\n        else\n            printf(\"%s[%s] = %s\\n\", name, i, arr[i])\n    }\n}\n\n\nIt works by looping over each element of the array. If any given element is itself an array, the function calls itself\nrecursively, passing the subarray and a new string representing the current index. Otherwise, the function simply prints the\nelement\u2019s name, index, and value. Here is a main program to demonstrate:\n\nBEGIN {\n    a[1] = 1\n    a[2][1] = 21\n    a[2][2] = 22\n    a[3] = 3\n    a[4][1][1] = 411\n    a[4][2] = 42\n\n    walk_array(a, \"a\")\n}\n\n\nWhen run, the program produces the following output:\n\n$ gawk -f walk_array.awk\n-| a[1] = 1\n-| a[2][1] = 21\n-| a[2][2] = 22\n-| a[3] = 3\n-| a[4][1][1] = 411\n-| a[4][2] = 42\n\n\nThe function just presented simply prints the name and value of each scalar array element. However, it is easy to generalize it,\nby passing in the name of a function to call when walking an array. The modified function looks like this:\n\nfunction process_array(arr, name, process, do_arrays,   i, new_name)\n{\n    for (i in arr) {\n        new_name = (name \"[\" i \"]\")\n        if (isarray(arr[i])) {\n            if (do_arrays)\n                @process(new_name, arr[i])\n            process_array(arr[i], new_name, process, do_arrays)\n        } else\n            @process(new_name, arr[i])\n    }\n}\n\n\nThe arguments are as follows:\n\narr\n\nThe array.\n\nname\n\nThe name of the array (a string).\n\nprocess\n\nThe name of the function to call.\n\ndo_arrays\n\nIf this is true, the function can handle elements that are subarrays.\n\nIf subarrays are to be processed, that is done before walking them further.\n\nWhen run with the following scaffolding, the function produces the same results as does the earlier version of walk_array():\n\nBEGIN {\n    a[1] = 1\n    a[2][1] = 21\n    a[2][2] = 22\n    a[3] = 3\n    a[4][1][1]", "doc_id": "2830fbd0-7a9c-4238-8246-13376c46862a", "embedding": null, "doc_hash": "13c96fb164e93acf277f5ef449654a4b9027319a33cb728585c48a06e5927836", "extra_info": null, "node_info": {"start": 0, "end": 2803, "_node_type": "1"}, "relationships": {"1": "7df9d401-efd6-4633-8054-28ce4c214530", "3": "eba23fc0-0ce8-47f7-a2dd-666e2e3c1be9"}}, "__type__": "1"}, "eba23fc0-0ce8-47f7-a2dd-666e2e3c1be9": {"__data__": {"text": "  a[3] = 3\n    a[4][1][1] = 411\n    a[4][2] = 42\n\n    process_array(a, \"a\", \"do_print\", 0)\n}\n\nfunction do_print(name, element)\n{\n    printf \"%s = %s\\n\", name, element\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Library-Functions-Summary.html], Previous: Reading the Group Database [Group-Functions.html], Up: A Library of awk\nFunctions [Library-Functions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "eba23fc0-0ce8-47f7-a2dd-666e2e3c1be9", "embedding": null, "doc_hash": "a68b30794756cb5716bf341e2cc6426757e56cfed43fe5cde89e949ea64eceb2", "extra_info": null, "node_info": {"start": 2778, "end": 3304, "_node_type": "1"}, "relationships": {"1": "7df9d401-efd6-4633-8054-28ce4c214530", "2": "2830fbd0-7a9c-4238-8246-13376c46862a"}}, "__type__": "1"}, "d1e22760-d66a-4112-98c3-5436d4ffe31e": {"__data__": {"text": "Next: Summary [Intro-Summary.html], Previous: Other Features of awk [Other-Features.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n1.8 WHEN TO USE AWK\n\nNow that you\u2019ve seen some of what awk can do, you might wonder how awk could be useful for you. By using utility programs,\nadvanced patterns, field separators, arithmetic statements, and other selection criteria, you can produce much more complex\noutput. The awk language is very useful for producing reports from large amounts of raw data, such as summarizing information from\nthe output of other utility programs like ls. (See A More Complex Example [More-Complex.html].)\n\nPrograms written with awk are usually much smaller than they would be in other languages. This makes awk programs easy to compose\nand use. Often, awk programs can be quickly composed at your keyboard, used once, and thrown away. Because awk programs are\ninterpreted, you can avoid the (usually lengthy) compilation part of the typical edit-compile-test-debug cycle of software\ndevelopment.\n\nComplex programs have been written in awk, including a complete retargetable assembler for eight-bit microprocessors (see Glossary\n[Glossary.html], for more information), and a microcode assembler for a special-purpose Prolog computer. The original awk\u2019s\ncapabilities were strained by tasks of such complexity, but modern versions are more capable.\n\nIf you find yourself writing awk scripts of more than, say, a few hundred lines, you might consider using a different programming\nlanguage. The shell is good at string and pattern matching; in addition, it allows powerful use of the system utilities. Python\noffers a nice balance between high-level ease of programming and access to system facilities.10\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(10)\n\nOther popular scripting languages include Ruby and Perl.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Intro-Summary.html], Previous: Other Features of awk [Other-Features.html], Up: Getting Started with awk\n[Getting-Started.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "d1e22760-d66a-4112-98c3-5436d4ffe31e", "embedding": null, "doc_hash": "1e0b37f59cd45fe9da6c19f05026685dfb4f464deb4549eb0179a3ce385fb9e8", "extra_info": null, "node_info": {"start": 0, "end": 2468, "_node_type": "1"}, "relationships": {"1": "27da9991-9fab-4a52-af6b-e20f01adc03a"}}, "__type__": "1"}, "dae91af1-7e06-4107-b4ef-373aebc5f69b": {"__data__": {"text": "Next: The do-while Statement [Do-Statement.html], Previous: The if-else Statement [If-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n7.4.2 THE WHILE STATEMENT\n\nIn programming, a loop is a part of a program that can be executed two or more times in succession. The while statement is the\nsimplest looping statement in awk. It repeatedly executes a statement as long as a condition is true. For example:\n\nwhile (condition)\n  body\n\n\nbody is a statement called the body of the loop, and condition is an expression that controls how long the loop keeps running. The\nfirst thing the while statement does is test the condition. If the condition is true, it executes the statement body. After body\nhas been executed, condition is tested again, and if it is still true, body executes again. This process repeats until the\ncondition is no longer true. If the condition is initially false, the body of the loop never executes and awk continues with the\nstatement following the loop. This example prints the first three fields of each record, one per line:\n\nawk '\n{\n    i = 1\n    while (i <= 3) {\n        print $i\n        i++\n    }\n}' inventory-shipped\n\n\nThe body of this loop is a compound statement enclosed in braces, containing two statements. The loop works in the following\nmanner: first, the value of i is set to one. Then, the while statement tests whether i is less than or equal to three. This is\ntrue when i equals one, so the ith field is printed. Then the \u2018i++\u2019 increments the value of i and the loop repeats. The loop\nterminates when i reaches four.\n\nA newline is not required between the condition and the body; however, using one makes the program clearer unless the body is a\ncompound statement or else is very simple. The newline after the open brace that begins the compound statement is not required\neither, but the program is harder to read without it.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: The do-while Statement [Do-Statement.html], Previous: The if-else Statement [If-Statement.html], Up: Control Statements in\nActions [Statements.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "dae91af1-7e06-4107-b4ef-373aebc5f69b", "embedding": null, "doc_hash": "62c22e3f7e40fb251757cd788b5151337e27c3b00ba8a9cb2ba68c8b0124a5cb", "extra_info": null, "node_info": {"start": 0, "end": 2422, "_node_type": "1"}, "relationships": {"1": "a1945505-0017-48ce-9133-24b19a7d87bf"}}, "__type__": "1"}, "9b5aeef0-360c-4848-b18e-93f2e8afc5f7": {"__data__": {"text": "Next: Removing Duplicates from Unsorted Text [History-Sorting.html], Previous: Printing Mailing Labels [Labels-Program.html], Up:\nA Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.3.5 GENERATING WORD-USAGE COUNTS\n\nWhen working with large amounts of text, it can be interesting to know how often different words appear. For example, an author\nmay overuse certain words, in which case he or she might wish to find synonyms to substitute for words that appear too often. This\nsubsection develops a program for counting words and presenting the frequency information in a useful format.\n\nAt first glance, a program like this would seem to do the job:\n\n# wordfreq-first-try.awk --- print list of word frequencies\n\n{\n    for (i = 1; i <= NF; i++)\n        freq[$i]++\n}\n\n\n\nEND {\n    for (word in freq)\n        printf \"%s\\t%d\\n\", word, freq[word]\n}\n\n\nThe program relies on awk\u2019s default field-splitting mechanism to break each line up into \u201cwords\u201d and uses an associative array\nnamed freq, indexed by each word, to count the number of times the word occurs. In the END rule, it prints the counts.\n\nThis program has several problems that prevent it from being useful on real text files:\n\n * The awk language considers upper- and lowercase characters to be distinct. Therefore, \u201cbartender\u201d and \u201cBartender\u201d are not\n   treated as the same word. This is undesirable, because words are capitalized if they begin sentences in normal text, and a\n   frequency analyzer should not be sensitive to capitalization.\n * Words are detected using the awk convention that fields are separated just by whitespace. Other characters in the input (except\n   newlines) don\u2019t have any special meaning to awk. This means that punctuation characters count as part of words.\n * The output does not come out in any useful order. You\u2019re more likely to be interested in which words occur most frequently or\n   in having an alphabetized table of how frequently each word occurs.\n\nThe first problem can be solved by using tolower() to remove case distinctions. The second problem can be solved by using gsub()\nto remove punctuation characters. Finally, we solve the third problem by using the system sort utility to process the output of\nthe awk script. Here is the new version of the program:\n\n# wordfreq.awk --- print list of word frequencies\n\n{\n    $0 = tolower($0)    # remove case distinctions\n    # remove punctuation\n    gsub(/[^[:alnum:]_[:blank:]]/, \"\", $0)\n    for (i = 1; i <= NF; i++)\n        freq[$i]++\n}\n\nEND {\n    for (word in freq)\n        printf \"%s\\t%d\\n\", word, freq[word]\n}\n\n\nThe regexp /[^[:alnum:]_[:blank:]]/ might have been written /[[:punct:]]/, but then underscores would also be removed, and we want\nto keep them.\n\nAssuming we have saved this program in a file named wordfreq.awk, and that the data is in file1, the following pipeline:\n\nawk -f wordfreq.awk file1 | sort -k 2nr\n\n\nproduces a table of the words appearing in file1 in order of decreasing frequency.\n\nThe awk program suitably massages the data and produces a word frequency table, which is not ordered. The awk script\u2019s output is\nthen sorted by the sort utility and printed on the screen.\n\nThe options given to sort specify a sort that uses the second field of each input line (skipping one field), that the sort", "doc_id": "9b5aeef0-360c-4848-b18e-93f2e8afc5f7", "embedding": null, "doc_hash": "3b46788d3aeb16f0e3b1a139a493b1a4a295334990e70cede16a4ad7f26882d8", "extra_info": null, "node_info": {"start": 0, "end": 3463, "_node_type": "1"}, "relationships": {"1": "920dbf0c-f117-4977-a88e-00eec0734149", "3": "f27a3600-c9a8-4741-aaf3-dfa9b68edb9e"}}, "__type__": "1"}, "f27a3600-c9a8-4741-aaf3-dfa9b68edb9e": {"__data__": {"text": "a sort that uses the second field of each input line (skipping one field), that the sort keys\nshould be treated as numeric quantities (otherwise \u201815\u2019 would come before \u20185\u2019), and that the sorting should be done in descending\n(reverse) order.\n\nThe sort could even be done from within the program, by changing the END action to:\n\nEND {\n    sort = \"sort -k 2nr\"\n    for (word in freq)\n        printf \"%s\\t%d\\n\", word, freq[word] | sort\n    close(sort)\n}\n\n\nThis way of sorting must be used on systems that do not have true pipes at the command-line (or batch-file) level. See the general\noperating system documentation for more information on how to use the sort program.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Removing Duplicates from Unsorted Text [History-Sorting.html], Previous: Printing Mailing Labels [Labels-Program.html], Up:\nA Grab Bag of awk Programs [Miscellaneous-Programs.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "f27a3600-c9a8-4741-aaf3-dfa9b68edb9e", "embedding": null, "doc_hash": "536a63c49e7494be5a238a9f238b6313641219ad7104e0139c35e6118054849c", "extra_info": null, "node_info": {"start": 3375, "end": 4420, "_node_type": "1"}, "relationships": {"1": "920dbf0c-f117-4977-a88e-00eec0734149", "2": "9b5aeef0-360c-4848-b18e-93f2e8afc5f7"}}, "__type__": "1"}, "077278dd-08ad-438d-a8ea-48fcdaa534c9": {"__data__": {"text": "Next: Record Splitting with gawk [gawk-split-records.html], Up: How Input Is Split into Records [Records.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.1.1 RECORD SPLITTING WITH STANDARD AWK\n\nRecords are separated by a character called the record separator. By default, the record separator is the newline character. This\nis why records are, by default, single lines. To use a different character for the record separator, simply assign that character\nto the predefined variable RS.\n\nLike any other variable, the value of RS can be changed in the awk program with the assignment operator, \u2018=\u2019 (see Assignment\nExpressions [Assignment-Ops.html]). The new record-separator character should be enclosed in quotation marks, which indicate a\nstring constant. Often, the right time to do this is at the beginning of execution, before any input is processed, so that the\nvery first record is read with the proper separator. To do this, use the special BEGIN pattern (see The BEGIN and END Special\nPatterns [BEGIN_002fEND.html]). For example:\n\nawk 'BEGIN { RS = \"u\" }\n     { print $0 }' mail-list\n\n\nchanges the value of RS to \u2018u\u2019, before reading any input. The new value is a string whose first character is the letter \u201cu\u201d; as a\nresult, records are separated by the letter \u201cu\u201d. Then the input file is read, and the second rule in the awk program (the action\nwith no pattern) prints each record. Because each print statement adds a newline at the end of its output, this awk program copies\nthe input with each \u2018u\u2019 changed to a newline. Here are the results of running the program on mail-list:\n\n$ awk 'BEGIN { RS = \"u\" }\n>      { print $0 }' mail-list\n\n\n-| Amelia       555-5553     amelia.zodiac\n-| sq\n-| e@gmail.com    F\n-| Anthony      555-3412     anthony.assert\n-| ro@hotmail.com   A\n-| Becky        555-7685     becky.algebrar\n-| m@gmail.com      A\n-| Bill         555-1675     bill.drowning@hotmail.com       A\n-| Broderick    555-0542     broderick.aliq\n-| otiens@yahoo.com R\n-| Camilla      555-2912     camilla.inf\n-| sar\n-| m@skynet.be     R\n-| Fabi\n-| s       555-1234     fabi\n-| s.\n-| ndevicesim\n-| s@\n-| cb.ed\n-|     F\n-| J\n-| lie        555-6699     j\n-| lie.perscr\n-| tabor@skeeve.com   F\n-| Martin       555-6480     martin.codicib\n-| s@hotmail.com    A\n-| Sam\n-| el       555-3430     sam\n-| el.lanceolis@sh\n-| .ed\n-|         A\n-| Jean-Pa\n-| l    555-2127     jeanpa\n-| l.campanor\n-| m@ny\n-| .ed\n-|      R\n-|\n\n\nNote that the entry for the name \u2018Bill\u2019 is not split. In the original data file (see Data files for the Examples\n[Sample-Data-Files.html]), the line looks like this:\n\nBill         555-1675     bill.drowning@hotmail.com       A\n\n\nIt contains no \u2018u\u2019, so there is no reason to split the record, unlike the others, which each", "doc_id": "077278dd-08ad-438d-a8ea-48fcdaa534c9", "embedding": null, "doc_hash": "2bb08ca32eacfa3b58f7de0445c25506ce982790a873b6411e841f352b6ba582", "extra_info": null, "node_info": {"start": 0, "end": 2894, "_node_type": "1"}, "relationships": {"1": "28809ff8-de50-4bba-9cb5-fa048426548c", "3": "9fe921bc-1a97-4d3a-bb1a-bcd2db4ff7eb"}}, "__type__": "1"}, "9fe921bc-1a97-4d3a-bb1a-bcd2db4ff7eb": {"__data__": {"text": "so there is no reason to split the record, unlike the others, which each have one or more occurrences of the\n\u2018u\u2019. In fact, this record is treated as part of the previous record; the newline separating them in the output is the original\nnewline in the data file, not the one added by awk when it printed the record!\n\nAnother way to change the record separator is on the command line, using the variable-assignment feature (see Other Command-Line\nArguments [Other-Arguments.html]):\n\nawk '{ print $0 }' RS=\"u\" mail-list\n\n\nThis sets RS to \u2018u\u2019 before processing mail-list.\n\nUsing an alphabetic character such as \u2018u\u2019 for the record separator is highly likely to produce strange results. Using an unusual\ncharacter such as \u2018/\u2019 is more likely to produce correct behavior in the majority of cases, but there are no guarantees. The moral\nis: Know Your Data.\n\ngawk allows RS to be a full regular expression (discussed shortly; see Record Splitting with gawk [gawk-split-records.html]). Even\nso, using a regular expression metacharacter, such as \u2018.\u2019 as the single character in the value of RS has no special effect: it is\ntreated literally. This is required for backwards compatibility with both Unix awk and with POSIX.\n\nReaching the end of an input file terminates the current input record, even if the last character in the file is not the character\nin RS. (d.c.)\n\nThe empty string \"\" (a string without any characters) has a special meaning as the value of RS. It means that records are\nseparated by one or more blank lines and nothing else. See Multiple-Line Records [Multiple-Line.html] for more details.\n\nIf you change the value of RS in the middle of an awk run, the new value is used to delimit subsequent records, but the record\ncurrently being processed, as well as records already processed, are not affected.\n\nAfter the end of the record has been determined, gawk sets the variable RT to the text in the input that matched RS.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Record Splitting with gawk [gawk-split-records.html], Up: How Input Is Split into Records [Records.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "9fe921bc-1a97-4d3a-bb1a-bcd2db4ff7eb", "embedding": null, "doc_hash": "c5602d45777526e66d7ee970b0dc3421c8f36ca90d7a28f3574fed1e3b11d6b2", "extra_info": null, "node_info": {"start": 2822, "end": 5051, "_node_type": "1"}, "relationships": {"1": "28809ff8-de50-4bba-9cb5-fa048426548c", "2": "077278dd-08ad-438d-a8ea-48fcdaa534c9"}}, "__type__": "1"}, "56a6c4fd-6f8e-4255-b9c8-d6e191256bd1": {"__data__": {"text": "The node you are looking for is at Figure 8.1 [Array-Intro.html#figure_002darray_002delements].", "doc_id": "56a6c4fd-6f8e-4255-b9c8-d6e191256bd1", "embedding": null, "doc_hash": "f28ff9737392cc7f53f8bbcc23f3c0355f5ec1fb6a53de61abc588ec300c31b1", "extra_info": null, "node_info": {"start": 0, "end": 95, "_node_type": "1"}, "relationships": {"1": "2a506cf2-d292-4110-821c-285c3d79d639"}}, "__type__": "1"}, "582bb8fa-1940-43d1-b99a-6e835ea7fdf5": {"__data__": {"text": "The node you are looking for is at Figure 17.3 [Extension-Mechanism-Outline.html#figure_002dcall_002dnew_002dfunction].", "doc_id": "582bb8fa-1940-43d1-b99a-6e835ea7fdf5", "embedding": null, "doc_hash": "5b148d9ccb0473b289575ff7d2362fefbf52a2cc6ffe737aefe3030d91bbfdac", "extra_info": null, "node_info": {"start": 0, "end": 119, "_node_type": "1"}, "relationships": {"1": "0ed2e100-9d04-48c4-a012-17e692ad436a"}}, "__type__": "1"}, "82b63fe8-2f5b-4b94-9e87-1ecfdf2cef7c": {"__data__": {"text": "The node you are looking for is at Figure D.1 [Basic-High-Level.html#figure_002dgeneral_002dflow].", "doc_id": "82b63fe8-2f5b-4b94-9e87-1ecfdf2cef7c", "embedding": null, "doc_hash": "b1a38c54db096266b9d48fe058f6365eff6b8607dcbfe0e4f75c8755c4a5094f", "extra_info": null, "node_info": {"start": 0, "end": 98, "_node_type": "1"}, "relationships": {"1": "19eb6f9b-82ab-48ef-926f-391b4675346f"}}, "__type__": "1"}, "43ecdfac-f81d-49b4-bea4-21323c7f3f02": {"__data__": {"text": "The node you are looking for is at Figure 17.1 [Extension-Mechanism-Outline.html#figure_002dload_002dextension].", "doc_id": "43ecdfac-f81d-49b4-bea4-21323c7f3f02", "embedding": null, "doc_hash": "f25ce9813be184800884f751ec0a43904e4623dc743fb5744c69be5a38b79765", "extra_info": null, "node_info": {"start": 0, "end": 112, "_node_type": "1"}, "relationships": {"1": "d6f6f3de-085a-442d-915d-6c6000de634f"}}, "__type__": "1"}, "525320e1-d7e6-4fde-b68d-0fc751ade9e2": {"__data__": {"text": "The node you are looking for is at Figure D.2 [Basic-High-Level.html#figure_002dprocess_002dflow].", "doc_id": "525320e1-d7e6-4fde-b68d-0fc751ade9e2", "embedding": null, "doc_hash": "c43dcb48b1a977d4f020af142ee91b95e3cff0d8a0f472a662b7f83f43a1355b", "extra_info": null, "node_info": {"start": 0, "end": 98, "_node_type": "1"}, "relationships": {"1": "1359f785-6658-4190-8f1e-65c99970d2d0"}}, "__type__": "1"}, "62d9bcfa-8cf9-41a8-98f6-d0bd6ca28b34": {"__data__": {"text": "The node you are looking for is at Figure 17.2 [Extension-Mechanism-Outline.html#figure_002dregister_002dnew_002dfunction].", "doc_id": "62d9bcfa-8cf9-41a8-98f6-d0bd6ca28b34", "embedding": null, "doc_hash": "df09399187eced18659bead94c6fa1ab94af07acf8c8e4bb6414c7ac9f20b12f", "extra_info": null, "node_info": {"start": 0, "end": 123, "_node_type": "1"}, "relationships": {"1": "84f11eb6-7b86-4125-9b98-6254d8723728"}}, "__type__": "1"}, "cdf14507-1249-45d2-8773-f678853a79a7": {"__data__": {"text": "Previous: Record Splitting with Standard awk [awk-split-records.html], Up: How Input Is Split into Records [Records.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n4.1.2 RECORD SPLITTING WITH GAWK\n\nWhen using gawk, the value of RS is not limited to a one-character string. If it contains more than one character, it is treated\nas a regular expression (see Regular Expressions [Regexp.html]). (c.e.) In general, each record ends at the next string that\nmatches the regular expression; the next record starts at the end of the matching string. This general rule is actually at work in\nthe usual case, where RS contains just a newline: a record ends at the beginning of the next matching string (the next newline in\nthe input), and the following record starts just after the end of this string (at the first character of the following line). The\nnewline, because it matches RS, is not part of either record.\n\nWhen RS is a single character, RT contains the same single character. However, when RS is a regular expression, RT contains the\nactual input text that matched the regular expression.\n\nIf the input file ends without any text matching RS, gawk sets RT to the null string.\n\nThe following example illustrates both of these features. It sets RS equal to a regular expression that matches either a newline\nor a series of one or more uppercase letters with optional leading and/or trailing whitespace:\n\n$ echo record 1 AAAA record 2 BBBB record 3 |\n> gawk 'BEGIN { RS = \"\\n|( *[[:upper:]]+ *)\" }\n>             { print \"Record =\", $0,\"and RT = [\" RT \"]\" }'\n\n\n-| Record = record 1 and RT = [ AAAA ]\n-| Record = record 2 and RT = [ BBBB ]\n-| Record = record 3 and RT = [\n-| ]\n\n\nThe square brackets delineate the contents of RT, letting you see the leading and trailing whitespace. The final value of RT is a\nnewline. See A Simple Stream Editor [Simple-Sed.html] for a more useful example of RS as a regexp and RT.\n\nIf you set RS to a regular expression that allows optional trailing text, such as \u2018RS = \"abc(XYZ)?\"\u2019, it is possible, due to\nimplementation constraints, that gawk may match the leading part of the regular expression, but not the trailing part,\nparticularly if the input text that could match the trailing part is fairly long. gawk attempts to avoid this problem, but\ncurrently, there\u2019s no guarantee that this will never happen.\n\nCaveats When Using Regular Expressions for RS\n\nRemember that in awk, the \u2018^\u2019 and \u2018$\u2019 anchor metacharacters match the beginning and end of a string, and not the beginning and end\nof a line. As a result, something like \u2018RS = \"^[[:upper:]]\"\u2019 can only match at the beginning of a file. This is because gawk views\nthe input file as one long string that happens to contain newline characters. It is thus best to avoid anchor metacharacters in\nthe value of RS.\n\nRecord splitting with regular expressions works differently than regexp matching with the sub(), gsub(), and gensub() (see\nString-Manipulation Functions [String-Functions.html]). Those functions allow a regexp to match the empty string; record splitting\ndoes not. Thus, for example \u2018RS = \"()\"\u2019 does not split records between characters.\n\nThe use of RS as a regular expression and the RT variable are gawk extensions; they are not available in compatibility mode (see\nCommand-Line Options [Options.html]). In compatibility mode, only the first character of the value of RS determines the end of the\nrecord.\n\nmawk has allowed RS to be a regexp for decades. As of October, 2019, BWK awk also supports it. Neither version supplies RT,\nhowever.\n\nRS = \"\\0\" Is Not Portable\n\nThere are times when you might want to treat an entire data file as a single", "doc_id": "cdf14507-1249-45d2-8773-f678853a79a7", "embedding": null, "doc_hash": "252a49067d6e4e83fd2cd3307649deca5fa4d209b0b164497b56067cd9f3dd9b", "extra_info": null, "node_info": {"start": 0, "end": 3789, "_node_type": "1"}, "relationships": {"1": "414acc17-1d10-475c-848f-a10772677fff", "3": "6325b16d-d1ac-4b04-87e2-0cb986d6e1cb"}}, "__type__": "1"}, "6325b16d-d1ac-4b04-87e2-0cb986d6e1cb": {"__data__": {"text": "are times when you might want to treat an entire data file as a single record. The only way to make this happen is to give\nRS a value that you know doesn\u2019t occur in the input file. This is hard to do in a general way, such that a program always works\nfor arbitrary input files.\n\nYou might think that for text files, the NUL character, which consists of a character with all bits equal to zero, is a good value\nto use for RS in this case:\n\nBEGIN { RS = \"\\0\" }  # whole file becomes one record?\n\n\ngawk in fact accepts this, and uses the NUL character for the record separator. This works for certain special files, such as\n/proc/environ on GNU/Linux systems, where the NUL character is in fact the record separator. However, this usage is not portable\nto most other awk implementations.\n\nAlmost all other awk implementations20 store strings internally as C-style strings. C strings use the NUL character as the string\nterminator. In effect, this means that \u2018RS = \"\\0\"\u2019 is the same as \u2018RS = \"\"\u2019. (d.c.)\n\nIt happens that recent versions of mawk can use the NUL character as a record separator. However, this is a special case: mawk\ndoes not allow embedded NUL characters in strings. (This may change in a future version of mawk.)\n\nSee Reading a Whole File at Once [Readfile-Function.html] for an interesting way to read whole files. If you are using gawk, see\nReading an Entire File [Extension-Sample-Readfile.html] for another option.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nFOOTNOTES\n\n(20)\n\nAt least that we know about.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: Record Splitting with Standard awk [awk-split-records.html], Up: How Input Is Split into Records [Records.html] \u00a0\n[Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "6325b16d-d1ac-4b04-87e2-0cb986d6e1cb", "embedding": null, "doc_hash": "cd6446905f9ae0ba5fd1857f5be5f95b5437708d6ab0bcbc3ca97133310e5e8f", "extra_info": null, "node_info": {"start": 3719, "end": 5643, "_node_type": "1"}, "relationships": {"1": "414acc17-1d10-475c-848f-a10772677fff", "2": "cdf14507-1249-45d2-8773-f678853a79a7"}}, "__type__": "1"}, "5c8c0b2e-1f79-4a68-907b-53ce8ab84c0d": {"__data__": {"text": "The node you are looking for is at Table 17.3 [Extension-Versioning.html#gawk_002dapi_002dversion].", "doc_id": "5c8c0b2e-1f79-4a68-907b-53ce8ab84c0d", "embedding": null, "doc_hash": "9a00c82a7d9b45c9a5ab83f0062b051dc8f7f1a6d14eca63ad737a449507132c", "extra_info": null, "node_info": {"start": 0, "end": 99, "_node_type": "1"}, "relationships": {"1": "6d847e74-8787-43ad-ac99-1a40c37a848a"}}, "__type__": "1"}, "2aaa3463-40f8-452f-8877-62bccd82d224": {"__data__": {"text": "Next: Summary [Extension-summary.html], Previous: The Sample Extensions in the gawk Distribution [Extension-Samples.html], Up:\nWriting Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\n17.8 THE GAWKEXTLIB PROJECT\n\nThe gawkextlib [https://sourceforge.net/projects/gawkextlib/] project provides a number of gawk extensions, including one for\nprocessing XML files. This is the evolution of the original xgawk (XML gawk) project.\n\nThere are a number of extensions. Some of the more interesting ones are:\n\n * abort extension. It allows you to exit immediately from your awk program without running the END rules.\n * json extension. This serializes a multidimensional array into a JSON string, and can deserialize a JSON string into a gawk\n   array. This extension is interesting since it is written in C++ instead of C.\n * MPFR library extension. This provides access to a number of MPFR functions that gawk\u2019s native MPFR support does not.\n * Select extension. It provides functionality based on the select() system call.\n * XML parser extension, using the Expat [https://expat.sourceforge.net] XML parsing library\n\nYou can check out the code for the gawkextlib project using the Git [https://git-scm.com] distributed source code control system.\nThe command is as follows:\n\ngit clone git://git.code.sf.net/p/gawkextlib/code gawkextlib-code\n\n\nYou will need to have the RapidJson [http://www.rapidjson.org] JSON parser library installed in order to build and use the json\nextension.\n\nYou will need to have the Expat [https://expat.sourceforge.net] XML parser library installed in order to build and use the XML\nextension.\n\nIn addition, you must have the GNU Autotools installed (Autoconf [https://www.gnu.org/software/autoconf], Automake\n[https://www.gnu.org/software/automake], Libtool [https://www.gnu.org/software/libtool], and GNU gettext\n[https://www.gnu.org/software/gettext]).\n\nThe simple recipe for building and testing gawkextlib is as follows. First, build and install gawk:\n\ncd .../path/to/gawk/code\n./configure --prefix=/tmp/newgawk     Install in /tmp/newgawk for now\nmake && make check                    Build and check that all is OK\nmake install                          Install gawk\n\n\nNext, go to https://sourceforge.net/projects/gawkextlib/files [https://sourceforge.net/projects/gawkextlib/files] to download\ngawkextlib and any extensions that you would like to build. The README file at that site explains how to build the code. If you\ninstalled gawk in a non-standard location, you will need to specify \u2018./configure --with-gawk=/path/to/gawk\u2019 to find it. You may\nneed to use the sudo utility to install both gawk and gawkextlib, depending upon how your system works.\n\nIf you write an extension that you wish to share with other gawk users, consider doing so through the gawkextlib project. See the\nproject\u2019s website for more information.\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Summary [Extension-summary.html], Previous: The Sample Extensions in the gawk Distribution [Extension-Samples.html], Up:\nWriting Extensions for gawk [Dynamic-Extensions.html] \u00a0 [Contents [index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "2aaa3463-40f8-452f-8877-62bccd82d224", "embedding": null, "doc_hash": "c7523b7268c35f6b7e9b200dcd9eb1aaa10e181867789cf32ec09ddc32ad65ac", "extra_info": null, "node_info": {"start": 0, "end": 3414, "_node_type": "1"}, "relationships": {"1": "89eda177-32ab-4c5c-a7b0-6bd1b1bd58cf"}}, "__type__": "1"}, "5e97ae9c-ee1d-4106-afd7-294f3d2e9697": {"__data__": {"text": "Next: Foreword to the Third Edition [Foreword3.html], Up: (dir) [/manual] \u00a0 [Contents][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n\nGENERAL INTRODUCTION\n\nThis file documents awk, a program that you can use to select particular records in a file and perform operations upon them.\n\nCopyright \u00a9 1989, 1991, 1992, 1993, 1996\u20132005, 2007, 2009\u20132023\nFree Software Foundation, Inc.\n\n\n\nThis is Edition 5.2 of GAWK: Effective AWK Programming: A User\u2019s Guide for GNU Awk, for the 5.2.2 (or later) version of the GNU\nimplementation of AWK.\n\nPermission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License,\nVersion 1.3 or any later version published by the Free Software Foundation; with the Invariant Sections being \u201cGNU General Public\nLicense\u201d, with the Front-Cover Texts being \u201cA GNU Manual\u201d, and with the Back-Cover Texts as in (a) below. A copy of the license is\nincluded in the section entitled \u201cGNU Free Documentation License\u201d.\n\n a. The FSF\u2019s Back-Cover Text is: \u201cYou have the freedom to copy and modify this GNU manual.\u201d\n\n\nTABLE OF CONTENTS\n\n * * Foreword to the Third Edition [Foreword3.html]\n   * Foreword to the Fourth Edition [Foreword4.html]\n   * Preface [Preface.html]\n     * History of awk and gawk [History.html]\n     * A Rose by Any Other Name [Names.html]\n     * Using This Book [This-Manual.html]\n     * Typographical Conventions [Conventions.html]\n       * Dark Corners [Conventions.html#Dark-Corners]\n     * The GNU Project and This Book [Manual-History.html]\n     * How to Contribute [How-To-Contribute.html]\n     * Acknowledgments [Acknowledgments.html]\n * Part I:\n   The awk Language [Getting-Started.html#Part-I_003a-The-awk-Language]\n   * 1 Getting Started with awk [Getting-Started.html]\n     * 1.1 How to Run awk Programs [Running-gawk.html]\n       * 1.1.1 One-Shot Throwaway awk Programs [One_002dshot.html]\n       * 1.1.2 Running awk Without Input Files [Read-Terminal.html]\n       * 1.1.3 Running Long Programs [Long.html]\n       * 1.1.4 Executable awk Programs [Executable-Scripts.html]\n       * 1.1.5 Comments in awk Programs [Comments.html]\n       * 1.1.6 Shell Quoting Issues [Quoting.html]\n         * 1.1.6.1 Quoting in MS-Windows Batch Files [DOS-Quoting.html]\n     * 1.2 Data files for the Examples [Sample-Data-Files.html]\n     * 1.3 Some Simple Examples [Very-Simple.html]\n     * 1.4 An Example with Two Rules [Two-Rules.html]\n     * 1.5 A More Complex Example [More-Complex.html]\n     * 1.6 awk Statements Versus Lines [Statements_002fLines.html]\n     * 1.7 Other Features of awk [Other-Features.html]\n     * 1.8 When to Use awk [When.html]\n     * 1.9 Summary [Intro-Summary.html]\n   * 2 Running awk and gawk [Invoking-Gawk.html]\n     * 2.1 Invoking awk [Command-Line.html]\n     * 2.2 Command-Line Options [Options.html]\n     * 2.3 Other Command-Line Arguments", "doc_id": "5e97ae9c-ee1d-4106-afd7-294f3d2e9697", "embedding": null, "doc_hash": "b2eb6c814282726917c7d412f57953708fb2893240c646b8b88e5fdec16f2727", "extra_info": null, "node_info": {"start": 0, "end": 2957, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "3": "25eb9485-ac39-48f3-a410-7830284fbb06"}}, "__type__": "1"}, "25eb9485-ac39-48f3-a410-7830284fbb06": {"__data__": {"text": "[Options.html]\n     * 2.3 Other Command-Line Arguments [Other-Arguments.html]\n     * 2.4 Naming Standard Input [Naming-Standard-Input.html]\n     * 2.5 The Environment Variables gawk Uses [Environment-Variables.html]\n       * 2.5.1 The AWKPATH Environment Variable [AWKPATH-Variable.html]\n       * 2.5.2 The AWKLIBPATH Environment Variable [AWKLIBPATH-Variable.html]\n       * 2.5.3 Other Environment Variables [Other-Environment-Variables.html]\n     * 2.6 gawk\u2019s Exit Status [Exit-Status.html]\n     * 2.7 Including Other Files into Your Program [Include-Files.html]\n     * 2.8 Loading Dynamic Extensions into Your Program [Loading-Shared-Libraries.html]\n     * 2.9 Obsolete Options and/or Features [Obsolete.html]\n     * 2.10 Undocumented Options and Features [Undocumented.html]\n     * 2.11 Summary [Invoking-Summary.html]\n   * 3 Regular Expressions [Regexp.html]\n     * 3.1 How to Use Regular Expressions [Regexp-Usage.html]\n     * 3.2 Escape Sequences [Escape-Sequences.html]\n     * 3.3 Regular Expression Operators [Regexp-Operators.html]\n       * 3.3.1 Regexp Operators in awk [Regexp-Operator-Details.html]\n       * 3.3.2 Some Notes On Interval Expressions [Interval-Expressions.html]\n     * 3.4 Using Bracket Expressions [Bracket-Expressions.html]\n     * 3.5 How Much Text Matches? [Leftmost-Longest.html]\n     * 3.6 Using Dynamic Regexps [Computed-Regexps.html]\n     * 3.7 gawk-Specific Regexp Operators [GNU-Regexp-Operators.html]\n     * 3.8 Case Sensitivity in Matching [Case_002dsensitivity.html]\n     * 3.9 Summary [Regexp-Summary.html]\n   * 4 Reading Input Files [Reading-Files.html]\n     * 4.1 How Input Is Split into Records [Records.html]\n       * 4.1.1 Record Splitting with Standard awk [awk-split-records.html]\n       * 4.1.2 Record Splitting with gawk [gawk-split-records.html]\n     * 4.2 Examining Fields [Fields.html]\n     * 4.3 Nonconstant Field Numbers [Nonconstant-Fields.html]\n     * 4.4 Changing the Contents of a Field [Changing-Fields.html]\n     * 4.5 Specifying How Fields Are Separated [Field-Separators.html]\n       * 4.5.1 Whitespace Normally Separates Fields [Default-Field-Splitting.html]\n       * 4.5.2 Using Regular Expressions to Separate Fields [Regexp-Field-Splitting.html]\n       * 4.5.3 Making Each Character a Separate Field [Single-Character-Fields.html]\n       * 4.5.4 Setting FS from the Command Line [Command-Line-Field-Separator.html]\n       * 4.5.5 Making the Full Line Be a Single Field [Full-Line-Fields.html]\n       * 4.5.6 Field-Splitting Summary [Field-Splitting-Summary.html]\n     * 4.6 Reading Fixed-Width Data [Constant-Size.html]\n       * 4.6.1 Processing Fixed-Width Data [Fixed-width-data.html]\n       *", "doc_id": "25eb9485-ac39-48f3-a410-7830284fbb06", "embedding": null, "doc_hash": "c000c08d5f6cf6c457bcaafe5f4214e575c502821bd1eaf645065b16c7d925af", "extra_info": null, "node_info": {"start": 2913, "end": 5575, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "5e97ae9c-ee1d-4106-afd7-294f3d2e9697", "3": "08df6085-6d6d-40f7-bb26-522b4eaeafd7"}}, "__type__": "1"}, "08df6085-6d6d-40f7-bb26-522b4eaeafd7": {"__data__": {"text": "Data [Fixed-width-data.html]\n       * 4.6.2 Skipping Intervening Fields [Skipping-intervening.html]\n       * 4.6.3 Capturing Optional Trailing Data [Allowing-trailing-data.html]\n       * 4.6.4 Field Values With Fixed-Width Data [Fields-with-fixed-data.html]\n     * 4.7 Defining Fields by Content [Splitting-By-Content.html]\n       * 4.7.1 More on CSV Files [More-CSV.html]\n       * 4.7.2 FS Versus FPAT: A Subtle Difference [FS-versus-FPAT.html]\n     * 4.8 Checking How gawk Is Splitting Records [Testing-field-creation.html]\n     * 4.9 Multiple-Line Records [Multiple-Line.html]\n     * 4.10 Explicit Input with getline [Getline.html]\n       * 4.10.1 Using getline with No Arguments [Plain-Getline.html]\n       * 4.10.2 Using getline into a Variable [Getline_002fVariable.html]\n       * 4.10.3 Using getline from a File [Getline_002fFile.html]\n       * 4.10.4 Using getline into a Variable from a File [Getline_002fVariable_002fFile.html]\n       * 4.10.5 Using getline from a Pipe [Getline_002fPipe.html]\n       * 4.10.6 Using getline into a Variable from a Pipe [Getline_002fVariable_002fPipe.html]\n       * 4.10.7 Using getline from a Coprocess [Getline_002fCoprocess.html]\n       * 4.10.8 Using getline into a Variable from a Coprocess [Getline_002fVariable_002fCoprocess.html]\n       * 4.10.9 Points to Remember About getline [Getline-Notes.html]\n       * 4.10.10 Summary of getline Variants [Getline-Summary.html]\n     * 4.11 Reading Input with a Timeout [Read-Timeout.html]\n     * 4.12 Retrying Reads After Certain Input Errors [Retrying-Input.html]\n     * 4.13 Directories on the Command Line [Command_002dline-directories.html]\n     * 4.14 Summary [Input-Summary.html]\n     * 4.15 Exercises [Input-Exercises.html]\n   * 5 Printing Output [Printing.html]\n     * 5.1 The print Statement [Print.html]\n     * 5.2 print Statement Examples [Print-Examples.html]\n     * 5.3 Output Separators [Output-Separators.html]\n     * 5.4 Controlling Numeric Output with print [OFMT.html]\n     * 5.5 Using printf Statements for Fancier Printing [Printf.html]\n       * 5.5.1 Introduction to the printf Statement [Basic-Printf.html]\n       * 5.5.2 Format-Control Letters [Control-Letters.html]\n       * 5.5.3 Modifiers for printf Formats [Format-Modifiers.html]\n       * 5.5.4 Examples Using printf [Printf-Examples.html]\n     * 5.6 Redirecting Output of print and printf [Redirection.html]\n     * 5.7 Special Files for Standard Preopened Data Streams [Special-FD.html]\n     * 5.8 Special File names in gawk [Special-Files.html]\n       * 5.8.1 Accessing Other Open Files with gawk [Other-Inherited-Files.html]\n       *", "doc_id": "08df6085-6d6d-40f7-bb26-522b4eaeafd7", "embedding": null, "doc_hash": "56f21d4cf6e28e26eb3d3619e214c6fa28b38dc3394ecec263a4611ddd9c0a6d", "extra_info": null, "node_info": {"start": 5592, "end": 8197, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "25eb9485-ac39-48f3-a410-7830284fbb06", "3": "a7397399-bf55-4aaf-9d74-8452489fe155"}}, "__type__": "1"}, "a7397399-bf55-4aaf-9d74-8452489fe155": {"__data__": {"text": "[Other-Inherited-Files.html]\n       * 5.8.2 Special Files for Network Communications [Special-Network.html]\n       * 5.8.3 Special File name Caveats [Special-Caveats.html]\n     * 5.9 Closing Input and Output Redirections [Close-Files-And-Pipes.html]\n       * 5.9.1 Using close()\u2019s Return Value [Close-Return-Value.html]\n     * 5.10 Enabling Nonfatal Output [Nonfatal.html]\n     * 5.11 Summary [Output-Summary.html]\n     * 5.12 Exercises [Output-Exercises.html]\n   * 6 Expressions [Expressions.html]\n     * 6.1 Constants, Variables, and Conversions [Values.html]\n       * 6.1.1 Constant Expressions [Constants.html]\n         * 6.1.1.1 Numeric and String Constants [Scalar-Constants.html]\n         * 6.1.1.2 Octal and Hexadecimal Numbers [Nondecimal_002dnumbers.html]\n         * 6.1.1.3 Regular Expression Constants [Regexp-Constants.html]\n       * 6.1.2 Using Regular Expression Constants [Using-Constant-Regexps.html]\n         * 6.1.2.1 Standard Regular Expression Constants [Standard-Regexp-Constants.html]\n         * 6.1.2.2 Strongly Typed Regexp Constants [Strong-Regexp-Constants.html]\n       * 6.1.3 Variables [Variables.html]\n         * 6.1.3.1 Using Variables in a Program [Using-Variables.html]\n         * 6.1.3.2 Assigning Variables on the Command Line [Assignment-Options.html]\n       * 6.1.4 Conversion of Strings and Numbers [Conversion.html]\n         * 6.1.4.1 How awk Converts Between Strings and Numbers [Strings-And-Numbers.html]\n         * 6.1.4.2 Locales Can Influence Conversion [Locale-influences-conversions.html]\n     * 6.2 Operators: Doing Something with Values [All-Operators.html]\n       * 6.2.1 Arithmetic Operators [Arithmetic-Ops.html]\n       * 6.2.2 String Concatenation [Concatenation.html]\n       * 6.2.3 Assignment Expressions [Assignment-Ops.html]\n       * 6.2.4 Increment and Decrement Operators [Increment-Ops.html]\n     * 6.3 Truth Values and Conditions [Truth-Values-and-Conditions.html]\n       * 6.3.1 True and False in awk [Truth-Values.html]\n       * 6.3.2 Variable Typing and Comparison Expressions [Typing-and-Comparison.html]\n         * 6.3.2.1 String Type versus Numeric Type [Variable-Typing.html]\n         * 6.3.2.2 Comparison Operators [Comparison-Operators.html]\n         * 6.3.2.3 String Comparison Based on Locale Collating Order [POSIX-String-Comparison.html]\n       * 6.3.3 Boolean Expressions [Boolean-Ops.html]\n       * 6.3.4 Conditional Expressions [Conditional-Exp.html]\n     * 6.4 Function Calls [Function-Calls.html]\n     *", "doc_id": "a7397399-bf55-4aaf-9d74-8452489fe155", "embedding": null, "doc_hash": "42b1fe42c0ca94416bb243a580472e3e42de3220dc0d5eb87a6dde0263f5fc43", "extra_info": null, "node_info": {"start": 8197, "end": 10678, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "08df6085-6d6d-40f7-bb26-522b4eaeafd7", "3": "b8483197-c75d-4853-95f8-0fe8cdfe9063"}}, "__type__": "1"}, "b8483197-c75d-4853-95f8-0fe8cdfe9063": {"__data__": {"text": "6.4 Function Calls [Function-Calls.html]\n     * 6.5 Operator Precedence (How Operators Nest) [Precedence.html]\n     * 6.6 Where You Are Makes a Difference [Locales.html]\n     * 6.7 Summary [Expressions-Summary.html]\n   * 7 Patterns, Actions, and Variables [Patterns-and-Actions.html]\n     * 7.1 Pattern Elements [Pattern-Overview.html]\n       * 7.1.1 Regular Expressions as Patterns [Regexp-Patterns.html]\n       * 7.1.2 Expressions as Patterns [Expression-Patterns.html]\n       * 7.1.3 Specifying Record Ranges with Patterns [Ranges.html]\n       * 7.1.4 The BEGIN and END Special Patterns [BEGIN_002fEND.html]\n         * 7.1.4.1 Startup and Cleanup Actions [Using-BEGIN_002fEND.html]\n         * 7.1.4.2 Input/Output from BEGIN and END Rules [I_002fO-And-BEGIN_002fEND.html]\n       * 7.1.5 The BEGINFILE and ENDFILE Special Patterns [BEGINFILE_002fENDFILE.html]\n       * 7.1.6 The Empty Pattern [Empty.html]\n     * 7.2 Using Shell Variables in Programs [Using-Shell-Variables.html]\n     * 7.3 Actions [Action-Overview.html]\n     * 7.4 Control Statements in Actions [Statements.html]\n       * 7.4.1 The if-else Statement [If-Statement.html]\n       * 7.4.2 The while Statement [While-Statement.html]\n       * 7.4.3 The do-while Statement [Do-Statement.html]\n       * 7.4.4 The for Statement [For-Statement.html]\n       * 7.4.5 The switch Statement [Switch-Statement.html]\n       * 7.4.6 The break Statement [Break-Statement.html]\n       * 7.4.7 The continue Statement [Continue-Statement.html]\n       * 7.4.8 The next Statement [Next-Statement.html]\n       * 7.4.9 The nextfile Statement [Nextfile-Statement.html]\n       * 7.4.10 The exit Statement [Exit-Statement.html]\n     * 7.5 Predefined Variables [Built_002din-Variables.html]\n       * 7.5.1 Built-in Variables That Control awk [User_002dmodified.html]\n       * 7.5.2 Built-in Variables That Convey Information [Auto_002dset.html]\n       * 7.5.3 Using ARGC and ARGV [ARGC-and-ARGV.html]\n     * 7.6 Summary [Pattern-Action-Summary.html]\n   * 8 Arrays in awk [Arrays.html]\n     * 8.1 The Basics of Arrays [Array-Basics.html]\n       * 8.1.1 Introduction to Arrays [Array-Intro.html]\n       * 8.1.2 Referring to an Array Element [Reference-to-Elements.html]\n       * 8.1.3 Assigning Array Elements [Assigning-Elements.html]\n       * 8.1.4 Basic Array Example [Array-Example.html]\n       * 8.1.5 Scanning All Elements of an Array [Scanning-an-Array.html]\n       * 8.1.6 Using Predefined Array Scanning Orders with gawk [Controlling-Scanning.html]\n   ", "doc_id": "b8483197-c75d-4853-95f8-0fe8cdfe9063", "embedding": null, "doc_hash": "9e5a383fed9529732254352ff6163740e9c9e0a933de05b88418dcd21a17b755", "extra_info": null, "node_info": {"start": 10670, "end": 13169, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "a7397399-bf55-4aaf-9d74-8452489fe155", "3": "c874dded-3f2b-4b55-a4b9-37cc14a551e5"}}, "__type__": "1"}, "c874dded-3f2b-4b55-a4b9-37cc14a551e5": {"__data__": {"text": "Scanning Orders with gawk [Controlling-Scanning.html]\n     * 8.2 Using Numbers to Subscript Arrays [Numeric-Array-Subscripts.html]\n     * 8.3 Using Uninitialized Variables as Subscripts [Uninitialized-Subscripts.html]\n     * 8.4 The delete Statement [Delete.html]\n     * 8.5 Multidimensional Arrays [Multidimensional.html]\n       * 8.5.1 Scanning Multidimensional Arrays [Multiscanning.html]\n     * 8.6 Arrays of Arrays [Arrays-of-Arrays.html]\n     * 8.7 Summary [Arrays-Summary.html]\n   * 9 Functions [Functions.html]\n     * 9.1 Built-in Functions [Built_002din.html]\n       * 9.1.1 Calling Built-in Functions [Calling-Built_002din.html]\n       * 9.1.2 Generating Boolean Values [Boolean-Functions.html]\n       * 9.1.3 Numeric Functions [Numeric-Functions.html]\n       * 9.1.4 String-Manipulation Functions [String-Functions.html]\n         * 9.1.4.1 More about \u2018\\\u2019 and \u2018&\u2019 with sub(), gsub(), and gensub() [Gory-Details.html]\n       * 9.1.5 Input/Output Functions [I_002fO-Functions.html]\n       * 9.1.6 Time Functions [Time-Functions.html]\n       * 9.1.7 Bit-Manipulation Functions [Bitwise-Functions.html]\n       * 9.1.8 Getting Type Information [Type-Functions.html]\n       * 9.1.9 String-Translation Functions [I18N-Functions.html]\n     * 9.2 User-Defined Functions [User_002ddefined.html]\n       * 9.2.1 Function Definition Syntax [Definition-Syntax.html]\n       * 9.2.2 Function Definition Examples [Function-Example.html]\n       * 9.2.3 Calling User-Defined Functions [Function-Calling.html]\n         * 9.2.3.1 Writing a Function Call [Calling-A-Function.html]\n         * 9.2.3.2 Controlling Variable Scope [Variable-Scope.html]\n         * 9.2.3.3 Passing Function Arguments by Value Or by Reference [Pass-By-Value_002fReference.html]\n         * 9.2.3.4 Other Points About Calling Functions [Function-Caveats.html]\n       * 9.2.4 The return Statement [Return-Statement.html]\n       * 9.2.5 Functions and Their Effects on Variable Typing [Dynamic-Typing.html]\n     * 9.3 Indirect Function Calls [Indirect-Calls.html]\n     * 9.4 Summary [Functions-Summary.html]\n * Part II:\n   Problem Solving with awk [Library-Functions.html#Part-II_003a-Problem-Solving-with-awk]\n   * 10 A Library of awk Functions [Library-Functions.html]\n     * 10.1 Naming Library Function Global Variables [Library-Names.html]\n     * 10.2 General Programming [General-Functions.html]\n       * 10.2.1 Converting Strings to Numbers [Strtonum-Function.html]\n       * 10.2.2 Assertions [Assert-Function.html]\n       * 10.2.3 Rounding Numbers [Round-Function.html]\n       * 10.2.4 The Cliff Random Number Generator", "doc_id": "c874dded-3f2b-4b55-a4b9-37cc14a551e5", "embedding": null, "doc_hash": "834dc3b52aebe85a2680dcee2f0acedd29d8c422c7f14ff75bc668e9198c1c93", "extra_info": null, "node_info": {"start": 13159, "end": 15746, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "b8483197-c75d-4853-95f8-0fe8cdfe9063", "3": "3fe5ddd7-a586-4a42-a82f-85f279b70bd1"}}, "__type__": "1"}, "3fe5ddd7-a586-4a42-a82f-85f279b70bd1": {"__data__": {"text": "      * 10.2.4 The Cliff Random Number Generator [Cliff-Random-Function.html]\n       * 10.2.5 Translating Between Characters and Numbers [Ordinal-Functions.html]\n       * 10.2.6 Merging an Array into a String [Join-Function.html]\n       * 10.2.7 Managing the Time of Day [Getlocaltime-Function.html]\n       * 10.2.8 Reading a Whole File at Once [Readfile-Function.html]\n       * 10.2.9 Quoting Strings to Pass to the Shell [Shell-Quoting.html]\n       * 10.2.10 Checking Whether A Value Is Numeric [Isnumeric-Function.html]\n     * 10.3 Data file Management [Data-File-Management.html]\n       * 10.3.1 Noting Data file Boundaries [Filetrans-Function.html]\n       * 10.3.2 Rereading the Current File [Rewind-Function.html]\n       * 10.3.3 Checking for Readable Data files [File-Checking.html]\n       * 10.3.4 Checking for Zero-Length Files [Empty-Files.html]\n       * 10.3.5 Treating Assignments as File names [Ignoring-Assigns.html]\n     * 10.4 Processing Command-Line Options [Getopt-Function.html]\n     * 10.5 Reading the User Database [Passwd-Functions.html]\n     * 10.6 Reading the Group Database [Group-Functions.html]\n     * 10.7 Traversing Arrays of Arrays [Walking-Arrays.html]\n     * 10.8 Summary [Library-Functions-Summary.html]\n     * 10.9 Exercises [Library-Exercises.html]\n   * 11 Practical awk Programs [Sample-Programs.html]\n     * 11.1 Running the Example Programs [Running-Examples.html]\n     * 11.2 Reinventing Wheels for Fun and Profit [Clones.html]\n       * 11.2.1 Cutting Out Fields and Columns [Cut-Program.html]\n       * 11.2.2 Searching for Regular Expressions in Files [Egrep-Program.html]\n       * 11.2.3 Printing Out User Information [Id-Program.html]\n       * 11.2.4 Splitting a Large File into Pieces [Split-Program.html]\n       * 11.2.5 Duplicating Output into Multiple Files [Tee-Program.html]\n       * 11.2.6 Printing Nonduplicated Lines of Text [Uniq-Program.html]\n       * 11.2.7 Counting Things [Wc-Program.html]\n         * 11.2.7.1 Modern Character Sets [Bytes-vs_002e-Characters.html]\n         * 11.2.7.2 A Brief Introduction To Extensions [Using-extensions.html]\n         * 11.2.7.3 Code for wc.awk [wc-program.html]\n     * 11.3 A Grab Bag of awk Programs [Miscellaneous-Programs.html]\n       * 11.3.1 Finding Duplicated Words in a Document [Dupword-Program.html]\n       * 11.3.2 An Alarm Clock Program [Alarm-Program.html]\n       * 11.3.3 Transliterating Characters [Translate-Program.html]\n       * 11.3.4 Printing Mailing Labels [Labels-Program.html]\n       * 11.3.5 Generating Word-Usage Counts [Word-Sorting.html]\n       *", "doc_id": "3fe5ddd7-a586-4a42-a82f-85f279b70bd1", "embedding": null, "doc_hash": "5330185bd1feea5965acb3b9bda7ee0e67d010fe4d8ee9354a271d481cfe3e56", "extra_info": null, "node_info": {"start": 15761, "end": 18324, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "c874dded-3f2b-4b55-a4b9-37cc14a551e5", "3": "612e60ab-3c7d-4ab9-a982-da94e07a2b45"}}, "__type__": "1"}, "612e60ab-3c7d-4ab9-a982-da94e07a2b45": {"__data__": {"text": "Counts [Word-Sorting.html]\n       * 11.3.6 Removing Duplicates from Unsorted Text [History-Sorting.html]\n       * 11.3.7 Extracting Programs from Texinfo Source Files [Extract-Program.html]\n       * 11.3.8 A Simple Stream Editor [Simple-Sed.html]\n       * 11.3.9 An Easy Way to Use Library Functions [Igawk-Program.html]\n       * 11.3.10 Finding Anagrams from a Dictionary [Anagram-Program.html]\n       * 11.3.11 And Now for Something Completely Different [Signature-Program.html]\n     * 11.4 Summary [Programs-Summary.html]\n     * 11.5 Exercises [Programs-Exercises.html]\n * Part III:\n   Moving Beyond Standard awk with gawk [Advanced-Features.html#Part-III_003a-Moving-Beyond-Standard-awk-with-gawk]\n   * 12 Advanced Features of gawk [Advanced-Features.html]\n     * 12.1 Allowing Nondecimal Input Data [Nondecimal-Data.html]\n     * 12.2 Boolean Typed Values [Boolean-Typed-Values.html]\n     * 12.3 Controlling Array Traversal and Array Sorting [Array-Sorting.html]\n       * 12.3.1 Controlling Array Traversal [Controlling-Array-Traversal.html]\n       * 12.3.2 Sorting Array Values and Indices with gawk [Array-Sorting-Functions.html]\n     * 12.4 Two-Way Communications with Another Process [Two_002dway-I_002fO.html]\n     * 12.5 Using gawk for Network Programming [TCP_002fIP-Networking.html]\n     * 12.6 Profiling Your awk Programs [Profiling.html]\n     * 12.7 Preserving Data Between Runs [Persistent-Memory.html]\n     * 12.8 Builtin Features versus Extensions [Extension-Philosophy.html]\n     * 12.9 Summary [Advanced-Features-Summary.html]\n   * 13 Internationalization with gawk [Internationalization.html]\n     * 13.1 Internationalization and Localization [I18N-and-L10N.html]\n     * 13.2 GNU gettext [Explaining-gettext.html]\n     * 13.3 Internationalizing awk Programs [Programmer-i18n.html]\n     * 13.4 Translating awk Programs [Translator-i18n.html]\n       * 13.4.1 Extracting Marked Strings [String-Extraction.html]\n       * 13.4.2 Rearranging printf Arguments [Printf-Ordering.html]\n       * 13.4.3 awk Portability Issues [I18N-Portability.html]\n     * 13.5 A Simple Internationalization Example [I18N-Example.html]\n     * 13.6 gawk Can Speak Your Language [Gawk-I18N.html]\n     * 13.7 Summary [I18N-Summary.html]\n   * 14 Debugging awk Programs [Debugger.html]\n     * 14.1 Introduction to the gawk Debugger [Debugging.html]\n       * 14.1.1 Debugging in General [Debugging-Concepts.html]\n       * 14.1.2 Debugging Concepts [Debugging-Terms.html]\n       * 14.1.3 awk Debugging [Awk-Debugging.html]\n     * 14.2 Sample gawk Debugging Session [Sample-Debugging-Session.html]\n       * 14.2.1 How to Start the Debugger [Debugger-Invocation.html]\n       *", "doc_id": "612e60ab-3c7d-4ab9-a982-da94e07a2b45", "embedding": null, "doc_hash": "0b6cc9a6cce6773969c08a37000203d118cde9d736264e72f0094a2525bc672b", "extra_info": null, "node_info": {"start": 18334, "end": 20994, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "3fe5ddd7-a586-4a42-a82f-85f279b70bd1", "3": "ab205c86-1bd2-451a-b641-af77c82070c6"}}, "__type__": "1"}, "ab205c86-1bd2-451a-b641-af77c82070c6": {"__data__": {"text": "the Debugger [Debugger-Invocation.html]\n       * 14.2.2 Finding the Bug [Finding-The-Bug.html]\n     * 14.3 Main Debugger Commands [List-of-Debugger-Commands.html]\n       * 14.3.1 Control of Breakpoints [Breakpoint-Control.html]\n       * 14.3.2 Control of Execution [Debugger-Execution-Control.html]\n       * 14.3.3 Viewing and Changing Data [Viewing-And-Changing-Data.html]\n       * 14.3.4 Working with the Stack [Execution-Stack.html]\n       * 14.3.5 Obtaining Information About the Program and the Debugger State [Debugger-Info.html]\n       * 14.3.6 Miscellaneous Commands [Miscellaneous-Debugger-Commands.html]\n     * 14.4 Readline Support [Readline-Support.html]\n     * 14.5 Limitations [Limitations.html]\n     * 14.6 Summary [Debugging-Summary.html]\n   * 15 Namespaces in gawk [Namespaces.html]\n     * 15.1 Standard awk\u2019s Single Namespace [Global-Namespace.html]\n     * 15.2 Qualified Names [Qualified-Names.html]\n     * 15.3 The Default Namespace [Default-Namespace.html]\n     * 15.4 Changing The Namespace [Changing-The-Namespace.html]\n     * 15.5 Namespace and Component Naming Rules [Naming-Rules.html]\n     * 15.6 Internal Name Management [Internal-Name-Management.html]\n     * 15.7 Namespace Example [Namespace-Example.html]\n     * 15.8 Namespaces and Other gawk Features [Namespace-And-Features.html]\n     * 15.9 Summary [Namespace-Summary.html]\n   * 16 Arithmetic and Arbitrary-Precision Arithmetic with gawk [Arbitrary-Precision-Arithmetic.html]\n     * 16.1 A General Description of Computer Arithmetic [Computer-Arithmetic.html]\n     * 16.2 Other Stuff to Know [Math-Definitions.html]\n     * 16.3 Arbitrary-Precision Arithmetic Features in gawk [MPFR-features.html]\n       * 16.3.1 Arbitrary Precision Arithmetic is On Parole! [MPFR-On-Parole.html]\n       * 16.3.2 Arbitrary Precision Introduction [MPFR-Intro.html]\n     * 16.4 Floating-Point Arithmetic: Caveat Emptor! [FP-Math-Caution.html]\n       * 16.4.1 Floating-Point Arithmetic Is Not Exact [Inexactness-of-computations.html]\n         * 16.4.1.1 Many Numbers Cannot Be Represented Exactly [Inexact-representation.html]\n         * 16.4.1.2 Be Careful Comparing Values [Comparing-FP-Values.html]\n         * 16.4.1.3 Errors Accumulate [Errors-accumulate.html]\n         * 16.4.1.4 Floating Point Values They Didn\u2019t Talk About In School [Strange-values.html]\n       * 16.4.2 Getting the Accuracy You Need [Getting-Accuracy.html]\n       * 16.4.3 Try a Few Extra Bits of Precision and Rounding [Try-To-Round.html]\n       * 16.4.4 Setting the Precision [Setting-precision.html]\n       * 16.4.5 Setting the Rounding Mode [Setting-the-rounding-mode.html]\n     * 16.5 Arbitrary-Precision Integer Arithmetic with gawk", "doc_id": "ab205c86-1bd2-451a-b641-af77c82070c6", "embedding": null, "doc_hash": "d4503749a449da1c5fa9746ca47fb22608eae0af1a65079e49ed9219d21cd016", "extra_info": null, "node_info": {"start": 20983, "end": 23660, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "612e60ab-3c7d-4ab9-a982-da94e07a2b45", "3": "ce1f0018-4984-4bd0-a7fd-448eddc976e8"}}, "__type__": "1"}, "ce1f0018-4984-4bd0-a7fd-448eddc976e8": {"__data__": {"text": "    * 16.5 Arbitrary-Precision Integer Arithmetic with gawk [Arbitrary-Precision-Integers.html]\n     * 16.6 How To Check If MPFR Is Available [Checking-for-MPFR.html]\n     * 16.7 Standards Versus Existing Practice [POSIX-Floating-Point-Problems.html]\n     * 16.8 Summary [Floating-point-summary.html]\n   * 17 Writing Extensions for gawk [Dynamic-Extensions.html]\n     * 17.1 Introduction [Extension-Intro.html]\n     * 17.2 Extension Licensing [Plugin-License.html]\n     * 17.3 How It Works at a High Level [Extension-Mechanism-Outline.html]\n     * 17.4 API Description [Extension-API-Description.html]\n       * 17.4.1 Introduction [Extension-API-Functions-Introduction.html]\n       * 17.4.2 General-Purpose Data Types [General-Data-Types.html]\n       * 17.4.3 Memory Allocation Functions and Convenience Macros [Memory-Allocation-Functions.html]\n       * 17.4.4 Constructor Functions [Constructor-Functions.html]\n       * 17.4.5 Managing MPFR and GMP Values [API-Ownership-of-MPFR-and-GMP-Values.html]\n       * 17.4.6 Registration Functions [Registration-Functions.html]\n         * 17.4.6.1 Registering An Extension Function [Extension-Functions.html]\n         * 17.4.6.2 Registering An Exit Callback Function [Exit-Callback-Functions.html]\n         * 17.4.6.3 Registering An Extension Version String [Extension-Version-String.html]\n         * 17.4.6.4 Customized Input Parsers [Input-Parsers.html]\n         * 17.4.6.5 Customized Output Wrappers [Output-Wrappers.html]\n         * 17.4.6.6 Customized Two-way Processors [Two_002dway-processors.html]\n       * 17.4.7 Printing Messages [Printing-Messages.html]\n       * 17.4.8 Updating ERRNO [Updating-ERRNO.html]\n       * 17.4.9 Requesting Values [Requesting-Values.html]\n       * 17.4.10 Accessing and Updating Parameters [Accessing-Parameters.html]\n       * 17.4.11 Symbol Table Access [Symbol-Table-Access.html]\n         * 17.4.11.1 Variable Access and Update by Name [Symbol-table-by-name.html]\n         * 17.4.11.2 Variable Access and Update by Cookie [Symbol-table-by-cookie.html]\n         * 17.4.11.3 Creating and Using Cached Values [Cached-values.html]\n       * 17.4.12 Array Manipulation [Array-Manipulation.html]\n         * 17.4.12.1 Array Data Types [Array-Data-Types.html]\n         * 17.4.12.2 Array Functions [Array-Functions.html]\n         * 17.4.12.3 Working With All The Elements of an Array [Flattening-Arrays.html]\n         * 17.4.12.4 How To Create and Populate Arrays [Creating-Arrays.html]\n       * 17.4.13 Accessing and Manipulating Redirections [Redirection-API.html]\n       *", "doc_id": "ce1f0018-4984-4bd0-a7fd-448eddc976e8", "embedding": null, "doc_hash": "d3d2b4ede8eaca9650797ea47c1a110b8e3f555a837caf616655b379114db88d", "extra_info": null, "node_info": {"start": 23651, "end": 26199, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "ab205c86-1bd2-451a-b641-af77c82070c6", "3": "fcd903d3-89a4-4f5d-a085-ab93f89c6e61"}}, "__type__": "1"}, "fcd903d3-89a4-4f5d-a085-ab93f89c6e61": {"__data__": {"text": "Redirections [Redirection-API.html]\n       * 17.4.14 API Variables [Extension-API-Variables.html]\n         * 17.4.14.1 API Version Constants and Variables [Extension-Versioning.html]\n         * 17.4.14.2 GMP and MPFR Version Information [Extension-GMP_002fMPFR-Versioning.html]\n         * 17.4.14.3 Informational Variables [Extension-API-Informational-Variables.html]\n       * 17.4.15 Boilerplate Code [Extension-API-Boilerplate.html]\n       * 17.4.16 Changes From Version 1 of the API [Changes-from-API-V1.html]\n     * 17.5 How gawk Finds Extensions [Finding-Extensions.html]\n     * 17.6 Example: Some File Functions [Extension-Example.html]\n       * 17.6.1 Using chdir() and stat() [Internal-File-Description.html]\n       * 17.6.2 C Code for chdir() and stat() [Internal-File-Ops.html]\n       * 17.6.3 Integrating the Extensions [Using-Internal-File-Ops.html]\n     * 17.7 The Sample Extensions in the gawk Distribution [Extension-Samples.html]\n       * 17.7.1 File-Related Functions [Extension-Sample-File-Functions.html]\n       * 17.7.2 Interface to fnmatch() [Extension-Sample-Fnmatch.html]\n       * 17.7.3 Interface to fork(), wait(), and waitpid() [Extension-Sample-Fork.html]\n       * 17.7.4 Enabling In-Place File Editing [Extension-Sample-Inplace.html]\n       * 17.7.5 Character and Numeric values: ord() and chr() [Extension-Sample-Ord.html]\n       * 17.7.6 Reading Directories [Extension-Sample-Readdir.html]\n       * 17.7.7 Reversing Output [Extension-Sample-Revout.html]\n       * 17.7.8 Two-Way I/O Example [Extension-Sample-Rev2way.html]\n       * 17.7.9 Dumping and Restoring an Array [Extension-Sample-Read-write-array.html]\n       * 17.7.10 Reading an Entire File [Extension-Sample-Readfile.html]\n       * 17.7.11 Extension Time Functions [Extension-Sample-Time.html]\n       * 17.7.12 API Tests [Extension-Sample-API-Tests.html]\n     * 17.8 The gawkextlib Project [gawkextlib.html]\n     * 17.9 Summary [Extension-summary.html]\n     * 17.10 Exercises [Extension-Exercises.html]\n * Part IV:\n   Appendices [Language-History.html#Part-IV_003a-Appendices]\n   * Appendix A The Evolution of the awk Language [Language-History.html]\n     * A.1 Major Changes Between V7 and SVR3.1 [V7_002fSVR3_002e1.html]\n     * A.2 Changes Between SVR3.1 and SVR4 [SVR4.html]\n     * A.3 Changes Between SVR4 and POSIX awk [POSIX.html]\n     * A.4 Extensions in Brian Kernighan\u2019s awk [BTL.html]\n     * A.5 Extensions in gawk Not in POSIX awk [POSIX_002fGNU.html]\n     * A.6 History of gawk Features [Feature-History.html]\n", "doc_id": "fcd903d3-89a4-4f5d-a085-ab93f89c6e61", "embedding": null, "doc_hash": "c2ce3e8ea8a1776e1ac2823b4b1606a05fc6c7885f0ee64b9c114ae13d7d7c93", "extra_info": null, "node_info": {"start": 26213, "end": 28725, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "ce1f0018-4984-4bd0-a7fd-448eddc976e8", "3": "b179c5ba-dd58-4b55-85cd-4b5d21771053"}}, "__type__": "1"}, "b179c5ba-dd58-4b55-85cd-4b5d21771053": {"__data__": {"text": "   * A.6 History of gawk Features [Feature-History.html]\n     * A.7 Common Extensions Summary [Common-Extensions.html]\n     * A.8 Regexp Ranges and Locales: A Long Sad Story [Ranges-and-Locales.html]\n     * A.9 Major Contributors to gawk [Contributors.html]\n     * A.10 Summary [History-summary.html]\n   * Appendix B Installing gawk [Installation.html]\n     * B.1 The gawk Distribution [Gawk-Distribution.html]\n       * B.1.1 Getting the gawk Distribution [Getting.html]\n       * B.1.2 Extracting the Distribution [Extracting.html]\n       * B.1.3 Contents of the gawk Distribution [Distribution-contents.html]\n     * B.2 Compiling and Installing gawk on Unix-Like Systems [Unix-Installation.html]\n       * B.2.1 Compiling gawk for Unix-Like Systems [Quick-Installation.html]\n         * B.2.1.1 Building With MPFR [Compiling-with-MPFR.html]\n       * B.2.2 Shell Startup Files [Shell-Startup-Files.html]\n       * B.2.3 Additional Configuration Options [Additional-Configuration-Options.html]\n       * B.2.4 The Configuration Process [Configuration-Philosophy.html]\n       * B.2.5 Compiling from Git [Compiling-from-Git.html]\n       * B.2.6 Building the Documentation [Building-the-Documentation.html]\n     * B.3 Installation on Other Operating Systems [Non_002dUnix-Installation.html]\n       * B.3.1 Installation on MS-Windows [PC-Installation.html]\n         * B.3.1.1 Installing a Prepared Distribution for MS-Windows Systems [PC-Binary-Installation.html]\n         * B.3.1.2 Compiling gawk for PC Operating Systems [PC-Compiling.html]\n         * B.3.1.3 Using gawk on PC Operating Systems [PC-Using.html]\n         * B.3.1.4 Using gawk In The Cygwin Environment [Cygwin.html]\n         * B.3.1.5 Using gawk In The MSYS Environment [MSYS.html]\n       * B.3.2 Compiling and Installing gawk on OpenVMS [OpenVMS-Installation.html]\n         * B.3.2.1 Compiling gawk on OpenVMS [OpenVMS-Compilation.html]\n         * B.3.2.2 Compiling gawk Dynamic Extensions on OpenVMS [OpenVMS-Dynamic-Extensions.html]\n         * B.3.2.3 Installing gawk on OpenVMS [OpenVMS-Installation-Details.html]\n         * B.3.2.4 Running gawk on OpenVMS [OpenVMS-Running.html]\n         * B.3.2.5 The OpenVMS GNV Project [OpenVMS-GNV.html]\n     * B.4 Reporting Problems and Bugs [Bugs.html]\n       * B.4.1 Defining What Is and What Is Not A Bug [Bug-definition.html]\n       * B.4.2 Submitting Bug Reports [Bug-address.html]\n       * B.4.3 Please Don\u2019t Post Bug Reports to USENET [Usenet.html]\n       * B.4.4 What To Do If You Think There Is A Performance Issue", "doc_id": "b179c5ba-dd58-4b55-85cd-4b5d21771053", "embedding": null, "doc_hash": "f1d7410aadabd3edca14da4fa8254ab4a26ef9338c89dbe96d7b3a20824e0b1b", "extra_info": null, "node_info": {"start": 28714, "end": 31238, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "fcd903d3-89a4-4f5d-a085-ab93f89c6e61", "3": "5b7221fd-bf1f-4fd8-b65a-777b1f3de074"}}, "__type__": "1"}, "5b7221fd-bf1f-4fd8-b65a-777b1f3de074": {"__data__": {"text": "   * B.4.4 What To Do If You Think There Is A Performance Issue [Performance-bugs.html]\n       * B.4.5 Where To Send Non-bug Questions [Asking-for-help.html]\n       * B.4.6 Reporting Problems with Non-Unix Ports [Maintainers.html]\n     * B.5 Other Freely Available awk Implementations [Other-Versions.html]\n     * B.6 Summary [Installation-summary.html]\n   * Appendix C Implementation Notes [Notes.html]\n     * C.1 Downward Compatibility and Debugging [Compatibility-Mode.html]\n     * C.2 Making Additions to gawk [Additions.html]\n       * C.2.1 Accessing The gawk Git Repository [Accessing-The-Source.html]\n       * C.2.2 Adding New Features [Adding-Code.html]\n       * C.2.3 Porting gawk to a New Operating System [New-Ports.html]\n       * C.2.4 Why Generated Files Are Kept In Git [Derived-Files.html]\n     * C.3 Probable Future Extensions [Future-Extensions.html]\n     * C.4 Some Limitations of the Implementation [Implementation-Limitations.html]\n     * C.5 Extension API Design [Extension-Design.html]\n       * C.5.1 Problems With The Old Mechanism [Old-Extension-Problems.html]\n       * C.5.2 Goals For A New Mechanism [Extension-New-Mechanism-Goals.html]\n       * C.5.3 Other Design Decisions [Extension-Other-Design-Decisions.html]\n       * C.5.4 Room For Future Growth [Extension-Future-Growth.html]\n     * C.6 Summary [Notes-summary.html]\n   * Appendix D Basic Programming Concepts [Basic-Concepts.html]\n     * D.1 What a Program Does [Basic-High-Level.html]\n     * D.2 Data Values in a Computer [Basic-Data-Typing.html]\n   * Glossary [Glossary.html]\n   * GNU General Public License [Copying.html]\n   * GNU Free Documentation License [GNU-Free-Documentation-License.html]\n     * ADDENDUM: How to use this License for your documents\n       [GNU-Free-Documentation-License.html#ADDENDUM_003a-How-to-use-this-License-for-your-documents]\n   * Index [Index.html]\n\n\nSHORT TABLE OF CONTENTS\n\n * * Foreword to the Third Edition\n   * Foreword to the Fourth Edition\n   * Preface\n * Part I:\n   The awk Language\n   * 1 Getting Started with awk\n   * 2 Running awk and gawk\n   * 3 Regular Expressions\n   * 4 Reading Input Files\n   * 5 Printing Output\n   * 6 Expressions\n   * 7 Patterns, Actions, and Variables\n   * 8 Arrays in awk\n   * 9 Functions\n * Part II:\n   Problem Solving with awk\n   * 10 A Library of awk Functions\n   * 11 Practical awk Programs\n * Part III:\n   Moving Beyond Standard awk with gawk\n   * 12 Advanced Features of gawk\n   * 13 Internationalization with gawk\n   * 14 Debugging awk Programs\n   * 15 Namespaces in gawk\n   * 16 Arithmetic and Arbitrary-Precision Arithmetic with gawk\n   * 17 Writing Extensions for gawk\n * Part IV:\n   Appendices\n   * Appendix A The Evolution of the awk Language\n   * Appendix B Installing gawk\n   * Appendix C Implementation Notes\n   * Appendix D Basic Programming Concepts\n   * Glossary\n   * GNU", "doc_id": "5b7221fd-bf1f-4fd8-b65a-777b1f3de074", "embedding": null, "doc_hash": "594a72acae78c4ccac6cd3790da7ee56c386c5372a69c54ecd026aaf46e8b379", "extra_info": null, "node_info": {"start": 31239, "end": 34084, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "b179c5ba-dd58-4b55-85cd-4b5d21771053", "3": "251502f5-9209-468a-971f-64115fad10c4"}}, "__type__": "1"}, "251502f5-9209-468a-971f-64115fad10c4": {"__data__": {"text": "D Basic Programming Concepts\n   * Glossary\n   * GNU General Public License\n   * GNU Free Documentation License\n   * Index\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nNext: Foreword to the Third Edition [Foreword3.html], Up: (dir) [/manual] \u00a0 [Contents][Index [Index.html]]", "doc_id": "251502f5-9209-468a-971f-64115fad10c4", "embedding": null, "doc_hash": "edd393255485ce441b00a99144a8f3bfd33e128f9985e6ef384af3668764525d", "extra_info": null, "node_info": {"start": 34081, "end": 34442, "_node_type": "1"}, "relationships": {"1": "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308", "2": "5b7221fd-bf1f-4fd8-b65a-777b1f3de074"}}, "__type__": "1"}, "e49f5edd-9af5-4caf-af98-0d7d7c590ada": {"__data__": {"text": "The node you are looking for is at Table 17.1 [Extension-API-Functions-Introduction.html#table_002dapi_002dstd_002dheaders].", "doc_id": "e49f5edd-9af5-4caf-af98-0d7d7c590ada", "embedding": null, "doc_hash": "19c44155b0af2bd3bdf9cc4da6ff9ce48fc2c120c0aa462e34650f275f92ec9d", "extra_info": null, "node_info": {"start": 0, "end": 124, "_node_type": "1"}, "relationships": {"1": "620fdaf3-830f-4006-83f2-f79032e7e800"}}, "__type__": "1"}, "88fa2643-000d-416a-8340-9ce27be4e4e2": {"__data__": {"text": "The node you are looking for is at Table 6.2 [Assignment-Ops.html#table_002dassign_002dops].", "doc_id": "88fa2643-000d-416a-8340-9ce27be4e4e2", "embedding": null, "doc_hash": "58d48e9bcc934706d0ccb7daf3063f1620644accea02297116faefda25e03721", "extra_info": null, "node_info": {"start": 0, "end": 92, "_node_type": "1"}, "relationships": {"1": "05474b19-ca98-49f3-a807-390df07c59f0"}}, "__type__": "1"}, "73eea78e-7f19-4930-8346-3b006560ef41": {"__data__": {"text": "The node you are looking for is at Table 9.6 [Bitwise-Functions.html#table_002dbitwise_002dops].", "doc_id": "73eea78e-7f19-4930-8346-3b006560ef41", "embedding": null, "doc_hash": "a4e0cf485c6b618bbe1c319147ec75bcc75f01ad8f2a63a0a0886ab9b7e9484e", "extra_info": null, "node_info": {"start": 0, "end": 96, "_node_type": "1"}, "relationships": {"1": "14a62fd7-2527-400d-94be-60f8ffc01073"}}, "__type__": "1"}, "75861bd9-b6f6-48d5-b949-d60c5cff4bb8": {"__data__": {"text": "The node you are looking for is at Table 3.1 [Bracket-Expressions.html#table_002dchar_002dclasses].", "doc_id": "75861bd9-b6f6-48d5-b949-d60c5cff4bb8", "embedding": null, "doc_hash": "97f4f77925c826d00941f75d2c68c082985dd836c1a1c21d865279b5b4e5906b", "extra_info": null, "node_info": {"start": 0, "end": 99, "_node_type": "1"}, "relationships": {"1": "0b1e602b-ffc7-4d75-aaab-1881cc5ac04b"}}, "__type__": "1"}, "194268a9-0070-4f7c-a657-f40074f189d7": {"__data__": {"text": "The node you are looking for is at Table 5.1 [Close-Return-Value.html#table_002dclose_002dpipe_002dreturn_002dvalues].", "doc_id": "194268a9-0070-4f7c-a657-f40074f189d7", "embedding": null, "doc_hash": "628a25fb7049bf7f5520aab25068d1cf4ec6c4d30b1064063a4db5c0d26d01a1", "extra_info": null, "node_info": {"start": 0, "end": 118, "_node_type": "1"}, "relationships": {"1": "88ac1b33-2ed0-4e25-b5a7-ef6887effc48"}}, "__type__": "1"}, "c5cd95ee-e50f-4a68-a364-00c0aadcd616": {"__data__": {"text": "The node you are looking for is at Table 16.2 [Computer-Arithmetic.html#table_002dfloating_002dpoint_002dranges].", "doc_id": "c5cd95ee-e50f-4a68-a364-00c0aadcd616", "embedding": null, "doc_hash": "5871be289336a5aa8e26a964b577c7c7045dc82b8c832b5b46fe6ec655cf0386", "extra_info": null, "node_info": {"start": 0, "end": 113, "_node_type": "1"}, "relationships": {"1": "5e31968c-e386-450c-bc59-d0d811c3c66b"}}, "__type__": "1"}, "50a6acc2-07fb-49f7-a2e4-8ac0b619d5fd": {"__data__": {"text": "The node you are looking for is at Table 16.5 [Setting-the-rounding-mode.html#table_002dgawk_002drounding_002dmodes].", "doc_id": "50a6acc2-07fb-49f7-a2e4-8ac0b619d5fd", "embedding": null, "doc_hash": "d7f13c49e388a69522158a839edd5641f3716af2b9d0cb9451b51524cca3d4fb", "extra_info": null, "node_info": {"start": 0, "end": 117, "_node_type": "1"}, "relationships": {"1": "4acc118a-d80d-4c09-aab6-0d33452bd8a5"}}, "__type__": "1"}, "3185c93b-9433-42c2-b173-839069e4cf9d": {"__data__": {"text": "The node you are looking for is at Table 9.4 [Gory-Details.html#table_002dgensub_002descapes].", "doc_id": "3185c93b-9433-42c2-b173-839069e4cf9d", "embedding": null, "doc_hash": "2dc087750a8cee81d707100449331a5c18524e76113e8e9373387bc794066c8f", "extra_info": null, "node_info": {"start": 0, "end": 94, "_node_type": "1"}, "relationships": {"1": "370aac71-32c2-4283-abe2-814b3d8b1b5c"}}, "__type__": "1"}, "0c3fa396-daf0-41a0-b12e-88e8e60da3c2": {"__data__": {"text": "The node you are looking for is at Table 4.1 [Getline-Summary.html#table_002dgetline_002dvariants].", "doc_id": "0c3fa396-daf0-41a0-b12e-88e8e60da3c2", "embedding": null, "doc_hash": "c3fcf631b77e5a068afaf35899f2b9a9456d8e06e6de3374fadfdb8c8f19f2bc", "extra_info": null, "node_info": {"start": 0, "end": 99, "_node_type": "1"}, "relationships": {"1": "a212f221-e681-4355-8f0c-76e557428cf7"}}, "__type__": "1"}, "94626169-3af6-4ef5-90b6-6fdab2990cb8": {"__data__": {"text": "The node you are looking for is at Table 16.3 [Math-Definitions.html#table_002dieee_002dformats].", "doc_id": "94626169-3af6-4ef5-90b6-6fdab2990cb8", "embedding": null, "doc_hash": "16c89af7c164e070aaa2e4616efbd77ad0b326173b471146155a5c362d98481c", "extra_info": null, "node_info": {"start": 0, "end": 97, "_node_type": "1"}, "relationships": {"1": "1186821f-f81f-4c9d-8b00-5ff6ad45c011"}}, "__type__": "1"}, "60fbb8e3-9947-4cee-9252-4beab3626ae7": {"__data__": {"text": "The node you are looking for is at Table 6.1 [Locale-influences-conversions.html#table_002dlocale_002daffects].", "doc_id": "60fbb8e3-9947-4cee-9252-4beab3626ae7", "embedding": null, "doc_hash": "85691de6895310881d2d26f6ff344fa8e9670096e16a9b0bd0cae743091909cc", "extra_info": null, "node_info": {"start": 0, "end": 111, "_node_type": "1"}, "relationships": {"1": "064f80ed-a48a-4a53-a62e-e1de4263dcd6"}}, "__type__": "1"}, "900439c7-c9b8-4dfb-83c5-15149ba4f527": {"__data__": {"text": "The node you are looking for is at Table 16.1 [Computer-Arithmetic.html#table_002dnumeric_002dranges].", "doc_id": "900439c7-c9b8-4dfb-83c5-15149ba4f527", "embedding": null, "doc_hash": "df36bd40e84dd073d3a0488615f74c2bcc73940c2a0d8475ed6798e180607fdc", "extra_info": null, "node_info": {"start": 0, "end": 102, "_node_type": "1"}, "relationships": {"1": "c5f8e92b-a165-414f-9bbe-25b84f289775"}}, "__type__": "1"}, "64242d9e-fa7a-4892-a5f0-ca7aa5d3453d": {"__data__": {"text": "The node you are looking for is at Table 9.3 [Gory-Details.html#table_002dposix_002dsub].", "doc_id": "64242d9e-fa7a-4892-a5f0-ca7aa5d3453d", "embedding": null, "doc_hash": "bedc789cb1fd922662db0dadaf9a6f95eecaa08d1e4d085823831703759a3800", "extra_info": null, "node_info": {"start": 0, "end": 89, "_node_type": "1"}, "relationships": {"1": "c01975cd-e1e5-4eb6-8ba8-076a82dc074d"}}, "__type__": "1"}, "ce425bc4-9c32-49f4-a6ea-fa841aee1a04": {"__data__": {"text": "The node you are looking for is at Table 16.4 [Setting-precision.html#table_002dpredefined_002dprecision_002dstrings].", "doc_id": "ce425bc4-9c32-49f4-a6ea-fa841aee1a04", "embedding": null, "doc_hash": "1cc2dab981bb88b72b1972965ebe8efc5de3bd7c09bf862d3347b620fae21ade", "extra_info": null, "node_info": {"start": 0, "end": 118, "_node_type": "1"}, "relationships": {"1": "a75e252e-6a04-4548-99f3-59a4863569b4"}}, "__type__": "1"}, "998511bc-e832-4674-aabf-9a32bca271be": {"__data__": {"text": "The node you are looking for is at Table 17.4 [Extension-Sample-Readdir.html#table_002dreaddir_002dfile_002dtypes].", "doc_id": "998511bc-e832-4674-aabf-9a32bca271be", "embedding": null, "doc_hash": "e75d590fd225401170b709b7f87f377c88d17da8bb02295a896d95d30ad292a4", "extra_info": null, "node_info": {"start": 0, "end": 115, "_node_type": "1"}, "relationships": {"1": "1c59258e-4be3-45f6-b639-b9198cb1f53c"}}, "__type__": "1"}, "5f6b60c1-f9f6-4f6e-a38b-5b60f18907c3": {"__data__": {"text": "The node you are looking for is at Table 6.3 [Comparison-Operators.html#table_002drelational_002dops].", "doc_id": "5f6b60c1-f9f6-4f6e-a38b-5b60f18907c3", "embedding": null, "doc_hash": "6d9f1a08b727a4f6552190f4db9ea38b255a4d419f288d8cfc16b72359b8fc02", "extra_info": null, "node_info": {"start": 0, "end": 102, "_node_type": "1"}, "relationships": {"1": "82b4a723-f318-476c-becf-be7bef443acb"}}, "__type__": "1"}, "c3e4cc5b-0866-4e57-9163-da9f9f658b19": {"__data__": {"text": "The node you are looking for is at Table 9.1 [Gory-Details.html#table_002dsub_002descapes].", "doc_id": "c3e4cc5b-0866-4e57-9163-da9f9f658b19", "embedding": null, "doc_hash": "18ca3e32710efbf742d043b546a13259d8efb85d50e02e2089e1e313ba5f2bc9", "extra_info": null, "node_info": {"start": 0, "end": 91, "_node_type": "1"}, "relationships": {"1": "0104b44b-beaa-4ba3-be23-c1e8a09b984a"}}, "__type__": "1"}, "20363f8c-6150-4a10-a080-aa1f7e0f67b9": {"__data__": {"text": "The node you are looking for is at Table 9.2 [Gory-Details.html#table_002dsub_002dproposed].", "doc_id": "20363f8c-6150-4a10-a080-aa1f7e0f67b9", "embedding": null, "doc_hash": "3a54da0435ebe4cf8b3d0d14c4a14cbccbfb8f3256e43151f3a87f223496c15c", "extra_info": null, "node_info": {"start": 0, "end": 92, "_node_type": "1"}, "relationships": {"1": "73dd1a9e-37d6-4fa8-9fa8-dc79376650d4"}}, "__type__": "1"}, "529d801f-a2c3-4607-9c4f-972c345e0342": {"__data__": {"text": "The node you are looking for is at Table 9.5 [I_002fO-Functions.html#table_002dsystem_002dreturn_002dvalues].", "doc_id": "529d801f-a2c3-4607-9c4f-972c345e0342", "embedding": null, "doc_hash": "88d84e9934ca679dc388a6d7194984e408cad8e88521a191021fab0a46bc4cb9", "extra_info": null, "node_info": {"start": 0, "end": 109, "_node_type": "1"}, "relationships": {"1": "5853a3f4-2020-4b86-a024-efd6f24d1a0a"}}, "__type__": "1"}, "cacfe691-aeba-4701-b7e4-90f31f85c30a": {"__data__": {"text": "The node you are looking for is at Table 17.2 [Requesting-Values.html#table_002dvalue_002dtypes_002dreturned].", "doc_id": "cacfe691-aeba-4701-b7e4-90f31f85c30a", "embedding": null, "doc_hash": "82add6eb371262b0de38e50738215090141c5479055b8c7b88769ba3ea256118", "extra_info": null, "node_info": {"start": 0, "end": 110, "_node_type": "1"}, "relationships": {"1": "fa6f6982-ee30-43fd-bb83-064aa77ac2de"}}, "__type__": "1"}, "a0d38ba7-ed03-4c6f-8f73-49a9f5f63aef": {"__data__": {"text": "Previous: A Brief Introduction To Extensions [Using-extensions.html], Up: Counting Things [Wc-Program.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n11.2.7.3 CODE FOR WC.AWK\n\nThe usage for wc is as follows:\n\nwc [-lwcm] [files \u2026]\n\n\nIf no files are specified on the command line, wc reads its standard input. If there are multiple files, it also prints total\ncounts for all the files. The options and their meanings are as follows:\n\n-c\n\nCount only bytes. Once upon a time, the \u2018c\u2019 in this option stood for \u201ccharacters.\u201d But, as explained earlier, bytes and character\nare no longer synonymous with each other.\n\n-l\n\nCount only lines.\n\n-m\n\nCount only characters.\n\n-w\n\nCount only words. A \u201cword\u201d is a contiguous sequence of nonwhitespace characters, separated by spaces and/or TABs. Luckily, this is\nthe normal way awk separates fields in its input data.\n\nImplementing wc in awk is particularly elegant, because awk does a lot of the work for us; it splits lines into words (i.e.,\nfields) and counts them, it counts lines (i.e., records), and it can easily tell us how long a line is in characters.\n\nThis program uses the getopt() library function (see Processing Command-Line Options [Getopt-Function.html]) and the\nfile-transition functions (see Noting Data file Boundaries [Filetrans-Function.html]).\n\nThis version has one notable difference from older versions of wc: it always prints the counts in the order lines, words,\ncharacters and bytes. Older versions note the order of the -l, -w, and -c options on the command line, and print the counts in\nthat order. POSIX does not mandate this behavior, though.\n\nThe BEGIN rule does the argument processing. The variable print_total is true if more than one file is named on the command line:\n\n# wc.awk --- count lines, words, characters, bytes\n\n# Options:\n#    -l    only count lines\n#    -w    only count words\n#    -c    only count bytes\n#    -m    only count characters\n#\n# Default is to count lines, words, bytes\n#\n# Requires getopt() and file transition library functions\n# Requires mbs extension from gawkextlib\n\n@load \"mbs\"\n\nBEGIN {\n    # let getopt() print a message about\n    # invalid options. we ignore them\n    while ((c = getopt(ARGC, ARGV, \"lwcm\")) != -1) {\n        if (c == \"l\")\n            do_lines = 1\n        else if (c == \"w\")\n            do_words = 1\n        else if (c == \"c\")\n            do_bytes = 1\n        else if (c == \"m\")\n            do_chars = 1\n    }\n    for (i = 1; i < Optind; i++)\n        ARGV[i] = \"\"\n\n    # if no options, do lines, words, bytes\n    if (! do_lines && ! do_words && ! do_chars && ! do_bytes)\n        do_lines = do_words = do_bytes = 1\n\n    print_total = (ARGC - i > 1)\n}\n\n\nThe beginfile() function is simple; it just resets the counts of lines, words, characters and bytes to zero, and saves the current\nfile name in fname:\n\nfunction beginfile(file)\n{\n    lines = words = chars = bytes = 0\n    fname = FILENAME\n}\n\n\nThe", "doc_id": "a0d38ba7-ed03-4c6f-8f73-49a9f5f63aef", "embedding": null, "doc_hash": "2fe4af0711a3da9ef51f37cf3d645c2f0a14bf35c1e2eed96b013c8ef5ca259f", "extra_info": null, "node_info": {"start": 0, "end": 3064, "_node_type": "1"}, "relationships": {"1": "010d9b9f-2fef-4ce2-8aa4-c1b58460855c", "3": "aba8ab4c-40fd-4ac2-93c1-343748dab437"}}, "__type__": "1"}, "aba8ab4c-40fd-4ac2-93c1-343748dab437": {"__data__": {"text": "= bytes = 0\n    fname = FILENAME\n}\n\n\nThe endfile() function adds the current file\u2019s numbers to the running totals of lines, words, and characters. It then prints out\nthose numbers for the file that was just read. It relies on beginfile() to reset the numbers for the following data file:\n\nfunction endfile(file)\n{\n    tlines += lines\n    twords += words\n    tchars += chars\n    tbytes += bytes\n    if (do_lines)\n        printf \"\\t%d\", lines\n\n\n    if (do_words)\n        printf \"\\t%d\", words\n\n\n    if (do_chars)\n        printf \"\\t%d\", chars\n    if (do_bytes)\n        printf \"\\t%d\", bytes\n    printf \"\\t%s\\n\", fname\n}\n\n\nThere is one rule that is executed for each line. It adds the length of the record, plus one, to chars. Adding one plus the record\nlength is needed because the newline character separating records (the value of RS) is not part of the record itself, and thus not\nincluded in its length. Similarly, it adds the length of the record in bytes, plus one, to bytes. Next, lines is incremented for\neach line read, and words is incremented by the value of NF, which is the number of \u201cwords\u201d on this line:\n\n# do per line\n{\n    chars += length($0) + 1    # get newline\n    bytes += mbs_length($0) + 1\n    lines++\n    words += NF\n}\n\n\nFinally, the END rule simply prints the totals for all the files:\n\nEND {\n    if (print_total) {\n        if (do_lines)\n            printf \"\\t%d\", tlines\n        if (do_words)\n            printf \"\\t%d\", twords\n        if (do_chars)\n            printf \"\\t%d\", tchars\n        if (do_bytes)\n            printf \"\\t%d\", tbytes\n        print \"\\ttotal\"\n    }\n}\n\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nPrevious: A Brief Introduction To Extensions [Using-extensions.html], Up: Counting Things [Wc-Program.html] \u00a0 [Contents\n[index.html#SEC_Contents]][Index [Index.html]]", "doc_id": "aba8ab4c-40fd-4ac2-93c1-343748dab437", "embedding": null, "doc_hash": "9fd351443379ff05714ddad9741d7fe072c028de2b339af934eeb7df7ce419de", "extra_info": null, "node_info": {"start": 3024, "end": 4916, "_node_type": "1"}, "relationships": {"1": "010d9b9f-2fef-4ce2-8aa4-c1b58460855c", "2": "a0d38ba7-ed03-4c6f-8f73-49a9f5f63aef"}}, "__type__": "1"}}, "docstore/ref_doc_info": {"b44f345e-021e-452d-8444-5c02929d5ee2": {"doc_ids": ["1a21a141-68f0-46db-ac77-b27f23d03e6d"], "extra_info": {}}, "b1de3bc9-eeb0-44b8-9c16-b001f4eb71e1": {"doc_ids": ["5e0d633d-f3a6-4966-bf4c-2e615c166ddc", "c6a16fd7-55af-4039-a8b5-95419276a05e"], "extra_info": {}}, "d634c371-9de9-41ed-a611-2caa4dc0fbf0": {"doc_ids": ["5206be4b-9410-4269-8437-546c0744b527"], "extra_info": {}}, "b9da05a9-ce03-4b35-b03f-7091be90a627": {"doc_ids": ["34c6c8f6-1a5f-4301-b166-683080b318d8", "54bb733b-b229-4380-8c75-636c6d338ad4"], "extra_info": {}}, "ba9116ca-8808-4a88-89dd-76c797b5dae4": {"doc_ids": ["9e0cd98d-8c9c-4ff5-830e-b23abbd98f8a"], "extra_info": {}}, "3efefea7-6951-4863-9485-08186ee7f3bd": {"doc_ids": ["f032c2f2-a356-4b44-90b0-155a7fd9ec67"], "extra_info": {}}, "704ea28c-6a22-4a19-87bf-eec34b5c2ea8": {"doc_ids": ["33fc5ccd-23bd-486b-a287-fd11e09328e7", "db08b862-d231-4396-8418-5c650e9d7804"], "extra_info": {}}, "e44f53a6-8d0a-4503-97ce-601bbe725bf1": {"doc_ids": ["5ff17540-6f07-465b-923c-b3bc8f3601a7"], "extra_info": {}}, "d1704578-3270-4f71-9154-5cc972b76587": {"doc_ids": ["41b32821-b308-4931-8166-37810e9ca9c6", "e35ca365-71e3-482d-8a83-e39016535016"], "extra_info": {}}, "221043d2-f195-4081-bb2b-7dbc1604164b": {"doc_ids": ["97a0a33c-738f-4bbe-a1e7-0cf34f51defc"], "extra_info": {}}, "c848e26b-2ccc-4683-953d-e6a371591e7a": {"doc_ids": ["647a73c0-48e6-4a45-a7b0-a37002f0c4e3"], "extra_info": {}}, "d1e0e105-dcc1-44b6-9e40-9add6a966224": {"doc_ids": ["bd05519c-4c0d-402e-96c6-6be8565c5c37"], "extra_info": {}}, "0285f772-127d-4af1-9e1f-925450f84adb": {"doc_ids": ["ee2cfff8-ce87-4ae1-bc04-6882b2a49116"], "extra_info": {}}, "26b8973f-9867-488a-916a-6c9e21fde866": {"doc_ids": ["321d9bfd-924e-4ff5-8e6e-ff917b6ff7f1", "1b3ce2e2-2ba8-4d78-abbb-a4f19fa7b311"], "extra_info": {}}, "2fcc3f90-a161-44de-ab59-f63cbacad9d9": {"doc_ids": ["6da18a34-4c28-4491-8722-7d0a461267f1"], "extra_info": {}}, "5f6bc4f8-d211-41de-8921-dcdd1351cfe8": {"doc_ids": ["83526869-c9bd-4270-9782-79374a3de2d6"], "extra_info": {}}, "a6fc214f-d4dc-4b5a-8e50-63892c4cfaa1": {"doc_ids": ["7fa8cfe2-c3d6-4d61-8c8d-f1e09946e930", "f8c0009e-47a2-4aa1-b3d1-a7b573a5a6f2"], "extra_info": {}}, "33aa3fdb-97b0-47e7-96c2-a817471a5939": {"doc_ids": ["cb5d5214-9c8a-45c6-b632-d04a288a74f1"], "extra_info": {}}, "7b69e3d3-a4f7-4fff-b169-9400b8da2684": {"doc_ids": ["40013129-77f7-47b9-9d1d-1c0a810a63c1", "b38bbce8-8b11-4fc9-bf2f-471732894291"], "extra_info": {}}, "e4fdb07d-5203-487b-acd2-5b1749323a22": {"doc_ids": ["3f1e1cbd-5cb8-41dd-bfda-bacefce7a1fe"], "extra_info": {}}, "fa8c4556-86a5-462e-a972-1bcf5ec3ea3f": {"doc_ids": ["7587357e-3542-4693-87bf-c830216f5a5c"], "extra_info": {}}, "a3eca64f-d25e-4720-b8c0-bb2d6af3e968": {"doc_ids": ["6f3be005-e7c9-416f-bb3e-7aa89bdb1df2"], "extra_info": {}}, "f0fb8f60-5fb3-4ae8-8671-13b3671b78bf": {"doc_ids": ["fb3dab49-7e8b-48bb-b2be-fef77ec22d67"], "extra_info": {}}, "1cee749a-c8a5-4428-b0be-60d7d365c9eb": {"doc_ids": ["55a71b8c-5c72-41b9-8401-76fc72c04286", "dfbb1e1c-50f8-4c4d-ae14-2bc62f055edb"], "extra_info": {}}, "4f1d28bd-ed57-4d51-a427-a2f0b70c978a": {"doc_ids": ["d6b10dff-13ff-4d99-9685-36411b55f367", "2933616c-bc90-4053-8ed2-961aaafaeb39"], "extra_info": {}}, "8167a2dd-9bd4-40e6-8696-271a354d943c": {"doc_ids": ["cb8e75ad-2c82-4c93-9b9d-6163d530b2d4"], "extra_info": {}}, "d18791fe-f37c-4a1e-8772-ca72ca822868": {"doc_ids": ["149a46c5-0b70-4a8d-b42c-b20d486fad13", "f7fac754-8196-4312-8501-f304b96c3e22"], "extra_info": {}}, "09174847-a1fd-454d-8f19-04ae8b653994": {"doc_ids": ["ce30ffd7-7b1c-46f9-ae72-e44dde8a5a42"], "extra_info": {}}, "01cc60fa-eab7-4676-8cb7-43e998861f38": {"doc_ids": ["1020a8f1-572e-42f6-a800-dc7885d38128"], "extra_info": {}}, "8816326a-17b3-433f-8fb0-160506403cf0": {"doc_ids": ["273831e1-3d50-4628-9856-09f69a524017", "a53eebd0-f693-4ae7-819f-ee9ca80c55df"], "extra_info": {}}, "ce2e6fcd-0576-4df0-b68f-0fa83543aa34": {"doc_ids": ["2fcbc527-3641-4fbc-8838-0c31039cb272"], "extra_info": {}}, "99e9d8f1-554c-4b27-a9e3-e9d14cdbeaf2": {"doc_ids": ["968d9ef0-7ae4-4405-ad47-cf49f9f09cfe"], "extra_info": {}}, "19e4e299-00f6-4ddf-b55b-49d3c4813143": {"doc_ids": ["a3813c2f-9b60-4c6b-8e01-ab673e93161d", "fa8fa216-8c84-4754-9a0d-1924575ebe5a"], "extra_info": {}}, "8d0aa7d0-a1ed-4898-b0aa-4dea4ff4dd76": {"doc_ids": ["8d5fc85b-f697-4571-95ee-51864a44a920"], "extra_info": {}}, "5514afae-bac0-40cb-b228-70fcd7cf5416": {"doc_ids": ["2ecc5660-ebce-4aff-9e45-35d257d35653", "42824e57-b69a-4cc8-96f4-26b9ba5cf547"], "extra_info": {}}, "3fee2379-693b-4b3a-984d-3a581bd4038b": {"doc_ids": ["e0d2c2a9-5c99-43ba-873f-ba7ad0681a5c"], "extra_info": {}}, "a3b71136-2621-4b3a-ae23-68c55aa7f593": {"doc_ids": ["f4f35fab-630c-45dc-bc24-870d3efe143c", "895da9ca-f653-428c-82ce-b6a13c8050eb", "ed8deb87-c04e-4a92-bcab-33ae4657fd33", "20b090d9-1f84-43e0-b944-1cc041c163d3", "c4486261-f911-449b-b1ec-c21b60850318"], "extra_info": {}}, "a830f680-5650-4b16-91e8-86ed503b4457": {"doc_ids": ["9d9f3378-a6fc-44bb-b32c-29c1a42371b1"], "extra_info": {}}, "ef65b31c-de2e-4e09-a341-30df25e0efbc": {"doc_ids": ["75bcdf99-6195-4081-b367-dbea800b182c"], "extra_info": {}}, "2fed5ece-7295-48fe-bffe-44f37282f96c": {"doc_ids": ["38be8bd9-5d4d-4f8d-af14-1f00d0f03d1c"], "extra_info": {}}, "8f035391-6611-4960-ba5e-1f40cb0022a7": {"doc_ids": ["d09d22c6-b901-4304-9977-01d00b4ef557"], "extra_info": {}}, "8f1abc55-23b6-488f-9275-bd14a327b1cd": {"doc_ids": ["6e72af55-7377-44c0-a9f0-e408c0ec56b8"], "extra_info": {}}, "050a5ab4-8bc6-44f8-bb8e-8c60e1203796": {"doc_ids": ["419035e9-8207-4e24-ac06-47ea936a2196"], "extra_info": {}}, "af6e9453-95d1-4c3a-bd74-dc7954d48720": {"doc_ids": ["b0dcba9d-f6a1-4f3d-a5c2-43e1fd5a3dde", "317de460-bdc9-44a2-8b6c-2e86f41c25bc"], "extra_info": {}}, "5878e1b0-ee34-48cf-9495-636d873f6b48": {"doc_ids": ["9777a22c-e388-47f8-b569-2476b42799d5"], "extra_info": {}}, "6ef8001b-efbc-42e8-b1f0-542641c8ea6b": {"doc_ids": ["191368fe-b562-493d-85a6-fa0a95295ae5", "96af74fb-8dfe-49fd-a02e-b9be4d6ecb9a", "c431188e-6249-4984-92d2-dd7a757a40b6"], "extra_info": {}}, "c302174f-0c08-4786-a76f-ecc13a0340cc": {"doc_ids": ["62eb39e6-a4ee-4331-9733-638a40dfb8e5"], "extra_info": {}}, "ee195179-8562-4f6d-91f2-58b5c1b95f25": {"doc_ids": ["aaf9a95a-76be-4876-8100-ee29a29fe231", "1f1f5a4b-feef-4683-8a98-d4ca039a940b"], "extra_info": {}}, "919427db-4195-44c5-871c-88d7f6a13989": {"doc_ids": ["534abb3d-583a-4929-afd7-a17cb90fcda3"], "extra_info": {}}, "5426871d-a8f7-40d9-aac5-8a16d057b4fb": {"doc_ids": ["dac57474-b516-46f7-8418-5b80dc406ca3", "fa6ffb69-d9aa-4389-b3b7-081bb07e1e36"], "extra_info": {}}, "7a171734-75d0-4028-bc67-7d8171de8b87": {"doc_ids": ["7b434ed9-6785-4dcb-8535-f94106085f72"], "extra_info": {}}, "c5b83618-c9ef-4693-81a8-312cf86ce1b4": {"doc_ids": ["d90f37fa-fc73-4f3c-9510-119d2c314542"], "extra_info": {}}, "092dc66d-977b-4035-b1b9-db64e44125b2": {"doc_ids": ["09c8943a-c02c-4746-8da0-fb3a3efc5693", "63e49e4c-5813-4c53-9878-aa0c5b80fdcd"], "extra_info": {}}, "fe58345f-d05a-4bd0-81da-324defa1df84": {"doc_ids": ["15027205-fd03-46af-b4de-dbe28c269e56"], "extra_info": {}}, "4d9fbe00-68d9-4197-859d-a8fbaa4e7ae7": {"doc_ids": ["05d11658-5a42-4388-92d3-18c156019ab8"], "extra_info": {}}, "8eb8de8a-ca43-451e-9642-e183a5c90edc": {"doc_ids": ["837247a2-e9a9-4bf3-8a59-5e3b8e43c31a"], "extra_info": {}}, "3a23ceb8-63db-44bf-83c7-8f5cbf99bc66": {"doc_ids": ["6a6611b8-0673-4588-9ed7-8ccb014067c9"], "extra_info": {}}, "fde7295f-1dab-441c-b35e-5f8b9dd67c77": {"doc_ids": ["d82a8c0a-b617-46d8-8895-031c68080902"], "extra_info": {}}, "fbfe1e1e-a39d-46a0-abe8-cf9d312dfd7f": {"doc_ids": ["224f3d72-3d70-45ae-b201-3933caf9fe2f"], "extra_info": {}}, "c1d9a3e5-3867-4294-a28f-cc8feb9f610c": {"doc_ids": ["cf2c62a6-27b7-498d-bb0a-cca1ebfe15f9", "4b342e25-3105-4af1-9b0e-e2fc9f1b4cb9"], "extra_info": {}}, "1824a8f9-491e-4516-9baa-6131c0c78c1c": {"doc_ids": ["6bd536f9-06b1-4a58-a6ed-dec3915db86b"], "extra_info": {}}, "bd3746e7-da54-4c45-99ee-269c1ac11a18": {"doc_ids": ["b7057106-8942-4f6f-9e5a-cb6d7e31374c"], "extra_info": {}}, "8c8ed0d4-c2ac-4714-8149-fef19e2b0ff4": {"doc_ids": ["5603d457-6462-44a8-a526-e474e9e09c98", "eca6b4bd-796d-4c5b-b550-78a855911b10"], "extra_info": {}}, "aa9895ea-86cb-4307-bbfb-0c13ec70ef3b": {"doc_ids": ["9d5010a1-d017-465d-b055-7bb723c90073"], "extra_info": {}}, "8b8a59fe-6504-401f-9508-76241c41c8ed": {"doc_ids": ["391586bf-21bf-46dd-b4b3-d880818213e7", "7a9dc37a-1c17-4b9b-88fa-cf8e7025b9df"], "extra_info": {}}, "3a24fbe8-1de7-46c8-8d2e-4af623df4e61": {"doc_ids": ["9b529c0f-a5b1-416d-be9a-454a4eb160b8"], "extra_info": {}}, "521736eb-acca-42f3-8193-e027002c7f6b": {"doc_ids": ["91638b40-0ac4-476c-a324-5c3d550460d6"], "extra_info": {}}, "7483b2aa-2315-4e35-84d3-058941830d1b": {"doc_ids": ["be44db68-6034-4857-b81e-0e88daa4ab6b"], "extra_info": {}}, "fd870fe2-0a27-4f3d-8929-d8b427e518d3": {"doc_ids": ["acf75009-97e0-40f5-a220-2b6c7487d8ec"], "extra_info": {}}, "a5ef87d6-8101-443a-b2b6-f01a4c214d26": {"doc_ids": ["53c5aa70-7a38-4f98-b854-de913f009119", "ffe7e3a3-0187-4e8d-8813-3f625d2183ee"], "extra_info": {}}, "0c7bc33f-3200-4760-a9c0-2bb6ea435a13": {"doc_ids": ["6f1d5ba8-823b-482f-861c-83e51d5225f8"], "extra_info": {}}, "be0f5c84-0755-4356-9ae8-9c21e44efcb1": {"doc_ids": ["40876cbf-fa8d-4440-b087-065b81ed3f9b", "a7b7665c-4365-4ebd-8b58-34917e88e2e8"], "extra_info": {}}, "e3fd6050-26a2-4166-a498-4d48631a0f69": {"doc_ids": ["df2acc49-b550-45e9-8c6e-a970888f0ec0"], "extra_info": {}}, "be2d8d25-2ab8-4f31-8c29-0855305c8b29": {"doc_ids": ["d676d47d-ef17-4b19-87dd-ca4708bb423f"], "extra_info": {}}, "7b5e3d52-8ef4-466a-a529-58ed09640aa9": {"doc_ids": ["ed1d61d5-1512-427a-83c7-cb23cffd7658"], "extra_info": {}}, "e076b117-0d72-43c5-96d4-64693b85886d": {"doc_ids": ["6be96f21-d6bd-498d-9263-97817e856ecd"], "extra_info": {}}, "e9048fce-b353-4059-a3db-15675f2596e3": {"doc_ids": ["7fad9ba3-0068-4dc4-9e3b-9eb9e02ea1fc"], "extra_info": {}}, "039eb23c-0653-417c-b5a8-f371c35ad956": {"doc_ids": ["00b114e4-f5b6-4787-8c2f-e4a983089ee7", "f42ff8b3-0b3d-45fa-84f9-c48b56399739"], "extra_info": {}}, "f6c853d8-6da3-4177-899e-deed22667ed0": {"doc_ids": ["bc036322-9cf3-4661-9631-997a5c2735b1"], "extra_info": {}}, "d172a959-b2ae-40aa-8170-96f018dc1e3e": {"doc_ids": ["32bc3270-eb5e-4d2d-b68b-e793000aac2e"], "extra_info": {}}, "efbe03d1-bc3f-471c-a275-ef79d526ed0d": {"doc_ids": ["98b80ca9-c90d-4fe8-a8b2-787c0ca3d276"], "extra_info": {}}, "dea75562-ec08-475d-a825-2ecf25b58aed": {"doc_ids": ["a8bd793e-40c2-49b0-adac-ad00b7dd76f0", "ba1d04f4-43e5-4119-8be0-d1ac4cc6f7a5"], "extra_info": {}}, "68eff820-5cc9-4310-80c8-da499c8835b1": {"doc_ids": ["7d00dede-a4a5-4f63-8bfc-3c6ec2394b7e", "10383505-6df5-48f8-87d3-b5ded692f430"], "extra_info": {}}, "017db932-59b4-407f-97cf-b65f2e71dbe5": {"doc_ids": ["3a8a32f2-cef0-4039-a955-e01736532671"], "extra_info": {}}, "862a067e-ed8d-46e2-b0fe-28933c4eef7f": {"doc_ids": ["987c44f3-a474-470c-be38-d07facc02fdf"], "extra_info": {}}, "dbeed5b2-056c-4c6e-ad34-79e7922deace": {"doc_ids": ["78fa2dfd-fda3-4137-9923-a94f8430f61d"], "extra_info": {}}, "3d525d1a-886d-4dc9-9a4d-6ec76037022b": {"doc_ids": ["5ca786c1-211c-40a5-8f61-8e6e16c7c3e1"], "extra_info": {}}, "bbf0ee24-fcdd-4d29-80cd-fea7d9aff353": {"doc_ids": ["8c717067-da72-44a7-b404-ced3b7e1a260"], "extra_info": {}}, "0ad223bd-3727-4850-8b7b-bc5f297e4a33": {"doc_ids": ["22a48e6f-e991-4b09-a028-9035ca78b528", "a6c01898-9ee1-446d-8bc5-9994f96945f5"], "extra_info": {}}, "673fb36b-60a5-4c40-8152-eb689ce78af1": {"doc_ids": ["561bf132-26fa-453f-870b-797e8806dc79"], "extra_info": {}}, "9c9d0bdd-015d-46ae-93b7-334d31dd2f0c": {"doc_ids": ["93b06f1f-1274-47d8-8043-6836eb97f58e", "52eeecd8-d684-48a4-8bcf-c517b0df1f23"], "extra_info": {}}, "4c0606bc-0d2b-4c50-b562-12fabde55d06": {"doc_ids": ["e90529fe-4586-4d42-9731-b818d4d2d229", "d5305b49-b753-408c-9877-fa6511afbd7e"], "extra_info": {}}, "6bbb132d-5515-4a54-9327-bb19bf8247c2": {"doc_ids": ["2917c38c-4692-4470-800c-7c3027a2ace2", "00150e60-39fe-42f4-9972-31c9e177a573", "2028b1da-53b9-485b-801e-091c456f4a41"], "extra_info": {}}, "89ec3e24-4800-4711-9db5-2d43547026d8": {"doc_ids": ["d91b78d0-2b01-47b8-bcd9-08246b49e731", "55ae615a-8549-42c3-ac66-8c2a13d9485e", "09348b39-ba96-49c8-b1d4-680cab185707"], "extra_info": {}}, "52d70004-1e1b-4512-88f4-bc56af39ea67": {"doc_ids": ["32e7d9e3-1cf2-4ec9-b477-d1b56eb5c330"], "extra_info": {}}, "5865ea89-0a6b-487f-9e07-22fbf696cb6e": {"doc_ids": ["73900e0c-45a6-4d8f-abed-d85f22c1c98b"], "extra_info": {}}, "b0da131e-0e61-4213-a1fc-637c523cbd38": {"doc_ids": ["2280cac8-7338-4b05-9cfa-7ed57fbf59a3", "2152a185-6a71-4ee2-bbd2-99a73ddd5b4a", "38bb1b76-bac9-4783-8c92-5139ad93ceae", "4e28de87-c680-4ac3-9933-27fdc4e991ab", "93efb03a-5e3f-4ed4-9263-9291fa3b79f7", "b3e3c50e-37d1-428e-a7a1-f25a02eabca7", "766ba1ce-19e8-4fd4-8606-62e1791cbc0c", "ba1ad904-77cb-48dd-97d2-f47d89a2667d", "75f06133-9e57-46f2-adf9-ca8182f548ef", "b06896f8-9e7f-4ba7-99e5-17b94ab45d68", "59499569-33f4-4308-9501-2e65a2cebc78"], "extra_info": {}}, "735bf168-9126-4174-ac1b-438970d94674": {"doc_ids": ["bce5f297-f6f3-41d8-a98c-24a3744172ac", "d8d5e533-9eaf-4872-a54f-6001a561c5ec"], "extra_info": {}}, "c0fb0944-4cc0-4a37-b2f8-045ebad6fdbe": {"doc_ids": ["5083c770-1566-4e37-8913-72dab29e1f11", "61966595-32a0-4425-bea6-6801c89f7759", "ed3c91a0-7997-4102-bf5d-e31a1ecf1b60", "34c214bc-397f-441e-b963-7880ce2814d7"], "extra_info": {}}, "07802023-2755-4197-9f0e-97253661fb27": {"doc_ids": ["df737f92-774b-4164-9424-99c25187258f"], "extra_info": {}}, "8ca3ad30-f63f-4fd9-ba96-4c8320e9b8f7": {"doc_ids": ["398985d9-ed0c-4b48-ac5f-87dd636301d9"], "extra_info": {}}, "122f93c7-4a3a-43c8-b7a8-833521da0acd": {"doc_ids": ["5cf91c47-636e-4984-9d97-d444e6b3fc1d"], "extra_info": {}}, "4e83a925-55aa-4378-a95d-40ca8144e809": {"doc_ids": ["1f2e304f-f408-4828-a560-34fde8c210e5"], "extra_info": {}}, "02446440-8c8b-41dc-b35f-09f994b57351": {"doc_ids": ["880ce47a-2f35-4a6b-9249-a2d9a0f21d9e", "acd29a91-ebc8-4b37-af5d-6d5fc32e3146"], "extra_info": {}}, "76edec7a-92b8-4b70-a75e-7ea892a48e3b": {"doc_ids": ["16c5e2c0-ea79-427a-97f5-b245756d5626"], "extra_info": {}}, "2eb6f3b2-feb9-4485-adf7-c2be88b42afa": {"doc_ids": ["55dc4cd9-aaa3-4256-9990-9430b7003a46"], "extra_info": {}}, "dcb76755-3f2c-4c48-8eb8-6b6102a7740a": {"doc_ids": ["513c1963-63ae-4822-94a2-59158ae58326"], "extra_info": {}}, "7f1c46d8-c596-4848-a35c-fca2ee50b974": {"doc_ids": ["3eaaa76c-9103-4e98-b4a3-0c12c315f70f"], "extra_info": {}}, "a94e02c9-b05b-4ba4-9051-5088d414ba55": {"doc_ids": ["a4ccfc6e-496a-4f16-9f07-bb8625b2dbee"], "extra_info": {}}, "35925b98-f7e7-4d87-b562-b7e0105731a8": {"doc_ids": ["9e2dbc1b-30d2-4d87-a363-f963a6c0f183"], "extra_info": {}}, "c4c26dee-fc40-4fe0-87d4-038c28465546": {"doc_ids": ["35871a58-acb5-4fee-86c4-98b4b45a75a4"], "extra_info": {}}, "16069126-531d-471c-a0e0-f418797427b4": {"doc_ids": ["15a95d56-ac7e-40fa-b29d-3ec3b71a0b48"], "extra_info": {}}, "66d0f3cf-5ff9-4b1a-a3a5-9e506653dba9": {"doc_ids": ["ead86ba9-5480-460b-ab61-e7066c03c5d9", "2d1c4bac-3b98-43d7-beb0-e95b26a4df87"], "extra_info": {}}, "2d5b4c52-5e4f-4d8e-8362-53128ac2eaae": {"doc_ids": ["b976a669-8292-44a4-9fa7-31423ada0779"], "extra_info": {}}, "d6d249b1-bca0-4808-9b7c-f22bd731d348": {"doc_ids": ["0ae502ac-65d8-450e-81a8-dbc0509d7b5c", "2fe6d08c-4383-409a-82e3-040b2579afe4"], "extra_info": {}}, "66e61355-0d9d-485e-9b64-23103ad364ee": {"doc_ids": ["bbb46434-6fb9-4272-b9f5-e6e61b82ad90", "bac0c78c-4d56-4424-bd39-0248eb070d82", "f3fac04b-d639-4512-8379-b252313729ed"], "extra_info": {}}, "be1cb307-408b-41ed-bbf1-5ec07174114e": {"doc_ids": ["4591559e-d4b8-4690-9e2c-b05f44527013"], "extra_info": {}}, "608d9f0c-8330-4c34-bb2a-678cc9ef5491": {"doc_ids": ["283f6095-94e3-40a4-bbf9-e2f5c472cae0"], "extra_info": {}}, "d1f11c12-232d-4d11-92c5-ff3f8b69aecb": {"doc_ids": ["cd299b46-2d37-4e6f-bf7f-55df66528c88"], "extra_info": {}}, "42998b3a-0e07-49b9-9c3b-7e92fd3737fc": {"doc_ids": ["b47ca0ce-c409-4770-9a0e-74a458ab4b0e"], "extra_info": {}}, "f42db065-56ff-4ed5-9bc6-afafc1b95217": {"doc_ids": ["d400acbb-951d-4669-93ea-6e1d9caf022b", "63cc5008-689a-4cf3-8022-34c9144c2f7d", "bdd4a900-2c00-4174-840c-0352831d5f9f"], "extra_info": {}}, "7b23acd7-e33a-4c5e-8dbf-504c94849de8": {"doc_ids": ["ef3ad34a-889c-49c8-9f56-ea02ff411fd6"], "extra_info": {}}, "35180dc8-95e1-44f3-8043-e97f652eed45": {"doc_ids": ["44686243-92a9-481f-833d-521bd78d6322"], "extra_info": {}}, "b8eed6e0-8a2f-4afc-8671-7b81b4bad4bf": {"doc_ids": ["e4f4dd0d-24a7-4a48-831d-6e761584e57b"], "extra_info": {}}, "0d2564e3-5ac2-4d48-9c50-858540423f89": {"doc_ids": ["cee3c258-874c-4b17-9a1c-781361f024c0"], "extra_info": {}}, "56adac30-e1fb-4005-aca4-db130f88615b": {"doc_ids": ["f20cd66b-9f52-487e-8b46-6d330004b8d9", "9f01a8d5-aaee-4b6d-8186-168c9bdc7047"], "extra_info": {}}, "50e5c828-fee8-4c12-a4d2-f09b297889a1": {"doc_ids": ["7e1e0ead-92b2-4bf8-a196-24c16c673c82"], "extra_info": {}}, "e54c1fbf-6589-4b29-9e6a-1e0512be5890": {"doc_ids": ["007c8ee9-b90c-42e1-9fc6-3808d6c9b41f"], "extra_info": {}}, "0881c52d-ac30-486d-b81b-ccc63a26eadd": {"doc_ids": ["36308075-d9b7-4383-bec9-abbf2960df42"], "extra_info": {}}, "328dde78-be5a-422c-8700-31a230c24203": {"doc_ids": ["97f86b0c-2a26-4f14-8bec-72970b3d470d"], "extra_info": {}}, "6af5b53a-d0e6-4e2d-9270-944522990bfc": {"doc_ids": ["9f4627e2-fa2f-4e1b-b0cf-dc5db7f3297d"], "extra_info": {}}, "51d8b98f-e792-482a-86ba-03c99a2fcd8c": {"doc_ids": ["8f16a91d-0a2a-4741-9682-a0531dfa9d38", "ad9ae60c-fcf4-4fd2-b02f-a49f0d65ef8e"], "extra_info": {}}, "b32529a5-5c1a-486f-bd7a-dd00eb11475f": {"doc_ids": ["8eb90ee4-7f49-4798-a60c-730945f61c0a", "6c0336b2-032c-40fb-b110-5dd9ed7e3c4c"], "extra_info": {}}, "ca42a91d-8d2b-4ba8-adc2-7e775423b2c7": {"doc_ids": ["b3607e79-5c0c-4d19-800d-790103bda024"], "extra_info": {}}, "8e645981-817a-4859-8849-20f8ea3bf958": {"doc_ids": ["71b03761-89ee-40a5-aa05-f28b8516b765"], "extra_info": {}}, "9718fd86-7058-4bdf-99e3-09bfcd26e1a2": {"doc_ids": ["09d32dac-5624-4c8c-bb07-c49e3f0a5b34", "9593c827-ae40-40d9-9ab8-d8cdeea3d28a"], "extra_info": {}}, "6e4f9a52-6011-4ca4-92b7-43af1a7b754b": {"doc_ids": ["2395ae92-7848-429d-8f93-87b509415b06"], "extra_info": {}}, "d829dba7-f334-4fde-beb2-bf5de44e4a87": {"doc_ids": ["3f6017f3-156a-4815-869c-1c295abb5f08", "40dfb3eb-ac61-4f72-a3a3-644d34d12e0e"], "extra_info": {}}, "9b6a7482-083b-4906-b57f-dc881a39b8eb": {"doc_ids": ["3c0971a6-6312-4bf2-b6cc-43b432594c0b"], "extra_info": {}}, "d4c65170-e9bc-4019-a6ec-21b87efd2e44": {"doc_ids": ["0499af6a-be85-4661-9db9-3bf7cd698241"], "extra_info": {}}, "e81d697f-11e3-4d9a-b266-1349dbb12fbd": {"doc_ids": ["d7af722a-d0dc-49fa-9622-651e4fb9903e"], "extra_info": {}}, "f0a675c1-1e19-4b33-a4e2-2b4981d09b70": {"doc_ids": ["89224f74-877a-4267-81f1-2e28e1a1122a"], "extra_info": {}}, "498256a8-a679-4d3b-9487-0b94401fce41": {"doc_ids": ["d14190c0-d698-4641-a587-0fe4c46b3222"], "extra_info": {}}, "a24c5a8a-eedb-4c40-9a4a-52f761e50d72": {"doc_ids": ["92a134ad-857b-476a-9201-275cecdb8993", "7adb4dad-97d0-4710-84a6-e6d0ed00475f"], "extra_info": {}}, "8634b0bd-e4a9-43f9-8535-19526f8fe9f4": {"doc_ids": ["42f947b8-1754-4fbb-86cc-f4553372ccab"], "extra_info": {}}, "d6caec65-9148-4483-bb89-e8096c8e5226": {"doc_ids": ["e2c2ef31-6f78-402f-85b9-59ad79478874"], "extra_info": {}}, "cffe936e-711c-4abe-b9a7-c10bf63a6a5c": {"doc_ids": ["c9e51bc7-c2fc-4248-81be-0579aa6fc945"], "extra_info": {}}, "4c1c9c97-efec-43e9-b671-6f754bcc5a8d": {"doc_ids": ["4d3fd578-b72d-402e-963a-9d9ddb774e24"], "extra_info": {}}, "2b95165a-646a-4656-b7f6-d1da44d87678": {"doc_ids": ["53e425fb-fc2d-42e5-b0ae-f3fa8e6fc5b0"], "extra_info": {}}, "7bbca3ab-aaed-4e41-836d-278a8e5b0689": {"doc_ids": ["82358acd-1890-4a80-a60f-39fa26d8bae2"], "extra_info": {}}, "9ffb8c30-4c8f-4e6a-8fe1-adb9640da2c4": {"doc_ids": ["2c8a6747-e58b-475e-94de-73835e9c3e13"], "extra_info": {}}, "3663fede-2101-4c4d-9ba7-4b1dfef452e6": {"doc_ids": ["c3303e27-d577-4c55-8649-4f7ba78a2a42"], "extra_info": {}}, "4ac79bc9-3cbd-4930-8b8f-500f8f742b68": {"doc_ids": ["a5648aa4-c706-4225-8899-8a1e62bcfbc9", "a2e76eab-6ea7-44b7-85f2-74572b7972b8"], "extra_info": {}}, "335b7063-7776-452b-89a6-cbd17640c4ea": {"doc_ids": ["32a616d9-5348-4414-8ce3-5980e4827766"], "extra_info": {}}, "c3185488-af73-454f-9884-78a2d670d97e": {"doc_ids": ["433a6444-78b9-4079-a176-6657ff564d67"], "extra_info": {}}, "71e22586-52aa-4ffc-9294-a2886de9420a": {"doc_ids": ["d24b35e2-9016-4871-aa36-9932c8043fcc", "61e17edb-6c19-4778-be4c-abc53816b6e9"], "extra_info": {}}, "9fa50a59-93e9-450c-921f-6e10ac70743b": {"doc_ids": ["75c2f334-7cbe-4775-8e23-bf4e1330c833"], "extra_info": {}}, "afd566a7-a110-4eea-981c-ae9a502183bc": {"doc_ids": ["6637d344-fbef-4478-87aa-0daa97af4cdf"], "extra_info": {}}, "47077349-6f5e-4ef8-9ab7-0c9232528f75": {"doc_ids": ["b37127c2-7b5a-410a-b072-6fae7db7d775"], "extra_info": {}}, "d2898402-0758-4ae2-a111-d4210f1d55d7": {"doc_ids": ["41aa21e9-fbe6-4e30-88d0-103599d9b806"], "extra_info": {}}, "4598e687-3e46-402f-af33-555c46198cf8": {"doc_ids": ["286a5d9e-8c78-4887-824a-ea58afe42e94"], "extra_info": {}}, "c0e1d2cd-8435-46b3-980b-7f55e7344d3b": {"doc_ids": ["5f0d489a-fbb5-4abd-93ac-f0d1deaec11c"], "extra_info": {}}, "90707f2c-11b6-4e7a-aef8-9096eb6db2b2": {"doc_ids": ["354ed93c-dbc4-4fc9-bf0f-dce1007a3c94"], "extra_info": {}}, "4d059e42-d4f6-482c-b043-f1975d856e96": {"doc_ids": ["f42ada98-81bd-41b1-84d9-a29ec0f428d8"], "extra_info": {}}, "f5cc379f-94f8-484d-80fb-accfe34143dc": {"doc_ids": ["a6b669d8-8d75-40a7-b657-88d0f3e34da7"], "extra_info": {}}, "6f28ba4c-3389-4422-a681-46ee6a85328e": {"doc_ids": ["d7927e0f-e3ab-4871-9c06-99309a2ede93"], "extra_info": {}}, "8cbfa767-a894-48a4-b9a2-a1d984d8b465": {"doc_ids": ["a311859c-1de4-4afd-8a48-fd5c8b69ced3"], "extra_info": {}}, "7521c9d7-6759-47ef-a62a-76aa91f83931": {"doc_ids": ["63a55fe4-f155-4ada-a387-1d6a7af9a1be", "afb73ac9-c63b-4961-ba2f-66c889fbec1a", "2396d0fe-bdfc-440b-91ad-2dc3c8afd843"], "extra_info": {}}, "fd357d15-6e69-47bc-8a3c-9076059ca1aa": {"doc_ids": ["d74dea6b-0288-4026-8088-2fe78e893e70"], "extra_info": {}}, "39f75cde-83ff-4fd0-85c6-9cb2f4dec03b": {"doc_ids": ["7f502ac9-71cd-4c7f-a917-967396de942d"], "extra_info": {}}, "a337ee94-e861-46c6-a977-4b1d27207607": {"doc_ids": ["c102ca41-67b1-4fbc-b8ba-a7bc353bb4ce"], "extra_info": {}}, "b12d04ab-66f2-47c3-9df0-b4e3fd006ea8": {"doc_ids": ["bc17cdb9-0dba-4e5b-9e0b-bc06f2b175d1", "aeb573f6-5f1a-425e-bad5-34c4ea637293", "96a4fa6b-8f08-4ece-95d9-89c085259679", "9b20e937-c179-4e11-9d06-bc9a72e7ce7b", "a7eb74e6-5e52-4f72-a3ca-012bbd68774a", "7c33e08c-d449-4277-87ca-9aa177e2d592"], "extra_info": {}}, "9a52ae33-d8c2-4345-971c-e027d78d6572": {"doc_ids": ["a8a8fe34-2aee-4354-8e75-378e1956169e"], "extra_info": {}}, "9083eb9c-0989-4bb2-b3fa-9f02fbc6acf2": {"doc_ids": ["bdf60020-de77-4c6a-af15-91135247ce28"], "extra_info": {}}, "82a26f48-f338-46e1-ab78-77aba2d98c7b": {"doc_ids": ["c2684062-76f8-44b5-b323-85004de742f0"], "extra_info": {}}, "aec303e5-bf22-4867-87a2-fff16eb9fabf": {"doc_ids": ["6707f1a7-2a0d-47cb-b471-fb984b6fd7e6"], "extra_info": {}}, "7d1edffe-b7b7-49c1-8227-29ad315005f0": {"doc_ids": ["9f76359e-4bc1-449a-98cb-48d1e0bdad86"], "extra_info": {}}, "65e13cc7-4604-47d7-ab3c-05b67bd57050": {"doc_ids": ["ecbbe97f-710c-41e3-8161-fd8071bf5058", "53b51d92-eaac-4483-9af7-a2076dc568d3"], "extra_info": {}}, "45ca20d3-9a52-4ad4-b21b-b0e0ea6291de": {"doc_ids": ["9ea45f58-511b-48ff-8823-3bc28bf5dac6"], "extra_info": {}}, "f50ba7be-16a9-4851-93b9-37a240bb19b5": {"doc_ids": ["d137ce59-1287-4a4a-baaf-3b0985c30a7d", "8fb2b68f-5aef-498e-9981-7131cc7e7d85", "964c7418-3e05-4905-836b-5f75ec97e094"], "extra_info": {}}, "9c03e6f4-822d-4692-bcfa-827aed8137db": {"doc_ids": ["dce81be4-2e37-46a9-9e07-fd447f198e6f", "6537fa30-cedc-4d52-852a-85c2d9e0d688"], "extra_info": {}}, "2211243b-44b5-452a-9bf0-22f8cac74ebd": {"doc_ids": ["ae340dc6-c9ae-4043-8a60-0888eb042624", "bca4b3a9-9999-44e2-bbb8-b48a259d6ed4", "ac9a9161-7ac9-4e63-9c02-cd6b7495e625"], "extra_info": {}}, "22633822-2951-47ae-9575-1192d148f7a9": {"doc_ids": ["3814df53-62a0-4b8e-b5d8-fc48b5a07b57"], "extra_info": {}}, "5c2d91c5-1ce1-4c95-8ef4-40fa7a5d4e96": {"doc_ids": ["122143d9-0b23-4b9b-acea-4ba577533585"], "extra_info": {}}, "bb6207c6-4b32-42e2-9b85-da07c23227ed": {"doc_ids": ["16244553-8122-45fa-94ad-465ad53e9f7f", "c0b17737-b3cb-4d11-bd68-cbbbc1e1096f"], "extra_info": {}}, "0f27e216-4b02-481c-ae19-6c8c507dfaf1": {"doc_ids": ["bc8f669f-1ab5-4714-8c0c-49986b7d6f12"], "extra_info": {}}, "ed305d92-9308-403e-af76-0310bb7dde19": {"doc_ids": ["4f8b3054-d62e-4171-9bb1-d27af1e797d3", "2f181e22-83c9-467c-81f6-42d2da9fce5c"], "extra_info": {}}, "fee2e630-636b-4de5-a8f1-4b1bbf3f3cf6": {"doc_ids": ["df5376b4-93bf-411d-a498-9a6baee29e57"], "extra_info": {}}, "a7afd14d-1708-4eb5-910a-96fd24197561": {"doc_ids": ["3044b959-d29b-47f4-9e9e-314f2f57a9ac"], "extra_info": {}}, "1be9f85c-a1e4-4f19-9d36-1b88a1d16631": {"doc_ids": ["6333d5e7-ecdc-402d-b026-fcc5a24602d9", "30c64545-ba0e-46f4-8ded-b95248e04249"], "extra_info": {}}, "cc285eff-c1d3-4e2f-9186-934d3da74e10": {"doc_ids": ["de233484-494c-4dd2-8a03-82d1d89490e6"], "extra_info": {}}, "9bf621bb-1287-4ef9-884a-944fde799720": {"doc_ids": ["f474ade8-79d3-4652-9a1e-4c687f281018"], "extra_info": {}}, "7d47b796-d69f-4a87-8234-d0629d1155fa": {"doc_ids": ["d6c15559-e4da-4864-9912-51d36db56413"], "extra_info": {}}, "a7276d79-e83e-446a-947a-c15072631047": {"doc_ids": ["cd2c3088-e9af-4d1b-ad34-84c07a9f5530"], "extra_info": {}}, "c78bd177-fa9b-4ece-be84-46c77a169b27": {"doc_ids": ["f49ea804-b81c-4edc-9c13-279f048ee088"], "extra_info": {}}, "4bef2b94-8207-452b-98a1-5e0c83bd6d1d": {"doc_ids": ["b85d199c-4ca0-4adb-a1e1-b552af5c5dba", "d5f07dbc-b4bd-48c9-ba59-8d2c55c1a7c4", "c8bff656-39c7-4e0a-a2c6-59f73a147312", "b84629d5-5740-41c0-aee5-eecc14f212bf", "896e10a6-42a2-407d-b5ff-fde999481d55", "75315c01-ac2c-4e30-87c7-907724f4f852", "e8e0557e-aa9f-419c-8dd6-ec0cf68ef837"], "extra_info": {}}, "05c3801a-f835-48a3-9009-86e66e22f8b4": {"doc_ids": ["aa3fa935-0f20-42fa-ba9a-a9644e44b756", "37ac3a04-b249-46e0-9cd3-799294fc0d4e"], "extra_info": {}}, "b74ff1b5-e0aa-4d84-a378-14040e11cef9": {"doc_ids": ["4e90bc47-e1b4-4dce-a6eb-48f943b97270"], "extra_info": {}}, "359369b4-74e0-4d30-ba12-05010a5345d0": {"doc_ids": ["b0e08832-d657-452c-8a33-082a8aeaad82"], "extra_info": {}}, "41be2939-14be-4f5b-a6dd-d1f2bd452c7c": {"doc_ids": ["b6c69e6d-cf7d-4065-abad-8d54b2775a0a", "e4e87621-8ada-41ab-8ace-9cb59048ce1e", "f52f2b07-cc7d-4cc8-9127-a57db09ba910"], "extra_info": {}}, "440a5b63-c639-4618-8663-1516f7107a5e": {"doc_ids": ["fe3b6026-e45f-4e89-acef-46e8ed5d77c8"], "extra_info": {}}, "dae3c2bc-3288-4783-86bc-760f2ae6f945": {"doc_ids": ["03f5a904-b699-4542-9bfd-846f0a5f6142"], "extra_info": {}}, "3cdd291c-f8cb-4158-8bd7-6bd73ed31e4e": {"doc_ids": ["d8ccec8a-565c-4f65-acd0-863cbed22ad3"], "extra_info": {}}, "ac743f89-f3de-4125-a677-360f283b5aba": {"doc_ids": ["8e9a80b0-6c72-4787-9673-a14270ec4731"], "extra_info": {}}, "9cfbcb28-6854-4c16-b18c-ac8916a96193": {"doc_ids": ["1c2c8921-9e62-4a0e-8c54-bd5c3bd56180"], "extra_info": {}}, "1f693fec-5edb-47b2-994d-96128d9bd262": {"doc_ids": ["b406262a-39f9-4eda-a2f0-77569235a484"], "extra_info": {}}, "50311660-e2f9-4712-a8bf-da5f413c2135": {"doc_ids": ["43a53b8e-963f-48f1-913c-f4e1b9a0fca1"], "extra_info": {}}, "1c52626d-39e4-43c7-90e3-839322b4ee6a": {"doc_ids": ["4458cc67-a0a6-49d8-9783-154e76a2094c"], "extra_info": {}}, "22a08ddc-ea62-47a8-add2-316a99312fdf": {"doc_ids": ["e8089dba-c086-40c5-952e-2b6c598f3d7b"], "extra_info": {}}, "af2c3795-d140-4c41-a8ea-f8a7dc17cf5a": {"doc_ids": ["311e7959-b9ae-4bbb-9348-f8ffcfc6e7ac"], "extra_info": {}}, "c12d7f98-c884-49b1-b2e0-4c0b18b39c71": {"doc_ids": ["ce0acce8-24b0-4e3c-a591-f4240baefc60"], "extra_info": {}}, "70d92ac1-82f8-4108-a8d0-8d0901b1f9ae": {"doc_ids": ["3969dfe4-7b62-4fc2-87bc-1f672b61800c", "ec59a3fa-d1f0-4676-b267-ee72e21a8e84"], "extra_info": {}}, "256a90e7-1492-46b4-9fe1-db7e92796fb1": {"doc_ids": ["6e198b31-05f9-4b2a-865f-5e633a420058", "583be6be-4f38-4234-a02e-15de6dcc94ca", "c836bc35-3f36-4e91-9b15-80427f159d1d", "8b546ea0-e82a-4162-8f9c-693888cfdd31", "d35a3985-bdf6-467a-854d-e5a9fb22e1ea", "1b917eec-49cc-43a2-a249-a045a1eac0e7"], "extra_info": {}}, "31550f3e-33ab-43ce-9f7f-9a830a1596d6": {"doc_ids": ["59ef8bf7-33b0-40ff-8d5c-e6aebf14a23e"], "extra_info": {}}, "c16a1353-52d0-44bb-b8e1-b8fafd5cbad9": {"doc_ids": ["9e45b1fe-a71b-4e62-bdd4-f995c1944c07"], "extra_info": {}}, "161bbe4d-cbe8-4289-9ce4-6c08b262eeaa": {"doc_ids": ["09f055ae-0319-40b9-9e32-fed709a17920"], "extra_info": {}}, "08720dee-6c13-47bb-874e-c8dab90a8963": {"doc_ids": ["313079e2-cbe8-4b08-bd3b-0cc60846a8db"], "extra_info": {}}, "0e6157c4-b777-4911-bcfb-0756ef7aa163": {"doc_ids": ["eacae598-8adf-4695-b753-33e13398dfba", "0992bc16-09f0-4147-967a-fb9071d0c564", "aad08716-4d9d-4e8e-b993-df2ab0ee2b82", "74c3aac2-7711-4e8e-a610-a22a40869c9f", "f47ed1a9-d036-4e76-8928-5ca3cfd975d7", "a55f13a0-1417-4af9-ab69-7346d95c500e", "79429f11-1e58-451a-870e-d02b164f82ce", "a3107513-4df1-499f-bbb1-3e7db5dea53c", "7f18c61a-78bc-40ab-ab5d-f5617e9f51f5"], "extra_info": {}}, "eee3412c-3791-4d6a-a064-ff044afbac98": {"doc_ids": ["757ebc42-76e2-4fdb-961e-fa38b97a211e", "7ae188ff-7f6e-4e18-98bb-ff6f4fef3450", "7b239a19-a599-4997-b943-4e59c017d776"], "extra_info": {}}, "85f62711-490d-4e0f-8d5d-167e868e706f": {"doc_ids": ["5290a4ac-7b6e-41eb-9cf7-4cab6b54fa91", "77567b34-6503-40b6-9ffe-327aae8701ef", "c87d977f-5ba1-4c1f-a7f1-21c821cb0a31"], "extra_info": {}}, "3f44d0bb-2268-47a7-b8e2-678d926a89e7": {"doc_ids": ["44beb03c-341e-4f4e-beb1-a077e8ccb039"], "extra_info": {}}, "2a6017ca-3554-41a9-bea1-b2d676d7bbb2": {"doc_ids": ["36cfc8f7-accb-4680-8c5a-f451c9e8ee32"], "extra_info": {}}, "4c59e0fd-943c-48bf-98a6-3652cf72a05f": {"doc_ids": ["10ede6ce-d5b0-4477-a584-54af35558a27"], "extra_info": {}}, "d901b462-1fbf-455a-9537-262368e392d4": {"doc_ids": ["21e5b78d-853d-4f67-8513-aeba11b3b089"], "extra_info": {}}, "02af9c40-b042-433f-ac24-a325a70e1f36": {"doc_ids": ["d9355869-8188-479f-ba91-b3a849f3feb0", "6a9d8116-d789-4016-97de-a7a5ced7a13e"], "extra_info": {}}, "01962dab-dd21-48f0-9653-b6ca2769d285": {"doc_ids": ["4df3708e-e1c6-4c96-a61b-eed3d27bf09c"], "extra_info": {}}, "0fa9a2b2-30a9-4371-bd74-3e5e72c60feb": {"doc_ids": ["5a1a4e79-6334-4c46-8aa8-230f686dcf79"], "extra_info": {}}, "1c037a2d-1643-40fa-9b6c-e969b225bbf8": {"doc_ids": ["747c4740-e247-466c-bc1f-aeb8c73b0bc4"], "extra_info": {}}, "1557277a-62cc-42cb-ad65-9b557391f8f8": {"doc_ids": ["5878eca1-8dd7-4e61-a735-da45eae7e4b3"], "extra_info": {}}, "190afaa3-e863-4aa3-a7c9-a132ac68873f": {"doc_ids": ["f60374b7-e6f7-403e-85d9-f0117111a926"], "extra_info": {}}, "8ed2d930-3c06-47af-9393-b21d93d3bf04": {"doc_ids": ["30952e72-4860-413a-a6ca-6404f162f822", "0df00af9-eaee-4c6c-bd68-b8441fc0c96e", "8d8502f8-f856-4db1-9dc4-32df0e81ca31"], "extra_info": {}}, "ca74daf6-d95a-4832-be3e-ad2cb1653393": {"doc_ids": ["1ccc3eb6-8f51-428e-8638-3cbf7246e29a", "6f82bdb3-0002-433f-b688-aee378e6a17c", "86055967-d5a5-46dc-b6cc-478838cbe4a6", "3fa6178e-1245-4378-b45f-04c5053250a6"], "extra_info": {}}, "c380a3d1-633d-4218-940a-bba23769ed86": {"doc_ids": ["84e683a4-26c2-4af4-98c7-1f7d7efaba25"], "extra_info": {}}, "ef278c6a-dd99-4ad7-81fa-16f396db38ab": {"doc_ids": ["3c810d7c-7c49-4e31-a434-8f4f562d4d6d", "a8d13bc5-8498-417a-b45a-c8801c220b06", "fb777cd5-2514-4217-b8af-ef41525121f1", "69d0ec3a-114b-41ca-a362-3bd0918be710", "b51fd1e5-ae4d-45ed-9357-b91ad9a532d3"], "extra_info": {}}, "7df98990-3765-4a07-87e1-1531ae9200da": {"doc_ids": ["a04ee503-6034-49ce-834f-f82e3a9946e2"], "extra_info": {}}, "a3305451-4b8f-4934-a041-affea476fdc4": {"doc_ids": ["ee39ed17-9cdb-4c9c-b256-1bacc9e86b03"], "extra_info": {}}, "f0d773b1-8620-45e2-826e-be237ae7d0fe": {"doc_ids": ["58ad1cec-7e26-4634-9e99-bcea093f36ee", "c52f800e-9b4d-42db-a310-3fe88ff2e778"], "extra_info": {}}, "9961e50b-c328-40b3-b0bc-d749de739153": {"doc_ids": ["93df3978-bf3e-4ca2-9d32-f60058b37e6f"], "extra_info": {}}, "a720d204-8b5e-408c-8d9c-d031c4e867a5": {"doc_ids": ["1efdddff-8acd-42fd-9447-b27d95039767", "0b376168-1a32-49ae-9b11-22c8d54a5b48", "a5e10307-f5df-44ea-a7b3-29fab8307477", "aa3451a6-1e97-4532-ab28-c92ad4881d82"], "extra_info": {}}, "855ae1d1-ac7e-4c73-923f-5b773fa837dc": {"doc_ids": ["f61634a6-585b-4616-b38f-929497e9d44c"], "extra_info": {}}, "6a99ce7c-a48c-4fc6-8a53-c3d09aa7be01": {"doc_ids": ["59b661fc-7b42-4837-8be6-bfb6a94471f4"], "extra_info": {}}, "1247ba68-4d2d-4184-8f8b-eff0cc551aaf": {"doc_ids": ["9c149185-cc02-4ec7-8766-19350ab1aff0"], "extra_info": {}}, "7499da42-0943-43bf-b821-3ddcdd9cdfc2": {"doc_ids": ["f34b606e-84f2-4ad1-b1d7-30363ad8948c", "ebce6e2e-da3c-48f9-94a2-32672b56d7e4", "3006f7ae-77e1-43f2-b8c6-28fa0e7bbb46", "4e2a00cd-3b40-4934-a4d9-ebe85fe03235"], "extra_info": {}}, "6992e214-471e-4752-bf56-63c3d3143eb8": {"doc_ids": ["0fa89834-5a93-4e98-8204-99da953af5ae"], "extra_info": {}}, "22586eaa-3ea8-484e-8d59-6270bdf1d36a": {"doc_ids": ["3b366dd3-16f8-4505-9fde-31a7428219ba"], "extra_info": {}}, "6aa86a7d-9968-4eda-90b9-0ba1c9fb3c2b": {"doc_ids": ["215e7bef-f1b1-4977-be95-91a2ebb27bd1"], "extra_info": {}}, "93aebee2-17f9-4135-ac31-07138482737c": {"doc_ids": ["401e04d1-039e-4fc0-86d4-a9260e67f4c7", "b0ed5bba-5dfa-4a43-9142-24dcc62ed67d"], "extra_info": {}}, "d931a88f-6e21-4528-8676-46fa98e95b9b": {"doc_ids": ["638ba149-6239-45ef-85a4-f3665b1c36ce", "15db7b38-2a9c-40f6-9f5f-80819271e42d", "1fed45a6-83e6-4c77-a75e-ead7c91d4766", "6309964c-c094-4688-9552-1ca97439e588", "06d252cb-34c7-414c-a7c2-44364dc6c59c"], "extra_info": {}}, "8ec6d3b2-0708-47ec-8a1e-cc2cebad9d30": {"doc_ids": ["0438e4ff-9fa8-424d-a2cd-ffbcb192d005"], "extra_info": {}}, "a86fdcff-98e5-425a-bf0e-0b2c58c08848": {"doc_ids": ["d187bf28-9762-49aa-a240-3b0d67eca27e"], "extra_info": {}}, "2c6d9045-7bfb-4af6-8784-b44ef7dfdbc0": {"doc_ids": ["18b4f325-fca0-466e-ae67-1737070e9a43"], "extra_info": {}}, "97e1c587-8e14-4ef7-9d60-0f7f75f162b1": {"doc_ids": ["a41bf46e-5368-4517-917a-5ca82f78ad11"], "extra_info": {}}, "3eef13e9-eb6c-4807-bf82-b336d290311e": {"doc_ids": ["db4385a9-2d32-44dd-a819-41c1f4b11f14"], "extra_info": {}}, "3ee7e499-0038-42e4-87ed-0f4f26479bef": {"doc_ids": ["c9969dcc-0cd3-4cbe-9a0b-2476d0a448c0"], "extra_info": {}}, "16362345-c3b1-4967-ad23-cf9c2f62bb42": {"doc_ids": ["05173fa6-1961-48ec-b958-3755d2b06dfa"], "extra_info": {}}, "d6cacf12-9c6c-418c-b193-276197f63716": {"doc_ids": ["d306aaa9-5ed9-464c-814c-13cb60cf9b05"], "extra_info": {}}, "1b179977-1acb-4a75-98d6-e25b919d590b": {"doc_ids": ["02134d43-c540-429f-af7f-737ab56f8824", "2fce8277-cbc2-47e1-9200-b9c35ef6170d"], "extra_info": {}}, "948f44bb-9dca-4a2e-a9cb-441ab6dbf7a4": {"doc_ids": ["c88dcc84-1fc3-491e-a318-b3e3a730c1ff"], "extra_info": {}}, "c0396be3-5c9c-48cb-9a6d-232504d68760": {"doc_ids": ["7d43579c-faad-4b25-b482-37199e6e0fb6"], "extra_info": {}}, "6cd7999c-a22f-4b66-934e-3a55df869ad6": {"doc_ids": ["79f22da6-55bd-4779-97e8-149b6c62b39d"], "extra_info": {}}, "a2470cfa-30cc-4fbe-8229-568ba6b1fa4c": {"doc_ids": ["18c193f3-15c9-4efa-9f45-94578bb2236a"], "extra_info": {}}, "6d8e9914-dbe9-4712-bc91-b963609ab752": {"doc_ids": ["181773aa-2718-4e08-8e7e-5c3f15e0cdae", "5d35c348-c827-4d40-9a89-373d23e5a727"], "extra_info": {}}, "2aac128c-fe5b-4ccd-98b9-c78f40dec500": {"doc_ids": ["b60fc15d-5062-4866-ac15-c262ef81d3b8", "6c98a2c2-e6c6-43cf-9b7f-8f49f3088572"], "extra_info": {}}, "6fc356bf-bb76-4f35-b3fe-51ec2cc8608b": {"doc_ids": ["23fa3ffc-6239-4eb9-bfa2-dfa12da8d59a"], "extra_info": {}}, "33ed1d90-38d5-4f4c-98fd-9544e23ad651": {"doc_ids": ["37fa4639-8e15-4ce1-b839-358c7d68cca8"], "extra_info": {}}, "b2891faa-4c8d-4ea7-b703-205e30eba003": {"doc_ids": ["71664224-91e2-4536-8190-64a601c386b3"], "extra_info": {}}, "ae018603-54e0-476f-96d9-6a1f9e02e1b4": {"doc_ids": ["bb30c329-ff71-4344-96da-13d3fe073dfb", "066a9cfd-e1af-448e-a48d-06be18cf3882"], "extra_info": {}}, "3f9f5894-60ab-4eab-a06d-374d870d35a8": {"doc_ids": ["eeb008ed-da15-4129-973f-233b52bb579a"], "extra_info": {}}, "4e11668a-f651-4175-97f0-60ac4ba12c45": {"doc_ids": ["d863ef37-1a06-4bfd-a032-96c1175e3c91"], "extra_info": {}}, "da650e2f-8f7a-4fee-892a-8f8d3ef30ce7": {"doc_ids": ["f875f121-3ade-4f5d-a20c-d53952072431"], "extra_info": {}}, "e4ed39b9-a2eb-47eb-bc4f-c0bb6ff9356a": {"doc_ids": ["448ca447-c83d-4c92-913f-75fbf25089f2"], "extra_info": {}}, "f4f8b74f-197d-4844-a837-e12b5b2635cd": {"doc_ids": ["7b92f493-2006-4e2c-82bc-2b924f6def6a"], "extra_info": {}}, "65042908-4328-43fb-bda2-95eff76438fd": {"doc_ids": ["cadf3bc9-cf31-4026-9535-bb1b477a7dd1"], "extra_info": {}}, "d8d35861-d6a7-4567-84a4-ec7b3f4d24e8": {"doc_ids": ["336ea24a-b915-431f-95d2-cb924fb19198"], "extra_info": {}}, "f5ccf084-2d0f-4597-a824-4515a303f172": {"doc_ids": ["717232eb-77de-4ae3-8776-2b45f48df2c5", "1ae6912c-7d80-4ac3-9bb8-50876b12b95c"], "extra_info": {}}, "ff835e5b-9684-4a39-9b52-b0e698ce8eac": {"doc_ids": ["fc0b1161-83c0-47d5-b885-8635993105b5"], "extra_info": {}}, "e076e46b-e267-4222-ba81-432160b97335": {"doc_ids": ["36163756-e56b-4bd4-af24-ffbf51b0642d", "483a7573-810c-4bb0-bed4-dac31d05c186"], "extra_info": {}}, "8d95b184-7a57-49ea-9f97-0078434cbb3a": {"doc_ids": ["701bb856-5753-4dd2-b143-ea53ec4d0264", "22f00626-d5d7-4e22-b391-756b11dd6058"], "extra_info": {}}, "5a1eb26d-5e27-4361-bf52-8f7632cc278f": {"doc_ids": ["986bcf5a-42bb-4d94-8961-263af023c5e3"], "extra_info": {}}, "90052333-1eef-4abb-bc36-93f2d90bb153": {"doc_ids": ["1a4aab45-0f42-43cc-a4c5-2d09c6d924db"], "extra_info": {}}, "c4c57fc5-89e2-4169-9240-4622f377a3d6": {"doc_ids": ["eb71eff4-f9d8-40b3-bd30-ac641a328c6e"], "extra_info": {}}, "d4855309-2bce-4c87-aa16-06c788af0e60": {"doc_ids": ["f207701a-6ba2-47d6-b5ea-d6cfbd4b1ebd", "489fb18e-b4b1-454c-a67d-7d7fb59740fb"], "extra_info": {}}, "f6ee9b93-564a-4d76-bff9-b401196b8cc6": {"doc_ids": ["7a819d31-6b54-493f-95a0-f448d9ce1fd6", "adba7a17-5f9c-4fc4-9443-5b8a7db8f4bf"], "extra_info": {}}, "3160e92b-bacc-473a-bce1-834307053fd1": {"doc_ids": ["f1db27d0-7bdd-45c8-b176-2d67b88afa16"], "extra_info": {}}, "73c47245-f800-4b9f-ba2e-2505a918834b": {"doc_ids": ["c3762752-511f-49dc-9786-9f8971fc3261"], "extra_info": {}}, "a0d2dacd-1a29-445e-b976-b1ea94046b05": {"doc_ids": ["aa336a1e-7b2b-4f21-b5ee-ea82fa6256b7"], "extra_info": {}}, "fdaa8371-c635-4ba0-93e8-44ce88dec4d5": {"doc_ids": ["46d90144-2268-4281-a199-62c4808e7d89", "db5fc5e9-2c47-40f8-ae4f-ceaffdc356f2"], "extra_info": {}}, "9b7c0b02-7130-4b04-837a-dff39d1ce218": {"doc_ids": ["9f1f5d14-7989-458b-9cd6-27cbaa641a0e"], "extra_info": {}}, "662b19ef-7a43-4585-98ba-b25073dfb6c4": {"doc_ids": ["08bafc7d-0800-43d2-90be-6621c509b0a0"], "extra_info": {}}, "0b9ec1dc-863a-45b5-b3d8-6d42ae491643": {"doc_ids": ["1927e4b0-fccb-4800-9ff5-d021a266544c"], "extra_info": {}}, "78f3e08f-5050-4fc7-ac86-8800ea2339b9": {"doc_ids": ["679a572e-1bfb-4b1b-8ae1-9653f51c7681"], "extra_info": {}}, "fdc92f9d-cf67-46c4-9424-3ddf3d09168e": {"doc_ids": ["8885b49d-1484-43c9-9ebc-71c5b9fbb1ab", "f1ed8dbc-273f-4019-97a5-875834980b7a"], "extra_info": {}}, "9307e053-4e56-496f-80ff-61de31159145": {"doc_ids": ["4aade879-ed3e-43be-9a84-ea172767c765"], "extra_info": {}}, "57425ccf-afb6-472e-8749-93bf84d1bd04": {"doc_ids": ["7e542d59-9a36-40c6-85d7-e6a05758c108"], "extra_info": {}}, "2d5375c3-8565-4c20-95b4-0d7a357d6a1b": {"doc_ids": ["94d834a4-bcfe-4413-ae7f-eccba3cdd30d"], "extra_info": {}}, "5abdbc24-8c45-463b-bd90-72ce5c7ed801": {"doc_ids": ["992eda31-2b7e-4ca3-9621-ee11f13aec9f"], "extra_info": {}}, "cda3d6ce-4a08-4381-b89a-54cb8073e206": {"doc_ids": ["5d1c5802-ddbf-4bef-9d55-d8699830bb6c"], "extra_info": {}}, "c8e64605-0526-446a-8b29-d359d8b7ad16": {"doc_ids": ["ab9de956-5e53-4adf-8a98-864569b75922", "91db5b7f-c830-4eda-8931-d0dae5774a38"], "extra_info": {}}, "2b74c845-f2eb-4823-98ca-62f1cf7a0229": {"doc_ids": ["3191bc0d-8c6d-4f8b-b345-edaaddfa8a61"], "extra_info": {}}, "a5892a70-c3b5-4131-b3e8-3e4ea6b1c8d2": {"doc_ids": ["e438b15c-fd86-45b3-8637-09895c26345a"], "extra_info": {}}, "15301fe8-6386-4313-91c0-e0e3766c0da3": {"doc_ids": ["3bb7a5f5-7dc8-489e-a283-b12ebb04408a"], "extra_info": {}}, "2ebf010e-dc5c-433a-b882-f8de385a9695": {"doc_ids": ["aec84650-5157-41ad-8f74-764067e6cfe6"], "extra_info": {}}, "fb8b32ec-a884-4ff7-ad1c-3c204ee8d271": {"doc_ids": ["3bb5a027-b6ad-4f01-bb49-0762e20fe1e7", "555a95e7-21c5-400f-9f98-cc1e4989687b"], "extra_info": {}}, "898989b8-ac70-44cb-af04-a0534985c99d": {"doc_ids": ["90ec1747-210d-48d5-953d-ba68b2873bae"], "extra_info": {}}, "9f1d1b55-585f-4e7c-805b-417f7053e529": {"doc_ids": ["9f6345e8-8309-45f7-b8e4-784b2badcdb3"], "extra_info": {}}, "6023ebb6-0bf9-4356-a084-41a779f44df9": {"doc_ids": ["730279df-8057-4fe0-83e5-2ac247609e6a"], "extra_info": {}}, "ca0f3a20-5daf-4428-bd50-e4d0d7b39da7": {"doc_ids": ["a26e3599-1ca0-40cd-a4d8-1da5889c5f1e"], "extra_info": {}}, "b0723038-4d6c-4c60-8233-06a87e2be3f7": {"doc_ids": ["3a638184-ea50-40c1-8a14-53737ee43c32"], "extra_info": {}}, "d93dc380-6baf-4642-8c5f-edf54bcfbb9e": {"doc_ids": ["f6eaedfc-4a90-4eb3-bd22-2220bd8a2e7c"], "extra_info": {}}, "19c5f721-61c6-4781-9e85-214a3a526f6b": {"doc_ids": ["175f8362-4da2-4329-b3b5-e7e8946382f7"], "extra_info": {}}, "c818cace-def7-4dc6-ad58-3060cc7d4c45": {"doc_ids": ["09042f83-755c-4784-8d61-202d3d72df5e"], "extra_info": {}}, "cc889666-1378-4e6d-a13a-3ae3f87d846b": {"doc_ids": ["8261f1ff-c8d1-4fc6-bbb9-c9781ddb5663"], "extra_info": {}}, "b84ab6df-93d7-4a4c-9d56-f89f29438f82": {"doc_ids": ["f1f87439-ed50-425e-83e3-e82c625a2fa0", "0b5a7135-3cdb-4361-a1c6-a6b30cec5a1d"], "extra_info": {}}, "d0e98af0-b1ad-422b-b0ef-ac14dc99547b": {"doc_ids": ["9705bc65-4811-4a59-abc9-1c598a43af71", "57235d4f-039a-4d4c-b936-9b9a96eaf022", "a4603b1b-3248-4602-98f3-aa2d6773813a", "b5ac4d9f-d1c6-4bef-a292-aff2a2ba2c7d", "bf0b3627-d13c-46c1-bf3e-25a4082ad525"], "extra_info": {}}, "fa3bafa5-624d-45c2-950e-b6a22aaab9b4": {"doc_ids": ["0ee1e1f7-d8d7-452c-825e-d7d81afc1f01", "c21e6f30-5945-4966-9b43-106313626095"], "extra_info": {}}, "417c75c9-fba8-4430-9602-44342cda31ae": {"doc_ids": ["bc3752c1-8037-4a6c-936e-72541936477f", "d2459874-dab9-4d78-88b3-82007e824175"], "extra_info": {}}, "5b996906-7614-46a6-97fe-c5c952f20a77": {"doc_ids": ["30017663-ea88-4057-965e-0722f850f7e8", "c822843e-a34f-4356-9de4-ffe8dab2a5b9"], "extra_info": {}}, "d96d28dc-bce7-40df-a39f-714cc7a2ce6d": {"doc_ids": ["5cfdfe85-811d-43f8-91ab-dd115cb47998"], "extra_info": {}}, "f24e87a3-6a82-4e7c-8a31-9c7982f6019d": {"doc_ids": ["9af725bc-b605-4edb-b913-7849cc6e0591"], "extra_info": {}}, "bdfd4d76-fbd4-48bc-9326-c29669419284": {"doc_ids": ["7e69eac5-5163-477f-91f9-1fa3229f665d", "fb047dde-bbf3-4c26-b9d3-cd55d983e164", "2e18a7f7-8685-481c-ad32-15c5060da519"], "extra_info": {}}, "83b5ff1f-0194-4c2c-a2fe-41d5047ff345": {"doc_ids": ["42abe211-7a4c-43e6-a293-72269d32952b"], "extra_info": {}}, "4328b76e-d908-4fd3-8862-7cd38b6179ba": {"doc_ids": ["a5dd6794-73db-4562-bba0-5afa4c327de7"], "extra_info": {}}, "2a0dc2c1-773e-46e4-a6b5-3e440d506e9d": {"doc_ids": ["ce2a35d8-06c9-4645-be80-cd30b4ca1a90"], "extra_info": {}}, "6111774e-9a8e-4603-84b4-3cf77d512be8": {"doc_ids": ["25fdc0ec-39e5-4e01-a5c3-f3c38a8c83a3", "768df622-0abc-4a65-bd4d-f6ad161c2f4f"], "extra_info": {}}, "34a6c6a0-5c88-4b5e-9c40-4df866e76e71": {"doc_ids": ["eebe3aa5-df7c-4e3c-a942-45285444a307"], "extra_info": {}}, "db4856d7-42df-4494-bb35-936cb19923bc": {"doc_ids": ["fedfebe7-ebca-4776-b74a-c316c98e3e64"], "extra_info": {}}, "bf621a8b-ad3b-4370-8940-c3e63aa2fdc8": {"doc_ids": ["74f2fc39-7912-48e4-87fb-5c6cc2fde8bb"], "extra_info": {}}, "0211de59-b806-4626-9915-f5dbac44700b": {"doc_ids": ["474591a1-f4ad-42fc-905e-d8f3c2829dba", "6089e2ac-2767-4893-b2d8-cda7f867d53f"], "extra_info": {}}, "29e7cba9-9fca-4377-8a45-4f6099e630b0": {"doc_ids": ["46c124ee-9496-49c7-816d-514227bce8fc", "f253845d-28f1-4350-9258-922fe38ffdbc"], "extra_info": {}}, "83811f45-c32f-49d4-be0b-a502316923d2": {"doc_ids": ["a9664bb2-0980-4654-aa45-fe6514264b00"], "extra_info": {}}, "e68eb8c6-67d3-4d36-b473-40c1c827e9b9": {"doc_ids": ["d2b72417-7fd9-4677-a504-888f67093d83"], "extra_info": {}}, "ab921b73-7166-4243-8f4b-9bc4b023ce5f": {"doc_ids": ["dec2bcde-2b71-4730-87e5-1780dddddf13", "7864c26c-87eb-40c6-aedc-1dd5b32babdb", "218803b7-f733-4013-93ac-a2df757dce26"], "extra_info": {}}, "8f399fbb-0356-45c4-9217-614129e8cc11": {"doc_ids": ["8bf22cc1-ee7e-47a0-b9f3-25599ed5a5a4"], "extra_info": {}}, "3cbc1128-e3a5-43fa-844b-e7f30ba467b7": {"doc_ids": ["d9ccc57a-faa6-4d7f-96a9-aed7e0b32fe5", "dc3f2bb8-6dcf-43d5-bbc7-53e517269d4c", "18060bf3-0d21-4a7a-9556-87f637f86f4a"], "extra_info": {}}, "af5de915-c5ea-4076-9b7c-d9784e7e281b": {"doc_ids": ["ce6e4dd2-a3dc-4166-9f34-629755229aa0"], "extra_info": {}}, "bed30783-b402-4f73-8b27-7e60c81ad72f": {"doc_ids": ["ccfddc33-4448-42c9-914c-d0712d037306"], "extra_info": {}}, "a3c5d270-293d-499b-b14a-c5a7604f0369": {"doc_ids": ["8e3b1012-5176-4f45-9f8b-0bca5c8d0f14"], "extra_info": {}}, "b984c275-9cb6-476e-8fd0-0f9ff585fa6e": {"doc_ids": ["a7c98940-4c11-47ea-9643-606e2bfdfed4", "72b05e7e-e550-430e-bcd6-aee0f58110e6"], "extra_info": {}}, "19594150-639a-41eb-b717-e5cc5e35dcdf": {"doc_ids": ["2813f53a-835c-4f83-9b33-167520f0dec0", "a52b1e21-95ee-44d7-a0c6-4624ea5a9e7c", "dc0f7af8-2894-4b14-9916-254a2c5c4c0a"], "extra_info": {}}, "28beace1-16bf-48cc-bea9-a883430446cc": {"doc_ids": ["8f2243e2-360e-4d65-8adb-fcc7a7470e6c"], "extra_info": {}}, "ebc9e5e4-bdd5-44a1-b43b-e8aeaaae876f": {"doc_ids": ["7b861663-eb98-4fbc-acbd-39487b5c25ce"], "extra_info": {}}, "e31100c7-2806-4cf3-ad88-dd0e91938213": {"doc_ids": ["2e396980-a2af-41b2-ba6a-b7ce05affb82", "8da1a317-aa43-4d09-838f-e036348933d1"], "extra_info": {}}, "9a6fb848-f629-4481-92a0-f60bac8ce8a1": {"doc_ids": ["a05e5fe0-43d8-4c89-952d-3d1ff4da7cc7"], "extra_info": {}}, "72e2c97c-4bea-4e04-93d2-712a0b7d6631": {"doc_ids": ["3c5c1994-301f-4039-8a55-870ffc4d0a3b"], "extra_info": {}}, "12f281de-ac03-4b2f-bff8-27751028eb8c": {"doc_ids": ["969e5ed6-a454-413e-80f0-1e97b696c411"], "extra_info": {}}, "83ba3d8f-2795-44cf-a792-0fcf42afaea6": {"doc_ids": ["47d4c52b-f11c-4b4c-8555-9a80ae8f9971"], "extra_info": {}}, "508cba33-6de5-409b-90f7-c9e10acd8f57": {"doc_ids": ["c851db0f-4717-4472-b13b-d5f978951042"], "extra_info": {}}, "59f19983-7ae2-464c-9c1e-ed42c3cff673": {"doc_ids": ["7edc57b6-22dd-42a3-8e2a-2f2ef4d20cb4"], "extra_info": {}}, "5f119514-cdb7-4a8d-8b7f-57a364619997": {"doc_ids": ["6201ead9-56e3-49fc-8f9d-7899835bc6dd"], "extra_info": {}}, "156a65a4-7c85-4727-a3a8-b14021b9ce85": {"doc_ids": ["a4969d07-3445-46d0-abf5-b86b08d477c0"], "extra_info": {}}, "1ce65f78-e610-4d74-95e7-829b66fa3a82": {"doc_ids": ["64f16b75-c741-476b-9d53-482965fd7fea", "db4dfab9-1668-4504-bbaf-412b541b5c51", "c796d7f3-fd92-4326-8f2e-d0c77058b9f9"], "extra_info": {}}, "f74b3de8-e050-4788-9930-f1cde21c66d6": {"doc_ids": ["655ea0db-bf1c-4b3d-9ac1-572eab9e2b9b", "aed38f7b-538d-420b-9844-dbddbe381bff"], "extra_info": {}}, "c68c559b-5281-4126-af5f-4314ad332645": {"doc_ids": ["3681e209-b352-4940-997e-fa71ddd0ab2f", "b8e90eda-348b-470d-8d66-0364f23c40f8"], "extra_info": {}}, "1e8ec85f-7cd1-44ce-9bbd-7ce0bac64d4f": {"doc_ids": ["a1758505-9a8b-4ede-879a-11f3f95a78ca"], "extra_info": {}}, "fa8181ff-e6ae-4c1e-8b52-0f05703ccfe0": {"doc_ids": ["c07e8683-808f-4945-af47-e0b621e9199e"], "extra_info": {}}, "dd5b52e6-0fd8-4aec-99b8-aedb82b37b1e": {"doc_ids": ["b3e9c1a0-35aa-42b5-8290-0f1692140eb2"], "extra_info": {}}, "1bdb572a-b55f-4685-84be-0c276145f10b": {"doc_ids": ["b7a00520-fa68-409e-b9a9-f8cea8f893e9", "4ee122ed-e385-4b97-92df-55dd6b0d296b"], "extra_info": {}}, "62088ca8-07ef-4860-b230-5e330f7a70c6": {"doc_ids": ["6aebe6ae-d75c-458b-882b-9eb6d5ba5883", "c632575c-81af-480e-88cc-0baca5147f5d"], "extra_info": {}}, "00f964b1-ee51-4d18-8b1c-164c99dbe4f6": {"doc_ids": ["fcbf1997-d4d6-4640-8386-53f653120762", "ae71eee0-ef60-45c7-add5-b6af2af55918"], "extra_info": {}}, "fcb53cf6-3bc8-4d1b-a35b-14c51afe1fa8": {"doc_ids": ["9d5cb9d3-2796-4c29-8404-587751e5aafc"], "extra_info": {}}, "cf80ad43-189d-4ca2-9423-44cea057f933": {"doc_ids": ["3794f396-e1d4-433b-9b6b-5848b538b08c", "db626320-6672-4893-b9cc-d44946a0fdd9"], "extra_info": {}}, "11aaa8b3-0062-4462-97e7-abfd917bc170": {"doc_ids": ["45599a4e-ddc6-4173-870f-979c786f0c18"], "extra_info": {}}, "4c334a0a-6779-4c37-9f3f-981612dd5506": {"doc_ids": ["998e8eed-e203-455b-9d35-0a3f89e67644"], "extra_info": {}}, "8e81ca0a-bfdc-4b3f-b716-75ad9900bfce": {"doc_ids": ["3a29c109-3384-4429-bb4a-41d3dc12b31b"], "extra_info": {}}, "67e247a1-e6a7-4920-8ab9-1053ea049662": {"doc_ids": ["d6124a1f-f588-4ddd-99e2-f1da86c2ac7f"], "extra_info": {}}, "55113dc6-7ed3-43e1-a244-275477d952dd": {"doc_ids": ["3e6d2a28-a3c6-4c18-8bb2-b806c9212a56"], "extra_info": {}}, "60648308-46db-46b7-998f-d12629a6a39b": {"doc_ids": ["a5351a49-923f-4528-89e2-a5e3810c6bac", "da8c3476-8569-4b26-9860-0a593984e49d"], "extra_info": {}}, "f1053373-eca2-4aca-8dab-582726698803": {"doc_ids": ["fca54a78-2438-4d0e-a1ea-20ee0f83b5c8"], "extra_info": {}}, "d7750eb9-1116-4a24-910f-031b11a5dd19": {"doc_ids": ["110290ad-bbaf-48e9-b587-4c219e5d26b0"], "extra_info": {}}, "9bf2bf4d-57ab-480b-8ad4-db7f0ea89218": {"doc_ids": ["5706b23c-6e77-41e4-bf32-cdc50ed666d2", "0ddf0f3c-e4cf-4317-b33e-a1f8d4839dc1"], "extra_info": {}}, "6d26c8b2-e86d-4cee-890f-ba69fbe2d0b7": {"doc_ids": ["89da9148-5541-4d97-899e-ad0d910bde64", "3faf16e7-a986-4e6e-9269-3e61c170e783", "13c9584b-3514-48ec-99f3-346cd3ea072b"], "extra_info": {}}, "eebeee3f-45fd-4594-bd3e-17a000d55153": {"doc_ids": ["777afc82-577f-40d0-a223-7cc7d78bd18e"], "extra_info": {}}, "59ef877b-7477-4724-aa2b-2f046742617f": {"doc_ids": ["1350c3db-fba3-43ec-931d-1ec7acfdcb9d"], "extra_info": {}}, "3dede866-7084-459a-958f-af077d8891f2": {"doc_ids": ["b67d7e1b-3a0d-4c46-9885-e01e0c9a3464"], "extra_info": {}}, "915e33cb-caef-4157-bb5d-0d063abe139f": {"doc_ids": ["298ba775-6e67-4790-b7bf-17a49037d70d"], "extra_info": {}}, "1582a79f-62c7-4e66-bafb-b776837a288f": {"doc_ids": ["02d7d03d-30f1-4004-af90-54c55b1b4ba5"], "extra_info": {}}, "efc3d9d0-45a2-4528-8f39-1826c98b6800": {"doc_ids": ["dab633e8-2dd9-49f2-9323-15dd7d1d4b1a"], "extra_info": {}}, "f4203622-bd7f-44ac-bbf5-620addc160ab": {"doc_ids": ["f3773539-b42d-4648-9fea-51e10e47b4c2"], "extra_info": {}}, "4a1764fd-db95-49cb-af19-37a28c32cb03": {"doc_ids": ["28844de7-23bc-4ba1-939a-5f2080c493f0"], "extra_info": {}}, "38237853-26ff-4466-a131-3d3202dabb3e": {"doc_ids": ["a6685c54-07fb-4ed0-a912-a2407b62d4ad"], "extra_info": {}}, "d88cafe9-2ffc-43ee-a55b-11152e2dd684": {"doc_ids": ["0073a059-442c-4c1c-8841-dcb0f3581e9a"], "extra_info": {}}, "874d48fb-ac08-43fd-aea4-07c9498e6bca": {"doc_ids": ["eb8413a2-2299-432c-a99b-7be0e2814f5b"], "extra_info": {}}, "7ea3cb17-46f7-4e1e-8bc4-39eef0c4a76f": {"doc_ids": ["38fba293-73ef-49b7-a748-03d8b9bf28b0"], "extra_info": {}}, "b950066f-e175-453c-9307-12f7f4957de1": {"doc_ids": ["5e75468b-ef8a-414c-b9f6-0ea312199010"], "extra_info": {}}, "1ab9ace6-f28b-45be-bf3c-ad69b9f23c6f": {"doc_ids": ["678d5340-180b-4d84-b14b-f8d611bc28b0"], "extra_info": {}}, "1f73cf19-45e9-4454-b920-6ee849dee333": {"doc_ids": ["ba07fd4f-3b11-44ea-9846-8336d71fca7e"], "extra_info": {}}, "e48ca6d4-11cc-4818-92fd-b1fd4c422dd9": {"doc_ids": ["726cd99e-6f99-497d-a1b0-af0ced98a9aa"], "extra_info": {}}, "68093135-cfb8-4f5d-b07a-e12794d36145": {"doc_ids": ["e9ef314f-576c-4e39-9cb5-2e99231690f2"], "extra_info": {}}, "150a5700-15b4-43d5-b1ab-15ac377fb379": {"doc_ids": ["c94fd1cf-c01c-4b07-a239-f3fed8e2851e"], "extra_info": {}}, "44fc390f-39bf-4da3-9de9-bda7973b9e54": {"doc_ids": ["94eebd20-ca4d-4acc-ac91-7f7b74d93dc6"], "extra_info": {}}, "07fd7e5d-4fcf-4e36-b6cc-ff8af2311d14": {"doc_ids": ["210939bb-803e-419c-8925-fddba8b02bcb"], "extra_info": {}}, "fc5ad508-75b0-46d3-a66d-cc9c40fd6e1e": {"doc_ids": ["167361f7-9e89-44fd-9aa3-37bffe89c8a3", "52fd06a0-e233-464d-a44e-7f9ba17bfc17"], "extra_info": {}}, "c184e4e5-56aa-4d5d-8e9e-a93de196c28c": {"doc_ids": ["d5a32807-6a4f-431d-898e-414361c5cb80"], "extra_info": {}}, "a622be9a-1681-4931-9334-9d0733067e4d": {"doc_ids": ["366c7d37-50ec-47e7-9afb-b1e1b00d7461"], "extra_info": {}}, "891d2b25-c901-4c0f-b9f5-136922fbce65": {"doc_ids": ["5f5b2507-0b6d-4d0c-bcc3-84fbfbc10dd6"], "extra_info": {}}, "e35d356b-c366-4902-a444-65115763451a": {"doc_ids": ["6e7de4c5-60e8-4b08-876b-4e1afb5d7a66", "79f0b2d9-a146-45ba-81f7-d060be069173"], "extra_info": {}}, "4452d168-e485-470a-9d20-73365a394242": {"doc_ids": ["09aa5e87-af12-4259-959b-be45b179d774"], "extra_info": {}}, "6eb27494-bfbf-4edf-8657-15d3b1aa2333": {"doc_ids": ["b2ead909-1187-486f-a974-444041aad18d"], "extra_info": {}}, "b43720bc-5924-48e5-aae1-9d41790dcb4d": {"doc_ids": ["894ffaca-1a42-4698-94d0-6ebd6f814b39"], "extra_info": {}}, "4399bea1-532b-4c88-ac59-b79e0e65b6fb": {"doc_ids": ["d36db55a-6794-49b5-90d4-127b2ff3d745"], "extra_info": {}}, "e0e7eb8d-0161-4052-b785-acea76242652": {"doc_ids": ["7d3b2e24-e9bb-45ec-a42f-f704bf27b104"], "extra_info": {}}, "6bd96b1e-94f4-41fa-8131-fdf17a4abb97": {"doc_ids": ["b45d69f1-959e-4d40-a478-b9c49d2aa46e"], "extra_info": {}}, "be1535d8-3079-41bd-b62f-de8cf1cb176e": {"doc_ids": ["54d9fc7e-42f8-4c31-ae67-09c395eb2b5f", "4ae9cfcc-56c4-4ac1-8bce-7f80d0d29d7f", "8ba7c95a-9057-41f6-8033-544fff268466", "4b13be37-9c6e-4111-a910-2c7991bb7045"], "extra_info": {}}, "62864485-f80f-40fc-855f-9760b57f77f9": {"doc_ids": ["887c76c9-7953-4cd8-a049-c78861e428fb", "65d56dc8-cd2a-4031-891f-8cb314a1b5d4"], "extra_info": {}}, "78d3748a-bb2b-4c51-92c6-f7a0b3e66ab0": {"doc_ids": ["aca93c95-a2f4-48c3-bdf6-966b4f53f00f", "6610ebd6-c239-462b-873e-da22dd95bfe3"], "extra_info": {}}, "1a7ced0e-fe07-40c6-ba3d-f61c1fabb512": {"doc_ids": ["b782fbc0-7632-4bb2-84c4-134b07b34a90"], "extra_info": {}}, "c6bc5174-1419-487f-bdb2-7ae0620207ee": {"doc_ids": ["ebdf107d-e177-45d4-bee8-c05f1f74cfb5", "6b44c90b-04f5-4796-8018-c9e45bdf4ecf"], "extra_info": {}}, "5557e1c6-7541-4a55-b67b-19dd4e388091": {"doc_ids": ["a6e122df-446b-4b30-9cf1-e39b55e44e0e"], "extra_info": {}}, "accd31e4-d7ee-4f87-8409-067c84ec0474": {"doc_ids": ["e0e523fc-f905-4ea1-9725-ddb4fd0d0d4d"], "extra_info": {}}, "e9722366-3ff3-4ff3-8017-521ce85d8c8d": {"doc_ids": ["30d289c3-312e-4e8b-b7c8-e09a17d4f412", "fd4adb43-013f-4886-943d-a676cabc8c5a", "2d94e5d0-7057-4cd7-9beb-7fb0647d5d8b", "1bf8226b-66b7-4f1c-93ed-28d7cc636df4", "4a979cbe-8e5c-40ec-b607-a5558f20d0e9", "93e07af7-c4d4-4333-9787-4b79b66eb616", "b078b0f9-802f-468d-95f5-10bebf455ef9"], "extra_info": {}}, "147092c1-1102-4b9e-a42b-f51f2553c1d8": {"doc_ids": ["e9a5d53c-f9e0-4bac-abab-873257d7c7fe"], "extra_info": {}}, "574ff711-e261-4047-aa3d-1f1b7a68fbcb": {"doc_ids": ["881e962d-55cc-42b0-acd5-60fddada208f", "b1285bd8-c119-44e4-a6fc-e3c9e7483292"], "extra_info": {}}, "2e3949b0-fedb-4f2f-896d-535dcd2954d3": {"doc_ids": ["14c8f229-a448-42a1-8ef5-0e7128010194", "6cc7f615-9b3e-45ca-913d-4d0e1df0d8e2"], "extra_info": {}}, "ea19df4d-7808-460c-a1b0-58255df16051": {"doc_ids": ["2ef39962-6661-4b58-8397-ffeefb8ee539"], "extra_info": {}}, "2dfd8e3b-bbed-4587-a172-9c2ca1b1ff39": {"doc_ids": ["015acb02-515e-42bc-9e4f-62723517ca90"], "extra_info": {}}, "fc9a5387-f75d-4432-a0de-550e357c130d": {"doc_ids": ["c77f6f3f-c4b3-494e-b112-2552c2c76fbb", "9a343352-76db-4fb3-9a42-d0c264d3f73d"], "extra_info": {}}, "cb8bccb1-e9c1-4b13-a02a-16e17a700a13": {"doc_ids": ["e9e7b2d9-9b29-437c-85a1-fb0bc97d018b"], "extra_info": {}}, "6c47fe64-e54d-485f-9ace-85ce5eef8338": {"doc_ids": ["e62b2ced-c426-4577-ad6c-7e0fafd6d007", "34bd076e-38ac-43aa-9015-3f9c7e7e1ef0"], "extra_info": {}}, "0561e07b-94c2-4d9d-93cc-068a71b47def": {"doc_ids": ["3a8943b0-2593-4a61-88ab-100498f3e78f", "08cbcf82-c8d9-4c1c-9e80-169d62362fd9"], "extra_info": {}}, "f880dc81-23b5-40f1-9806-3d7c8b25a629": {"doc_ids": ["deabb435-ae19-4635-b8c6-e9b9c1c36f15"], "extra_info": {}}, "409aa88e-fc1d-4573-baba-324998416f6c": {"doc_ids": ["ea2a36ab-a69f-4f83-ae37-7219bd7ff6ad", "c08266ee-d29d-4b79-af1f-f0c0b5fb5da1"], "extra_info": {}}, "ac34d774-ae06-4fea-9801-61b0f03b1591": {"doc_ids": ["f40b59dd-becf-465a-b319-0c6ba4fb7c4f", "efa9a90e-cdca-4eaf-9b47-668fbea7a773", "94d87f48-7247-47ba-945a-d89901592ab2", "36dd9097-2549-4120-b106-6521b178a630"], "extra_info": {}}, "8d3a90ab-56a9-4a75-a7d1-e26a16e82733": {"doc_ids": ["5de54994-5de6-4bef-a5d4-2f348e4404ca", "79f29cd6-4f76-44d8-a3e7-60cf290497d0"], "extra_info": {}}, "b7882349-5a1c-4951-a560-9c7246465a58": {"doc_ids": ["9e865bba-322b-40c8-9d37-e31a7997186b"], "extra_info": {}}, "86c2b3ca-6b7f-410b-8b6d-d94cf84e08fe": {"doc_ids": ["ad3ac723-9670-4823-9411-6445277918a4"], "extra_info": {}}, "2a64dbab-bf37-4e88-930c-1c5af7428671": {"doc_ids": ["24899395-398d-4219-b0cd-894026d3965f"], "extra_info": {}}, "3e502692-cc6f-4181-a94a-ad189d3b43bd": {"doc_ids": ["5184cb88-f9af-48ad-90ea-d59ea81abaf6"], "extra_info": {}}, "ba27e2d7-2469-4a2a-8207-20fc6c89bbaa": {"doc_ids": ["a11580df-4129-47ea-a853-9bb1a4c29b87"], "extra_info": {}}, "67902284-c4a8-4cf2-b476-ec49863010b5": {"doc_ids": ["7fe4c8e5-3284-4ca4-987e-d7e5d5b80c32", "7842293d-9802-40e6-980a-5b319743b8dc", "c4c55463-cb82-4f9d-b378-fd9e70247cf8"], "extra_info": {}}, "1f592df9-186f-4b87-a6f7-d970dfa8c635": {"doc_ids": ["d643b816-1921-4621-bdce-b5829548a1f8"], "extra_info": {}}, "6e9d6a07-7572-4f16-b9d8-dca652765dd5": {"doc_ids": ["0c3b826d-92c6-46a7-b3eb-f9d4eaaf238e", "a1a2cd01-29ad-4d84-9eee-c5eb4ebf6982"], "extra_info": {}}, "dd1e0eec-1ab7-45b0-903e-316d2f8a355b": {"doc_ids": ["106b45bc-4f19-4289-9426-210b10d17372"], "extra_info": {}}, "d10a97b7-8dac-438d-a4b3-03d58e79c0d1": {"doc_ids": ["dd007daf-6ad5-4d8d-b976-3713f258e662"], "extra_info": {}}, "f2f91975-ca4a-4682-a092-1a0e65182983": {"doc_ids": ["9f6b0a3a-b9a6-484f-a082-d0517d46151f"], "extra_info": {}}, "975f9793-5e62-4f9e-8e18-21bbccc33dd1": {"doc_ids": ["a09a1c9b-7cd1-4606-89fd-b8e47be9957f", "d65aa49d-448d-4b94-9752-c7c780424d93", "fddaa038-ce6a-480f-b984-ea8d3d669585"], "extra_info": {}}, "5416b827-38f8-4ee9-8b6c-78dad7c7ea58": {"doc_ids": ["e6cb946e-8344-4b7c-8576-672b76aab0ea"], "extra_info": {}}, "e361eb00-babf-4ef3-9034-0d96beaf0455": {"doc_ids": ["97decda0-724e-40f7-a1e2-3b24a1b2ff79"], "extra_info": {}}, "8f4576b7-b6f4-4d1f-ac86-51c435918639": {"doc_ids": ["e5ca0d64-2bf2-46d6-a453-c61ec77d2681"], "extra_info": {}}, "6de26390-981c-409b-90a9-869f983eae6e": {"doc_ids": ["83351168-5bbb-4330-9104-5c55e41d2a3e"], "extra_info": {}}, "90995119-baf6-46b4-b74b-53aac89f5727": {"doc_ids": ["4f78e6a5-bb97-4819-a5b5-f0a3efdf7634", "720da9fd-0af3-4337-99d9-01b0a0998960", "478c6a5e-3a0a-4730-b00e-84a49644cc09"], "extra_info": {}}, "b6210497-2f1c-4937-941e-d233ac9cb99b": {"doc_ids": ["3a76468a-ae8c-4a9c-9576-a2b94eb25cfa"], "extra_info": {}}, "2292d7c7-9f03-4733-bb99-10c656670b57": {"doc_ids": ["52ec34e4-7a8f-47bd-a23b-2dbf0c7b486d"], "extra_info": {}}, "12a3f7c5-f6f5-46c2-a23a-a898dcc9ae13": {"doc_ids": ["466e922f-af69-4b4f-8deb-f7981d48a140"], "extra_info": {}}, "7e175dff-e596-476f-8743-f62dff600981": {"doc_ids": ["273077e7-f591-4931-a73c-ef265687d1f7"], "extra_info": {}}, "736e71ca-4b0f-415b-a941-4b26a226c3e4": {"doc_ids": ["d1f144be-48c2-4c0a-bd6a-be2634f2b6ac"], "extra_info": {}}, "edd8efdf-c492-449b-b9f5-b99f6cbf0687": {"doc_ids": ["55c3407e-1084-47ba-b37c-e95738123b51"], "extra_info": {}}, "d8ba98d3-0bf7-4449-b74e-9681ca396477": {"doc_ids": ["1b6e16da-56f3-4cb3-90b8-d67bec70b816"], "extra_info": {}}, "b329e402-438a-405d-8cfe-030d66389563": {"doc_ids": ["38e6e48c-db2e-484f-a094-a488e5972646"], "extra_info": {}}, "03028a81-8c63-42f1-ab7d-d3cfdf35c467": {"doc_ids": ["f372bfa7-7fdb-4d06-86ff-cd73911d3d21", "24ac5882-2bd7-4ff1-9b98-ba8770b3ffd0"], "extra_info": {}}, "200b0fd5-3144-46c4-9d6b-e62b180ecc09": {"doc_ids": ["3f01046c-69e7-4876-9d78-3a7d4e12f46b", "473548ed-5ea6-4164-af8b-97b177ca0a89", "0dd5647b-7817-4aa8-8ddf-3df18fdfd62b"], "extra_info": {}}, "d8c83223-fda2-4684-bea8-94fb5ad215e5": {"doc_ids": ["67e4dd21-bf18-4826-9a5f-441eb36f8f35"], "extra_info": {}}, "7378ece4-4537-421e-8ea9-7ad438a974a5": {"doc_ids": ["feb2056d-66e3-4e9a-a001-09cb926c9e1a", "822f78a3-8008-48dc-9938-5bb8da8ce2b8"], "extra_info": {}}, "f3555700-a627-48a8-92a9-fe6338d5cc37": {"doc_ids": ["c4bd1deb-aac7-4060-b610-7ad7d226c3d2"], "extra_info": {}}, "7df9d401-efd6-4633-8054-28ce4c214530": {"doc_ids": ["2830fbd0-7a9c-4238-8246-13376c46862a", "eba23fc0-0ce8-47f7-a2dd-666e2e3c1be9"], "extra_info": {}}, "27da9991-9fab-4a52-af6b-e20f01adc03a": {"doc_ids": ["d1e22760-d66a-4112-98c3-5436d4ffe31e"], "extra_info": {}}, "a1945505-0017-48ce-9133-24b19a7d87bf": {"doc_ids": ["dae91af1-7e06-4107-b4ef-373aebc5f69b"], "extra_info": {}}, "920dbf0c-f117-4977-a88e-00eec0734149": {"doc_ids": ["9b5aeef0-360c-4848-b18e-93f2e8afc5f7", "f27a3600-c9a8-4741-aaf3-dfa9b68edb9e"], "extra_info": {}}, "28809ff8-de50-4bba-9cb5-fa048426548c": {"doc_ids": ["077278dd-08ad-438d-a8ea-48fcdaa534c9", "9fe921bc-1a97-4d3a-bb1a-bcd2db4ff7eb"], "extra_info": {}}, "2a506cf2-d292-4110-821c-285c3d79d639": {"doc_ids": ["56a6c4fd-6f8e-4255-b9c8-d6e191256bd1"], "extra_info": {}}, "0ed2e100-9d04-48c4-a012-17e692ad436a": {"doc_ids": ["582bb8fa-1940-43d1-b99a-6e835ea7fdf5"], "extra_info": {}}, "19eb6f9b-82ab-48ef-926f-391b4675346f": {"doc_ids": ["82b63fe8-2f5b-4b94-9e87-1ecfdf2cef7c"], "extra_info": {}}, "d6f6f3de-085a-442d-915d-6c6000de634f": {"doc_ids": ["43ecdfac-f81d-49b4-bea4-21323c7f3f02"], "extra_info": {}}, "1359f785-6658-4190-8f1e-65c99970d2d0": {"doc_ids": ["525320e1-d7e6-4fde-b68d-0fc751ade9e2"], "extra_info": {}}, "84f11eb6-7b86-4125-9b98-6254d8723728": {"doc_ids": ["62d9bcfa-8cf9-41a8-98f6-d0bd6ca28b34"], "extra_info": {}}, "414acc17-1d10-475c-848f-a10772677fff": {"doc_ids": ["cdf14507-1249-45d2-8773-f678853a79a7", "6325b16d-d1ac-4b04-87e2-0cb986d6e1cb"], "extra_info": {}}, "6d847e74-8787-43ad-ac99-1a40c37a848a": {"doc_ids": ["5c8c0b2e-1f79-4a68-907b-53ce8ab84c0d"], "extra_info": {}}, "89eda177-32ab-4c5c-a7b0-6bd1b1bd58cf": {"doc_ids": ["2aaa3463-40f8-452f-8877-62bccd82d224"], "extra_info": {}}, "38a7bfd2-a04b-4cc1-8bb2-e4870a0b9308": {"doc_ids": ["5e97ae9c-ee1d-4106-afd7-294f3d2e9697", "25eb9485-ac39-48f3-a410-7830284fbb06", "08df6085-6d6d-40f7-bb26-522b4eaeafd7", "a7397399-bf55-4aaf-9d74-8452489fe155", "b8483197-c75d-4853-95f8-0fe8cdfe9063", "c874dded-3f2b-4b55-a4b9-37cc14a551e5", "3fe5ddd7-a586-4a42-a82f-85f279b70bd1", "612e60ab-3c7d-4ab9-a982-da94e07a2b45", "ab205c86-1bd2-451a-b641-af77c82070c6", "ce1f0018-4984-4bd0-a7fd-448eddc976e8", "fcd903d3-89a4-4f5d-a085-ab93f89c6e61", "b179c5ba-dd58-4b55-85cd-4b5d21771053", "5b7221fd-bf1f-4fd8-b65a-777b1f3de074", "251502f5-9209-468a-971f-64115fad10c4"], "extra_info": {}}, "620fdaf3-830f-4006-83f2-f79032e7e800": {"doc_ids": ["e49f5edd-9af5-4caf-af98-0d7d7c590ada"], "extra_info": {}}, "05474b19-ca98-49f3-a807-390df07c59f0": {"doc_ids": ["88fa2643-000d-416a-8340-9ce27be4e4e2"], "extra_info": {}}, "14a62fd7-2527-400d-94be-60f8ffc01073": {"doc_ids": ["73eea78e-7f19-4930-8346-3b006560ef41"], "extra_info": {}}, "0b1e602b-ffc7-4d75-aaab-1881cc5ac04b": {"doc_ids": ["75861bd9-b6f6-48d5-b949-d60c5cff4bb8"], "extra_info": {}}, "88ac1b33-2ed0-4e25-b5a7-ef6887effc48": {"doc_ids": ["194268a9-0070-4f7c-a657-f40074f189d7"], "extra_info": {}}, "5e31968c-e386-450c-bc59-d0d811c3c66b": {"doc_ids": ["c5cd95ee-e50f-4a68-a364-00c0aadcd616"], "extra_info": {}}, "4acc118a-d80d-4c09-aab6-0d33452bd8a5": {"doc_ids": ["50a6acc2-07fb-49f7-a2e4-8ac0b619d5fd"], "extra_info": {}}, "370aac71-32c2-4283-abe2-814b3d8b1b5c": {"doc_ids": ["3185c93b-9433-42c2-b173-839069e4cf9d"], "extra_info": {}}, "a212f221-e681-4355-8f0c-76e557428cf7": {"doc_ids": ["0c3fa396-daf0-41a0-b12e-88e8e60da3c2"], "extra_info": {}}, "1186821f-f81f-4c9d-8b00-5ff6ad45c011": {"doc_ids": ["94626169-3af6-4ef5-90b6-6fdab2990cb8"], "extra_info": {}}, "064f80ed-a48a-4a53-a62e-e1de4263dcd6": {"doc_ids": ["60fbb8e3-9947-4cee-9252-4beab3626ae7"], "extra_info": {}}, "c5f8e92b-a165-414f-9bbe-25b84f289775": {"doc_ids": ["900439c7-c9b8-4dfb-83c5-15149ba4f527"], "extra_info": {}}, "c01975cd-e1e5-4eb6-8ba8-076a82dc074d": {"doc_ids": ["64242d9e-fa7a-4892-a5f0-ca7aa5d3453d"], "extra_info": {}}, "a75e252e-6a04-4548-99f3-59a4863569b4": {"doc_ids": ["ce425bc4-9c32-49f4-a6ea-fa841aee1a04"], "extra_info": {}}, "1c59258e-4be3-45f6-b639-b9198cb1f53c": {"doc_ids": ["998511bc-e832-4674-aabf-9a32bca271be"], "extra_info": {}}, "82b4a723-f318-476c-becf-be7bef443acb": {"doc_ids": ["5f6b60c1-f9f6-4f6e-a38b-5b60f18907c3"], "extra_info": {}}, "0104b44b-beaa-4ba3-be23-c1e8a09b984a": {"doc_ids": ["c3e4cc5b-0866-4e57-9163-da9f9f658b19"], "extra_info": {}}, "73dd1a9e-37d6-4fa8-9fa8-dc79376650d4": {"doc_ids": ["20363f8c-6150-4a10-a080-aa1f7e0f67b9"], "extra_info": {}}, "5853a3f4-2020-4b86-a024-efd6f24d1a0a": {"doc_ids": ["529d801f-a2c3-4607-9c4f-972c345e0342"], "extra_info": {}}, "fa6f6982-ee30-43fd-bb83-064aa77ac2de": {"doc_ids": ["cacfe691-aeba-4701-b7e4-90f31f85c30a"], "extra_info": {}}, "010d9b9f-2fef-4ce2-8aa4-c1b58460855c": {"doc_ids": ["a0d38ba7-ed03-4c6f-8f73-49a9f5f63aef", "aba8ab4c-40fd-4ac2-93c1-343748dab437"], "extra_info": {}}}}